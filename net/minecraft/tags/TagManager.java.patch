--- net/minecraft/tags/TagManager.java
+++ net/minecraft/tags/TagManager.java
@@ -27,11 +27,11 @@
         return "tags/" + $$0.location().getPath();
     }
 
-    public java.util.concurrent.CompletableFuture<java.lang.Void> reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier stage, net.minecraft.server.packs.resources.ResourceManager resourceManager, net.minecraft.util.profiling.ProfilerFiller preparationsProfiler, net.minecraft.util.profiling.ProfilerFiller reloadProfiler, java.util.concurrent.Executor backgroundExecutor, java.util.concurrent.Executor gameExecutor) {
-        java.util.List list = this.registryAccess.registries().map($$2 -> this.createLoader(resourceManager, backgroundExecutor, $$2)).toList();
-        return java.util.concurrent.CompletableFuture.allOf((java.util.concurrent.CompletableFuture[])((java.util.concurrent.CompletableFuture[])list.toArray(java.util.concurrent.CompletableFuture[]::new))).thenCompose(arg_0 -> ((net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier)stage).wait(arg_0)).thenAcceptAsync($$1 -> {
-            this.results = (java.util.List)list.stream().map(java.util.concurrent.CompletableFuture::join).collect(java.util.stream.Collectors.toUnmodifiableList());
-        }, gameExecutor);
+    public java.util.concurrent.CompletableFuture<java.lang.Void> reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier $$0, net.minecraft.server.packs.resources.ResourceManager $$12, net.minecraft.util.profiling.ProfilerFiller $$22, net.minecraft.util.profiling.ProfilerFiller $$3, java.util.concurrent.Executor $$4, java.util.concurrent.Executor $$5) {
+        java.util.List $$6 = this.registryAccess.registries().map($$2 -> this.createLoader($$12, $$4, $$2)).toList();
+        return java.util.concurrent.CompletableFuture.allOf((java.util.concurrent.CompletableFuture[])((java.util.concurrent.CompletableFuture[])$$6.toArray(java.util.concurrent.CompletableFuture[]::new))).thenCompose(arg_0 -> ((net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier)$$0).wait(arg_0)).thenAcceptAsync($$1 -> {
+            this.results = (java.util.List)$$6.stream().map(java.util.concurrent.CompletableFuture::join).collect(java.util.stream.Collectors.toUnmodifiableList());
+        }, $$5);
     }
 
     public <T> java.util.concurrent.CompletableFuture<net.minecraft.tags.TagManager$LoadResult<T>> createLoader(net.minecraft.server.packs.resources.ResourceManager $$0, java.util.concurrent.Executor $$1, net.minecraft.core.RegistryAccess$RegistryEntry<T> $$22) {