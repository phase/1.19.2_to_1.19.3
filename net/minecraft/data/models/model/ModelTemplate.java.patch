--- net/minecraft/data/models/model/ModelTemplate.java
+++ net/minecraft/data/models/model/ModelTemplate.java
@@ -9,41 +9,41 @@
     public java.util.Set<net.minecraft.data.models.model.TextureSlot> requiredSlots;
     public java.util.Optional<java.lang.String> suffix;
 
-    public net.minecraft.data.models.model.ModelTemplate(java.util.Optional<net.minecraft.resources.ResourceLocation> model, java.util.Optional<java.lang.String> suffix, net.minecraft.data.models.model.TextureSlot ... requiredSlots) {
-        this.model = model;
-        this.suffix = suffix;
-        this.requiredSlots = com.google.common.collect.ImmutableSet.copyOf((java.lang.Object[])requiredSlots);
+    public net.minecraft.data.models.model.ModelTemplate(java.util.Optional<net.minecraft.resources.ResourceLocation> $$0, java.util.Optional<java.lang.String> $$1, net.minecraft.data.models.model.TextureSlot ... $$2) {
+        this.model = $$0;
+        this.suffix = $$1;
+        this.requiredSlots = com.google.common.collect.ImmutableSet.copyOf((java.lang.Object[])$$2);
     }
 
-    public net.minecraft.resources.ResourceLocation create(net.minecraft.world.level.block.Block modelBlock, net.minecraft.data.models.model.TextureMapping textureMapping, java.util.function.BiConsumer<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<com.google.gson.JsonElement>> modelOutput) {
-        return this.create(net.minecraft.data.models.model.ModelLocationUtils.getModelLocation((net.minecraft.world.level.block.Block)modelBlock, (java.lang.String)((java.lang.String)this.suffix.orElse((java.lang.Object)""))), textureMapping, modelOutput);
+    public net.minecraft.resources.ResourceLocation create(net.minecraft.world.level.block.Block $$0, net.minecraft.data.models.model.TextureMapping $$1, java.util.function.BiConsumer<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<com.google.gson.JsonElement>> $$2) {
+        return this.create(net.minecraft.data.models.model.ModelLocationUtils.getModelLocation((net.minecraft.world.level.block.Block)$$0, (java.lang.String)((java.lang.String)this.suffix.orElse((java.lang.Object)""))), $$1, $$2);
     }
 
-    public net.minecraft.resources.ResourceLocation createWithSuffix(net.minecraft.world.level.block.Block modelBlock, java.lang.String modelLocationSuffix, net.minecraft.data.models.model.TextureMapping textureMapping, java.util.function.BiConsumer<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<com.google.gson.JsonElement>> modelOutput) {
-        return this.create(net.minecraft.data.models.model.ModelLocationUtils.getModelLocation((net.minecraft.world.level.block.Block)modelBlock, (java.lang.String)(modelLocationSuffix + (java.lang.String)this.suffix.orElse((java.lang.Object)""))), textureMapping, modelOutput);
+    public net.minecraft.resources.ResourceLocation createWithSuffix(net.minecraft.world.level.block.Block $$0, java.lang.String $$1, net.minecraft.data.models.model.TextureMapping $$2, java.util.function.BiConsumer<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<com.google.gson.JsonElement>> $$3) {
+        return this.create(net.minecraft.data.models.model.ModelLocationUtils.getModelLocation((net.minecraft.world.level.block.Block)$$0, (java.lang.String)($$1 + (java.lang.String)this.suffix.orElse((java.lang.Object)""))), $$2, $$3);
     }
 
-    public net.minecraft.resources.ResourceLocation createWithOverride(net.minecraft.world.level.block.Block modelBlock, java.lang.String modelLocationSuffix, net.minecraft.data.models.model.TextureMapping textureMapping, java.util.function.BiConsumer<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<com.google.gson.JsonElement>> modelOutput) {
-        return this.create(net.minecraft.data.models.model.ModelLocationUtils.getModelLocation((net.minecraft.world.level.block.Block)modelBlock, (java.lang.String)modelLocationSuffix), textureMapping, modelOutput);
+    public net.minecraft.resources.ResourceLocation createWithOverride(net.minecraft.world.level.block.Block $$0, java.lang.String $$1, net.minecraft.data.models.model.TextureMapping $$2, java.util.function.BiConsumer<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<com.google.gson.JsonElement>> $$3) {
+        return this.create(net.minecraft.data.models.model.ModelLocationUtils.getModelLocation((net.minecraft.world.level.block.Block)$$0, (java.lang.String)$$1), $$2, $$3);
     }
 
-    public net.minecraft.resources.ResourceLocation create(net.minecraft.resources.ResourceLocation modelLocation, net.minecraft.data.models.model.TextureMapping textureMapping, java.util.function.BiConsumer<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<com.google.gson.JsonElement>> modelOutput) {
-        java.util.Map map = this.createMap(textureMapping);
-        modelOutput.accept((java.lang.Object)modelLocation, () -> {
+    public net.minecraft.resources.ResourceLocation create(net.minecraft.resources.ResourceLocation $$0, net.minecraft.data.models.model.TextureMapping $$1, java.util.function.BiConsumer<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<com.google.gson.JsonElement>> $$2) {
+        java.util.Map $$3 = this.createMap($$1);
+        $$2.accept((java.lang.Object)$$0, () -> {
             com.google.gson.JsonObject $$12 = new com.google.gson.JsonObject();
             this.model.ifPresent($$1 -> $$12.addProperty("parent", $$1.toString()));
-            if (!map.isEmpty()) {
+            if (!$$3.isEmpty()) {
                 com.google.gson.JsonObject $$22 = new com.google.gson.JsonObject();
-                map.forEach(($$1, $$2) -> $$22.addProperty($$1.getId(), $$2.toString()));
+                $$3.forEach(($$1, $$2) -> $$22.addProperty($$1.getId(), $$2.toString()));
                 $$12.add("textures", (com.google.gson.JsonElement)$$22);
             }
             return $$12;
         });
-        return modelLocation;
+        return $$0;
     }
 
-    public java.util.Map<net.minecraft.data.models.model.TextureSlot, net.minecraft.resources.ResourceLocation> createMap(net.minecraft.data.models.model.TextureMapping textureMapping) {
-        return (java.util.Map)com.google.common.collect.Streams.concat((java.util.stream.Stream[])new java.util.stream.Stream[]{this.requiredSlots.stream(), textureMapping.getForced()}).collect(com.google.common.collect.ImmutableMap.toImmutableMap((java.util.function.Function)java.util.function.Function.identity(), arg_0 -> ((net.minecraft.data.models.model.TextureMapping)textureMapping).get(arg_0)));
+    public java.util.Map<net.minecraft.data.models.model.TextureSlot, net.minecraft.resources.ResourceLocation> createMap(net.minecraft.data.models.model.TextureMapping $$0) {
+        return (java.util.Map)com.google.common.collect.Streams.concat((java.util.stream.Stream[])new java.util.stream.Stream[]{this.requiredSlots.stream(), $$0.getForced()}).collect(com.google.common.collect.ImmutableMap.toImmutableMap((java.util.function.Function)java.util.function.Function.identity(), arg_0 -> ((net.minecraft.data.models.model.TextureMapping)$$0).get(arg_0)));
     }
 }
 