--- net/minecraft/data/models/BlockModelGenerators$BlockEntityModelGenerator.java
+++ net/minecraft/data/models/BlockModelGenerators$BlockEntityModelGenerator.java
@@ -8,30 +8,30 @@
     public net.minecraft.resources.ResourceLocation baseModel;
     public /* synthetic */ net.minecraft.data.models.BlockModelGenerators this$0;
 
-    public net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator(net.minecraft.data.models.BlockModelGenerators blockModelGenerators, net.minecraft.resources.ResourceLocation baseModel, net.minecraft.world.level.block.Block particleBlock) {
+    public net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator(net.minecraft.data.models.BlockModelGenerators blockModelGenerators, net.minecraft.resources.ResourceLocation $$0, net.minecraft.world.level.block.Block $$1) {
         this.this$0 = blockModelGenerators;
-        this.baseModel = net.minecraft.data.models.model.ModelTemplates.PARTICLE_ONLY.create(baseModel, net.minecraft.data.models.model.TextureMapping.particle((net.minecraft.world.level.block.Block)particleBlock), blockModelGenerators.modelOutput);
+        this.baseModel = net.minecraft.data.models.model.ModelTemplates.PARTICLE_ONLY.create($$0, net.minecraft.data.models.model.TextureMapping.particle((net.minecraft.world.level.block.Block)$$1), blockModelGenerators.modelOutput);
     }
 
-    public net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator create(net.minecraft.world.level.block.Block ... blocks) {
-        for (net.minecraft.world.level.block.Block block : blocks) {
-            this.this$0.blockStateOutput.accept((java.lang.Object)net.minecraft.data.models.BlockModelGenerators.createSimpleBlock((net.minecraft.world.level.block.Block)block, (net.minecraft.resources.ResourceLocation)this.baseModel));
+    public net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator create(net.minecraft.world.level.block.Block ... $$0) {
+        for (net.minecraft.world.level.block.Block $$1 : $$0) {
+            this.this$0.blockStateOutput.accept((java.lang.Object)net.minecraft.data.models.BlockModelGenerators.createSimpleBlock((net.minecraft.world.level.block.Block)$$1, (net.minecraft.resources.ResourceLocation)this.baseModel));
         }
         return this;
     }
 
-    public net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator createWithoutBlockItem(net.minecraft.world.level.block.Block ... blocks) {
-        for (net.minecraft.world.level.block.Block block : blocks) {
-            this.this$0.skipAutoItemBlock(block);
+    public net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator createWithoutBlockItem(net.minecraft.world.level.block.Block ... $$0) {
+        for (net.minecraft.world.level.block.Block $$1 : $$0) {
+            this.this$0.skipAutoItemBlock($$1);
         }
-        return this.create(blocks);
+        return this.create($$0);
     }
 
-    public net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator createWithCustomBlockItemModel(net.minecraft.data.models.model.ModelTemplate modelTemplate, net.minecraft.world.level.block.Block ... blocks) {
-        for (net.minecraft.world.level.block.Block block : blocks) {
-            modelTemplate.create(net.minecraft.data.models.model.ModelLocationUtils.getModelLocation((net.minecraft.world.item.Item)block.asItem()), net.minecraft.data.models.model.TextureMapping.particle((net.minecraft.world.level.block.Block)block), this.this$0.modelOutput);
+    public net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator createWithCustomBlockItemModel(net.minecraft.data.models.model.ModelTemplate $$0, net.minecraft.world.level.block.Block ... $$1) {
+        for (net.minecraft.world.level.block.Block $$2 : $$1) {
+            $$0.create(net.minecraft.data.models.model.ModelLocationUtils.getModelLocation((net.minecraft.world.item.Item)$$2.asItem()), net.minecraft.data.models.model.TextureMapping.particle((net.minecraft.world.level.block.Block)$$2), this.this$0.modelOutput);
         }
-        return this.create(blocks);
+        return this.create($$1);
     }
 }
 