--- net/minecraft/data/models/blockstates/Condition$TerminalCondition.java
+++ net/minecraft/data/models/blockstates/Condition$TerminalCondition.java
@@ -12,29 +12,29 @@
         this.terms = com.google.common.collect.Maps.newHashMap();
     }
 
-    public static <T extends java.lang.Comparable<T>> java.lang.String joinValues(net.minecraft.world.level.block.state.properties.Property<T> property, java.util.stream.Stream<T> valueStream) {
-        return (java.lang.String)valueStream.map(arg_0 -> property.getName(arg_0)).collect(java.util.stream.Collectors.joining((java.lang.CharSequence)"|"));
+    public static <T extends java.lang.Comparable<T>> java.lang.String joinValues(net.minecraft.world.level.block.state.properties.Property<T> $$0, java.util.stream.Stream<T> $$1) {
+        return (java.lang.String)$$1.map(arg_0 -> $$0.getName(arg_0)).collect(java.util.stream.Collectors.joining((java.lang.CharSequence)"|"));
     }
 
-    public static <T extends java.lang.Comparable<T>> java.lang.String getTerm(net.minecraft.world.level.block.state.properties.Property<T> property, T firstValue, T[] additionalValues) {
-        return net.minecraft.data.models.blockstates.Condition$TerminalCondition.joinValues(property, (java.util.stream.Stream)java.util.stream.Stream.concat((java.util.stream.Stream)java.util.stream.Stream.of(firstValue), (java.util.stream.Stream)java.util.stream.Stream.of((java.lang.Object[])additionalValues)));
+    public static <T extends java.lang.Comparable<T>> java.lang.String getTerm(net.minecraft.world.level.block.state.properties.Property<T> $$0, T $$1, T[] $$2) {
+        return net.minecraft.data.models.blockstates.Condition$TerminalCondition.joinValues($$0, (java.util.stream.Stream)java.util.stream.Stream.concat((java.util.stream.Stream)java.util.stream.Stream.of($$1), (java.util.stream.Stream)java.util.stream.Stream.of((java.lang.Object[])$$2)));
     }
 
-    public <T extends java.lang.Comparable<T>> void putValue(net.minecraft.world.level.block.state.properties.Property<T> property, java.lang.String value) {
-        java.lang.String string = (java.lang.String)this.terms.put(property, (java.lang.Object)value);
-        if (string != null) {
-            throw new java.lang.IllegalStateException("Tried to replace " + property + " value from " + string + " to " + value);
+    public <T extends java.lang.Comparable<T>> void putValue(net.minecraft.world.level.block.state.properties.Property<T> $$0, java.lang.String $$1) {
+        java.lang.String $$2 = (java.lang.String)this.terms.put($$0, (java.lang.Object)$$1);
+        if ($$2 != null) {
+            throw new java.lang.IllegalStateException("Tried to replace " + $$0 + " value from " + $$2 + " to " + $$1);
         }
     }
 
-    public <T extends java.lang.Comparable<T>> net.minecraft.data.models.blockstates.Condition$TerminalCondition term(net.minecraft.world.level.block.state.properties.Property<T> property, T value) {
-        this.putValue(property, property.getName(value));
+    public <T extends java.lang.Comparable<T>> net.minecraft.data.models.blockstates.Condition$TerminalCondition term(net.minecraft.world.level.block.state.properties.Property<T> $$0, T $$1) {
+        this.putValue($$0, $$0.getName($$1));
         return this;
     }
 
     @java.lang.SafeVarargs
-    public <T extends java.lang.Comparable<T>> net.minecraft.data.models.blockstates.Condition$TerminalCondition term(net.minecraft.world.level.block.state.properties.Property<T> property, T firstValue, T ... additionalValues) {
-        this.putValue(property, net.minecraft.data.models.blockstates.Condition$TerminalCondition.getTerm(property, firstValue, additionalValues));
+    public <T extends java.lang.Comparable<T>> net.minecraft.data.models.blockstates.Condition$TerminalCondition term(net.minecraft.world.level.block.state.properties.Property<T> $$0, T $$1, T ... $$2) {
+        this.putValue($$0, net.minecraft.data.models.blockstates.Condition$TerminalCondition.getTerm($$0, $$1, $$2));
         return this;
     }
 
@@ -55,10 +55,10 @@
         return $$0;
     }
 
-    public void validate(net.minecraft.world.level.block.state.StateDefinition<?, ?> stateDefinition) {
-        java.util.List list = (java.util.List)this.terms.keySet().stream().filter($$1 -> stateDefinition.getProperty($$1.getName()) != $$1).collect(java.util.stream.Collectors.toList());
-        if (!list.isEmpty()) {
-            throw new java.lang.IllegalStateException("Properties " + list + " are missing from " + stateDefinition);
+    public void validate(net.minecraft.world.level.block.state.StateDefinition<?, ?> $$0) {
+        java.util.List $$12 = (java.util.List)this.terms.keySet().stream().filter($$1 -> $$0.getProperty($$1.getName()) != $$1).collect(java.util.stream.Collectors.toList());
+        if (!$$12.isEmpty()) {
+            throw new java.lang.IllegalStateException("Properties " + $$12 + " are missing from " + $$0);
         }
     }
 