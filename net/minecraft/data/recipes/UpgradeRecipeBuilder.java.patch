--- net/minecraft/data/recipes/UpgradeRecipeBuilder.java
+++ net/minecraft/data/recipes/UpgradeRecipeBuilder.java
@@ -7,40 +7,42 @@
  {
     public net.minecraft.world.item.crafting.Ingredient base;
     public net.minecraft.world.item.crafting.Ingredient addition;
+    public net.minecraft.data.recipes.RecipeCategory category;
     public net.minecraft.world.item.Item result;
     public net.minecraft.advancements.Advancement$Builder advancement;
     public net.minecraft.world.item.crafting.RecipeSerializer<?> type;
 
-    public net.minecraft.data.recipes.UpgradeRecipeBuilder(net.minecraft.world.item.crafting.RecipeSerializer<?> type, net.minecraft.world.item.crafting.Ingredient base, net.minecraft.world.item.crafting.Ingredient addition, net.minecraft.world.item.Item result) {
+    public net.minecraft.data.recipes.UpgradeRecipeBuilder(net.minecraft.world.item.crafting.RecipeSerializer<?> $$0, net.minecraft.world.item.crafting.Ingredient $$1, net.minecraft.world.item.crafting.Ingredient $$2, net.minecraft.data.recipes.RecipeCategory $$3, net.minecraft.world.item.Item $$4) {
         this.advancement = net.minecraft.advancements.Advancement$Builder.advancement();
-        this.type = type;
-        this.base = base;
-        this.addition = addition;
-        this.result = result;
+        this.category = $$3;
+        this.type = $$0;
+        this.base = $$1;
+        this.addition = $$2;
+        this.result = $$4;
     }
 
-    public static net.minecraft.data.recipes.UpgradeRecipeBuilder smithing(net.minecraft.world.item.crafting.Ingredient base, net.minecraft.world.item.crafting.Ingredient addition, net.minecraft.world.item.Item result) {
-        return new net.minecraft.data.recipes.UpgradeRecipeBuilder(net.minecraft.world.item.crafting.RecipeSerializer.SMITHING, base, addition, result);
+    public static net.minecraft.data.recipes.UpgradeRecipeBuilder smithing(net.minecraft.world.item.crafting.Ingredient $$0, net.minecraft.world.item.crafting.Ingredient $$1, net.minecraft.data.recipes.RecipeCategory $$2, net.minecraft.world.item.Item $$3) {
+        return new net.minecraft.data.recipes.UpgradeRecipeBuilder(net.minecraft.world.item.crafting.RecipeSerializer.SMITHING, $$0, $$1, $$2, $$3);
     }
 
-    public net.minecraft.data.recipes.UpgradeRecipeBuilder unlocks(java.lang.String name, net.minecraft.advancements.CriterionTriggerInstance criterion) {
-        this.advancement.addCriterion(name, criterion);
+    public net.minecraft.data.recipes.UpgradeRecipeBuilder unlocks(java.lang.String $$0, net.minecraft.advancements.CriterionTriggerInstance $$1) {
+        this.advancement.addCriterion($$0, $$1);
         return this;
     }
 
-    public void save(java.util.function.Consumer<net.minecraft.data.recipes.FinishedRecipe> finishedRecipeConsumer, java.lang.String id) {
-        this.save(finishedRecipeConsumer, new net.minecraft.resources.ResourceLocation(id));
+    public void save(java.util.function.Consumer<net.minecraft.data.recipes.FinishedRecipe> $$0, java.lang.String $$1) {
+        this.save($$0, new net.minecraft.resources.ResourceLocation($$1));
     }
 
-    public void save(java.util.function.Consumer<net.minecraft.data.recipes.FinishedRecipe> finishedRecipeConsumer, net.minecraft.resources.ResourceLocation id) {
-        this.ensureValid(id);
-        this.advancement.parent(net.minecraft.data.recipes.RecipeBuilder.ROOT_RECIPE_ADVANCEMENT).addCriterion("has_the_recipe", (net.minecraft.advancements.CriterionTriggerInstance)net.minecraft.advancements.critereon.RecipeUnlockedTrigger.unlocked((net.minecraft.resources.ResourceLocation)id)).rewards(net.minecraft.advancements.AdvancementRewards$Builder.recipe((net.minecraft.resources.ResourceLocation)id)).requirements(net.minecraft.advancements.RequirementsStrategy.OR);
-        finishedRecipeConsumer.accept((java.lang.Object)new net.minecraft.data.recipes.UpgradeRecipeBuilder$Result(id, this.type, this.base, this.addition, this.result, this.advancement, new net.minecraft.resources.ResourceLocation(id.getNamespace(), "recipes/" + this.result.getItemCategory().getRecipeFolderName() + "/" + id.getPath())));
+    public void save(java.util.function.Consumer<net.minecraft.data.recipes.FinishedRecipe> $$0, net.minecraft.resources.ResourceLocation $$1) {
+        this.ensureValid($$1);
+        this.advancement.parent(net.minecraft.data.recipes.RecipeBuilder.ROOT_RECIPE_ADVANCEMENT).addCriterion("has_the_recipe", (net.minecraft.advancements.CriterionTriggerInstance)net.minecraft.advancements.critereon.RecipeUnlockedTrigger.unlocked((net.minecraft.resources.ResourceLocation)$$1)).rewards(net.minecraft.advancements.AdvancementRewards$Builder.recipe((net.minecraft.resources.ResourceLocation)$$1)).requirements(net.minecraft.advancements.RequirementsStrategy.OR);
+        $$0.accept((java.lang.Object)new net.minecraft.data.recipes.UpgradeRecipeBuilder$Result($$1, this.type, this.base, this.addition, this.result, this.advancement, $$1.withPrefix("recipes/" + this.category.getFolderName() + "/")));
     }
 
-    public void ensureValid(net.minecraft.resources.ResourceLocation id) {
+    public void ensureValid(net.minecraft.resources.ResourceLocation $$0) {
         if (this.advancement.getCriteria().isEmpty()) {
-            throw new java.lang.IllegalStateException("No way of obtaining recipe " + id);
+            throw new java.lang.IllegalStateException("No way of obtaining recipe " + $$0);
         }
     }
 }