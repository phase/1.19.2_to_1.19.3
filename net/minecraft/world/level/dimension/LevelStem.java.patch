--- net/minecraft/world/level/dimension/LevelStem.java
+++ net/minecraft/world/level/dimension/LevelStem.java
@@ -4,99 +4,49 @@
 package net.minecraft.world.level.dimension;
 
 public class net.minecraft.world.level.dimension.LevelStem
+extends java.lang.Record
  {
+    public net.minecraft.core.Holder<net.minecraft.world.level.dimension.DimensionType> type;
+    public net.minecraft.world.level.chunk.ChunkGenerator generator;
     public static com.mojang.serialization.Codec<net.minecraft.world.level.dimension.LevelStem> CODEC;
     public static net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem> OVERWORLD;
     public static net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem> NETHER;
     public static net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem> END;
-    public static java.util.Set<net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem>> BUILTIN_ORDER;
-    public net.minecraft.core.Holder<net.minecraft.world.level.dimension.DimensionType> type;
-    public net.minecraft.world.level.chunk.ChunkGenerator generator;
 
     public net.minecraft.world.level.dimension.LevelStem(net.minecraft.core.Holder<net.minecraft.world.level.dimension.DimensionType> $$0, net.minecraft.world.level.chunk.ChunkGenerator $$1) {
         this.type = $$0;
         this.generator = $$1;
     }
 
-    public net.minecraft.core.Holder<net.minecraft.world.level.dimension.DimensionType> typeHolder() {
-        return this.type;
+    public java.lang.String toString() {
+        return java.lang.runtime.ObjectMethods.bootstrap("toString", new java.lang.invoke.MethodHandle[]{net.minecraft.world.level.dimension.LevelStem.class, "type;generator", "type", "generator"}, this);
     }
 
-    public net.minecraft.world.level.chunk.ChunkGenerator generator() {
-        return this.generator;
+    public int hashCode() {
+        return (int)java.lang.runtime.ObjectMethods.bootstrap("hashCode", new java.lang.invoke.MethodHandle[]{net.minecraft.world.level.dimension.LevelStem.class, "type;generator", "type", "generator"}, this);
     }
 
-    public static java.util.stream.Stream<net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem>> keysInOrder(java.util.stream.Stream<net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem>> $$02) {
-        return java.util.stream.Stream.concat((java.util.stream.Stream)BUILTIN_ORDER.stream(), (java.util.stream.Stream)$$02.filter($$0 -> !BUILTIN_ORDER.contains($$0)));
+    public boolean equals(java.lang.Object $$0) {
+        return (boolean)java.lang.runtime.ObjectMethods.bootstrap("equals", new java.lang.invoke.MethodHandle[]{net.minecraft.world.level.dimension.LevelStem.class, "type;generator", "type", "generator"}, this, $$0);
     }
 
-    public static net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> sortMap(net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> $$0) {
-        net.minecraft.core.MappedRegistry $$1 = new net.minecraft.core.MappedRegistry(net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, com.mojang.serialization.Lifecycle.experimental(), null);
-        net.minecraft.world.level.dimension.LevelStem.keysInOrder((java.util.stream.Stream)$$0.registryKeySet().stream()).forEach(arg_0 -> net.minecraft.world.level.dimension.LevelStem.lambda$sortMap$2($$0, (net.minecraft.core.WritableRegistry)$$1, arg_0));
-        return $$1;
+    public net.minecraft.core.Holder<net.minecraft.world.level.dimension.DimensionType> type() {
+        return this.type;
     }
 
-    public static boolean stable(net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> $$0) {
-        if ($$0.size() != BUILTIN_ORDER.size()) {
-            return false;
-        }
-        java.util.Optional $$1 = $$0.getOptional(OVERWORLD);
-        java.util.Optional $$2 = $$0.getOptional(NETHER);
-        java.util.Optional $$3 = $$0.getOptional(END);
-        if ($$1.isEmpty() || $$2.isEmpty() || $$3.isEmpty()) {
-            return false;
-        }
-        if (!((net.minecraft.world.level.dimension.LevelStem)$$1.get()).typeHolder().is(net.minecraft.world.level.dimension.BuiltinDimensionTypes.OVERWORLD) && !((net.minecraft.world.level.dimension.LevelStem)$$1.get()).typeHolder().is(net.minecraft.world.level.dimension.BuiltinDimensionTypes.OVERWORLD_CAVES)) {
-            return false;
-        }
-        if (!((net.minecraft.world.level.dimension.LevelStem)$$2.get()).typeHolder().is(net.minecraft.world.level.dimension.BuiltinDimensionTypes.NETHER)) {
-            return false;
-        }
-        if (!((net.minecraft.world.level.dimension.LevelStem)$$3.get()).typeHolder().is(net.minecraft.world.level.dimension.BuiltinDimensionTypes.END)) {
-            return false;
-        }
-        if (!(((net.minecraft.world.level.dimension.LevelStem)$$2.get()).generator() instanceof net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator) || !(((net.minecraft.world.level.dimension.LevelStem)$$3.get()).generator() instanceof net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator)) {
-            return false;
-        }
-        net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator $$4 = (net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator)((net.minecraft.world.level.dimension.LevelStem)$$2.get()).generator();
-        net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator $$5 = (net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator)((net.minecraft.world.level.dimension.LevelStem)$$3.get()).generator();
-        if (!$$4.stable(net.minecraft.world.level.levelgen.NoiseGeneratorSettings.NETHER)) {
-            return false;
-        }
-        if (!$$5.stable(net.minecraft.world.level.levelgen.NoiseGeneratorSettings.END)) {
-            return false;
-        }
-        if (!($$4.getBiomeSource() instanceof net.minecraft.world.level.biome.MultiNoiseBiomeSource)) {
-            return false;
-        }
-        net.minecraft.world.level.biome.MultiNoiseBiomeSource $$6 = (net.minecraft.world.level.biome.MultiNoiseBiomeSource)$$4.getBiomeSource();
-        if (!$$6.stable(net.minecraft.world.level.biome.MultiNoiseBiomeSource$Preset.NETHER)) {
-            return false;
-        }
-        net.minecraft.world.level.biome.BiomeSource $$7 = ((net.minecraft.world.level.dimension.LevelStem)$$1.get()).generator().getBiomeSource();
-        if ($$7 instanceof net.minecraft.world.level.biome.MultiNoiseBiomeSource && !((net.minecraft.world.level.biome.MultiNoiseBiomeSource)$$7).stable(net.minecraft.world.level.biome.MultiNoiseBiomeSource$Preset.OVERWORLD)) {
-            return false;
-        }
-        return $$5.getBiomeSource() instanceof net.minecraft.world.level.biome.TheEndBiomeSource;
+    public net.minecraft.world.level.chunk.ChunkGenerator generator() {
+        return this.generator;
     }
 
-    public static /* synthetic */ void lambda$sortMap$2(net.minecraft.core.Registry $$0, net.minecraft.core.WritableRegistry $$1, net.minecraft.resources.ResourceKey $$2) {
-        net.minecraft.world.level.dimension.LevelStem $$3 = (net.minecraft.world.level.dimension.LevelStem)$$0.get($$2);
-        if ($$3 != null) {
-            $$1.register($$2, (java.lang.Object)$$3, $$0.lifecycle((java.lang.Object)$$3));
-        }
-    }
-
     public static /* synthetic */ com.mojang.datafixers.kinds.App lambda$static$0(com.mojang.serialization.codecs.RecordCodecBuilder$Instance $$0) {
-        return $$0.group((com.mojang.datafixers.kinds.App)net.minecraft.world.level.dimension.DimensionType.CODEC.fieldOf("type").forGetter(net.minecraft.world.level.dimension.LevelStem::typeHolder), (com.mojang.datafixers.kinds.App)net.minecraft.world.level.chunk.ChunkGenerator.CODEC.fieldOf("generator").forGetter(net.minecraft.world.level.dimension.LevelStem::generator)).apply((com.mojang.datafixers.kinds.Applicative)$$0, $$0.stable(net.minecraft.world.level.dimension.LevelStem::new));
+        return $$0.group((com.mojang.datafixers.kinds.App)net.minecraft.world.level.dimension.DimensionType.CODEC.fieldOf("type").forGetter(net.minecraft.world.level.dimension.LevelStem::type), (com.mojang.datafixers.kinds.App)net.minecraft.world.level.chunk.ChunkGenerator.CODEC.fieldOf("generator").forGetter(net.minecraft.world.level.dimension.LevelStem::generator)).apply((com.mojang.datafixers.kinds.Applicative)$$0, $$0.stable(net.minecraft.world.level.dimension.LevelStem::new));
     }
 
     static {
-        CODEC = com.mojang.serialization.codecs.RecordCodecBuilder.create($$0 -> $$0.group((com.mojang.datafixers.kinds.App)net.minecraft.world.level.dimension.DimensionType.CODEC.fieldOf("type").forGetter(net.minecraft.world.level.dimension.LevelStem::typeHolder), (com.mojang.datafixers.kinds.App)net.minecraft.world.level.chunk.ChunkGenerator.CODEC.fieldOf("generator").forGetter(net.minecraft.world.level.dimension.LevelStem::generator)).apply((com.mojang.datafixers.kinds.Applicative)$$0, $$0.stable(net.minecraft.world.level.dimension.LevelStem::new)));
+        CODEC = com.mojang.serialization.codecs.RecordCodecBuilder.create($$0 -> $$0.group((com.mojang.datafixers.kinds.App)net.minecraft.world.level.dimension.DimensionType.CODEC.fieldOf("type").forGetter(net.minecraft.world.level.dimension.LevelStem::type), (com.mojang.datafixers.kinds.App)net.minecraft.world.level.chunk.ChunkGenerator.CODEC.fieldOf("generator").forGetter(net.minecraft.world.level.dimension.LevelStem::generator)).apply((com.mojang.datafixers.kinds.Applicative)$$0, $$0.stable(net.minecraft.world.level.dimension.LevelStem::new)));
         OVERWORLD = net.minecraft.resources.ResourceKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, (net.minecraft.resources.ResourceLocation)new net.minecraft.resources.ResourceLocation("overworld"));
         NETHER = net.minecraft.resources.ResourceKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, (net.minecraft.resources.ResourceLocation)new net.minecraft.resources.ResourceLocation("the_nether"));
         END = net.minecraft.resources.ResourceKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, (net.minecraft.resources.ResourceLocation)new net.minecraft.resources.ResourceLocation("the_end"));
-        BUILTIN_ORDER = com.google.common.collect.ImmutableSet.of((java.lang.Object)OVERWORLD, (java.lang.Object)NETHER, (java.lang.Object)END);
     }
 }
 