--- net/minecraft/world/level/GameRules.java
+++ net/minecraft/world/level/GameRules.java
@@ -46,13 +46,13 @@
     public static net.minecraft.world.level.GameRules$Key<net.minecraft.world.level.GameRules$IntegerValue> RULE_PLAYERS_SLEEPING_PERCENTAGE;
     public java.util.Map<net.minecraft.world.level.GameRules$Key<?>, net.minecraft.world.level.GameRules$Value<?>> rules;
 
-    public static <T extends net.minecraft.world.level.GameRules$Value<T>> net.minecraft.world.level.GameRules$Key<T> register(java.lang.String name, net.minecraft.world.level.GameRules$Category category, net.minecraft.world.level.GameRules$Type<T> type) {
-        net.minecraft.world.level.GameRules$Key key = new net.minecraft.world.level.GameRules$Key(name, category);
-        net.minecraft.world.level.GameRules$Type type2 = (net.minecraft.world.level.GameRules$Type)GAME_RULE_TYPES.put((java.lang.Object)key, type);
-        if (type2 != null) {
-            throw new java.lang.IllegalStateException("Duplicate game rule registration for " + name);
+    public static <T extends net.minecraft.world.level.GameRules$Value<T>> net.minecraft.world.level.GameRules$Key<T> register(java.lang.String $$0, net.minecraft.world.level.GameRules$Category $$1, net.minecraft.world.level.GameRules$Type<T> $$2) {
+        net.minecraft.world.level.GameRules$Key $$3 = new net.minecraft.world.level.GameRules$Key($$0, $$1);
+        net.minecraft.world.level.GameRules$Type $$4 = (net.minecraft.world.level.GameRules$Type)GAME_RULE_TYPES.put((java.lang.Object)$$3, $$2);
+        if ($$4 != null) {
+            throw new java.lang.IllegalStateException("Duplicate game rule registration for " + $$0);
         }
-        return key;
+        return $$3;
     }
 
     public net.minecraft.world.level.GameRules(com.mojang.serialization.DynamicLike<?> $$0) {
@@ -64,12 +64,12 @@
         this.rules = (java.util.Map)GAME_RULE_TYPES.entrySet().stream().collect(com.google.common.collect.ImmutableMap.toImmutableMap(java.util.Map$Entry::getKey, $$0 -> ((net.minecraft.world.level.GameRules$Type)$$0.getValue()).createRule()));
     }
 
-    public net.minecraft.world.level.GameRules(java.util.Map<net.minecraft.world.level.GameRules$Key<?>, net.minecraft.world.level.GameRules$Value<?>> rules) {
-        this.rules = rules;
+    public net.minecraft.world.level.GameRules(java.util.Map<net.minecraft.world.level.GameRules$Key<?>, net.minecraft.world.level.GameRules$Value<?>> $$0) {
+        this.rules = $$0;
     }
 
-    public <T extends net.minecraft.world.level.GameRules$Value<T>> T getRule(net.minecraft.world.level.GameRules$Key<T> key) {
-        return (T)((net.minecraft.world.level.GameRules$Value)this.rules.get(key));
+    public <T extends net.minecraft.world.level.GameRules$Value<T>> T getRule(net.minecraft.world.level.GameRules$Key<T> $$0) {
+        return (T)((net.minecraft.world.level.GameRules$Value)this.rules.get($$0));
     }
 
     public net.minecraft.nbt.CompoundTag createTag() {
@@ -78,40 +78,40 @@
         return $$0;
     }
 
-    public void loadFromTag(com.mojang.serialization.DynamicLike<?> dynamic) {
-        this.rules.forEach(($$1, $$2) -> dynamic.get($$1.id).asString().result().ifPresent(arg_0 -> ((net.minecraft.world.level.GameRules$Value)$$2).deserialize(arg_0)));
+    public void loadFromTag(com.mojang.serialization.DynamicLike<?> $$0) {
+        this.rules.forEach(($$1, $$2) -> $$0.get($$1.id).asString().result().ifPresent(arg_0 -> ((net.minecraft.world.level.GameRules$Value)$$2).deserialize(arg_0)));
     }
 
     public net.minecraft.world.level.GameRules copy() {
         return new net.minecraft.world.level.GameRules((java.util.Map)this.rules.entrySet().stream().collect(com.google.common.collect.ImmutableMap.toImmutableMap(java.util.Map$Entry::getKey, $$0 -> ((net.minecraft.world.level.GameRules$Value)$$0.getValue()).copy())));
     }
 
-    public static void visitGameRuleTypes(net.minecraft.world.level.GameRules$GameRuleTypeVisitor visitor) {
-        GAME_RULE_TYPES.forEach(($$1, $$2) -> net.minecraft.world.level.GameRules.callVisitorCap((net.minecraft.world.level.GameRules$GameRuleTypeVisitor)visitor, (net.minecraft.world.level.GameRules$Key)$$1, (net.minecraft.world.level.GameRules$Type)$$2));
+    public static void visitGameRuleTypes(net.minecraft.world.level.GameRules$GameRuleTypeVisitor $$0) {
+        GAME_RULE_TYPES.forEach(($$1, $$2) -> net.minecraft.world.level.GameRules.callVisitorCap((net.minecraft.world.level.GameRules$GameRuleTypeVisitor)$$0, (net.minecraft.world.level.GameRules$Key)$$1, (net.minecraft.world.level.GameRules$Type)$$2));
     }
 
-    public static <T extends net.minecraft.world.level.GameRules$Value<T>> void callVisitorCap(net.minecraft.world.level.GameRules$GameRuleTypeVisitor visitor, net.minecraft.world.level.GameRules$Key<?> key, net.minecraft.world.level.GameRules$Type<?> type) {
-        net.minecraft.world.level.GameRules$Key<?> key2 = key;
-        net.minecraft.world.level.GameRules$Type<?> type2 = type;
-        visitor.visit(key2, type2);
-        type2.callVisitor(visitor, key2);
+    public static <T extends net.minecraft.world.level.GameRules$Value<T>> void callVisitorCap(net.minecraft.world.level.GameRules$GameRuleTypeVisitor $$0, net.minecraft.world.level.GameRules$Key<?> $$1, net.minecraft.world.level.GameRules$Type<?> $$2) {
+        net.minecraft.world.level.GameRules$Key<?> $$3 = $$1;
+        net.minecraft.world.level.GameRules$Type<?> $$4 = $$2;
+        $$0.visit($$3, $$4);
+        $$4.callVisitor($$0, $$3);
     }
 
-    public void assignFrom(net.minecraft.world.level.GameRules rules, @javax.annotation.Nullable net.minecraft.server.MinecraftServer server) {
-        rules.rules.keySet().forEach($$2 -> this.assignCap($$2, rules, server));
+    public void assignFrom(net.minecraft.world.level.GameRules $$0, @javax.annotation.Nullable net.minecraft.server.MinecraftServer $$1) {
+        $$0.rules.keySet().forEach($$2 -> this.assignCap($$2, $$0, $$1));
     }
 
-    public <T extends net.minecraft.world.level.GameRules$Value<T>> void assignCap(net.minecraft.world.level.GameRules$Key<T> key, net.minecraft.world.level.GameRules rules, @javax.annotation.Nullable net.minecraft.server.MinecraftServer server) {
-        net.minecraft.world.level.GameRules$Value value = rules.getRule(key);
-        this.getRule(key).setFrom(value, server);
+    public <T extends net.minecraft.world.level.GameRules$Value<T>> void assignCap(net.minecraft.world.level.GameRules$Key<T> $$0, net.minecraft.world.level.GameRules $$1, @javax.annotation.Nullable net.minecraft.server.MinecraftServer $$2) {
+        net.minecraft.world.level.GameRules$Value $$3 = $$1.getRule($$0);
+        this.getRule($$0).setFrom($$3, $$2);
     }
 
-    public boolean getBoolean(net.minecraft.world.level.GameRules$Key<net.minecraft.world.level.GameRules$BooleanValue> key) {
-        return ((net.minecraft.world.level.GameRules$BooleanValue)this.getRule(key)).get();
+    public boolean getBoolean(net.minecraft.world.level.GameRules$Key<net.minecraft.world.level.GameRules$BooleanValue> $$0) {
+        return ((net.minecraft.world.level.GameRules$BooleanValue)this.getRule($$0)).get();
     }
 
-    public int getInt(net.minecraft.world.level.GameRules$Key<net.minecraft.world.level.GameRules$IntegerValue> key) {
-        return ((net.minecraft.world.level.GameRules$IntegerValue)this.getRule(key)).get();
+    public int getInt(net.minecraft.world.level.GameRules$Key<net.minecraft.world.level.GameRules$IntegerValue> $$0) {
+        return ((net.minecraft.world.level.GameRules$IntegerValue)this.getRule($$0)).get();
     }
 
     public static /* synthetic */ void lambda$static$2(net.minecraft.server.MinecraftServer $$0, net.minecraft.world.level.GameRules$BooleanValue $$1) {