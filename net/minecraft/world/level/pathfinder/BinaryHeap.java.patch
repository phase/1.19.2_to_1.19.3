--- net/minecraft/world/level/pathfinder/BinaryHeap.java
+++ net/minecraft/world/level/pathfinder/BinaryHeap.java
@@ -12,19 +12,19 @@
         this.heap = new net.minecraft.world.level.pathfinder.Node[128];
     }
 
-    public net.minecraft.world.level.pathfinder.Node insert(net.minecraft.world.level.pathfinder.Node point) {
-        if (point.heapIdx >= 0) {
+    public net.minecraft.world.level.pathfinder.Node insert(net.minecraft.world.level.pathfinder.Node $$0) {
+        if ($$0.heapIdx >= 0) {
             throw new java.lang.IllegalStateException("OW KNOWS!");
         }
         if (this.size == this.heap.length) {
-            net.minecraft.world.level.pathfinder.Node[] nodeArray = new net.minecraft.world.level.pathfinder.Node[this.size << 1];
-            java.lang.System.arraycopy((java.lang.Object)this.heap, (int)0, (java.lang.Object)nodeArray, (int)0, (int)this.size);
-            this.heap = nodeArray;
+            net.minecraft.world.level.pathfinder.Node[] $$1 = new net.minecraft.world.level.pathfinder.Node[this.size << 1];
+            java.lang.System.arraycopy((java.lang.Object)this.heap, (int)0, (java.lang.Object)$$1, (int)0, (int)this.size);
+            this.heap = $$1;
         }
-        this.heap[this.size] = point;
-        point.heapIdx = this.size;
+        this.heap[this.size] = $$0;
+        $$0.heapIdx = this.size;
         this.upHeap(this.size++);
-        return point;
+        return $$0;
     }
 
     public void clear() {
@@ -59,13 +59,13 @@
         $$0.heapIdx = -1;
     }
 
-    public void changeCost(net.minecraft.world.level.pathfinder.Node point, float cost) {
-        float f = point.f;
-        point.f = cost;
-        if (cost < f) {
-            this.upHeap(point.heapIdx);
+    public void changeCost(net.minecraft.world.level.pathfinder.Node $$0, float $$1) {
+        float $$2 = $$0.f;
+        $$0.f = $$1;
+        if ($$1 < $$2) {
+            this.upHeap($$0.heapIdx);
         } else {
-            this.downHeap(point.heapIdx);
+            this.downHeap($$0.heapIdx);
         }
     }
 
@@ -73,53 +73,53 @@
         return this.size;
     }
 
-    public void upHeap(int index) {
-        net.minecraft.world.level.pathfinder.Node node = this.heap[index];
-        float f = node.f;
-        while (index > 0) {
-            int n = index - 1 >> 1;
-            net.minecraft.world.level.pathfinder.Node node2 = this.heap[n];
-            if (!(f < node2.f)) break;
-            this.heap[index] = node2;
-            node2.heapIdx = index;
-            index = n;
+    public void upHeap(int $$0) {
+        net.minecraft.world.level.pathfinder.Node $$1 = this.heap[$$0];
+        float $$2 = $$1.f;
+        while ($$0 > 0) {
+            int $$3 = $$0 - 1 >> 1;
+            net.minecraft.world.level.pathfinder.Node $$4 = this.heap[$$3];
+            if (!($$2 < $$4.f)) break;
+            this.heap[$$0] = $$4;
+            $$4.heapIdx = $$0;
+            $$0 = $$3;
         }
-        this.heap[index] = node;
-        node.heapIdx = index;
+        this.heap[$$0] = $$1;
+        $$1.heapIdx = $$0;
     }
 
-    public void downHeap(int index) {
-        net.minecraft.world.level.pathfinder.Node node = this.heap[index];
-        float f = node.f;
+    public void downHeap(int $$0) {
+        net.minecraft.world.level.pathfinder.Node $$1 = this.heap[$$0];
+        float $$2 = $$1.f;
         while (true) {
-            float f2;
-            net.minecraft.world.level.pathfinder.Node node2;
-            int n = 1 + (index << 1);
-            int n2 = n + 1;
-            if (n >= this.size) break;
-            net.minecraft.world.level.pathfinder.Node node3 = this.heap[n];
-            float f3 = node3.f;
-            if (n2 >= this.size) {
-                node2 = null;
-                f2 = java.lang.Float.POSITIVE_INFINITY;
+            float $$10;
+            net.minecraft.world.level.pathfinder.Node $$9;
+            int $$3 = 1 + ($$0 << 1);
+            int $$4 = $$3 + 1;
+            if ($$3 >= this.size) break;
+            net.minecraft.world.level.pathfinder.Node $$5 = this.heap[$$3];
+            float $$6 = $$5.f;
+            if ($$4 >= this.size) {
+                java.lang.Object $$7 = null;
+                float $$8 = java.lang.Float.POSITIVE_INFINITY;
             } else {
-                node2 = this.heap[n2];
-                f2 = node2.f;
+                $$9 = this.heap[$$4];
+                $$10 = $$9.f;
             }
-            if (f3 < f2) {
-                if (!(f3 < f)) break;
-                this.heap[index] = node3;
-                node3.heapIdx = index;
-                index = n;
+            if ($$6 < $$10) {
+                if (!($$6 < $$2)) break;
+                this.heap[$$0] = $$5;
+                $$5.heapIdx = $$0;
+                $$0 = $$3;
                 continue;
             }
-            if (!(f2 < f)) break;
-            this.heap[index] = node2;
-            node2.heapIdx = index;
-            index = n2;
+            if (!($$10 < $$2)) break;
+            this.heap[$$0] = $$9;
+            $$9.heapIdx = $$0;
+            $$0 = $$4;
         }
-        this.heap[index] = node;
-        node.heapIdx = index;
+        this.heap[$$0] = $$1;
+        $$1.heapIdx = $$0;
     }
 
     public boolean isEmpty() {