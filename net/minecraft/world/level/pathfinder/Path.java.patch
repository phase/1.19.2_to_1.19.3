--- net/minecraft/world/level/pathfinder/Path.java
+++ net/minecraft/world/level/pathfinder/Path.java
@@ -44,18 +44,18 @@
         return null;
     }
 
-    public net.minecraft.world.level.pathfinder.Node getNode(int index) {
-        return (net.minecraft.world.level.pathfinder.Node)this.nodes.get(index);
+    public net.minecraft.world.level.pathfinder.Node getNode(int $$0) {
+        return (net.minecraft.world.level.pathfinder.Node)this.nodes.get($$0);
     }
 
-    public void truncateNodes(int length) {
-        if (this.nodes.size() > length) {
-            this.nodes.subList(length, this.nodes.size()).clear();
+    public void truncateNodes(int $$0) {
+        if (this.nodes.size() > $$0) {
+            this.nodes.subList($$0, this.nodes.size()).clear();
         }
     }
 
-    public void replaceNode(int index, net.minecraft.world.level.pathfinder.Node point) {
-        this.nodes.set(index, (java.lang.Object)point);
+    public void replaceNode(int $$0, net.minecraft.world.level.pathfinder.Node $$1) {
+        this.nodes.set($$0, (java.lang.Object)$$1);
     }
 
     public int getNodeCount() {
@@ -66,24 +66,24 @@
         return this.nextNodeIndex;
     }
 
-    public void setNextNodeIndex(int currentPathIndex) {
-        this.nextNodeIndex = currentPathIndex;
+    public void setNextNodeIndex(int $$0) {
+        this.nextNodeIndex = $$0;
     }
 
-    public net.minecraft.world.phys.Vec3 getEntityPosAtNode(net.minecraft.world.entity.Entity entity, int index) {
-        net.minecraft.world.level.pathfinder.Node node = (net.minecraft.world.level.pathfinder.Node)this.nodes.get(index);
-        double d = (double)node.x + (double)((int)(entity.getBbWidth() + 1.0f)) * 0.5;
-        double d2 = node.y;
-        double d3 = (double)node.z + (double)((int)(entity.getBbWidth() + 1.0f)) * 0.5;
-        return new net.minecraft.world.phys.Vec3(d, d2, d3);
+    public net.minecraft.world.phys.Vec3 getEntityPosAtNode(net.minecraft.world.entity.Entity $$0, int $$1) {
+        net.minecraft.world.level.pathfinder.Node $$2 = (net.minecraft.world.level.pathfinder.Node)this.nodes.get($$1);
+        double $$3 = (double)$$2.x + (double)((int)($$0.getBbWidth() + 1.0f)) * 0.5;
+        double $$4 = $$2.y;
+        double $$5 = (double)$$2.z + (double)((int)($$0.getBbWidth() + 1.0f)) * 0.5;
+        return new net.minecraft.world.phys.Vec3($$3, $$4, $$5);
     }
 
     public net.minecraft.core.BlockPos getNodePos(int $$0) {
         return ((net.minecraft.world.level.pathfinder.Node)this.nodes.get($$0)).asBlockPos();
     }
 
-    public net.minecraft.world.phys.Vec3 getNextEntityPos(net.minecraft.world.entity.Entity entity) {
-        return this.getEntityPosAtNode(entity, this.nextNodeIndex);
+    public net.minecraft.world.phys.Vec3 getNextEntityPos(net.minecraft.world.entity.Entity $$0) {
+        return this.getEntityPosAtNode($$0, this.nextNodeIndex);
     }
 
     public net.minecraft.core.BlockPos getNextNodePos() {
@@ -99,17 +99,17 @@
         return this.nextNodeIndex > 0 ? (net.minecraft.world.level.pathfinder.Node)this.nodes.get(this.nextNodeIndex - 1) : null;
     }
 
-    public boolean sameAs(@javax.annotation.Nullable net.minecraft.world.level.pathfinder.Path pathentity) {
-        if (pathentity == null) {
+    public boolean sameAs(@javax.annotation.Nullable net.minecraft.world.level.pathfinder.Path $$0) {
+        if ($$0 == null) {
             return false;
         }
-        if (pathentity.nodes.size() != this.nodes.size()) {
+        if ($$0.nodes.size() != this.nodes.size()) {
             return false;
         }
-        for (int i = 0; i < this.nodes.size(); ++i) {
-            net.minecraft.world.level.pathfinder.Node node = (net.minecraft.world.level.pathfinder.Node)this.nodes.get(i);
-            net.minecraft.world.level.pathfinder.Node node2 = (net.minecraft.world.level.pathfinder.Node)pathentity.nodes.get(i);
-            if (node.x == node2.x && node.y == node2.y && node.z == node2.z) continue;
+        for (int $$1 = 0; $$1 < this.nodes.size(); ++$$1) {
+            net.minecraft.world.level.pathfinder.Node $$2 = (net.minecraft.world.level.pathfinder.Node)this.nodes.get($$1);
+            net.minecraft.world.level.pathfinder.Node $$3 = (net.minecraft.world.level.pathfinder.Node)$$0.nodes.get($$1);
+            if ($$2.x == $$3.x && $$2.y == $$3.y && $$2.z == $$3.z) continue;
             return false;
         }
         return true;
@@ -161,34 +161,34 @@
         }
     }
 
-    public static net.minecraft.world.level.pathfinder.Path createFromStream(net.minecraft.network.FriendlyByteBuf buf) {
-        boolean bl = buf.readBoolean();
-        int n = buf.readInt();
-        int n2 = buf.readInt();
-        java.util.HashSet hashSet = com.google.common.collect.Sets.newHashSet();
-        for (int i = 0; i < n2; ++i) {
-            hashSet.add((java.lang.Object)net.minecraft.world.level.pathfinder.Target.createFromStream((net.minecraft.network.FriendlyByteBuf)buf));
+    public static net.minecraft.world.level.pathfinder.Path createFromStream(net.minecraft.network.FriendlyByteBuf $$0) {
+        boolean $$1 = $$0.readBoolean();
+        int $$2 = $$0.readInt();
+        int $$3 = $$0.readInt();
+        java.util.HashSet $$4 = com.google.common.collect.Sets.newHashSet();
+        for (int $$5 = 0; $$5 < $$3; ++$$5) {
+            $$4.add((java.lang.Object)net.minecraft.world.level.pathfinder.Target.createFromStream((net.minecraft.network.FriendlyByteBuf)$$0));
         }
-        net.minecraft.core.BlockPos blockPos = new net.minecraft.core.BlockPos(buf.readInt(), buf.readInt(), buf.readInt());
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-        int n3 = buf.readInt();
-        for (int i = 0; i < n3; ++i) {
-            arrayList.add((java.lang.Object)net.minecraft.world.level.pathfinder.Node.createFromStream((net.minecraft.network.FriendlyByteBuf)buf));
+        net.minecraft.core.BlockPos $$6 = new net.minecraft.core.BlockPos($$0.readInt(), $$0.readInt(), $$0.readInt());
+        java.util.ArrayList $$7 = com.google.common.collect.Lists.newArrayList();
+        int $$8 = $$0.readInt();
+        for (int $$9 = 0; $$9 < $$8; ++$$9) {
+            $$7.add((java.lang.Object)net.minecraft.world.level.pathfinder.Node.createFromStream((net.minecraft.network.FriendlyByteBuf)$$0));
         }
-        net.minecraft.world.level.pathfinder.Node[] nodeArray = new net.minecraft.world.level.pathfinder.Node[buf.readInt()];
-        for (int i = 0; i < nodeArray.length; ++i) {
-            nodeArray[i] = net.minecraft.world.level.pathfinder.Node.createFromStream((net.minecraft.network.FriendlyByteBuf)buf);
+        net.minecraft.world.level.pathfinder.Node[] $$10 = new net.minecraft.world.level.pathfinder.Node[$$0.readInt()];
+        for (int $$11 = 0; $$11 < $$10.length; ++$$11) {
+            $$10[$$11] = net.minecraft.world.level.pathfinder.Node.createFromStream((net.minecraft.network.FriendlyByteBuf)$$0);
         }
-        net.minecraft.world.level.pathfinder.Node[] nodeArray2 = new net.minecraft.world.level.pathfinder.Node[buf.readInt()];
-        for (int i = 0; i < nodeArray2.length; ++i) {
-            nodeArray2[i] = net.minecraft.world.level.pathfinder.Node.createFromStream((net.minecraft.network.FriendlyByteBuf)buf);
+        net.minecraft.world.level.pathfinder.Node[] $$12 = new net.minecraft.world.level.pathfinder.Node[$$0.readInt()];
+        for (int $$13 = 0; $$13 < $$12.length; ++$$13) {
+            $$12[$$13] = net.minecraft.world.level.pathfinder.Node.createFromStream((net.minecraft.network.FriendlyByteBuf)$$0);
         }
-        net.minecraft.world.level.pathfinder.Path path = new net.minecraft.world.level.pathfinder.Path((java.util.List)arrayList, blockPos, bl);
-        path.openSet = nodeArray;
-        path.closedSet = nodeArray2;
-        path.targetNodes = hashSet;
-        path.nextNodeIndex = n;
-        return path;
+        net.minecraft.world.level.pathfinder.Path $$14 = new net.minecraft.world.level.pathfinder.Path((java.util.List)$$7, $$6, $$1);
+        $$14.openSet = $$10;
+        $$14.closedSet = $$12;
+        $$14.targetNodes = $$4;
+        $$14.nextNodeIndex = $$2;
+        return $$14;
     }
 
     public java.lang.String toString() {