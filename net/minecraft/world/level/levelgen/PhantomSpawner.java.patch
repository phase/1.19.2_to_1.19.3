--- net/minecraft/world/level/levelgen/PhantomSpawner.java
+++ net/minecraft/world/level/levelgen/PhantomSpawner.java
@@ -11,46 +11,47 @@
     public net.minecraft.world.level.levelgen.PhantomSpawner() {
     }
 
-    public int tick(net.minecraft.server.level.ServerLevel level, boolean spawnHostiles, boolean spawnPassives) {
-        if (!spawnHostiles) {
+    public int tick(net.minecraft.server.level.ServerLevel $$0, boolean $$1, boolean $$2) {
+        if (!$$1) {
             return 0;
         }
-        if (!level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_DOINSOMNIA)) {
+        if (!$$0.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_DOINSOMNIA)) {
             return 0;
         }
-        net.minecraft.util.RandomSource randomSource = level.random;
+        net.minecraft.util.RandomSource $$3 = $$0.random;
         --this.nextTick;
         if (this.nextTick > 0) {
             return 0;
         }
-        this.nextTick += (60 + randomSource.nextInt(60)) * 20;
-        if (level.getSkyDarken() < 5 && level.dimensionType().hasSkyLight()) {
+        this.nextTick += (60 + $$3.nextInt(60)) * 20;
+        if ($$0.getSkyDarken() < 5 && $$0.dimensionType().hasSkyLight()) {
             return 0;
         }
-        int n = 0;
-        for (net.minecraft.world.entity.player.Player player : level.players()) {
-            net.minecraft.world.level.material.FluidState fluidState;
-            net.minecraft.world.level.block.state.BlockState blockState;
-            net.minecraft.core.BlockPos blockPos;
-            net.minecraft.world.DifficultyInstance difficultyInstance;
-            if (player.isSpectator()) continue;
-            net.minecraft.core.BlockPos blockPos2 = player.blockPosition();
-            if (level.dimensionType().hasSkyLight() && (blockPos2.getY() < level.getSeaLevel() || !level.canSeeSky(blockPos2)) || !(difficultyInstance = level.getCurrentDifficultyAt(blockPos2)).isHarderThan(randomSource.nextFloat() * 3.0f)) continue;
-            net.minecraft.stats.ServerStatsCounter serverStatsCounter = ((net.minecraft.server.level.ServerPlayer)player).getStats();
-            int n2 = net.minecraft.util.Mth.clamp((int)serverStatsCounter.getValue(net.minecraft.stats.Stats.CUSTOM.get((java.lang.Object)net.minecraft.stats.Stats.TIME_SINCE_REST)), (int)1, (int)java.lang.Integer.MAX_VALUE);
-            int n3 = 24000;
-            if (randomSource.nextInt(n2) < 72000 || !net.minecraft.world.level.NaturalSpawner.isValidEmptySpawnBlock((net.minecraft.world.level.BlockGetter)level, (net.minecraft.core.BlockPos)(blockPos = blockPos2.above(20 + randomSource.nextInt(15)).east(-10 + randomSource.nextInt(21)).south(-10 + randomSource.nextInt(21))), (net.minecraft.world.level.block.state.BlockState)(blockState = level.getBlockState(blockPos)), (net.minecraft.world.level.material.FluidState)(fluidState = level.getFluidState(blockPos)), (net.minecraft.world.entity.EntityType)net.minecraft.world.entity.EntityType.PHANTOM)) continue;
-            net.minecraft.world.entity.SpawnGroupData spawnGroupData = null;
-            int n4 = 1 + randomSource.nextInt(difficultyInstance.getDifficulty().getId() + 1);
-            for (int i = 0; i < n4; ++i) {
-                net.minecraft.world.entity.monster.Phantom phantom = (net.minecraft.world.entity.monster.Phantom)net.minecraft.world.entity.EntityType.PHANTOM.create((net.minecraft.world.level.Level)level);
-                phantom.moveTo(blockPos, 0.0f, 0.0f);
-                spawnGroupData = phantom.finalizeSpawn((net.minecraft.world.level.ServerLevelAccessor)level, difficultyInstance, net.minecraft.world.entity.MobSpawnType.NATURAL, spawnGroupData, null);
-                level.addFreshEntityWithPassengers((net.minecraft.world.entity.Entity)phantom);
+        int $$4 = 0;
+        for (net.minecraft.world.entity.player.Player $$5 : $$0.players()) {
+            net.minecraft.world.level.material.FluidState $$13;
+            net.minecraft.world.level.block.state.BlockState $$12;
+            net.minecraft.core.BlockPos $$11;
+            net.minecraft.world.DifficultyInstance $$7;
+            if ($$5.isSpectator()) continue;
+            net.minecraft.core.BlockPos $$6 = $$5.blockPosition();
+            if ($$0.dimensionType().hasSkyLight() && ($$6.getY() < $$0.getSeaLevel() || !$$0.canSeeSky($$6)) || !($$7 = $$0.getCurrentDifficultyAt($$6)).isHarderThan($$3.nextFloat() * 3.0f)) continue;
+            net.minecraft.stats.ServerStatsCounter $$8 = ((net.minecraft.server.level.ServerPlayer)$$5).getStats();
+            int $$9 = net.minecraft.util.Mth.clamp((int)$$8.getValue(net.minecraft.stats.Stats.CUSTOM.get((java.lang.Object)net.minecraft.stats.Stats.TIME_SINCE_REST)), (int)1, (int)java.lang.Integer.MAX_VALUE);
+            int $$10 = 24000;
+            if ($$3.nextInt($$9) < 72000 || !net.minecraft.world.level.NaturalSpawner.isValidEmptySpawnBlock((net.minecraft.world.level.BlockGetter)$$0, (net.minecraft.core.BlockPos)($$11 = $$6.above(20 + $$3.nextInt(15)).east(-10 + $$3.nextInt(21)).south(-10 + $$3.nextInt(21))), (net.minecraft.world.level.block.state.BlockState)($$12 = $$0.getBlockState($$11)), (net.minecraft.world.level.material.FluidState)($$13 = $$0.getFluidState($$11)), (net.minecraft.world.entity.EntityType)net.minecraft.world.entity.EntityType.PHANTOM)) continue;
+            net.minecraft.world.entity.SpawnGroupData $$14 = null;
+            int $$15 = 1 + $$3.nextInt($$7.getDifficulty().getId() + 1);
+            for (int $$16 = 0; $$16 < $$15; ++$$16) {
+                net.minecraft.world.entity.monster.Phantom $$17 = (net.minecraft.world.entity.monster.Phantom)net.minecraft.world.entity.EntityType.PHANTOM.create((net.minecraft.world.level.Level)$$0);
+                if ($$17 == null) continue;
+                $$17.moveTo($$11, 0.0f, 0.0f);
+                $$14 = $$17.finalizeSpawn((net.minecraft.world.level.ServerLevelAccessor)$$0, $$7, net.minecraft.world.entity.MobSpawnType.NATURAL, $$14, null);
+                $$0.addFreshEntityWithPassengers((net.minecraft.world.entity.Entity)$$17);
+                ++$$4;
             }
-            n += n4;
         }
-        return n;
+        return $$4;
     }
 }
 