--- net/minecraft/world/level/levelgen/feature/IcebergFeature.java
+++ net/minecraft/world/level/levelgen/feature/IcebergFeature.java
@@ -85,28 +85,28 @@
         }
     }
 
-    public void carve(int radius, int localY, net.minecraft.core.BlockPos pos, net.minecraft.world.level.LevelAccessor level, boolean placeWater, double perpendicularAngle, net.minecraft.core.BlockPos ellipseOrigin, int majorRadius, int minorRadius) {
-        int n = radius + 1 + majorRadius / 3;
-        int n2 = java.lang.Math.min((int)(radius - 3), (int)3) + minorRadius / 2 - 1;
-        for (int i = -n; i < n; ++i) {
-            for (int j = -n; j < n; ++j) {
-                net.minecraft.core.BlockPos blockPos;
-                net.minecraft.world.level.block.state.BlockState blockState;
-                double d = this.signedDistanceEllipse(i, j, ellipseOrigin, n, n2, perpendicularAngle);
-                if (!(d < 0.0) || !net.minecraft.world.level.levelgen.feature.IcebergFeature.isIcebergState((net.minecraft.world.level.block.state.BlockState)(blockState = level.getBlockState(blockPos = pos.offset(i, localY, j)))) && !blockState.is(net.minecraft.world.level.block.Blocks.SNOW_BLOCK)) continue;
-                if (placeWater) {
-                    this.setBlock((net.minecraft.world.level.LevelWriter)level, blockPos, net.minecraft.world.level.block.Blocks.WATER.defaultBlockState());
+    public void carve(int $$0, int $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.LevelAccessor $$3, boolean $$4, double $$5, net.minecraft.core.BlockPos $$6, int $$7, int $$8) {
+        int $$9 = $$0 + 1 + $$7 / 3;
+        int $$10 = java.lang.Math.min((int)($$0 - 3), (int)3) + $$8 / 2 - 1;
+        for (int $$11 = -$$9; $$11 < $$9; ++$$11) {
+            for (int $$12 = -$$9; $$12 < $$9; ++$$12) {
+                net.minecraft.core.BlockPos $$14;
+                net.minecraft.world.level.block.state.BlockState $$15;
+                double $$13 = this.signedDistanceEllipse($$11, $$12, $$6, $$9, $$10, $$5);
+                if (!($$13 < 0.0) || !net.minecraft.world.level.levelgen.feature.IcebergFeature.isIcebergState((net.minecraft.world.level.block.state.BlockState)($$15 = $$3.getBlockState($$14 = $$2.offset($$11, $$1, $$12)))) && !$$15.is(net.minecraft.world.level.block.Blocks.SNOW_BLOCK)) continue;
+                if ($$4) {
+                    this.setBlock((net.minecraft.world.level.LevelWriter)$$3, $$14, net.minecraft.world.level.block.Blocks.WATER.defaultBlockState());
                     continue;
                 }
-                this.setBlock((net.minecraft.world.level.LevelWriter)level, blockPos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
-                this.removeFloatingSnowLayer(level, blockPos);
+                this.setBlock((net.minecraft.world.level.LevelWriter)$$3, $$14, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
+                this.removeFloatingSnowLayer($$3, $$14);
             }
         }
     }
 
-    public void removeFloatingSnowLayer(net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos) {
-        if (level.getBlockState(pos.above()).is(net.minecraft.world.level.block.Blocks.SNOW)) {
-            this.setBlock((net.minecraft.world.level.LevelWriter)level, pos.above(), net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
+    public void removeFloatingSnowLayer(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1) {
+        if ($$0.getBlockState($$1.above()).is(net.minecraft.world.level.block.Blocks.SNOW)) {
+            this.setBlock((net.minecraft.world.level.LevelWriter)$$0, $$1.above(), net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
         }
     }
 
@@ -138,12 +138,12 @@
         }
     }
 
-    public int getEllipseC(int y, int height, int minorAxis) {
-        int n = minorAxis;
-        if (y > 0 && height - y <= 3) {
-            n -= 4 - (height - y);
+    public int getEllipseC(int $$0, int $$1, int $$2) {
+        int $$3 = $$2;
+        if ($$0 > 0 && $$1 - $$0 <= 3) {
+            $$3 -= 4 - ($$1 - $$0);
         }
-        return n;
+        return $$3;
     }
 
     public double signedDistanceCircle(int $$0, int $$1, net.minecraft.core.BlockPos $$2, int $$3, net.minecraft.util.RandomSource $$4) {
@@ -151,8 +151,8 @@
         return (double)$$5 + java.lang.Math.pow((double)($$0 - $$2.getX()), (double)2.0) + java.lang.Math.pow((double)($$1 - $$2.getZ()), (double)2.0) - java.lang.Math.pow((double)$$3, (double)2.0);
     }
 
-    public double signedDistanceEllipse(int x, int z, net.minecraft.core.BlockPos center, int majorRadius, int minorRadius, double angle) {
-        return java.lang.Math.pow((double)(((double)(x - center.getX()) * java.lang.Math.cos((double)angle) - (double)(z - center.getZ()) * java.lang.Math.sin((double)angle)) / (double)majorRadius), (double)2.0) + java.lang.Math.pow((double)(((double)(x - center.getX()) * java.lang.Math.sin((double)angle) + (double)(z - center.getZ()) * java.lang.Math.cos((double)angle)) / (double)minorRadius), (double)2.0) - 1.0;
+    public double signedDistanceEllipse(int $$0, int $$1, net.minecraft.core.BlockPos $$2, int $$3, int $$4, double $$5) {
+        return java.lang.Math.pow((double)(((double)($$0 - $$2.getX()) * java.lang.Math.cos((double)$$5) - (double)($$1 - $$2.getZ()) * java.lang.Math.sin((double)$$5)) / (double)$$3), (double)2.0) + java.lang.Math.pow((double)(((double)($$0 - $$2.getX()) * java.lang.Math.sin((double)$$5) + (double)($$1 - $$2.getZ()) * java.lang.Math.cos((double)$$5)) / (double)$$4), (double)2.0) - 1.0;
     }
 
     public int heightDependentRadiusRound(net.minecraft.util.RandomSource $$0, int $$1, int $$2, int $$3) {
@@ -165,10 +165,10 @@
         return net.minecraft.util.Mth.ceil((float)($$5 / 2.0f));
     }
 
-    public int heightDependentRadiusEllipse(int y, int height, int maxRadius) {
-        float f = 1.0f;
-        float f2 = (1.0f - (float)java.lang.Math.pow((double)y, (double)2.0) / ((float)height * 1.0f)) * (float)maxRadius;
-        return net.minecraft.util.Mth.ceil((float)(f2 / 2.0f));
+    public int heightDependentRadiusEllipse(int $$0, int $$1, int $$2) {
+        float $$3 = 1.0f;
+        float $$4 = (1.0f - (float)java.lang.Math.pow((double)$$0, (double)2.0) / ((float)$$1 * 1.0f)) * (float)$$2;
+        return net.minecraft.util.Mth.ceil((float)($$4 / 2.0f));
     }
 
     public int heightDependentRadiusSteep(net.minecraft.util.RandomSource $$0, int $$1, int $$2, int $$3) {
@@ -181,32 +181,32 @@
         return $$0.is(net.minecraft.world.level.block.Blocks.PACKED_ICE) || $$0.is(net.minecraft.world.level.block.Blocks.SNOW_BLOCK) || $$0.is(net.minecraft.world.level.block.Blocks.BLUE_ICE);
     }
 
-    public boolean belowIsAir(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
-        return level.getBlockState(pos.below()).getMaterial() == net.minecraft.world.level.material.Material.AIR;
+    public boolean belowIsAir(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1) {
+        return $$0.getBlockState($$1.below()).getMaterial() == net.minecraft.world.level.material.Material.AIR;
     }
 
-    public void smooth(net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos, int majorRadius, int height, boolean elliptical, int minorRadius) {
-        int n = elliptical ? minorRadius : majorRadius / 2;
-        for (int i = -n; i <= n; ++i) {
-            for (int j = -n; j <= n; ++j) {
-                for (int k = 0; k <= height; ++k) {
-                    net.minecraft.core.BlockPos blockPos = pos.offset(i, k, j);
-                    net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(blockPos);
-                    if (!net.minecraft.world.level.levelgen.feature.IcebergFeature.isIcebergState((net.minecraft.world.level.block.state.BlockState)blockState) && !blockState.is(net.minecraft.world.level.block.Blocks.SNOW)) continue;
-                    if (this.belowIsAir((net.minecraft.world.level.BlockGetter)level, blockPos)) {
-                        this.setBlock((net.minecraft.world.level.LevelWriter)level, blockPos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
-                        this.setBlock((net.minecraft.world.level.LevelWriter)level, blockPos.above(), net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
+    public void smooth(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1, int $$2, int $$3, boolean $$4, int $$5) {
+        int $$6 = $$4 ? $$5 : $$2 / 2;
+        for (int $$7 = -$$6; $$7 <= $$6; ++$$7) {
+            for (int $$8 = -$$6; $$8 <= $$6; ++$$8) {
+                for (int $$9 = 0; $$9 <= $$3; ++$$9) {
+                    net.minecraft.core.BlockPos $$10 = $$1.offset($$7, $$9, $$8);
+                    net.minecraft.world.level.block.state.BlockState $$11 = $$0.getBlockState($$10);
+                    if (!net.minecraft.world.level.levelgen.feature.IcebergFeature.isIcebergState((net.minecraft.world.level.block.state.BlockState)$$11) && !$$11.is(net.minecraft.world.level.block.Blocks.SNOW)) continue;
+                    if (this.belowIsAir((net.minecraft.world.level.BlockGetter)$$0, $$10)) {
+                        this.setBlock((net.minecraft.world.level.LevelWriter)$$0, $$10, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
+                        this.setBlock((net.minecraft.world.level.LevelWriter)$$0, $$10.above(), net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
                         continue;
                     }
-                    if (!net.minecraft.world.level.levelgen.feature.IcebergFeature.isIcebergState((net.minecraft.world.level.block.state.BlockState)blockState)) continue;
-                    net.minecraft.world.level.block.state.BlockState[] blockStateArray = new net.minecraft.world.level.block.state.BlockState[]{level.getBlockState(blockPos.west()), level.getBlockState(blockPos.east()), level.getBlockState(blockPos.north()), level.getBlockState(blockPos.south())};
-                    int n2 = 0;
-                    for (net.minecraft.world.level.block.state.BlockState blockState2 : blockStateArray) {
-                        if (net.minecraft.world.level.levelgen.feature.IcebergFeature.isIcebergState((net.minecraft.world.level.block.state.BlockState)blockState2)) continue;
-                        ++n2;
+                    if (!net.minecraft.world.level.levelgen.feature.IcebergFeature.isIcebergState((net.minecraft.world.level.block.state.BlockState)$$11)) continue;
+                    net.minecraft.world.level.block.state.BlockState[] $$12 = new net.minecraft.world.level.block.state.BlockState[]{$$0.getBlockState($$10.west()), $$0.getBlockState($$10.east()), $$0.getBlockState($$10.north()), $$0.getBlockState($$10.south())};
+                    int $$13 = 0;
+                    for (net.minecraft.world.level.block.state.BlockState $$14 : $$12) {
+                        if (net.minecraft.world.level.levelgen.feature.IcebergFeature.isIcebergState((net.minecraft.world.level.block.state.BlockState)$$14)) continue;
+                        ++$$13;
                     }
-                    if (n2 < 3) continue;
-                    this.setBlock((net.minecraft.world.level.LevelWriter)level, blockPos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
+                    if ($$13 < 3) continue;
+                    this.setBlock((net.minecraft.world.level.LevelWriter)$$0, $$10, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState());
                 }
             }
         }