--- net/minecraft/world/level/levelgen/feature/TreeFeature.java
+++ net/minecraft/world/level/levelgen/feature/TreeFeature.java
@@ -12,31 +12,31 @@
         super($$0);
     }
 
-    public static boolean isVine(net.minecraft.world.level.LevelSimulatedReader level, net.minecraft.core.BlockPos pos) {
-        return level.isStateAtPosition(pos, $$0 -> $$0.is(net.minecraft.world.level.block.Blocks.VINE));
+    public static boolean isVine(net.minecraft.world.level.LevelSimulatedReader $$02, net.minecraft.core.BlockPos $$1) {
+        return $$02.isStateAtPosition($$1, $$0 -> $$0.is(net.minecraft.world.level.block.Blocks.VINE));
     }
 
-    public static boolean isBlockWater(net.minecraft.world.level.LevelSimulatedReader level, net.minecraft.core.BlockPos pos) {
-        return level.isStateAtPosition(pos, $$0 -> $$0.is(net.minecraft.world.level.block.Blocks.WATER));
+    public static boolean isBlockWater(net.minecraft.world.level.LevelSimulatedReader $$02, net.minecraft.core.BlockPos $$1) {
+        return $$02.isStateAtPosition($$1, $$0 -> $$0.is(net.minecraft.world.level.block.Blocks.WATER));
     }
 
-    public static boolean isAirOrLeaves(net.minecraft.world.level.LevelSimulatedReader level, net.minecraft.core.BlockPos pos) {
-        return level.isStateAtPosition(pos, $$0 -> $$0.isAir() || $$0.is(net.minecraft.tags.BlockTags.LEAVES));
+    public static boolean isAirOrLeaves(net.minecraft.world.level.LevelSimulatedReader $$02, net.minecraft.core.BlockPos $$1) {
+        return $$02.isStateAtPosition($$1, $$0 -> $$0.isAir() || $$0.is(net.minecraft.tags.BlockTags.LEAVES));
     }
 
-    public static boolean isReplaceablePlant(net.minecraft.world.level.LevelSimulatedReader level, net.minecraft.core.BlockPos pos) {
-        return level.isStateAtPosition(pos, $$0 -> {
+    public static boolean isReplaceablePlant(net.minecraft.world.level.LevelSimulatedReader $$02, net.minecraft.core.BlockPos $$1) {
+        return $$02.isStateAtPosition($$1, $$0 -> {
             net.minecraft.world.level.material.Material $$1 = $$0.getMaterial();
             return $$1 == net.minecraft.world.level.material.Material.REPLACEABLE_PLANT || $$1 == net.minecraft.world.level.material.Material.REPLACEABLE_WATER_PLANT || $$1 == net.minecraft.world.level.material.Material.REPLACEABLE_FIREPROOF_PLANT;
         });
     }
 
-    public static void setBlockKnownShape(net.minecraft.world.level.LevelWriter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
-        level.setBlock(pos, state, 19);
+    public static void setBlockKnownShape(net.minecraft.world.level.LevelWriter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
+        $$0.setBlock($$1, $$2, 19);
     }
 
-    public static boolean validTreePos(net.minecraft.world.level.LevelSimulatedReader level, net.minecraft.core.BlockPos pos) {
-        return net.minecraft.world.level.levelgen.feature.TreeFeature.isAirOrLeaves((net.minecraft.world.level.LevelSimulatedReader)level, (net.minecraft.core.BlockPos)pos) || net.minecraft.world.level.levelgen.feature.TreeFeature.isReplaceablePlant((net.minecraft.world.level.LevelSimulatedReader)level, (net.minecraft.core.BlockPos)pos) || net.minecraft.world.level.levelgen.feature.TreeFeature.isBlockWater((net.minecraft.world.level.LevelSimulatedReader)level, (net.minecraft.core.BlockPos)pos);
+    public static boolean validTreePos(net.minecraft.world.level.LevelSimulatedReader $$0, net.minecraft.core.BlockPos $$1) {
+        return net.minecraft.world.level.levelgen.feature.TreeFeature.isAirOrLeaves((net.minecraft.world.level.LevelSimulatedReader)$$0, (net.minecraft.core.BlockPos)$$1) || net.minecraft.world.level.levelgen.feature.TreeFeature.isReplaceablePlant((net.minecraft.world.level.LevelSimulatedReader)$$0, (net.minecraft.core.BlockPos)$$1) || net.minecraft.world.level.levelgen.feature.TreeFeature.isBlockWater((net.minecraft.world.level.LevelSimulatedReader)$$0, (net.minecraft.core.BlockPos)$$1);
     }
 
     public boolean doPlace(net.minecraft.world.level.WorldGenLevel $$0, net.minecraft.util.RandomSource $$1, net.minecraft.core.BlockPos $$22, java.util.function.BiConsumer<net.minecraft.core.BlockPos, net.minecraft.world.level.block.state.BlockState> $$3, java.util.function.BiConsumer<net.minecraft.core.BlockPos, net.minecraft.world.level.block.state.BlockState> $$4, java.util.function.BiConsumer<net.minecraft.core.BlockPos, net.minecraft.world.level.block.state.BlockState> $$5, net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration $$6) {
@@ -63,23 +63,23 @@
         return true;
     }
 
-    public int getMaxFreeTreeHeight(net.minecraft.world.level.LevelSimulatedReader level, int trunkHeight, net.minecraft.core.BlockPos topPosition, net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration config) {
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos = new net.minecraft.core.BlockPos$MutableBlockPos();
-        for (int i = 0; i <= trunkHeight + 1; ++i) {
-            int n = config.minimumSize.getSizeAtHeight(trunkHeight, i);
-            for (int j = -n; j <= n; ++j) {
-                for (int k = -n; k <= n; ++k) {
-                    mutableBlockPos.setWithOffset((net.minecraft.core.Vec3i)topPosition, j, i, k);
-                    if (config.trunkPlacer.isFree(level, (net.minecraft.core.BlockPos)mutableBlockPos) && (config.ignoreVines || !net.minecraft.world.level.levelgen.feature.TreeFeature.isVine((net.minecraft.world.level.LevelSimulatedReader)level, (net.minecraft.core.BlockPos)mutableBlockPos))) continue;
-                    return i - 2;
+    public int getMaxFreeTreeHeight(net.minecraft.world.level.LevelSimulatedReader $$0, int $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration $$3) {
+        net.minecraft.core.BlockPos$MutableBlockPos $$4 = new net.minecraft.core.BlockPos$MutableBlockPos();
+        for (int $$5 = 0; $$5 <= $$1 + 1; ++$$5) {
+            int $$6 = $$3.minimumSize.getSizeAtHeight($$1, $$5);
+            for (int $$7 = -$$6; $$7 <= $$6; ++$$7) {
+                for (int $$8 = -$$6; $$8 <= $$6; ++$$8) {
+                    $$4.setWithOffset((net.minecraft.core.Vec3i)$$2, $$7, $$5, $$8);
+                    if ($$3.trunkPlacer.isFree($$0, (net.minecraft.core.BlockPos)$$4) && ($$3.ignoreVines || !net.minecraft.world.level.levelgen.feature.TreeFeature.isVine((net.minecraft.world.level.LevelSimulatedReader)$$0, (net.minecraft.core.BlockPos)$$4))) continue;
+                    return $$5 - 2;
                 }
             }
         }
-        return trunkHeight;
+        return $$1;
     }
 
-    public void setBlock(net.minecraft.world.level.LevelWriter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.world.level.levelgen.feature.TreeFeature.setBlockKnownShape((net.minecraft.world.level.LevelWriter)level, (net.minecraft.core.BlockPos)pos, (net.minecraft.world.level.block.state.BlockState)state);
+    public void setBlock(net.minecraft.world.level.LevelWriter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
+        net.minecraft.world.level.levelgen.feature.TreeFeature.setBlockKnownShape((net.minecraft.world.level.LevelWriter)$$0, (net.minecraft.core.BlockPos)$$1, (net.minecraft.world.level.block.state.BlockState)$$2);
     }
 
     public boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext<net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration> $$0) {