--- net/minecraft/world/level/levelgen/DebugLevelSource.java
+++ net/minecraft/world/level/levelgen/DebugLevelSource.java
@@ -18,7 +18,7 @@
     public net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> biomes;
 
     public net.minecraft.world.level.levelgen.DebugLevelSource(net.minecraft.core.Registry<net.minecraft.world.level.levelgen.structure.StructureSet> $$0, net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> $$1) {
-        super($$0, java.util.Optional.empty(), (net.minecraft.world.level.biome.BiomeSource)new net.minecraft.world.level.biome.FixedBiomeSource($$1.getOrCreateHolderOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS)));
+        super($$0, java.util.Optional.empty(), (net.minecraft.world.level.biome.BiomeSource)new net.minecraft.world.level.biome.FixedBiomeSource((net.minecraft.core.Holder)$$1.getOrCreateHolderOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS)));
         this.biomes = $$1;
     }
 
@@ -64,13 +64,13 @@
     public void addDebugScreenInfo(java.util.List<java.lang.String> $$0, net.minecraft.world.level.levelgen.RandomState $$1, net.minecraft.core.BlockPos $$2) {
     }
 
-    public static net.minecraft.world.level.block.state.BlockState getBlockStateFor(int chunkX, int chunkZ) {
-        int n;
-        net.minecraft.world.level.block.state.BlockState blockState = AIR;
-        if (chunkX > 0 && chunkZ > 0 && chunkX % 2 != 0 && chunkZ % 2 != 0 && (chunkX /= 2) <= GRID_WIDTH && (chunkZ /= 2) <= GRID_HEIGHT && (n = net.minecraft.util.Mth.abs((int)(chunkX * GRID_WIDTH + chunkZ))) < ALL_BLOCKS.size()) {
-            blockState = (net.minecraft.world.level.block.state.BlockState)ALL_BLOCKS.get(n);
+    public static net.minecraft.world.level.block.state.BlockState getBlockStateFor(int $$0, int $$1) {
+        int $$3;
+        net.minecraft.world.level.block.state.BlockState $$2 = AIR;
+        if ($$0 > 0 && $$1 > 0 && $$0 % 2 != 0 && $$1 % 2 != 0 && ($$0 /= 2) <= GRID_WIDTH && ($$1 /= 2) <= GRID_HEIGHT && ($$3 = net.minecraft.util.Mth.abs((int)($$0 * GRID_WIDTH + $$1))) < ALL_BLOCKS.size()) {
+            $$2 = (net.minecraft.world.level.block.state.BlockState)ALL_BLOCKS.get($$3);
         }
-        return blockState;
+        return $$2;
     }
 
     public void applyCarvers(net.minecraft.server.level.WorldGenRegion $$0, long $$1, net.minecraft.world.level.levelgen.RandomState $$2, net.minecraft.world.level.biome.BiomeManager $$3, net.minecraft.world.level.StructureManager $$4, net.minecraft.world.level.chunk.ChunkAccess $$5, net.minecraft.world.level.levelgen.GenerationStep$Carving $$6) {