--- net/minecraft/world/level/levelgen/structure/ScatteredFeaturePiece.java
+++ net/minecraft/world/level/levelgen/structure/ScatteredFeaturePiece.java
@@ -36,26 +36,26 @@
         $$1.putInt("HPos", this.heightPosition);
     }
 
-    public boolean updateAverageGroundHeight(net.minecraft.world.level.LevelAccessor level, net.minecraft.world.level.levelgen.structure.BoundingBox bounds, int height) {
+    public boolean updateAverageGroundHeight(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.world.level.levelgen.structure.BoundingBox $$1, int $$2) {
         if (this.heightPosition >= 0) {
             return true;
         }
-        int n = 0;
-        int n2 = 0;
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos = new net.minecraft.core.BlockPos$MutableBlockPos();
-        for (int i = this.boundingBox.minZ(); i <= this.boundingBox.maxZ(); ++i) {
-            for (int j = this.boundingBox.minX(); j <= this.boundingBox.maxX(); ++j) {
-                mutableBlockPos.set(j, 64, i);
-                if (!bounds.isInside((net.minecraft.core.Vec3i)mutableBlockPos)) continue;
-                n += level.getHeightmapPos(net.minecraft.world.level.levelgen.Heightmap$Types.MOTION_BLOCKING_NO_LEAVES, (net.minecraft.core.BlockPos)mutableBlockPos).getY();
-                ++n2;
+        int $$3 = 0;
+        int $$4 = 0;
+        net.minecraft.core.BlockPos$MutableBlockPos $$5 = new net.minecraft.core.BlockPos$MutableBlockPos();
+        for (int $$6 = this.boundingBox.minZ(); $$6 <= this.boundingBox.maxZ(); ++$$6) {
+            for (int $$7 = this.boundingBox.minX(); $$7 <= this.boundingBox.maxX(); ++$$7) {
+                $$5.set($$7, 64, $$6);
+                if (!$$1.isInside((net.minecraft.core.Vec3i)$$5)) continue;
+                $$3 += $$0.getHeightmapPos(net.minecraft.world.level.levelgen.Heightmap$Types.MOTION_BLOCKING_NO_LEAVES, (net.minecraft.core.BlockPos)$$5).getY();
+                ++$$4;
             }
         }
-        if (n2 == 0) {
+        if ($$4 == 0) {
             return false;
         }
-        this.heightPosition = n / n2;
-        this.boundingBox.move(0, this.heightPosition - this.boundingBox.minY() + height, 0);
+        this.heightPosition = $$3 / $$4;
+        this.boundingBox.move(0, this.heightPosition - this.boundingBox.minY() + $$2, 0);
         return true;
     }
 