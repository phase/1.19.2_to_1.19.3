--- net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -4,163 +4,51 @@
 package net.minecraft.world.level.levelgen;
 
 public class net.minecraft.world.level.levelgen.WorldGenSettings
+extends java.lang.Record
  {
+    public net.minecraft.world.level.levelgen.WorldOptions options;
+    public net.minecraft.world.level.levelgen.WorldDimensions dimensions;
     public static com.mojang.serialization.Codec<net.minecraft.world.level.levelgen.WorldGenSettings> CODEC;
-    public long seed;
-    public boolean generateStructures;
-    public boolean generateBonusChest;
-    public net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> dimensions;
-    public java.util.Optional<java.lang.String> legacyCustomOptions;
 
-    public com.mojang.serialization.DataResult<net.minecraft.world.level.levelgen.WorldGenSettings> guardExperimental() {
-        net.minecraft.world.level.dimension.LevelStem $$0 = (net.minecraft.world.level.dimension.LevelStem)this.dimensions.get(net.minecraft.world.level.dimension.LevelStem.OVERWORLD);
-        if ($$0 == null) {
-            return com.mojang.serialization.DataResult.error((java.lang.String)"Overworld settings missing");
-        }
-        if (this.stable()) {
-            return com.mojang.serialization.DataResult.success((java.lang.Object)this, (com.mojang.serialization.Lifecycle)com.mojang.serialization.Lifecycle.stable());
-        }
-        return com.mojang.serialization.DataResult.success((java.lang.Object)this);
+    public net.minecraft.world.level.levelgen.WorldGenSettings(net.minecraft.world.level.levelgen.WorldOptions $$0, net.minecraft.world.level.levelgen.WorldDimensions $$1) {
+        this.options = $$0;
+        this.dimensions = $$1;
     }
 
-    public boolean stable() {
-        return net.minecraft.world.level.dimension.LevelStem.stable((net.minecraft.core.Registry)this.dimensions);
+    public static <T> com.mojang.serialization.DataResult<T> encode(com.mojang.serialization.DynamicOps<T> $$0, net.minecraft.world.level.levelgen.WorldOptions $$1, net.minecraft.world.level.levelgen.WorldDimensions $$2) {
+        return CODEC.encodeStart($$0, (java.lang.Object)new net.minecraft.world.level.levelgen.WorldGenSettings($$1, $$2));
     }
 
-    public net.minecraft.world.level.levelgen.WorldGenSettings(long $$0, boolean $$1, boolean $$2, net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> $$3) {
-        this($$0, $$1, $$2, $$3, java.util.Optional.empty());
-        net.minecraft.world.level.dimension.LevelStem $$4 = (net.minecraft.world.level.dimension.LevelStem)$$3.get(net.minecraft.world.level.dimension.LevelStem.OVERWORLD);
-        if ($$4 == null) {
-            throw new java.lang.IllegalStateException("Overworld settings missing");
-        }
+    public static <T> com.mojang.serialization.DataResult<T> encode(com.mojang.serialization.DynamicOps<T> $$0, net.minecraft.world.level.levelgen.WorldOptions $$1, net.minecraft.core.RegistryAccess $$2) {
+        return net.minecraft.world.level.levelgen.WorldGenSettings.encode($$0, (net.minecraft.world.level.levelgen.WorldOptions)$$1, (net.minecraft.world.level.levelgen.WorldDimensions)new net.minecraft.world.level.levelgen.WorldDimensions($$2.registryOrThrow(net.minecraft.core.Registry.LEVEL_STEM_REGISTRY)));
     }
 
-    public net.minecraft.world.level.levelgen.WorldGenSettings(long $$0, boolean $$1, boolean $$2, net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> $$3, java.util.Optional<java.lang.String> $$4) {
-        this.seed = $$0;
-        this.generateStructures = $$1;
-        this.generateBonusChest = $$2;
-        this.dimensions = $$3;
-        this.legacyCustomOptions = $$4;
+    public java.lang.String toString() {
+        return java.lang.runtime.ObjectMethods.bootstrap("toString", new java.lang.invoke.MethodHandle[]{net.minecraft.world.level.levelgen.WorldGenSettings.class, "options;dimensions", "options", "dimensions"}, this);
     }
 
-    public long seed() {
-        return this.seed;
+    public int hashCode() {
+        return (int)java.lang.runtime.ObjectMethods.bootstrap("hashCode", new java.lang.invoke.MethodHandle[]{net.minecraft.world.level.levelgen.WorldGenSettings.class, "options;dimensions", "options", "dimensions"}, this);
     }
 
-    public boolean generateStructures() {
-        return this.generateStructures;
+    public boolean equals(java.lang.Object $$0) {
+        return (boolean)java.lang.runtime.ObjectMethods.bootstrap("equals", new java.lang.invoke.MethodHandle[]{net.minecraft.world.level.levelgen.WorldGenSettings.class, "options;dimensions", "options", "dimensions"}, this, $$0);
     }
 
-    public boolean generateBonusChest() {
-        return this.generateBonusChest;
+    public net.minecraft.world.level.levelgen.WorldOptions options() {
+        return this.options;
     }
 
-    public static net.minecraft.world.level.levelgen.WorldGenSettings replaceOverworldGenerator(net.minecraft.core.RegistryAccess $$0, net.minecraft.world.level.levelgen.WorldGenSettings $$1, net.minecraft.world.level.chunk.ChunkGenerator $$2) {
-        net.minecraft.core.Registry $$3 = $$0.registryOrThrow(net.minecraft.core.Registry.DIMENSION_TYPE_REGISTRY);
-        net.minecraft.core.Registry $$4 = net.minecraft.world.level.levelgen.WorldGenSettings.withOverworld((net.minecraft.core.Registry)$$3, (net.minecraft.core.Registry)$$1.dimensions(), (net.minecraft.world.level.chunk.ChunkGenerator)$$2);
-        return new net.minecraft.world.level.levelgen.WorldGenSettings($$1.seed(), $$1.generateStructures(), $$1.generateBonusChest(), $$4);
-    }
-
-    public static net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> withOverworld(net.minecraft.core.Registry<net.minecraft.world.level.dimension.DimensionType> $$0, net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> $$1, net.minecraft.world.level.chunk.ChunkGenerator $$2) {
-        net.minecraft.world.level.dimension.LevelStem $$3 = (net.minecraft.world.level.dimension.LevelStem)$$1.get(net.minecraft.world.level.dimension.LevelStem.OVERWORLD);
-        net.minecraft.core.Holder $$4 = $$3 == null ? $$0.getOrCreateHolderOrThrow(net.minecraft.world.level.dimension.BuiltinDimensionTypes.OVERWORLD) : $$3.typeHolder();
-        return net.minecraft.world.level.levelgen.WorldGenSettings.withOverworld($$1, (net.minecraft.core.Holder)$$4, (net.minecraft.world.level.chunk.ChunkGenerator)$$2);
-    }
-
-    public static net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> withOverworld(net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> $$0, net.minecraft.core.Holder<net.minecraft.world.level.dimension.DimensionType> $$1, net.minecraft.world.level.chunk.ChunkGenerator $$2) {
-        net.minecraft.core.MappedRegistry $$3 = new net.minecraft.core.MappedRegistry(net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, com.mojang.serialization.Lifecycle.experimental(), null);
-        $$3.register(net.minecraft.world.level.dimension.LevelStem.OVERWORLD, (java.lang.Object)new net.minecraft.world.level.dimension.LevelStem($$1, $$2), com.mojang.serialization.Lifecycle.stable());
-        for (java.util.Map$Entry $$4 : $$0.entrySet()) {
-            net.minecraft.resources.ResourceKey $$5 = (net.minecraft.resources.ResourceKey)$$4.getKey();
-            if ($$5 == net.minecraft.world.level.dimension.LevelStem.OVERWORLD) continue;
-            $$3.register($$5, (java.lang.Object)((net.minecraft.world.level.dimension.LevelStem)$$4.getValue()), $$0.lifecycle((java.lang.Object)((net.minecraft.world.level.dimension.LevelStem)$$4.getValue())));
-        }
-        return $$3;
-    }
-
-    public net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> dimensions() {
+    public net.minecraft.world.level.levelgen.WorldDimensions dimensions() {
         return this.dimensions;
     }
 
-    public net.minecraft.world.level.chunk.ChunkGenerator overworld() {
-        net.minecraft.world.level.dimension.LevelStem $$0 = (net.minecraft.world.level.dimension.LevelStem)this.dimensions.get(net.minecraft.world.level.dimension.LevelStem.OVERWORLD);
-        if ($$0 == null) {
-            throw new java.lang.IllegalStateException("Overworld settings missing");
-        }
-        return $$0.generator();
+    public static /* synthetic */ com.mojang.datafixers.kinds.App lambda$static$0(com.mojang.serialization.codecs.RecordCodecBuilder$Instance $$0) {
+        return $$0.group((com.mojang.datafixers.kinds.App)net.minecraft.world.level.levelgen.WorldOptions.CODEC.forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::options), (com.mojang.datafixers.kinds.App)net.minecraft.world.level.levelgen.WorldDimensions.CODEC.forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::dimensions)).apply((com.mojang.datafixers.kinds.Applicative)$$0, $$0.stable(net.minecraft.world.level.levelgen.WorldGenSettings::new));
     }
 
-    public com.google.common.collect.ImmutableSet<net.minecraft.resources.ResourceKey<net.minecraft.world.level.Level>> levels() {
-        return (com.google.common.collect.ImmutableSet)this.dimensions().entrySet().stream().map(java.util.Map$Entry::getKey).map(net.minecraft.world.level.levelgen.WorldGenSettings::levelStemToLevel).collect(com.google.common.collect.ImmutableSet.toImmutableSet());
-    }
-
-    public static net.minecraft.resources.ResourceKey<net.minecraft.world.level.Level> levelStemToLevel(net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem> $$0) {
-        return net.minecraft.resources.ResourceKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.DIMENSION_REGISTRY, (net.minecraft.resources.ResourceLocation)$$0.location());
-    }
-
-    public static net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem> levelToLevelStem(net.minecraft.resources.ResourceKey<net.minecraft.world.level.Level> $$0) {
-        return net.minecraft.resources.ResourceKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, (net.minecraft.resources.ResourceLocation)$$0.location());
-    }
-
-    public boolean isDebug() {
-        return this.overworld() instanceof net.minecraft.world.level.levelgen.DebugLevelSource;
-    }
-
-    public boolean isFlatWorld() {
-        return this.overworld() instanceof net.minecraft.world.level.levelgen.FlatLevelSource;
-    }
-
-    public boolean isOldCustomizedWorld() {
-        return this.legacyCustomOptions.isPresent();
-    }
-
-    public net.minecraft.world.level.levelgen.WorldGenSettings withBonusChest() {
-        return new net.minecraft.world.level.levelgen.WorldGenSettings(this.seed, this.generateStructures, true, this.dimensions, this.legacyCustomOptions);
-    }
-
-    public net.minecraft.world.level.levelgen.WorldGenSettings withStructuresToggled() {
-        return new net.minecraft.world.level.levelgen.WorldGenSettings(this.seed, !this.generateStructures, this.generateBonusChest, this.dimensions);
-    }
-
-    public net.minecraft.world.level.levelgen.WorldGenSettings withBonusChestToggled() {
-        return new net.minecraft.world.level.levelgen.WorldGenSettings(this.seed, this.generateStructures, !this.generateBonusChest, this.dimensions);
-    }
-
-    public net.minecraft.world.level.levelgen.WorldGenSettings withSeed(boolean hardcore, java.util.OptionalLong levelSeed) {
-        net.minecraft.core.Registry registry;
-        long l = levelSeed.orElse(this.seed);
-        if (levelSeed.isPresent()) {
-            net.minecraft.core.MappedRegistry mappedRegistry = new net.minecraft.core.MappedRegistry(net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, com.mojang.serialization.Lifecycle.experimental(), null);
-            for (java.util.Map$Entry entry : this.dimensions.entrySet()) {
-                net.minecraft.resources.ResourceKey resourceKey = (net.minecraft.resources.ResourceKey)entry.getKey();
-                mappedRegistry.register(resourceKey, (java.lang.Object)new net.minecraft.world.level.dimension.LevelStem(((net.minecraft.world.level.dimension.LevelStem)entry.getValue()).typeHolder(), ((net.minecraft.world.level.dimension.LevelStem)entry.getValue()).generator()), this.dimensions.lifecycle((java.lang.Object)((net.minecraft.world.level.dimension.LevelStem)entry.getValue())));
-            }
-            registry = mappedRegistry;
-        } else {
-            registry = this.dimensions;
-        }
-        net.minecraft.world.level.levelgen.WorldGenSettings worldGenSettings = this.isDebug() ? new net.minecraft.world.level.levelgen.WorldGenSettings(l, false, false, registry) : new net.minecraft.world.level.levelgen.WorldGenSettings(l, this.generateStructures(), this.generateBonusChest() && !hardcore, registry);
-        return worldGenSettings;
-    }
-
-    public static java.util.OptionalLong parseSeed(java.lang.String $$0) {
-        if (org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence)($$0 = $$0.trim()))) {
-            return java.util.OptionalLong.empty();
-        }
-        try {
-            return java.util.OptionalLong.of((long)java.lang.Long.parseLong((java.lang.String)$$0));
-        }
-        catch (java.lang.NumberFormatException $$1) {
-            return java.util.OptionalLong.of((long)$$0.hashCode());
-        }
-    }
-
-    public static /* synthetic */ com.mojang.datafixers.kinds.App lambda$static$1(com.mojang.serialization.codecs.RecordCodecBuilder$Instance $$02) {
-        return $$02.group((com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.LONG.fieldOf("seed").stable().forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::seed), (com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.BOOL.fieldOf("generate_features").orElse((java.lang.Object)true).stable().forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::generateStructures), (com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.BOOL.fieldOf("bonus_chest").orElse((java.lang.Object)false).stable().forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::generateBonusChest), (com.mojang.datafixers.kinds.App)net.minecraft.core.RegistryCodecs.dataPackAwareCodec((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, (com.mojang.serialization.Lifecycle)com.mojang.serialization.Lifecycle.stable(), (com.mojang.serialization.Codec)net.minecraft.world.level.dimension.LevelStem.CODEC).xmap(net.minecraft.world.level.dimension.LevelStem::sortMap, java.util.function.Function.identity()).fieldOf("dimensions").forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::dimensions), (com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter($$0 -> $$0.legacyCustomOptions)).apply((com.mojang.datafixers.kinds.Applicative)$$02, $$02.stable(net.minecraft.world.level.levelgen.WorldGenSettings::new));
-    }
-
     static {
-        CODEC = com.mojang.serialization.codecs.RecordCodecBuilder.create($$02 -> $$02.group((com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.LONG.fieldOf("seed").stable().forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::seed), (com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.BOOL.fieldOf("generate_features").orElse((java.lang.Object)true).stable().forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::generateStructures), (com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.BOOL.fieldOf("bonus_chest").orElse((java.lang.Object)false).stable().forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::generateBonusChest), (com.mojang.datafixers.kinds.App)net.minecraft.core.RegistryCodecs.dataPackAwareCodec((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.LEVEL_STEM_REGISTRY, (com.mojang.serialization.Lifecycle)com.mojang.serialization.Lifecycle.stable(), (com.mojang.serialization.Codec)net.minecraft.world.level.dimension.LevelStem.CODEC).xmap(net.minecraft.world.level.dimension.LevelStem::sortMap, java.util.function.Function.identity()).fieldOf("dimensions").forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::dimensions), (com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter($$0 -> $$0.legacyCustomOptions)).apply((com.mojang.datafixers.kinds.Applicative)$$02, $$02.stable(net.minecraft.world.level.levelgen.WorldGenSettings::new))).comapFlatMap(net.minecraft.world.level.levelgen.WorldGenSettings::guardExperimental, java.util.function.Function.identity());
+        CODEC = com.mojang.serialization.codecs.RecordCodecBuilder.create($$0 -> $$0.group((com.mojang.datafixers.kinds.App)net.minecraft.world.level.levelgen.WorldOptions.CODEC.forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::options), (com.mojang.datafixers.kinds.App)net.minecraft.world.level.levelgen.WorldDimensions.CODEC.forGetter(net.minecraft.world.level.levelgen.WorldGenSettings::dimensions)).apply((com.mojang.datafixers.kinds.Applicative)$$0, $$0.stable(net.minecraft.world.level.levelgen.WorldGenSettings::new)));
     }
 }
 