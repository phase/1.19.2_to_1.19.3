--- net/minecraft/world/level/levelgen/synth/SimplexNoise.java
+++ net/minecraft/world/level/levelgen/synth/SimplexNoise.java
@@ -30,145 +30,145 @@
         }
     }
 
-    public int p(int permutIndex) {
-        return this.p[permutIndex & 0xFF];
+    public int p(int $$0) {
+        return this.p[$$0 & 0xFF];
     }
 
-    public static double dot(int[] gradElement, double xFactor, double yFactor, double zFactor) {
-        return (double)gradElement[0] * xFactor + (double)gradElement[1] * yFactor + (double)gradElement[2] * zFactor;
+    public static double dot(int[] $$0, double $$1, double $$2, double $$3) {
+        return (double)$$0[0] * $$1 + (double)$$0[1] * $$2 + (double)$$0[2] * $$3;
     }
 
-    public double getCornerNoise3D(int gradIndex, double x, double y, double z, double offset) {
-        double d;
-        double d2 = offset - x * x - y * y - z * z;
-        if (d2 < 0.0) {
-            d = 0.0;
+    public double getCornerNoise3D(int $$0, double $$1, double $$2, double $$3, double $$4) {
+        double $$7;
+        double $$5 = $$4 - $$1 * $$1 - $$2 * $$2 - $$3 * $$3;
+        if ($$5 < 0.0) {
+            double $$6 = 0.0;
         } else {
-            d2 *= d2;
-            d = d2 * d2 * net.minecraft.world.level.levelgen.synth.SimplexNoise.dot((int[])GRADIENT[gradIndex], (double)x, (double)y, (double)z);
+            $$5 *= $$5;
+            $$7 = $$5 * $$5 * net.minecraft.world.level.levelgen.synth.SimplexNoise.dot((int[])GRADIENT[$$0], (double)$$1, (double)$$2, (double)$$3);
         }
-        return d;
+        return $$7;
     }
 
-    public double getValue(double x, double y) {
-        int n;
-        int n2;
-        double d;
-        double d2;
-        int n3;
-        double d3;
-        double d4 = (x + y) * F2;
-        int n4 = net.minecraft.util.Mth.floor((double)(x + d4));
-        double d5 = (double)n4 - (d3 = (double)(n4 + (n3 = net.minecraft.util.Mth.floor((double)(y + d4)))) * G2);
-        double d6 = x - d5;
-        if (d6 > (d2 = y - (d = (double)n3 - d3))) {
-            n2 = 1;
-            n = 0;
+    public double getValue(double $$0, double $$1) {
+        int $$13;
+        int $$12;
+        double $$7;
+        double $$9;
+        int $$4;
+        double $$5;
+        double $$2 = ($$0 + $$1) * F2;
+        int $$3 = net.minecraft.util.Mth.floor((double)($$0 + $$2));
+        double $$6 = (double)$$3 - ($$5 = (double)($$3 + ($$4 = net.minecraft.util.Mth.floor((double)($$1 + $$2)))) * G2);
+        double $$8 = $$0 - $$6;
+        if ($$8 > ($$9 = $$1 - ($$7 = (double)$$4 - $$5))) {
+            boolean $$10 = true;
+            boolean $$11 = false;
         } else {
-            n2 = 0;
-            n = 1;
+            $$12 = 0;
+            $$13 = 1;
         }
-        double d7 = d6 - (double)n2 + G2;
-        double d8 = d2 - (double)n + G2;
-        double d9 = d6 - 1.0 + 2.0 * G2;
-        double d10 = d2 - 1.0 + 2.0 * G2;
-        int n5 = n4 & 0xFF;
-        int n6 = n3 & 0xFF;
-        int n7 = this.p(n5 + this.p(n6)) % 12;
-        int n8 = this.p(n5 + n2 + this.p(n6 + n)) % 12;
-        int n9 = this.p(n5 + 1 + this.p(n6 + 1)) % 12;
-        double d11 = this.getCornerNoise3D(n7, d6, d2, 0.0, 0.5);
-        double d12 = this.getCornerNoise3D(n8, d7, d8, 0.0, 0.5);
-        double d13 = this.getCornerNoise3D(n9, d9, d10, 0.0, 0.5);
-        return 70.0 * (d11 + d12 + d13);
+        double $$14 = $$8 - (double)$$12 + G2;
+        double $$15 = $$9 - (double)$$13 + G2;
+        double $$16 = $$8 - 1.0 + 2.0 * G2;
+        double $$17 = $$9 - 1.0 + 2.0 * G2;
+        int $$18 = $$3 & 0xFF;
+        int $$19 = $$4 & 0xFF;
+        int $$20 = this.p($$18 + this.p($$19)) % 12;
+        int $$21 = this.p($$18 + $$12 + this.p($$19 + $$13)) % 12;
+        int $$22 = this.p($$18 + 1 + this.p($$19 + 1)) % 12;
+        double $$23 = this.getCornerNoise3D($$20, $$8, $$9, 0.0, 0.5);
+        double $$24 = this.getCornerNoise3D($$21, $$14, $$15, 0.0, 0.5);
+        double $$25 = this.getCornerNoise3D($$22, $$16, $$17, 0.0, 0.5);
+        return 70.0 * ($$23 + $$24 + $$25);
     }
 
-    public double getValue(double x, double y, double z) {
-        int n;
-        int n2;
-        int n3;
-        int n4;
-        int n5;
-        int n6;
-        double d = 0.3333333333333333;
-        double d2 = (x + y + z) * 0.3333333333333333;
-        int n7 = net.minecraft.util.Mth.floor((double)(x + d2));
-        int n8 = net.minecraft.util.Mth.floor((double)(y + d2));
-        int n9 = net.minecraft.util.Mth.floor((double)(z + d2));
-        double d3 = 0.16666666666666666;
-        double d4 = (double)(n7 + n8 + n9) * 0.16666666666666666;
-        double d5 = (double)n7 - d4;
-        double d6 = (double)n8 - d4;
-        double d7 = (double)n9 - d4;
-        double d8 = x - d5;
-        double d9 = y - d6;
-        double d10 = z - d7;
-        if (d8 >= d9) {
-            if (d9 >= d10) {
-                n6 = 1;
-                n5 = 0;
-                n4 = 0;
-                n3 = 1;
-                n2 = 1;
-                n = 0;
-            } else if (d8 >= d10) {
-                n6 = 1;
-                n5 = 0;
-                n4 = 0;
-                n3 = 1;
-                n2 = 0;
-                n = 1;
+    public double getValue(double $$0, double $$1, double $$2) {
+        int $$51;
+        int $$50;
+        int $$49;
+        int $$48;
+        int $$47;
+        int $$46;
+        double $$3 = 0.3333333333333333;
+        double $$4 = ($$0 + $$1 + $$2) * 0.3333333333333333;
+        int $$5 = net.minecraft.util.Mth.floor((double)($$0 + $$4));
+        int $$6 = net.minecraft.util.Mth.floor((double)($$1 + $$4));
+        int $$7 = net.minecraft.util.Mth.floor((double)($$2 + $$4));
+        double $$8 = 0.16666666666666666;
+        double $$9 = (double)($$5 + $$6 + $$7) * 0.16666666666666666;
+        double $$10 = (double)$$5 - $$9;
+        double $$11 = (double)$$6 - $$9;
+        double $$12 = (double)$$7 - $$9;
+        double $$13 = $$0 - $$10;
+        double $$14 = $$1 - $$11;
+        double $$15 = $$2 - $$12;
+        if ($$13 >= $$14) {
+            if ($$14 >= $$15) {
+                boolean $$16 = true;
+                boolean $$17 = false;
+                boolean $$18 = false;
+                boolean $$19 = true;
+                boolean $$20 = true;
+                boolean $$21 = false;
+            } else if ($$13 >= $$15) {
+                boolean $$22 = true;
+                boolean $$23 = false;
+                boolean $$24 = false;
+                boolean $$25 = true;
+                boolean $$26 = false;
+                boolean $$27 = true;
             } else {
-                n6 = 0;
-                n5 = 0;
-                n4 = 1;
-                n3 = 1;
-                n2 = 0;
-                n = 1;
+                boolean $$28 = false;
+                boolean $$29 = false;
+                boolean $$30 = true;
+                boolean $$31 = true;
+                boolean $$32 = false;
+                boolean $$33 = true;
             }
-        } else if (d9 < d10) {
-            n6 = 0;
-            n5 = 0;
-            n4 = 1;
-            n3 = 0;
-            n2 = 1;
-            n = 1;
-        } else if (d8 < d10) {
-            n6 = 0;
-            n5 = 1;
-            n4 = 0;
-            n3 = 0;
-            n2 = 1;
-            n = 1;
+        } else if ($$14 < $$15) {
+            boolean $$34 = false;
+            boolean $$35 = false;
+            boolean $$36 = true;
+            boolean $$37 = false;
+            boolean $$38 = true;
+            boolean $$39 = true;
+        } else if ($$13 < $$15) {
+            boolean $$40 = false;
+            boolean $$41 = true;
+            boolean $$42 = false;
+            boolean $$43 = false;
+            boolean $$44 = true;
+            boolean $$45 = true;
         } else {
-            n6 = 0;
-            n5 = 1;
-            n4 = 0;
-            n3 = 1;
-            n2 = 1;
-            n = 0;
+            $$46 = 0;
+            $$47 = 1;
+            $$48 = 0;
+            $$49 = 1;
+            $$50 = 1;
+            $$51 = 0;
         }
-        double d11 = d8 - (double)n6 + 0.16666666666666666;
-        double d12 = d9 - (double)n5 + 0.16666666666666666;
-        double d13 = d10 - (double)n4 + 0.16666666666666666;
-        double d14 = d8 - (double)n3 + 0.3333333333333333;
-        double d15 = d9 - (double)n2 + 0.3333333333333333;
-        double d16 = d10 - (double)n + 0.3333333333333333;
-        double d17 = d8 - 1.0 + 0.5;
-        double d18 = d9 - 1.0 + 0.5;
-        double d19 = d10 - 1.0 + 0.5;
-        int n10 = n7 & 0xFF;
-        int n11 = n8 & 0xFF;
-        int n12 = n9 & 0xFF;
-        int n13 = this.p(n10 + this.p(n11 + this.p(n12))) % 12;
-        int n14 = this.p(n10 + n6 + this.p(n11 + n5 + this.p(n12 + n4))) % 12;
-        int n15 = this.p(n10 + n3 + this.p(n11 + n2 + this.p(n12 + n))) % 12;
-        int n16 = this.p(n10 + 1 + this.p(n11 + 1 + this.p(n12 + 1))) % 12;
-        double d20 = this.getCornerNoise3D(n13, d8, d9, d10, 0.6);
-        double d21 = this.getCornerNoise3D(n14, d11, d12, d13, 0.6);
-        double d22 = this.getCornerNoise3D(n15, d14, d15, d16, 0.6);
-        double d23 = this.getCornerNoise3D(n16, d17, d18, d19, 0.6);
-        return 32.0 * (d20 + d21 + d22 + d23);
+        double $$52 = $$13 - (double)$$46 + 0.16666666666666666;
+        double $$53 = $$14 - (double)$$47 + 0.16666666666666666;
+        double $$54 = $$15 - (double)$$48 + 0.16666666666666666;
+        double $$55 = $$13 - (double)$$49 + 0.3333333333333333;
+        double $$56 = $$14 - (double)$$50 + 0.3333333333333333;
+        double $$57 = $$15 - (double)$$51 + 0.3333333333333333;
+        double $$58 = $$13 - 1.0 + 0.5;
+        double $$59 = $$14 - 1.0 + 0.5;
+        double $$60 = $$15 - 1.0 + 0.5;
+        int $$61 = $$5 & 0xFF;
+        int $$62 = $$6 & 0xFF;
+        int $$63 = $$7 & 0xFF;
+        int $$64 = this.p($$61 + this.p($$62 + this.p($$63))) % 12;
+        int $$65 = this.p($$61 + $$46 + this.p($$62 + $$47 + this.p($$63 + $$48))) % 12;
+        int $$66 = this.p($$61 + $$49 + this.p($$62 + $$50 + this.p($$63 + $$51))) % 12;
+        int $$67 = this.p($$61 + 1 + this.p($$62 + 1 + this.p($$63 + 1))) % 12;
+        double $$68 = this.getCornerNoise3D($$64, $$13, $$14, $$15, 0.6);
+        double $$69 = this.getCornerNoise3D($$65, $$52, $$53, $$54, 0.6);
+        double $$70 = this.getCornerNoise3D($$66, $$55, $$56, $$57, 0.6);
+        double $$71 = this.getCornerNoise3D($$67, $$58, $$59, $$60, 0.6);
+        return 32.0 * ($$68 + $$69 + $$70 + $$71);
     }
 
     static {