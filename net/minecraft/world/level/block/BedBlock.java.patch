--- net/minecraft/world/level/block/BedBlock.java
+++ net/minecraft/world/level/block/BedBlock.java
@@ -22,58 +22,58 @@
     public static net.minecraft.world.phys.shapes.VoxelShape EAST_SHAPE;
     public net.minecraft.world.item.DyeColor color;
 
-    public net.minecraft.world.level.block.BedBlock(net.minecraft.world.item.DyeColor color, net.minecraft.world.level.block.state.BlockBehaviour$Properties properties) {
-        super(properties);
-        this.color = color;
+    public net.minecraft.world.level.block.BedBlock(net.minecraft.world.item.DyeColor $$0, net.minecraft.world.level.block.state.BlockBehaviour$Properties $$1) {
+        super($$1);
+        this.color = $$0;
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)PART, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.BedPart.FOOT)).setValue((net.minecraft.world.level.block.state.properties.Property)OCCUPIED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false)));
     }
 
     @javax.annotation.Nullable
-    public static net.minecraft.core.Direction getBedOrientation(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(pos);
-        return blockState.getBlock() instanceof net.minecraft.world.level.block.BedBlock ? (net.minecraft.core.Direction)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) : null;
+    public static net.minecraft.core.Direction getBedOrientation(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1) {
+        net.minecraft.world.level.block.state.BlockState $$2 = $$0.getBlockState($$1);
+        return $$2.getBlock() instanceof net.minecraft.world.level.block.BedBlock ? (net.minecraft.core.Direction)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) : null;
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        if (level.isClientSide) {
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$12, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        if ($$12.isClientSide) {
             return net.minecraft.world.InteractionResult.CONSUME;
         }
-        if (state.getValue((net.minecraft.world.level.block.state.properties.Property)PART) != net.minecraft.world.level.block.state.properties.BedPart.HEAD && !(state = level.getBlockState(pos = pos.relative((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)))).is((net.minecraft.world.level.block.Block)this)) {
+        if ($$0.getValue((net.minecraft.world.level.block.state.properties.Property)PART) != net.minecraft.world.level.block.state.properties.BedPart.HEAD && !($$0 = $$12.getBlockState($$2 = $$2.relative((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)))).is((net.minecraft.world.level.block.Block)this)) {
             return net.minecraft.world.InteractionResult.CONSUME;
         }
-        if (!net.minecraft.world.level.block.BedBlock.canSetSpawn((net.minecraft.world.level.Level)level)) {
-            level.removeBlock(pos, false);
-            net.minecraft.core.BlockPos blockPos = pos.relative(((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite());
-            if (level.getBlockState(blockPos).is((net.minecraft.world.level.block.Block)this)) {
-                level.removeBlock(blockPos, false);
+        if (!net.minecraft.world.level.block.BedBlock.canSetSpawn((net.minecraft.world.level.Level)$$12)) {
+            $$12.removeBlock($$2, false);
+            net.minecraft.core.BlockPos $$6 = $$2.relative(((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite());
+            if ($$12.getBlockState($$6).is((net.minecraft.world.level.block.Block)this)) {
+                $$12.removeBlock($$6, false);
             }
-            level.explode(null, net.minecraft.world.damagesource.DamageSource.badRespawnPointExplosion(), null, (double)pos.getX() + 0.5, (double)pos.getY() + 0.5, (double)pos.getZ() + 0.5, 5.0f, true, net.minecraft.world.level.Explosion$BlockInteraction.DESTROY);
+            $$12.explode(null, net.minecraft.world.damagesource.DamageSource.badRespawnPointExplosion(), null, (double)$$2.getX() + 0.5, (double)$$2.getY() + 0.5, (double)$$2.getZ() + 0.5, 5.0f, true, net.minecraft.world.level.Explosion$BlockInteraction.DESTROY);
             return net.minecraft.world.InteractionResult.SUCCESS;
         }
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)OCCUPIED)).booleanValue()) {
-            if (!this.kickVillagerOutOfBed(level, pos)) {
-                player.displayClientMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"block.minecraft.bed.occupied"), true);
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)OCCUPIED)).booleanValue()) {
+            if (!this.kickVillagerOutOfBed($$12, $$2)) {
+                $$3.displayClientMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"block.minecraft.bed.occupied"), true);
             }
             return net.minecraft.world.InteractionResult.SUCCESS;
         }
-        player.startSleepInBed(pos).ifLeft($$1 -> {
+        $$3.startSleepInBed($$2).ifLeft($$1 -> {
             if ($$1.getMessage() != null) {
-                player.displayClientMessage($$1.getMessage(), true);
+                $$3.displayClientMessage($$1.getMessage(), true);
             }
         });
         return net.minecraft.world.InteractionResult.SUCCESS;
     }
 
-    public static boolean canSetSpawn(net.minecraft.world.level.Level level) {
-        return level.dimensionType().bedWorks();
+    public static boolean canSetSpawn(net.minecraft.world.level.Level $$0) {
+        return $$0.dimensionType().bedWorks();
     }
 
-    public boolean kickVillagerOutOfBed(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        java.util.List list = level.getEntitiesOfClass(net.minecraft.world.entity.npc.Villager.class, new net.minecraft.world.phys.AABB(pos), net.minecraft.world.entity.LivingEntity::isSleeping);
-        if (list.isEmpty()) {
+    public boolean kickVillagerOutOfBed(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1) {
+        java.util.List $$2 = $$0.getEntitiesOfClass(net.minecraft.world.entity.npc.Villager.class, new net.minecraft.world.phys.AABB($$1), net.minecraft.world.entity.LivingEntity::isSleeping);
+        if ($$2.isEmpty()) {
             return false;
         }
-        ((net.minecraft.world.entity.npc.Villager)list.get(0)).stopSleeping();
+        ((net.minecraft.world.entity.npc.Villager)$$2.get(0)).stopSleeping();
         return true;
     }
 
@@ -81,62 +81,62 @@
         super.fallOn($$0, $$1, $$2, $$3, $$4 * 0.5f);
     }
 
-    public void updateEntityAfterFallOn(net.minecraft.world.level.BlockGetter level, net.minecraft.world.entity.Entity entity) {
-        if (entity.isSuppressingBounce()) {
-            super.updateEntityAfterFallOn(level, entity);
+    public void updateEntityAfterFallOn(net.minecraft.world.level.BlockGetter $$0, net.minecraft.world.entity.Entity $$1) {
+        if ($$1.isSuppressingBounce()) {
+            super.updateEntityAfterFallOn($$0, $$1);
         } else {
-            this.bounceUp(entity);
+            this.bounceUp($$1);
         }
     }
 
-    public void bounceUp(net.minecraft.world.entity.Entity entity) {
-        net.minecraft.world.phys.Vec3 vec3 = entity.getDeltaMovement();
-        if (vec3.y < 0.0) {
-            double d = entity instanceof net.minecraft.world.entity.LivingEntity ? 1.0 : 0.8;
-            entity.setDeltaMovement(vec3.x, -vec3.y * (double)0.66f * d, vec3.z);
+    public void bounceUp(net.minecraft.world.entity.Entity $$0) {
+        net.minecraft.world.phys.Vec3 $$1 = $$0.getDeltaMovement();
+        if ($$1.y < 0.0) {
+            double $$2 = $$0 instanceof net.minecraft.world.entity.LivingEntity ? 1.0 : 0.8;
+            $$0.setDeltaMovement($$1.x, -$$1.y * (double)0.66f * $$2, $$1.z);
         }
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (facing == net.minecraft.world.level.block.BedBlock.getNeighbourDirection((net.minecraft.world.level.block.state.properties.BedPart)((net.minecraft.world.level.block.state.properties.BedPart)state.getValue((net.minecraft.world.level.block.state.properties.Property)PART)), (net.minecraft.core.Direction)((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)))) {
-            if (facingState.is((net.minecraft.world.level.block.Block)this) && facingState.getValue((net.minecraft.world.level.block.state.properties.Property)PART) != state.getValue((net.minecraft.world.level.block.state.properties.Property)PART)) {
-                return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)OCCUPIED, (java.lang.Comparable)((java.lang.Boolean)facingState.getValue((net.minecraft.world.level.block.state.properties.Property)OCCUPIED)));
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if ($$1 == net.minecraft.world.level.block.BedBlock.getNeighbourDirection((net.minecraft.world.level.block.state.properties.BedPart)((net.minecraft.world.level.block.state.properties.BedPart)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)PART)), (net.minecraft.core.Direction)((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)))) {
+            if ($$2.is((net.minecraft.world.level.block.Block)this) && $$2.getValue((net.minecraft.world.level.block.state.properties.Property)PART) != $$0.getValue((net.minecraft.world.level.block.state.properties.Property)PART)) {
+                return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)OCCUPIED, (java.lang.Comparable)((java.lang.Boolean)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)OCCUPIED)));
             }
             return net.minecraft.world.level.block.Blocks.AIR.defaultBlockState();
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public static net.minecraft.core.Direction getNeighbourDirection(net.minecraft.world.level.block.state.properties.BedPart part, net.minecraft.core.Direction direction) {
-        return part == net.minecraft.world.level.block.state.properties.BedPart.FOOT ? direction : direction.getOpposite();
+    public static net.minecraft.core.Direction getNeighbourDirection(net.minecraft.world.level.block.state.properties.BedPart $$0, net.minecraft.core.Direction $$1) {
+        return $$0 == net.minecraft.world.level.block.state.properties.BedPart.FOOT ? $$1 : $$1.getOpposite();
     }
 
-    public void playerWillDestroy(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.entity.player.Player player) {
-        net.minecraft.core.BlockPos blockPos;
-        net.minecraft.world.level.block.state.BlockState blockState;
-        net.minecraft.world.level.block.state.properties.BedPart bedPart;
-        if (!level.isClientSide && player.isCreative() && (bedPart = (net.minecraft.world.level.block.state.properties.BedPart)state.getValue((net.minecraft.world.level.block.state.properties.Property)PART)) == net.minecraft.world.level.block.state.properties.BedPart.FOOT && (blockState = level.getBlockState(blockPos = pos.relative(net.minecraft.world.level.block.BedBlock.getNeighbourDirection((net.minecraft.world.level.block.state.properties.BedPart)bedPart, (net.minecraft.core.Direction)((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)))))).is((net.minecraft.world.level.block.Block)this) && blockState.getValue((net.minecraft.world.level.block.state.properties.Property)PART) == net.minecraft.world.level.block.state.properties.BedPart.HEAD) {
-            level.setBlock(blockPos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), 35);
-            level.levelEvent(player, 2001, blockPos, net.minecraft.world.level.block.Block.getId((net.minecraft.world.level.block.state.BlockState)blockState));
+    public void playerWillDestroy(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.entity.player.Player $$3) {
+        net.minecraft.core.BlockPos $$5;
+        net.minecraft.world.level.block.state.BlockState $$6;
+        net.minecraft.world.level.block.state.properties.BedPart $$4;
+        if (!$$0.isClientSide && $$3.isCreative() && ($$4 = (net.minecraft.world.level.block.state.properties.BedPart)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)PART)) == net.minecraft.world.level.block.state.properties.BedPart.FOOT && ($$6 = $$0.getBlockState($$5 = $$1.relative(net.minecraft.world.level.block.BedBlock.getNeighbourDirection((net.minecraft.world.level.block.state.properties.BedPart)$$4, (net.minecraft.core.Direction)((net.minecraft.core.Direction)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)))))).is((net.minecraft.world.level.block.Block)this) && $$6.getValue((net.minecraft.world.level.block.state.properties.Property)PART) == net.minecraft.world.level.block.state.properties.BedPart.HEAD) {
+            $$0.setBlock($$5, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), 35);
+            $$0.levelEvent($$3, 2001, $$5, net.minecraft.world.level.block.Block.getId((net.minecraft.world.level.block.state.BlockState)$$6));
         }
-        super.playerWillDestroy(level, pos, state, player);
+        super.playerWillDestroy($$0, $$1, $$2, $$3);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        net.minecraft.core.Direction direction = context.getHorizontalDirection();
-        net.minecraft.core.BlockPos blockPos = context.getClickedPos();
-        net.minecraft.core.BlockPos blockPos2 = blockPos.relative(direction);
-        net.minecraft.world.level.Level level = context.getLevel();
-        if (level.getBlockState(blockPos2).canBeReplaced(context) && level.getWorldBorder().isWithinBounds(blockPos2)) {
-            return (net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)direction);
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        net.minecraft.core.Direction $$1 = $$0.getHorizontalDirection();
+        net.minecraft.core.BlockPos $$2 = $$0.getClickedPos();
+        net.minecraft.core.BlockPos $$3 = $$2.relative($$1);
+        net.minecraft.world.level.Level $$4 = $$0.getLevel();
+        if ($$4.getBlockState($$3).canBeReplaced($$0) && $$4.getWorldBorder().isWithinBounds($$3)) {
+            return (net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$1);
         }
         return null;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        net.minecraft.core.Direction direction = net.minecraft.world.level.block.BedBlock.getConnectedDirection((net.minecraft.world.level.block.state.BlockState)state).getOpposite();
-        switch (net.minecraft.world.level.block.BedBlock$1.$SwitchMap$net$minecraft$core$Direction[direction.ordinal()]) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        net.minecraft.core.Direction $$4 = net.minecraft.world.level.block.BedBlock.getConnectedDirection((net.minecraft.world.level.block.state.BlockState)$$0).getOpposite();
+        switch (net.minecraft.world.level.block.BedBlock$1.$SwitchMap$net$minecraft$core$Direction[$$4.ordinal()]) {
             case 1: {
                 return NORTH_SHAPE;
             }
@@ -150,37 +150,37 @@
         return EAST_SHAPE;
     }
 
-    public static net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.core.Direction direction = (net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
-        return state.getValue((net.minecraft.world.level.block.state.properties.Property)PART) == net.minecraft.world.level.block.state.properties.BedPart.HEAD ? direction.getOpposite() : direction;
+    public static net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState $$0) {
+        net.minecraft.core.Direction $$1 = (net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+        return $$0.getValue((net.minecraft.world.level.block.state.properties.Property)PART) == net.minecraft.world.level.block.state.properties.BedPart.HEAD ? $$1.getOpposite() : $$1;
     }
 
-    public static net.minecraft.world.level.block.DoubleBlockCombiner$BlockType getBlockType(net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.world.level.block.state.properties.BedPart bedPart = (net.minecraft.world.level.block.state.properties.BedPart)state.getValue((net.minecraft.world.level.block.state.properties.Property)PART);
-        if (bedPart == net.minecraft.world.level.block.state.properties.BedPart.HEAD) {
+    public static net.minecraft.world.level.block.DoubleBlockCombiner$BlockType getBlockType(net.minecraft.world.level.block.state.BlockState $$0) {
+        net.minecraft.world.level.block.state.properties.BedPart $$1 = (net.minecraft.world.level.block.state.properties.BedPart)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)PART);
+        if ($$1 == net.minecraft.world.level.block.state.properties.BedPart.HEAD) {
             return net.minecraft.world.level.block.DoubleBlockCombiner$BlockType.FIRST;
         }
         return net.minecraft.world.level.block.DoubleBlockCombiner$BlockType.SECOND;
     }
 
-    public static boolean isBunkBed(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
-        return level.getBlockState(pos.below()).getBlock() instanceof net.minecraft.world.level.block.BedBlock;
+    public static boolean isBunkBed(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1) {
+        return $$0.getBlockState($$1.below()).getBlock() instanceof net.minecraft.world.level.block.BedBlock;
     }
 
-    public static java.util.Optional<net.minecraft.world.phys.Vec3> findStandUpPosition(net.minecraft.world.entity.EntityType<?> entityType, net.minecraft.world.level.CollisionGetter level, net.minecraft.core.BlockPos pos, float f) {
-        net.minecraft.core.Direction direction;
-        net.minecraft.core.Direction direction2 = (net.minecraft.core.Direction)level.getBlockState(pos).getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
-        net.minecraft.core.Direction direction3 = direction2.getClockWise();
-        net.minecraft.core.Direction direction4 = direction = direction3.isFacingAngle(f) ? direction3.getOpposite() : direction3;
-        if (net.minecraft.world.level.block.BedBlock.isBunkBed((net.minecraft.world.level.BlockGetter)level, (net.minecraft.core.BlockPos)pos)) {
-            return net.minecraft.world.level.block.BedBlock.findBunkBedStandUpPosition(entityType, (net.minecraft.world.level.CollisionGetter)level, (net.minecraft.core.BlockPos)pos, (net.minecraft.core.Direction)direction2, (net.minecraft.core.Direction)direction);
+    public static java.util.Optional<net.minecraft.world.phys.Vec3> findStandUpPosition(net.minecraft.world.entity.EntityType<?> $$0, net.minecraft.world.level.CollisionGetter $$1, net.minecraft.core.BlockPos $$2, float $$3) {
+        net.minecraft.core.Direction $$6;
+        net.minecraft.core.Direction $$4 = (net.minecraft.core.Direction)$$1.getBlockState($$2).getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+        net.minecraft.core.Direction $$5 = $$4.getClockWise();
+        net.minecraft.core.Direction direction = $$6 = $$5.isFacingAngle($$3) ? $$5.getOpposite() : $$5;
+        if (net.minecraft.world.level.block.BedBlock.isBunkBed((net.minecraft.world.level.BlockGetter)$$1, (net.minecraft.core.BlockPos)$$2)) {
+            return net.minecraft.world.level.block.BedBlock.findBunkBedStandUpPosition($$0, (net.minecraft.world.level.CollisionGetter)$$1, (net.minecraft.core.BlockPos)$$2, (net.minecraft.core.Direction)$$4, (net.minecraft.core.Direction)$$6);
         }
-        int[][] nArray = net.minecraft.world.level.block.BedBlock.bedStandUpOffsets((net.minecraft.core.Direction)direction2, (net.minecraft.core.Direction)direction);
-        java.util.Optional optional = net.minecraft.world.level.block.BedBlock.findStandUpPositionAtOffset(entityType, (net.minecraft.world.level.CollisionGetter)level, (net.minecraft.core.BlockPos)pos, (int[][])nArray, (boolean)true);
-        if (optional.isPresent()) {
-            return optional;
+        int[][] $$7 = net.minecraft.world.level.block.BedBlock.bedStandUpOffsets((net.minecraft.core.Direction)$$4, (net.minecraft.core.Direction)$$6);
+        java.util.Optional $$8 = net.minecraft.world.level.block.BedBlock.findStandUpPositionAtOffset($$0, (net.minecraft.world.level.CollisionGetter)$$1, (net.minecraft.core.BlockPos)$$2, (int[][])$$7, (boolean)true);
+        if ($$8.isPresent()) {
+            return $$8;
         }
-        return net.minecraft.world.level.block.BedBlock.findStandUpPositionAtOffset(entityType, (net.minecraft.world.level.CollisionGetter)level, (net.minecraft.core.BlockPos)pos, (int[][])nArray, (boolean)false);
+        return net.minecraft.world.level.block.BedBlock.findStandUpPositionAtOffset($$0, (net.minecraft.world.level.CollisionGetter)$$1, (net.minecraft.core.BlockPos)$$2, (int[][])$$7, (boolean)false);
     }
 
     public static java.util.Optional<net.minecraft.world.phys.Vec3> findBunkBedStandUpPosition(net.minecraft.world.entity.EntityType<?> $$0, net.minecraft.world.level.CollisionGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.core.Direction $$3, net.minecraft.core.Direction $$4) {
@@ -221,29 +221,29 @@
         return java.util.Optional.empty();
     }
 
-    public net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState state) {
+    public net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState $$0) {
         return net.minecraft.world.level.material.PushReaction.DESTROY;
     }
 
-    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState state) {
+    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState $$0) {
         return net.minecraft.world.level.block.RenderShape.ENTITYBLOCK_ANIMATED;
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, PART, OCCUPIED});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, PART, OCCUPIED});
     }
 
     public net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.core.BlockPos $$0, net.minecraft.world.level.block.state.BlockState $$1) {
         return new net.minecraft.world.level.block.entity.BedBlockEntity($$0, $$1, this.color);
     }
 
-    public void setPlacedBy(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, @javax.annotation.Nullable net.minecraft.world.entity.LivingEntity placer, net.minecraft.world.item.ItemStack stack) {
-        super.setPlacedBy(level, pos, state, placer, stack);
-        if (!level.isClientSide) {
-            net.minecraft.core.BlockPos blockPos = pos.relative((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING));
-            level.setBlock(blockPos, (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)PART, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.BedPart.HEAD), 3);
-            level.blockUpdated(pos, net.minecraft.world.level.block.Blocks.AIR);
-            state.updateNeighbourShapes((net.minecraft.world.level.LevelAccessor)level, pos, 3);
+    public void setPlacedBy(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, @javax.annotation.Nullable net.minecraft.world.entity.LivingEntity $$3, net.minecraft.world.item.ItemStack $$4) {
+        super.setPlacedBy($$0, $$1, $$2, $$3, $$4);
+        if (!$$0.isClientSide) {
+            net.minecraft.core.BlockPos $$5 = $$1.relative((net.minecraft.core.Direction)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)FACING));
+            $$0.setBlock($$5, (net.minecraft.world.level.block.state.BlockState)$$2.setValue((net.minecraft.world.level.block.state.properties.Property)PART, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.BedPart.HEAD), 3);
+            $$0.blockUpdated($$1, net.minecraft.world.level.block.Blocks.AIR);
+            $$2.updateNeighbourShapes((net.minecraft.world.level.LevelAccessor)$$0, $$1, 3);
         }
     }
 
@@ -251,12 +251,12 @@
         return this.color;
     }
 
-    public long getSeed(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.BlockPos pos) {
-        net.minecraft.core.BlockPos blockPos = pos.relative((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING), state.getValue((net.minecraft.world.level.block.state.properties.Property)PART) == net.minecraft.world.level.block.state.properties.BedPart.HEAD ? 0 : 1);
-        return net.minecraft.util.Mth.getSeed((int)blockPos.getX(), (int)pos.getY(), (int)blockPos.getZ());
+    public long getSeed(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.BlockPos $$1) {
+        net.minecraft.core.BlockPos $$2 = $$1.relative((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING), $$0.getValue((net.minecraft.world.level.block.state.properties.Property)PART) == net.minecraft.world.level.block.state.properties.BedPart.HEAD ? 0 : 1);
+        return net.minecraft.util.Mth.getSeed((int)$$2.getX(), (int)$$1.getY(), (int)$$2.getZ());
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 