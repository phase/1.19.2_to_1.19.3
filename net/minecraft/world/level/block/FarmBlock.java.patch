--- net/minecraft/world/level/block/FarmBlock.java
+++ net/minecraft/world/level/block/FarmBlock.java
@@ -15,30 +15,30 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)MOISTURE, (java.lang.Comparable)java.lang.Integer.valueOf((int)0)));
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (facing == net.minecraft.core.Direction.UP && !state.canSurvive((net.minecraft.world.level.LevelReader)level, currentPos)) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.block.Block)this, 1);
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if ($$1 == net.minecraft.core.Direction.UP && !$$0.canSurvive((net.minecraft.world.level.LevelReader)$$3, $$4)) {
+            $$3.scheduleTick($$4, (net.minecraft.world.level.block.Block)this, 1);
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(pos.above());
-        return !blockState.getMaterial().isSolid() || blockState.getBlock() instanceof net.minecraft.world.level.block.FenceGateBlock || blockState.getBlock() instanceof net.minecraft.world.level.block.piston.MovingPistonBlock;
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
+        net.minecraft.world.level.block.state.BlockState $$3 = $$1.getBlockState($$2.above());
+        return !$$3.getMaterial().isSolid() || $$3.getBlock() instanceof net.minecraft.world.level.block.FenceGateBlock || $$3.getBlock() instanceof net.minecraft.world.level.block.piston.MovingPistonBlock;
     }
 
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        if (!this.defaultBlockState().canSurvive((net.minecraft.world.level.LevelReader)context.getLevel(), context.getClickedPos())) {
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        if (!this.defaultBlockState().canSurvive((net.minecraft.world.level.LevelReader)$$0.getLevel(), $$0.getClickedPos())) {
             return net.minecraft.world.level.block.Blocks.DIRT.defaultBlockState();
         }
-        return super.getStateForPlacement(context);
+        return super.getStateForPlacement($$0);
     }
 
-    public boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
         return SHAPE;
     }
 
@@ -68,28 +68,28 @@
         super.fallOn($$0, $$1, $$2, $$3, $$4);
     }
 
-    public static void turnToDirt(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        level.setBlockAndUpdate(pos, net.minecraft.world.level.block.FarmBlock.pushEntitiesUp((net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.level.block.state.BlockState)net.minecraft.world.level.block.Blocks.DIRT.defaultBlockState(), (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)pos));
+    public static void turnToDirt(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2) {
+        $$1.setBlockAndUpdate($$2, net.minecraft.world.level.block.FarmBlock.pushEntitiesUp((net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.level.block.state.BlockState)net.minecraft.world.level.block.Blocks.DIRT.defaultBlockState(), (net.minecraft.world.level.LevelAccessor)$$1, (net.minecraft.core.BlockPos)$$2));
     }
 
-    public static boolean isUnderCrops(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.block.Block block = level.getBlockState(pos.above()).getBlock();
-        return block instanceof net.minecraft.world.level.block.CropBlock || block instanceof net.minecraft.world.level.block.StemBlock || block instanceof net.minecraft.world.level.block.AttachedStemBlock;
+    public static boolean isUnderCrops(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1) {
+        net.minecraft.world.level.block.Block $$2 = $$0.getBlockState($$1.above()).getBlock();
+        return $$2 instanceof net.minecraft.world.level.block.CropBlock || $$2 instanceof net.minecraft.world.level.block.StemBlock || $$2 instanceof net.minecraft.world.level.block.AttachedStemBlock;
     }
 
-    public static boolean isNearWater(net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        for (net.minecraft.core.BlockPos blockPos : net.minecraft.core.BlockPos.betweenClosed((net.minecraft.core.BlockPos)pos.offset(-4, 0, -4), (net.minecraft.core.BlockPos)pos.offset(4, 1, 4))) {
-            if (!level.getFluidState(blockPos).is(net.minecraft.tags.FluidTags.WATER)) continue;
+    public static boolean isNearWater(net.minecraft.world.level.LevelReader $$0, net.minecraft.core.BlockPos $$1) {
+        for (net.minecraft.core.BlockPos $$2 : net.minecraft.core.BlockPos.betweenClosed((net.minecraft.core.BlockPos)$$1.offset(-4, 0, -4), (net.minecraft.core.BlockPos)$$1.offset(4, 1, 4))) {
+            if (!$$0.getFluidState($$2).is(net.minecraft.tags.FluidTags.WATER)) continue;
             return true;
         }
         return false;
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{MOISTURE});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{MOISTURE});
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 