--- net/minecraft/world/level/block/LiquidBlock.java
+++ net/minecraft/world/level/block/LiquidBlock.java
@@ -13,107 +13,107 @@
     public static net.minecraft.world.phys.shapes.VoxelShape STABLE_SHAPE;
     public static com.google.common.collect.ImmutableList<net.minecraft.core.Direction> POSSIBLE_FLOW_DIRECTIONS;
 
-    public net.minecraft.world.level.block.LiquidBlock(net.minecraft.world.level.material.FlowingFluid fluid, net.minecraft.world.level.block.state.BlockBehaviour$Properties properties) {
-        super(properties);
-        this.fluid = fluid;
+    public net.minecraft.world.level.block.LiquidBlock(net.minecraft.world.level.material.FlowingFluid $$0, net.minecraft.world.level.block.state.BlockBehaviour$Properties $$1) {
+        super($$1);
+        this.fluid = $$0;
         this.stateCache = com.google.common.collect.Lists.newArrayList();
-        this.stateCache.add((java.lang.Object)fluid.getSource(false));
-        for (int i = 1; i < 8; ++i) {
-            this.stateCache.add((java.lang.Object)fluid.getFlowing(8 - i, false));
+        this.stateCache.add((java.lang.Object)$$0.getSource(false));
+        for (int $$2 = 1; $$2 < 8; ++$$2) {
+            this.stateCache.add((java.lang.Object)$$0.getFlowing(8 - $$2, false));
         }
-        this.stateCache.add((java.lang.Object)fluid.getFlowing(8, true));
+        this.stateCache.add((java.lang.Object)$$0.getFlowing(8, true));
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)LEVEL, (java.lang.Comparable)java.lang.Integer.valueOf((int)0)));
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        if (context.isAbove(STABLE_SHAPE, pos, true) && (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL) == 0 && context.canStandOnFluid(level.getFluidState(pos.above()), state.getFluidState())) {
+    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        if ($$3.isAbove(STABLE_SHAPE, $$2, true) && (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL) == 0 && $$3.canStandOnFluid($$1.getFluidState($$2.above()), $$0.getFluidState())) {
             return STABLE_SHAPE;
         }
         return net.minecraft.world.phys.shapes.Shapes.empty();
     }
 
-    public boolean isRandomlyTicking(net.minecraft.world.level.block.state.BlockState state) {
-        return state.getFluidState().isRandomlyTicking();
+    public boolean isRandomlyTicking(net.minecraft.world.level.block.state.BlockState $$0) {
+        return $$0.getFluidState().isRandomlyTicking();
     }
 
     public void randomTick(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.server.level.ServerLevel $$1, net.minecraft.core.BlockPos $$2, net.minecraft.util.RandomSource $$3) {
         $$0.getFluidState().randomTick((net.minecraft.world.level.Level)$$1, $$2, $$3);
     }
 
-    public boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter reader, net.minecraft.core.BlockPos pos) {
+    public boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2) {
         return false;
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return !this.fluid.is(net.minecraft.tags.FluidTags.LAVA);
     }
 
-    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState state) {
-        int n = (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
-        return (net.minecraft.world.level.material.FluidState)this.stateCache.get(java.lang.Math.min((int)n, (int)8));
+    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState $$0) {
+        int $$1 = (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
+        return (net.minecraft.world.level.material.FluidState)this.stateCache.get(java.lang.Math.min((int)$$1, (int)8));
     }
 
-    public boolean skipRendering(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.state.BlockState adjacentBlockState, net.minecraft.core.Direction side) {
-        return adjacentBlockState.getFluidState().getType().isSame((net.minecraft.world.level.material.Fluid)this.fluid);
+    public boolean skipRendering(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.core.Direction $$2) {
+        return $$1.getFluidState().getType().isSame((net.minecraft.world.level.material.Fluid)this.fluid);
     }
 
-    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState state) {
+    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState $$0) {
         return net.minecraft.world.level.block.RenderShape.INVISIBLE;
     }
 
-    public java.util.List<net.minecraft.world.item.ItemStack> getDrops(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.storage.loot.LootContext$Builder builder) {
+    public java.util.List<net.minecraft.world.item.ItemStack> getDrops(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.storage.loot.LootContext$Builder $$1) {
         return java.util.Collections.emptyList();
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
         return net.minecraft.world.phys.shapes.Shapes.empty();
     }
 
-    public void onPlace(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState oldState, boolean isMoving) {
-        if (this.shouldSpreadLiquid(level, pos, state)) {
-            level.scheduleTick(pos, state.getFluidState().getType(), this.fluid.getTickDelay((net.minecraft.world.level.LevelReader)level));
+    public void onPlace(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if (this.shouldSpreadLiquid($$1, $$2, $$0)) {
+            $$1.scheduleTick($$2, $$0.getFluidState().getType(), this.fluid.getTickDelay((net.minecraft.world.level.LevelReader)$$1));
         }
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (state.getFluidState().isSource() || facingState.getFluidState().isSource()) {
-            level.scheduleTick(currentPos, state.getFluidState().getType(), this.fluid.getTickDelay((net.minecraft.world.level.LevelReader)level));
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if ($$0.getFluidState().isSource() || $$2.getFluidState().isSource()) {
+            $$3.scheduleTick($$4, $$0.getFluidState().getType(), this.fluid.getTickDelay((net.minecraft.world.level.LevelReader)$$3));
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public void neighborChanged(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.Block block, net.minecraft.core.BlockPos fromPos, boolean isMoving) {
-        if (this.shouldSpreadLiquid(level, pos, state)) {
-            level.scheduleTick(pos, state.getFluidState().getType(), this.fluid.getTickDelay((net.minecraft.world.level.LevelReader)level));
+    public void neighborChanged(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.Block $$3, net.minecraft.core.BlockPos $$4, boolean $$5) {
+        if (this.shouldSpreadLiquid($$1, $$2, $$0)) {
+            $$1.scheduleTick($$2, $$0.getFluidState().getType(), this.fluid.getTickDelay((net.minecraft.world.level.LevelReader)$$1));
         }
     }
 
-    public boolean shouldSpreadLiquid(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
+    public boolean shouldSpreadLiquid(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
         if (this.fluid.is(net.minecraft.tags.FluidTags.LAVA)) {
-            boolean bl = level.getBlockState(pos.below()).is(net.minecraft.world.level.block.Blocks.SOUL_SOIL);
-            for (net.minecraft.core.Direction direction : POSSIBLE_FLOW_DIRECTIONS) {
-                net.minecraft.core.BlockPos blockPos = pos.relative(direction.getOpposite());
-                if (level.getFluidState(blockPos).is(net.minecraft.tags.FluidTags.WATER)) {
-                    net.minecraft.world.level.block.Block block = level.getFluidState(pos).isSource() ? net.minecraft.world.level.block.Blocks.OBSIDIAN : net.minecraft.world.level.block.Blocks.COBBLESTONE;
-                    level.setBlockAndUpdate(pos, block.defaultBlockState());
-                    this.fizz((net.minecraft.world.level.LevelAccessor)level, pos);
+            boolean $$3 = $$0.getBlockState($$1.below()).is(net.minecraft.world.level.block.Blocks.SOUL_SOIL);
+            for (net.minecraft.core.Direction $$4 : POSSIBLE_FLOW_DIRECTIONS) {
+                net.minecraft.core.BlockPos $$5 = $$1.relative($$4.getOpposite());
+                if ($$0.getFluidState($$5).is(net.minecraft.tags.FluidTags.WATER)) {
+                    net.minecraft.world.level.block.Block $$6 = $$0.getFluidState($$1).isSource() ? net.minecraft.world.level.block.Blocks.OBSIDIAN : net.minecraft.world.level.block.Blocks.COBBLESTONE;
+                    $$0.setBlockAndUpdate($$1, $$6.defaultBlockState());
+                    this.fizz((net.minecraft.world.level.LevelAccessor)$$0, $$1);
                     return false;
                 }
-                if (!bl || !level.getBlockState(blockPos).is(net.minecraft.world.level.block.Blocks.BLUE_ICE)) continue;
-                level.setBlockAndUpdate(pos, net.minecraft.world.level.block.Blocks.BASALT.defaultBlockState());
-                this.fizz((net.minecraft.world.level.LevelAccessor)level, pos);
+                if (!$$3 || !$$0.getBlockState($$5).is(net.minecraft.world.level.block.Blocks.BLUE_ICE)) continue;
+                $$0.setBlockAndUpdate($$1, net.minecraft.world.level.block.Blocks.BASALT.defaultBlockState());
+                this.fizz((net.minecraft.world.level.LevelAccessor)$$0, $$1);
                 return false;
             }
         }
         return true;
     }
 
-    public void fizz(net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos) {
-        level.levelEvent(1501, pos, 0);
+    public void fizz(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1) {
+        $$0.levelEvent(1501, $$1, 0);
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{LEVEL});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{LEVEL});
     }
 
     public net.minecraft.world.item.ItemStack pickupBlock(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {