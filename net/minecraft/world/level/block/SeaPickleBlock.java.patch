--- net/minecraft/world/level/block/SeaPickleBlock.java
+++ net/minecraft/world/level/block/SeaPickleBlock.java
@@ -22,48 +22,48 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        net.minecraft.world.level.block.state.BlockState blockState = context.getLevel().getBlockState(context.getClickedPos());
-        if (blockState.is((net.minecraft.world.level.block.Block)this)) {
-            return (net.minecraft.world.level.block.state.BlockState)blockState.setValue((net.minecraft.world.level.block.state.properties.Property)PICKLES, (java.lang.Comparable)java.lang.Integer.valueOf((int)java.lang.Math.min((int)4, (int)((java.lang.Integer)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)PICKLES) + 1))));
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        net.minecraft.world.level.block.state.BlockState $$1 = $$0.getLevel().getBlockState($$0.getClickedPos());
+        if ($$1.is((net.minecraft.world.level.block.Block)this)) {
+            return (net.minecraft.world.level.block.state.BlockState)$$1.setValue((net.minecraft.world.level.block.state.properties.Property)PICKLES, (java.lang.Comparable)java.lang.Integer.valueOf((int)java.lang.Math.min((int)4, (int)((java.lang.Integer)$$1.getValue((net.minecraft.world.level.block.state.properties.Property)PICKLES) + 1))));
         }
-        net.minecraft.world.level.material.FluidState fluidState = context.getLevel().getFluidState(context.getClickedPos());
-        boolean bl = fluidState.getType() == net.minecraft.world.level.material.Fluids.WATER;
-        return (net.minecraft.world.level.block.state.BlockState)super.getStateForPlacement(context).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)bl));
+        net.minecraft.world.level.material.FluidState $$2 = $$0.getLevel().getFluidState($$0.getClickedPos());
+        boolean $$3 = $$2.getType() == net.minecraft.world.level.material.Fluids.WATER;
+        return (net.minecraft.world.level.block.state.BlockState)super.getStateForPlacement($$0).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)$$3));
     }
 
-    public static boolean isDead(net.minecraft.world.level.block.state.BlockState state) {
-        return (java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED) == false;
+    public static boolean isDead(net.minecraft.world.level.block.state.BlockState $$0) {
+        return (java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED) == false;
     }
 
-    public boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
-        return !state.getCollisionShape(level, pos).getFaceShape(net.minecraft.core.Direction.UP).isEmpty() || state.isFaceSturdy(level, pos, net.minecraft.core.Direction.UP);
+    public boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2) {
+        return !$$0.getCollisionShape($$1, $$2).getFaceShape(net.minecraft.core.Direction.UP).isEmpty() || $$0.isFaceSturdy($$1, $$2, net.minecraft.core.Direction.UP);
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.core.BlockPos blockPos = pos.below();
-        return this.mayPlaceOn(level.getBlockState(blockPos), (net.minecraft.world.level.BlockGetter)level, blockPos);
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
+        net.minecraft.core.BlockPos $$3 = $$2.below();
+        return this.mayPlaceOn($$1.getBlockState($$3), (net.minecraft.world.level.BlockGetter)$$1, $$3);
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (!state.canSurvive((net.minecraft.world.level.LevelReader)level, currentPos)) {
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if (!$$0.canSurvive((net.minecraft.world.level.LevelReader)$$3, $$4)) {
             return net.minecraft.world.level.block.Blocks.AIR.defaultBlockState();
         }
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)level));
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
+            $$3.scheduleTick($$4, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)$$3));
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.item.context.BlockPlaceContext useContext) {
-        if (!useContext.isSecondaryUseActive() && useContext.getItemInHand().is(this.asItem()) && (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)PICKLES) < 4) {
+    public boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.item.context.BlockPlaceContext $$1) {
+        if (!$$1.isSecondaryUseActive() && $$1.getItemInHand().is(this.asItem()) && (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)PICKLES) < 4) {
             return true;
         }
-        return super.canBeReplaced(state, useContext);
+        return super.canBeReplaced($$0, $$1);
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        switch ((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)PICKLES)) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        switch ((java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)PICKLES)) {
             default: {
                 return ONE_AABB;
             }
@@ -78,18 +78,18 @@
         return FOUR_AABB;
     }
 
-    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState state) {
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
+    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState $$0) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
             return net.minecraft.world.level.material.Fluids.WATER.getSource(false);
         }
-        return super.getFluidState(state);
+        return super.getFluidState($$0);
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{PICKLES, WATERLOGGED});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{PICKLES, WATERLOGGED});
     }
 
-    public boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, boolean isClient) {
+    public boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, boolean $$3) {
         return true;
     }
 
@@ -128,7 +128,7 @@
         }
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 