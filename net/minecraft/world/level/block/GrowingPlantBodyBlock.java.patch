--- net/minecraft/world/level/block/GrowingPlantBodyBlock.java
+++ net/minecraft/world/level/block/GrowingPlantBodyBlock.java
@@ -15,27 +15,27 @@
         return $$1;
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (facing == this.growthDirection.getOpposite() && !state.canSurvive((net.minecraft.world.level.LevelReader)level, currentPos)) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.block.Block)this, 1);
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if ($$1 == this.growthDirection.getOpposite() && !$$0.canSurvive((net.minecraft.world.level.LevelReader)$$3, $$4)) {
+            $$3.scheduleTick($$4, (net.minecraft.world.level.block.Block)this, 1);
         }
-        net.minecraft.world.level.block.GrowingPlantHeadBlock growingPlantHeadBlock = this.getHeadBlock();
-        if (facing == this.growthDirection && !facingState.is((net.minecraft.world.level.block.Block)this) && !facingState.is((net.minecraft.world.level.block.Block)growingPlantHeadBlock)) {
-            return this.updateHeadAfterConvertedFromBody(state, growingPlantHeadBlock.getStateForPlacement(level));
+        net.minecraft.world.level.block.GrowingPlantHeadBlock $$6 = this.getHeadBlock();
+        if ($$1 == this.growthDirection && !$$2.is((net.minecraft.world.level.block.Block)this) && !$$2.is((net.minecraft.world.level.block.Block)$$6)) {
+            return this.updateHeadAfterConvertedFromBody($$0, $$6.getStateForPlacement($$3));
         }
         if (this.scheduleFluidTicks) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)level));
+            $$3.scheduleTick($$4, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)$$3));
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
+    public net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
         return new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)this.getHeadBlock());
     }
 
-    public boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, boolean isClient) {
-        java.util.Optional optional = this.getHeadPos(level, pos, state.getBlock());
-        return optional.isPresent() && this.getHeadBlock().canGrowInto(level.getBlockState(((net.minecraft.core.BlockPos)optional.get()).relative(this.growthDirection)));
+    public boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, boolean $$3) {
+        java.util.Optional $$4 = this.getHeadPos($$0, $$1, $$2.getBlock());
+        return $$4.isPresent() && this.getHeadBlock().canGrowInto($$0.getBlockState(((net.minecraft.core.BlockPos)$$4.get()).relative(this.growthDirection)));
     }
 
     public boolean isBonemealSuccess(net.minecraft.world.level.Level $$0, net.minecraft.util.RandomSource $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3) {
@@ -54,12 +54,12 @@
         return net.minecraft.BlockUtil.getTopConnectedBlock((net.minecraft.world.level.BlockGetter)$$0, (net.minecraft.core.BlockPos)$$1, (net.minecraft.world.level.block.Block)$$2, (net.minecraft.core.Direction)this.growthDirection, (net.minecraft.world.level.block.Block)this.getHeadBlock());
     }
 
-    public boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.item.context.BlockPlaceContext useContext) {
-        boolean bl = super.canBeReplaced(state, useContext);
-        if (bl && useContext.getItemInHand().is(this.getHeadBlock().asItem())) {
+    public boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.item.context.BlockPlaceContext $$1) {
+        boolean $$2 = super.canBeReplaced($$0, $$1);
+        if ($$2 && $$1.getItemInHand().is(this.getHeadBlock().asItem())) {
             return false;
         }
-        return bl;
+        return $$2;
     }
 
     public net.minecraft.world.level.block.Block getBodyBlock() {