--- net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -17,75 +17,75 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)CHARGE, (java.lang.Comparable)java.lang.Integer.valueOf((int)0)));
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        net.minecraft.world.item.ItemStack itemStack = player.getItemInHand(hand);
-        if (hand == net.minecraft.world.InteractionHand.MAIN_HAND && !net.minecraft.world.level.block.RespawnAnchorBlock.isRespawnFuel((net.minecraft.world.item.ItemStack)itemStack) && net.minecraft.world.level.block.RespawnAnchorBlock.isRespawnFuel((net.minecraft.world.item.ItemStack)player.getItemInHand(net.minecraft.world.InteractionHand.OFF_HAND))) {
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        net.minecraft.world.item.ItemStack $$6 = $$3.getItemInHand($$4);
+        if ($$4 == net.minecraft.world.InteractionHand.MAIN_HAND && !net.minecraft.world.level.block.RespawnAnchorBlock.isRespawnFuel((net.minecraft.world.item.ItemStack)$$6) && net.minecraft.world.level.block.RespawnAnchorBlock.isRespawnFuel((net.minecraft.world.item.ItemStack)$$3.getItemInHand(net.minecraft.world.InteractionHand.OFF_HAND))) {
             return net.minecraft.world.InteractionResult.PASS;
         }
-        if (net.minecraft.world.level.block.RespawnAnchorBlock.isRespawnFuel((net.minecraft.world.item.ItemStack)itemStack) && net.minecraft.world.level.block.RespawnAnchorBlock.canBeCharged((net.minecraft.world.level.block.state.BlockState)state)) {
-            net.minecraft.world.level.block.RespawnAnchorBlock.charge((net.minecraft.world.level.Level)level, (net.minecraft.core.BlockPos)pos, (net.minecraft.world.level.block.state.BlockState)state);
-            if (!player.getAbilities().instabuild) {
-                itemStack.shrink(1);
+        if (net.minecraft.world.level.block.RespawnAnchorBlock.isRespawnFuel((net.minecraft.world.item.ItemStack)$$6) && net.minecraft.world.level.block.RespawnAnchorBlock.canBeCharged((net.minecraft.world.level.block.state.BlockState)$$0)) {
+            net.minecraft.world.level.block.RespawnAnchorBlock.charge((net.minecraft.world.level.Level)$$1, (net.minecraft.core.BlockPos)$$2, (net.minecraft.world.level.block.state.BlockState)$$0);
+            if (!$$3.getAbilities().instabuild) {
+                $$6.shrink(1);
             }
-            return net.minecraft.world.InteractionResult.sidedSuccess((boolean)level.isClientSide);
+            return net.minecraft.world.InteractionResult.sidedSuccess((boolean)$$1.isClientSide);
         }
-        if ((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)CHARGE) == 0) {
+        if ((java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)CHARGE) == 0) {
             return net.minecraft.world.InteractionResult.PASS;
         }
-        if (net.minecraft.world.level.block.RespawnAnchorBlock.canSetSpawn((net.minecraft.world.level.Level)level)) {
-            net.minecraft.server.level.ServerPlayer serverPlayer;
-            if (!(level.isClientSide || (serverPlayer = (net.minecraft.server.level.ServerPlayer)player).getRespawnDimension() == level.dimension() && pos.equals((java.lang.Object)serverPlayer.getRespawnPosition()))) {
-                serverPlayer.setRespawnPosition(level.dimension(), pos, 0.0f, false, true);
-                level.playSound(null, (double)pos.getX() + 0.5, (double)pos.getY() + 0.5, (double)pos.getZ() + 0.5, net.minecraft.sounds.SoundEvents.RESPAWN_ANCHOR_SET_SPAWN, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f);
+        if (net.minecraft.world.level.block.RespawnAnchorBlock.canSetSpawn((net.minecraft.world.level.Level)$$1)) {
+            net.minecraft.server.level.ServerPlayer $$7;
+            if (!($$1.isClientSide || ($$7 = (net.minecraft.server.level.ServerPlayer)$$3).getRespawnDimension() == $$1.dimension() && $$2.equals((java.lang.Object)$$7.getRespawnPosition()))) {
+                $$7.setRespawnPosition($$1.dimension(), $$2, 0.0f, false, true);
+                $$1.playSound(null, (double)$$2.getX() + 0.5, (double)$$2.getY() + 0.5, (double)$$2.getZ() + 0.5, net.minecraft.sounds.SoundEvents.RESPAWN_ANCHOR_SET_SPAWN, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f);
                 return net.minecraft.world.InteractionResult.SUCCESS;
             }
             return net.minecraft.world.InteractionResult.CONSUME;
         }
-        if (!level.isClientSide) {
-            this.explode(state, level, pos);
+        if (!$$1.isClientSide) {
+            this.explode($$0, $$1, $$2);
         }
-        return net.minecraft.world.InteractionResult.sidedSuccess((boolean)level.isClientSide);
+        return net.minecraft.world.InteractionResult.sidedSuccess((boolean)$$1.isClientSide);
     }
 
-    public static boolean isRespawnFuel(net.minecraft.world.item.ItemStack stack) {
-        return stack.is(net.minecraft.world.item.Items.GLOWSTONE);
+    public static boolean isRespawnFuel(net.minecraft.world.item.ItemStack $$0) {
+        return $$0.is(net.minecraft.world.item.Items.GLOWSTONE);
     }
 
-    public static boolean canBeCharged(net.minecraft.world.level.block.state.BlockState state) {
-        return (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)CHARGE) < 4;
+    public static boolean canBeCharged(net.minecraft.world.level.block.state.BlockState $$0) {
+        return (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)CHARGE) < 4;
     }
 
-    public static boolean isWaterThatWouldFlow(net.minecraft.core.BlockPos pos, net.minecraft.world.level.Level level) {
-        net.minecraft.world.level.material.FluidState fluidState = level.getFluidState(pos);
-        if (!fluidState.is(net.minecraft.tags.FluidTags.WATER)) {
+    public static boolean isWaterThatWouldFlow(net.minecraft.core.BlockPos $$0, net.minecraft.world.level.Level $$1) {
+        net.minecraft.world.level.material.FluidState $$2 = $$1.getFluidState($$0);
+        if (!$$2.is(net.minecraft.tags.FluidTags.WATER)) {
             return false;
         }
-        if (fluidState.isSource()) {
+        if ($$2.isSource()) {
             return true;
         }
-        float f = fluidState.getAmount();
-        if (f < 2.0f) {
+        float $$3 = $$2.getAmount();
+        if ($$3 < 2.0f) {
             return false;
         }
-        net.minecraft.world.level.material.FluidState fluidState2 = level.getFluidState(pos.below());
-        return !fluidState2.is(net.minecraft.tags.FluidTags.WATER);
+        net.minecraft.world.level.material.FluidState $$4 = $$1.getFluidState($$0.below());
+        return !$$4.is(net.minecraft.tags.FluidTags.WATER);
     }
 
-    public void explode(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos2) {
-        level.removeBlock(pos2, false);
-        boolean bl = net.minecraft.core.Direction$Plane.HORIZONTAL.stream().map(arg_0 -> ((net.minecraft.core.BlockPos)pos2).relative(arg_0)).anyMatch($$1 -> net.minecraft.world.level.block.RespawnAnchorBlock.isWaterThatWouldFlow((net.minecraft.core.BlockPos)$$1, (net.minecraft.world.level.Level)level));
-        boolean bl2 = bl || level.getFluidState(pos2.above()).is(net.minecraft.tags.FluidTags.WATER);
-        net.minecraft.world.level.block.RespawnAnchorBlock$1 var6_6 = new /* Unavailable Anonymous Inner Class!! */;
-        level.explode(null, net.minecraft.world.damagesource.DamageSource.badRespawnPointExplosion(), (net.minecraft.world.level.ExplosionDamageCalculator)var6_6, (double)pos2.getX() + 0.5, (double)pos2.getY() + 0.5, (double)pos2.getZ() + 0.5, 5.0f, true, net.minecraft.world.level.Explosion$BlockInteraction.DESTROY);
+    public void explode(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$12, net.minecraft.core.BlockPos $$2) {
+        $$12.removeBlock($$2, false);
+        boolean $$3 = net.minecraft.core.Direction$Plane.HORIZONTAL.stream().map(arg_0 -> ((net.minecraft.core.BlockPos)$$2).relative(arg_0)).anyMatch($$1 -> net.minecraft.world.level.block.RespawnAnchorBlock.isWaterThatWouldFlow((net.minecraft.core.BlockPos)$$1, (net.minecraft.world.level.Level)$$12));
+        boolean $$4 = $$3 || $$12.getFluidState($$2.above()).is(net.minecraft.tags.FluidTags.WATER);
+        net.minecraft.world.level.block.RespawnAnchorBlock$1 $$5 = new /* Unavailable Anonymous Inner Class!! */;
+        $$12.explode(null, net.minecraft.world.damagesource.DamageSource.badRespawnPointExplosion(), (net.minecraft.world.level.ExplosionDamageCalculator)$$5, (double)$$2.getX() + 0.5, (double)$$2.getY() + 0.5, (double)$$2.getZ() + 0.5, 5.0f, true, net.minecraft.world.level.Explosion$BlockInteraction.DESTROY);
     }
 
-    public static boolean canSetSpawn(net.minecraft.world.level.Level level) {
-        return level.dimensionType().respawnAnchorWorks();
+    public static boolean canSetSpawn(net.minecraft.world.level.Level $$0) {
+        return $$0.dimensionType().respawnAnchorWorks();
     }
 
-    public static void charge(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
-        level.setBlock(pos, (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)CHARGE, (java.lang.Comparable)java.lang.Integer.valueOf((int)((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)CHARGE) + 1))), 3);
-        level.playSound(null, (double)pos.getX() + 0.5, (double)pos.getY() + 0.5, (double)pos.getZ() + 0.5, net.minecraft.sounds.SoundEvents.RESPAWN_ANCHOR_CHARGE, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f);
+    public static void charge(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
+        $$0.setBlock($$1, (net.minecraft.world.level.block.state.BlockState)$$2.setValue((net.minecraft.world.level.block.state.properties.Property)CHARGE, (java.lang.Comparable)java.lang.Integer.valueOf((int)((java.lang.Integer)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)CHARGE) + 1))), 3);
+        $$0.playSound(null, (double)$$1.getX() + 0.5, (double)$$1.getY() + 0.5, (double)$$1.getZ() + 0.5, net.minecraft.sounds.SoundEvents.RESPAWN_ANCHOR_CHARGE, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f);
     }
 
     public void animateTick(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.util.RandomSource $$3) {
@@ -102,42 +102,42 @@
         $$1.addParticle((net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.REVERSE_PORTAL, $$4, $$5, $$6, 0.0, $$7, 0.0);
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{CHARGE});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{CHARGE});
     }
 
-    public boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
-    public static int getScaledChargeLevel(net.minecraft.world.level.block.state.BlockState state, int scale) {
-        return net.minecraft.util.Mth.floor((float)((float)((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)CHARGE) - 0) / 4.0f * (float)scale));
+    public static int getScaledChargeLevel(net.minecraft.world.level.block.state.BlockState $$0, int $$1) {
+        return net.minecraft.util.Mth.floor((float)((float)((java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)CHARGE) - 0) / 4.0f * (float)$$1));
     }
 
-    public int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        return net.minecraft.world.level.block.RespawnAnchorBlock.getScaledChargeLevel((net.minecraft.world.level.block.state.BlockState)blockState, (int)15);
+    public int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2) {
+        return net.minecraft.world.level.block.RespawnAnchorBlock.getScaledChargeLevel((net.minecraft.world.level.block.state.BlockState)$$0, (int)15);
     }
 
-    public static java.util.Optional<net.minecraft.world.phys.Vec3> findStandUpPosition(net.minecraft.world.entity.EntityType<?> entityType, net.minecraft.world.level.CollisionGetter level, net.minecraft.core.BlockPos pos) {
-        java.util.Optional optional = net.minecraft.world.level.block.RespawnAnchorBlock.findStandUpPosition(entityType, (net.minecraft.world.level.CollisionGetter)level, (net.minecraft.core.BlockPos)pos, (boolean)true);
-        if (optional.isPresent()) {
-            return optional;
+    public static java.util.Optional<net.minecraft.world.phys.Vec3> findStandUpPosition(net.minecraft.world.entity.EntityType<?> $$0, net.minecraft.world.level.CollisionGetter $$1, net.minecraft.core.BlockPos $$2) {
+        java.util.Optional $$3 = net.minecraft.world.level.block.RespawnAnchorBlock.findStandUpPosition($$0, (net.minecraft.world.level.CollisionGetter)$$1, (net.minecraft.core.BlockPos)$$2, (boolean)true);
+        if ($$3.isPresent()) {
+            return $$3;
         }
-        return net.minecraft.world.level.block.RespawnAnchorBlock.findStandUpPosition(entityType, (net.minecraft.world.level.CollisionGetter)level, (net.minecraft.core.BlockPos)pos, (boolean)false);
+        return net.minecraft.world.level.block.RespawnAnchorBlock.findStandUpPosition($$0, (net.minecraft.world.level.CollisionGetter)$$1, (net.minecraft.core.BlockPos)$$2, (boolean)false);
     }
 
-    public static java.util.Optional<net.minecraft.world.phys.Vec3> findStandUpPosition(net.minecraft.world.entity.EntityType<?> entityType, net.minecraft.world.level.CollisionGetter level, net.minecraft.core.BlockPos pos, boolean bl) {
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos = new net.minecraft.core.BlockPos$MutableBlockPos();
-        for (net.minecraft.core.Vec3i vec3i : RESPAWN_OFFSETS) {
-            mutableBlockPos.set((net.minecraft.core.Vec3i)pos).move(vec3i);
-            net.minecraft.world.phys.Vec3 vec3 = net.minecraft.world.entity.vehicle.DismountHelper.findSafeDismountLocation(entityType, (net.minecraft.world.level.CollisionGetter)level, (net.minecraft.core.BlockPos)mutableBlockPos, (boolean)bl);
-            if (vec3 == null) continue;
-            return java.util.Optional.of((java.lang.Object)vec3);
+    public static java.util.Optional<net.minecraft.world.phys.Vec3> findStandUpPosition(net.minecraft.world.entity.EntityType<?> $$0, net.minecraft.world.level.CollisionGetter $$1, net.minecraft.core.BlockPos $$2, boolean $$3) {
+        net.minecraft.core.BlockPos$MutableBlockPos $$4 = new net.minecraft.core.BlockPos$MutableBlockPos();
+        for (net.minecraft.core.Vec3i $$5 : RESPAWN_OFFSETS) {
+            $$4.set((net.minecraft.core.Vec3i)$$2).move($$5);
+            net.minecraft.world.phys.Vec3 $$6 = net.minecraft.world.entity.vehicle.DismountHelper.findSafeDismountLocation($$0, (net.minecraft.world.level.CollisionGetter)$$1, (net.minecraft.core.BlockPos)$$4, (boolean)$$3);
+            if ($$6 == null) continue;
+            return java.util.Optional.of((java.lang.Object)$$6);
         }
         return java.util.Optional.empty();
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 