--- net/minecraft/world/level/block/AnvilBlock.java
+++ net/minecraft/world/level/block/AnvilBlock.java
@@ -25,34 +25,34 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)net.minecraft.core.Direction.NORTH));
     }
 
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        return (net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)context.getHorizontalDirection().getClockWise());
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        return (net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$0.getHorizontalDirection().getClockWise());
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        if (level.isClientSide) {
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        if ($$1.isClientSide) {
             return net.minecraft.world.InteractionResult.SUCCESS;
         }
-        player.openMenu(state.getMenuProvider(level, pos));
-        player.awardStat(net.minecraft.stats.Stats.INTERACT_WITH_ANVIL);
+        $$3.openMenu($$0.getMenuProvider($$1, $$2));
+        $$3.awardStat(net.minecraft.stats.Stats.INTERACT_WITH_ANVIL);
         return net.minecraft.world.InteractionResult.CONSUME;
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        return new net.minecraft.world.SimpleMenuProvider(($$2, $$3, $$4) -> new net.minecraft.world.inventory.AnvilMenu($$2, $$3, net.minecraft.world.inventory.ContainerLevelAccess.create((net.minecraft.world.level.Level)level, (net.minecraft.core.BlockPos)pos)), CONTAINER_TITLE);
+    public net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$22) {
+        return new net.minecraft.world.SimpleMenuProvider(($$2, $$3, $$4) -> new net.minecraft.world.inventory.AnvilMenu($$2, $$3, net.minecraft.world.inventory.ContainerLevelAccess.create((net.minecraft.world.level.Level)$$1, (net.minecraft.core.BlockPos)$$22)), CONTAINER_TITLE);
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        net.minecraft.core.Direction direction = (net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
-        if (direction.getAxis() == net.minecraft.core.Direction$Axis.X) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        net.minecraft.core.Direction $$4 = (net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+        if ($$4.getAxis() == net.minecraft.core.Direction$Axis.X) {
             return X_AXIS_AABB;
         }
         return Z_AXIS_AABB;
     }
 
-    public void falling(net.minecraft.world.entity.item.FallingBlockEntity fallingEntity) {
-        fallingEntity.setHurtsEntities(2.0f, 40);
+    public void falling(net.minecraft.world.entity.item.FallingBlockEntity $$0) {
+        $$0.setHurtsEntities(2.0f, 40);
     }
 
     public void onLand(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.block.state.BlockState $$3, net.minecraft.world.entity.item.FallingBlockEntity $$4) {
@@ -72,30 +72,30 @@
     }
 
     @javax.annotation.Nullable
-    public static net.minecraft.world.level.block.state.BlockState damage(net.minecraft.world.level.block.state.BlockState state) {
-        if (state.is(net.minecraft.world.level.block.Blocks.ANVIL)) {
-            return (net.minecraft.world.level.block.state.BlockState)net.minecraft.world.level.block.Blocks.CHIPPED_ANVIL.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public static net.minecraft.world.level.block.state.BlockState damage(net.minecraft.world.level.block.state.BlockState $$0) {
+        if ($$0.is(net.minecraft.world.level.block.Blocks.ANVIL)) {
+            return (net.minecraft.world.level.block.state.BlockState)net.minecraft.world.level.block.Blocks.CHIPPED_ANVIL.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
         }
-        if (state.is(net.minecraft.world.level.block.Blocks.CHIPPED_ANVIL)) {
-            return (net.minecraft.world.level.block.state.BlockState)net.minecraft.world.level.block.Blocks.DAMAGED_ANVIL.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+        if ($$0.is(net.minecraft.world.level.block.Blocks.CHIPPED_ANVIL)) {
+            return (net.minecraft.world.level.block.state.BlockState)net.minecraft.world.level.block.Blocks.DAMAGED_ANVIL.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
         }
         return null;
     }
 
-    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Rotation rot) {
-        return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)rot.rotate((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Rotation $$1) {
+        return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$1.rotate((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING});
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 
-    public int getDustColor(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter reader, net.minecraft.core.BlockPos pos) {
-        return state.getMapColor((net.minecraft.world.level.BlockGetter)reader, (net.minecraft.core.BlockPos)pos).col;
+    public int getDustColor(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2) {
+        return $$0.getMapColor((net.minecraft.world.level.BlockGetter)$$1, (net.minecraft.core.BlockPos)$$2).col;
     }
 
     static {