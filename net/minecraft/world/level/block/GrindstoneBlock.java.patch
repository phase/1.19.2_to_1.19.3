--- net/minecraft/world/level/block/GrindstoneBlock.java
+++ net/minecraft/world/level/block/GrindstoneBlock.java
@@ -77,33 +77,33 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)net.minecraft.core.Direction.NORTH)).setValue((net.minecraft.world.level.block.state.properties.Property)FACE, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.AttachFace.WALL));
     }
 
-    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState state) {
+    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState $$0) {
         return net.minecraft.world.level.block.RenderShape.MODEL;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getVoxelShape(net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.core.Direction direction = (net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
-        switch (net.minecraft.world.level.block.GrindstoneBlock$1.$SwitchMap$net$minecraft$world$level$block$state$properties$AttachFace[((net.minecraft.world.level.block.state.properties.AttachFace)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACE)).ordinal()]) {
+    public net.minecraft.world.phys.shapes.VoxelShape getVoxelShape(net.minecraft.world.level.block.state.BlockState $$0) {
+        net.minecraft.core.Direction $$1 = (net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+        switch (net.minecraft.world.level.block.GrindstoneBlock$1.$SwitchMap$net$minecraft$world$level$block$state$properties$AttachFace[((net.minecraft.world.level.block.state.properties.AttachFace)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACE)).ordinal()]) {
             case 1: {
-                if (direction == net.minecraft.core.Direction.NORTH || direction == net.minecraft.core.Direction.SOUTH) {
+                if ($$1 == net.minecraft.core.Direction.NORTH || $$1 == net.minecraft.core.Direction.SOUTH) {
                     return FLOOR_NORTH_SOUTH_GRINDSTONE;
                 }
                 return FLOOR_EAST_WEST_GRINDSTONE;
             }
             case 2: {
-                if (direction == net.minecraft.core.Direction.NORTH) {
+                if ($$1 == net.minecraft.core.Direction.NORTH) {
                     return WALL_NORTH_GRINDSTONE;
                 }
-                if (direction == net.minecraft.core.Direction.SOUTH) {
+                if ($$1 == net.minecraft.core.Direction.SOUTH) {
                     return WALL_SOUTH_GRINDSTONE;
                 }
-                if (direction == net.minecraft.core.Direction.EAST) {
+                if ($$1 == net.minecraft.core.Direction.EAST) {
                     return WALL_EAST_GRINDSTONE;
                 }
                 return WALL_WEST_GRINDSTONE;
             }
             case 3: {
-                if (direction == net.minecraft.core.Direction.NORTH || direction == net.minecraft.core.Direction.SOUTH) {
+                if ($$1 == net.minecraft.core.Direction.NORTH || $$1 == net.minecraft.core.Direction.SOUTH) {
                     return CEILING_NORTH_SOUTH_GRINDSTONE;
                 }
                 return CEILING_EAST_WEST_GRINDSTONE;
@@ -112,44 +112,44 @@
         return FLOOR_EAST_WEST_GRINDSTONE;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        return this.getVoxelShape(state);
+    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        return this.getVoxelShape($$0);
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        return this.getVoxelShape(state);
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        return this.getVoxelShape($$0);
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
         return true;
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        if (level.isClientSide) {
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        if ($$1.isClientSide) {
             return net.minecraft.world.InteractionResult.SUCCESS;
         }
-        player.openMenu(state.getMenuProvider(level, pos));
-        player.awardStat(net.minecraft.stats.Stats.INTERACT_WITH_GRINDSTONE);
+        $$3.openMenu($$0.getMenuProvider($$1, $$2));
+        $$3.awardStat(net.minecraft.stats.Stats.INTERACT_WITH_GRINDSTONE);
         return net.minecraft.world.InteractionResult.CONSUME;
     }
 
-    public net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        return new net.minecraft.world.SimpleMenuProvider(($$2, $$3, $$4) -> new net.minecraft.world.inventory.GrindstoneMenu($$2, $$3, net.minecraft.world.inventory.ContainerLevelAccess.create((net.minecraft.world.level.Level)level, (net.minecraft.core.BlockPos)pos)), CONTAINER_TITLE);
+    public net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$22) {
+        return new net.minecraft.world.SimpleMenuProvider(($$2, $$3, $$4) -> new net.minecraft.world.inventory.GrindstoneMenu($$2, $$3, net.minecraft.world.inventory.ContainerLevelAccess.create((net.minecraft.world.level.Level)$$1, (net.minecraft.core.BlockPos)$$22)), CONTAINER_TITLE);
     }
 
-    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Rotation rotation) {
-        return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)rotation.rotate((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Rotation $$1) {
+        return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$1.rotate((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Mirror mirror) {
-        return state.rotate(mirror.getRotation((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Mirror $$1) {
+        return $$0.rotate($$1.getRotation((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, FACE});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, FACE});
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 