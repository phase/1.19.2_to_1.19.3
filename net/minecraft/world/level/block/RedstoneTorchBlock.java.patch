--- net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -18,30 +18,30 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)LIT, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)true)));
     }
 
-    public void onPlace(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState oldState, boolean isMoving) {
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction.values()) {
-            level.updateNeighborsAt(pos.relative(direction), (net.minecraft.world.level.block.Block)this);
+    public void onPlace(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        for (net.minecraft.core.Direction $$5 : net.minecraft.core.Direction.values()) {
+            $$1.updateNeighborsAt($$2.relative($$5), (net.minecraft.world.level.block.Block)this);
         }
     }
 
-    public void onRemove(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState newState, boolean isMoving) {
-        if (isMoving) {
+    public void onRemove(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if ($$4) {
             return;
         }
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction.values()) {
-            level.updateNeighborsAt(pos.relative(direction), (net.minecraft.world.level.block.Block)this);
+        for (net.minecraft.core.Direction $$5 : net.minecraft.core.Direction.values()) {
+            $$1.updateNeighborsAt($$2.relative($$5), (net.minecraft.world.level.block.Block)this);
         }
     }
 
-    public int getSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.BlockGetter blockAccess, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction side) {
-        if (((java.lang.Boolean)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)LIT)).booleanValue() && net.minecraft.core.Direction.UP != side) {
+    public int getSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.core.Direction $$3) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LIT)).booleanValue() && net.minecraft.core.Direction.UP != $$3) {
             return 15;
         }
         return 0;
     }
 
-    public boolean hasNeighborSignal(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
-        return level.hasSignal(pos.below(), net.minecraft.core.Direction.DOWN);
+    public boolean hasNeighborSignal(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
+        return $$0.hasSignal($$1.below(), net.minecraft.core.Direction.DOWN);
     }
 
     public void tick(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.server.level.ServerLevel $$1, net.minecraft.core.BlockPos $$2, net.minecraft.util.RandomSource $$3) {
@@ -63,20 +63,20 @@
         }
     }
 
-    public void neighborChanged(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.Block block, net.minecraft.core.BlockPos fromPos, boolean isMoving) {
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)LIT)).booleanValue() == this.hasNeighborSignal(level, pos, state) && !level.getBlockTicks().willTickThisTick(pos, (java.lang.Object)this)) {
-            level.scheduleTick(pos, (net.minecraft.world.level.block.Block)this, 2);
+    public void neighborChanged(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.Block $$3, net.minecraft.core.BlockPos $$4, boolean $$5) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LIT)).booleanValue() == this.hasNeighborSignal($$1, $$2, $$0) && !$$1.getBlockTicks().willTickThisTick($$2, (java.lang.Object)this)) {
+            $$1.scheduleTick($$2, (net.minecraft.world.level.block.Block)this, 2);
         }
     }
 
-    public int getDirectSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.BlockGetter blockAccess, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction side) {
-        if (side == net.minecraft.core.Direction.DOWN) {
-            return blockState.getSignal(blockAccess, pos, side);
+    public int getDirectSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.core.Direction $$3) {
+        if ($$3 == net.minecraft.core.Direction.DOWN) {
+            return $$0.getSignal($$1, $$2, $$3);
         }
         return 0;
     }
 
-    public boolean isSignalSource(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean isSignalSource(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
@@ -90,19 +90,19 @@
         $$1.addParticle(this.flameParticle, $$4, $$5, $$6, 0.0, 0.0, 0.0);
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{LIT});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{LIT});
     }
 
-    public static boolean isToggledTooFrequently(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos levelConflicting, boolean pos) {
-        java.util.List list = (java.util.List)RECENT_TOGGLES.computeIfAbsent((java.lang.Object)level, $$0 -> com.google.common.collect.Lists.newArrayList());
-        if (pos) {
-            list.add((java.lang.Object)new net.minecraft.world.level.block.RedstoneTorchBlock$Toggle(levelConflicting.immutable(), level.getGameTime()));
+    public static boolean isToggledTooFrequently(net.minecraft.world.level.Level $$02, net.minecraft.core.BlockPos $$1, boolean $$2) {
+        java.util.List $$3 = (java.util.List)RECENT_TOGGLES.computeIfAbsent((java.lang.Object)$$02, $$0 -> com.google.common.collect.Lists.newArrayList());
+        if ($$2) {
+            $$3.add((java.lang.Object)new net.minecraft.world.level.block.RedstoneTorchBlock$Toggle($$1.immutable(), $$02.getGameTime()));
         }
-        int n = 0;
-        for (int i = 0; i < list.size(); ++i) {
-            net.minecraft.world.level.block.RedstoneTorchBlock$Toggle toggle = (net.minecraft.world.level.block.RedstoneTorchBlock$Toggle)list.get(i);
-            if (!toggle.pos.equals((java.lang.Object)levelConflicting) || ++n < 8) continue;
+        int $$4 = 0;
+        for (int $$5 = 0; $$5 < $$3.size(); ++$$5) {
+            net.minecraft.world.level.block.RedstoneTorchBlock$Toggle $$6 = (net.minecraft.world.level.block.RedstoneTorchBlock$Toggle)$$3.get($$5);
+            if (!$$6.pos.equals((java.lang.Object)$$1) || ++$$4 < 8) continue;
             return true;
         }
         return false;