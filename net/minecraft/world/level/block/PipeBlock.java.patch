--- net/minecraft/world/level/block/PipeBlock.java
+++ net/minecraft/world/level/block/PipeBlock.java
@@ -16,47 +16,47 @@
     public static java.util.Map<net.minecraft.core.Direction, net.minecraft.world.level.block.state.properties.BooleanProperty> PROPERTY_BY_DIRECTION;
     public net.minecraft.world.phys.shapes.VoxelShape[] shapeByIndex;
 
-    public net.minecraft.world.level.block.PipeBlock(float f, net.minecraft.world.level.block.state.BlockBehaviour$Properties properties) {
-        super(properties);
-        this.shapeByIndex = this.makeShapes(f);
+    public net.minecraft.world.level.block.PipeBlock(float $$0, net.minecraft.world.level.block.state.BlockBehaviour$Properties $$1) {
+        super($$1);
+        this.shapeByIndex = this.makeShapes($$0);
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape[] makeShapes(float apothem) {
-        float f = 0.5f - apothem;
-        float f2 = 0.5f + apothem;
-        net.minecraft.world.phys.shapes.VoxelShape voxelShape = net.minecraft.world.level.block.Block.box((double)(f * 16.0f), (double)(f * 16.0f), (double)(f * 16.0f), (double)(f2 * 16.0f), (double)(f2 * 16.0f), (double)(f2 * 16.0f));
-        net.minecraft.world.phys.shapes.VoxelShape[] voxelShapeArray = new net.minecraft.world.phys.shapes.VoxelShape[DIRECTIONS.length];
-        for (int i = 0; i < DIRECTIONS.length; ++i) {
-            net.minecraft.core.Direction direction = DIRECTIONS[i];
-            voxelShapeArray[i] = net.minecraft.world.phys.shapes.Shapes.box((double)(0.5 + java.lang.Math.min((double)(-apothem), (double)((double)direction.getStepX() * 0.5))), (double)(0.5 + java.lang.Math.min((double)(-apothem), (double)((double)direction.getStepY() * 0.5))), (double)(0.5 + java.lang.Math.min((double)(-apothem), (double)((double)direction.getStepZ() * 0.5))), (double)(0.5 + java.lang.Math.max((double)apothem, (double)((double)direction.getStepX() * 0.5))), (double)(0.5 + java.lang.Math.max((double)apothem, (double)((double)direction.getStepY() * 0.5))), (double)(0.5 + java.lang.Math.max((double)apothem, (double)((double)direction.getStepZ() * 0.5))));
+    public net.minecraft.world.phys.shapes.VoxelShape[] makeShapes(float $$0) {
+        float $$1 = 0.5f - $$0;
+        float $$2 = 0.5f + $$0;
+        net.minecraft.world.phys.shapes.VoxelShape $$3 = net.minecraft.world.level.block.Block.box((double)($$1 * 16.0f), (double)($$1 * 16.0f), (double)($$1 * 16.0f), (double)($$2 * 16.0f), (double)($$2 * 16.0f), (double)($$2 * 16.0f));
+        net.minecraft.world.phys.shapes.VoxelShape[] $$4 = new net.minecraft.world.phys.shapes.VoxelShape[DIRECTIONS.length];
+        for (int $$5 = 0; $$5 < DIRECTIONS.length; ++$$5) {
+            net.minecraft.core.Direction $$6 = DIRECTIONS[$$5];
+            $$4[$$5] = net.minecraft.world.phys.shapes.Shapes.box((double)(0.5 + java.lang.Math.min((double)(-$$0), (double)((double)$$6.getStepX() * 0.5))), (double)(0.5 + java.lang.Math.min((double)(-$$0), (double)((double)$$6.getStepY() * 0.5))), (double)(0.5 + java.lang.Math.min((double)(-$$0), (double)((double)$$6.getStepZ() * 0.5))), (double)(0.5 + java.lang.Math.max((double)$$0, (double)((double)$$6.getStepX() * 0.5))), (double)(0.5 + java.lang.Math.max((double)$$0, (double)((double)$$6.getStepY() * 0.5))), (double)(0.5 + java.lang.Math.max((double)$$0, (double)((double)$$6.getStepZ() * 0.5))));
         }
-        net.minecraft.world.phys.shapes.VoxelShape[] voxelShapeArray2 = new net.minecraft.world.phys.shapes.VoxelShape[64];
-        for (int i = 0; i < 64; ++i) {
-            net.minecraft.world.phys.shapes.VoxelShape voxelShape2 = voxelShape;
-            for (int j = 0; j < DIRECTIONS.length; ++j) {
-                if ((i & 1 << j) == 0) continue;
-                voxelShape2 = net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)voxelShape2, (net.minecraft.world.phys.shapes.VoxelShape)voxelShapeArray[j]);
+        net.minecraft.world.phys.shapes.VoxelShape[] $$7 = new net.minecraft.world.phys.shapes.VoxelShape[64];
+        for (int $$8 = 0; $$8 < 64; ++$$8) {
+            net.minecraft.world.phys.shapes.VoxelShape $$9 = $$3;
+            for (int $$10 = 0; $$10 < DIRECTIONS.length; ++$$10) {
+                if (($$8 & 1 << $$10) == 0) continue;
+                $$9 = net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)$$9, (net.minecraft.world.phys.shapes.VoxelShape)$$4[$$10]);
             }
-            voxelShapeArray2[i] = voxelShape2;
+            $$7[$$8] = $$9;
         }
-        return voxelShapeArray2;
+        return $$7;
     }
 
-    public boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter reader, net.minecraft.core.BlockPos pos) {
+    public boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2) {
         return false;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        return this.shapeByIndex[this.getAABBIndex(state)];
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        return this.shapeByIndex[this.getAABBIndex($$0)];
     }
 
-    public int getAABBIndex(net.minecraft.world.level.block.state.BlockState state) {
-        int n = 0;
-        for (int i = 0; i < DIRECTIONS.length; ++i) {
-            if (!((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)DIRECTIONS[i]))).booleanValue()) continue;
-            n |= 1 << i;
+    public int getAABBIndex(net.minecraft.world.level.block.state.BlockState $$0) {
+        int $$1 = 0;
+        for (int $$2 = 0; $$2 < DIRECTIONS.length; ++$$2) {
+            if (!((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)DIRECTIONS[$$2]))).booleanValue()) continue;
+            $$1 |= 1 << $$2;
         }
-        return n;
+        return $$1;
     }
 
     public static /* synthetic */ void lambda$static$0(java.util.EnumMap $$0) {