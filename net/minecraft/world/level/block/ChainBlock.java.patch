--- net/minecraft/world/level/block/ChainBlock.java
+++ net/minecraft/world/level/block/ChainBlock.java
@@ -19,8 +19,8 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false))).setValue((net.minecraft.world.level.block.state.properties.Property)AXIS, (java.lang.Comparable)net.minecraft.core.Direction$Axis.Y));
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        switch (net.minecraft.world.level.block.ChainBlock$1.$SwitchMap$net$minecraft$core$Direction$Axis[((net.minecraft.core.Direction$Axis)state.getValue((net.minecraft.world.level.block.state.properties.Property)AXIS)).ordinal()]) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        switch (net.minecraft.world.level.block.ChainBlock$1.$SwitchMap$net$minecraft$core$Direction$Axis[((net.minecraft.core.Direction$Axis)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)AXIS)).ordinal()]) {
             default: {
                 return X_AXIS_AABB;
             }
@@ -33,31 +33,31 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        net.minecraft.world.level.material.FluidState fluidState = context.getLevel().getFluidState(context.getClickedPos());
-        boolean bl = fluidState.getType() == net.minecraft.world.level.material.Fluids.WATER;
-        return (net.minecraft.world.level.block.state.BlockState)super.getStateForPlacement(context).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)bl));
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        net.minecraft.world.level.material.FluidState $$1 = $$0.getLevel().getFluidState($$0.getClickedPos());
+        boolean $$2 = $$1.getType() == net.minecraft.world.level.material.Fluids.WATER;
+        return (net.minecraft.world.level.block.state.BlockState)super.getStateForPlacement($$0).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)$$2));
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)level));
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
+            $$3.scheduleTick($$4, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)$$3));
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{WATERLOGGED}).add(new net.minecraft.world.level.block.state.properties.Property[]{AXIS});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{WATERLOGGED}).add(new net.minecraft.world.level.block.state.properties.Property[]{AXIS});
     }
 
-    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState state) {
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
+    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState $$0) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
             return net.minecraft.world.level.material.Fluids.WATER.getSource(false);
         }
-        return super.getFluidState(state);
+        return super.getFluidState($$0);
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 