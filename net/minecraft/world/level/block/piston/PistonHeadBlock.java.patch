--- net/minecraft/world/level/block/piston/PistonHeadBlock.java
+++ net/minecraft/world/level/block/piston/PistonHeadBlock.java
@@ -33,30 +33,30 @@
     public static net.minecraft.world.phys.shapes.VoxelShape[] SHAPES_SHORT;
     public static net.minecraft.world.phys.shapes.VoxelShape[] SHAPES_LONG;
 
-    public static net.minecraft.world.phys.shapes.VoxelShape[] makeShapes(boolean extended) {
-        return (net.minecraft.world.phys.shapes.VoxelShape[])java.util.Arrays.stream((java.lang.Object[])net.minecraft.core.Direction.values()).map($$1 -> net.minecraft.world.level.block.piston.PistonHeadBlock.calculateShape((net.minecraft.core.Direction)$$1, (boolean)extended)).toArray(net.minecraft.world.phys.shapes.VoxelShape[]::new);
+    public static net.minecraft.world.phys.shapes.VoxelShape[] makeShapes(boolean $$0) {
+        return (net.minecraft.world.phys.shapes.VoxelShape[])java.util.Arrays.stream((java.lang.Object[])net.minecraft.core.Direction.values()).map($$1 -> net.minecraft.world.level.block.piston.PistonHeadBlock.calculateShape((net.minecraft.core.Direction)$$1, (boolean)$$0)).toArray(net.minecraft.world.phys.shapes.VoxelShape[]::new);
     }
 
-    public static net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.core.Direction direction, boolean shortArm) {
-        switch (net.minecraft.world.level.block.piston.PistonHeadBlock$1.$SwitchMap$net$minecraft$core$Direction[direction.ordinal()]) {
+    public static net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.core.Direction $$0, boolean $$1) {
+        switch (net.minecraft.world.level.block.piston.PistonHeadBlock$1.$SwitchMap$net$minecraft$core$Direction[$$0.ordinal()]) {
             default: {
-                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)DOWN_AABB, (net.minecraft.world.phys.shapes.VoxelShape)(shortArm ? SHORT_DOWN_ARM_AABB : DOWN_ARM_AABB));
+                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)DOWN_AABB, (net.minecraft.world.phys.shapes.VoxelShape)($$1 ? SHORT_DOWN_ARM_AABB : DOWN_ARM_AABB));
             }
             case 2: {
-                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)UP_AABB, (net.minecraft.world.phys.shapes.VoxelShape)(shortArm ? SHORT_UP_ARM_AABB : UP_ARM_AABB));
+                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)UP_AABB, (net.minecraft.world.phys.shapes.VoxelShape)($$1 ? SHORT_UP_ARM_AABB : UP_ARM_AABB));
             }
             case 3: {
-                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)NORTH_AABB, (net.minecraft.world.phys.shapes.VoxelShape)(shortArm ? SHORT_NORTH_ARM_AABB : NORTH_ARM_AABB));
+                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)NORTH_AABB, (net.minecraft.world.phys.shapes.VoxelShape)($$1 ? SHORT_NORTH_ARM_AABB : NORTH_ARM_AABB));
             }
             case 4: {
-                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)SOUTH_AABB, (net.minecraft.world.phys.shapes.VoxelShape)(shortArm ? SHORT_SOUTH_ARM_AABB : SOUTH_ARM_AABB));
+                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)SOUTH_AABB, (net.minecraft.world.phys.shapes.VoxelShape)($$1 ? SHORT_SOUTH_ARM_AABB : SOUTH_ARM_AABB));
             }
             case 5: {
-                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)WEST_AABB, (net.minecraft.world.phys.shapes.VoxelShape)(shortArm ? SHORT_WEST_ARM_AABB : WEST_ARM_AABB));
+                return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)WEST_AABB, (net.minecraft.world.phys.shapes.VoxelShape)($$1 ? SHORT_WEST_ARM_AABB : WEST_ARM_AABB));
             }
             case 6: 
         }
-        return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)EAST_AABB, (net.minecraft.world.phys.shapes.VoxelShape)(shortArm ? SHORT_EAST_ARM_AABB : EAST_ARM_AABB));
+        return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)EAST_AABB, (net.minecraft.world.phys.shapes.VoxelShape)($$1 ? SHORT_EAST_ARM_AABB : EAST_ARM_AABB));
     }
 
     public net.minecraft.world.level.block.piston.PistonHeadBlock(net.minecraft.world.level.block.state.BlockBehaviour$Properties $$0) {
@@ -64,73 +64,73 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)net.minecraft.core.Direction.NORTH)).setValue((net.minecraft.world.level.block.state.properties.Property)TYPE, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.PistonType.DEFAULT)).setValue((net.minecraft.world.level.block.state.properties.Property)SHORT, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false)));
     }
 
-    public boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        return ((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)SHORT) != false ? SHAPES_SHORT : SHAPES_LONG)[((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).ordinal()];
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        return ((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)SHORT) != false ? SHAPES_SHORT : SHAPES_LONG)[((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).ordinal()];
     }
 
-    public boolean isFittingBase(net.minecraft.world.level.block.state.BlockState baseState, net.minecraft.world.level.block.state.BlockState extendedState) {
-        net.minecraft.world.level.block.Block block = baseState.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.PistonType.DEFAULT ? net.minecraft.world.level.block.Blocks.PISTON : net.minecraft.world.level.block.Blocks.STICKY_PISTON;
-        return extendedState.is(block) && (java.lang.Boolean)extendedState.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonBaseBlock.EXTENDED) != false && extendedState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) == baseState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+    public boolean isFittingBase(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.state.BlockState $$1) {
+        net.minecraft.world.level.block.Block $$2 = $$0.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.PistonType.DEFAULT ? net.minecraft.world.level.block.Blocks.PISTON : net.minecraft.world.level.block.Blocks.STICKY_PISTON;
+        return $$1.is($$2) && (java.lang.Boolean)$$1.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonBaseBlock.EXTENDED) != false && $$1.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) == $$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
     }
 
-    public void playerWillDestroy(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.entity.player.Player player) {
-        net.minecraft.core.BlockPos blockPos;
-        if (!level.isClientSide && player.getAbilities().instabuild && this.isFittingBase(state, level.getBlockState(blockPos = pos.relative(((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite())))) {
-            level.destroyBlock(blockPos, false);
+    public void playerWillDestroy(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.entity.player.Player $$3) {
+        net.minecraft.core.BlockPos $$4;
+        if (!$$0.isClientSide && $$3.getAbilities().instabuild && this.isFittingBase($$2, $$0.getBlockState($$4 = $$1.relative(((net.minecraft.core.Direction)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite())))) {
+            $$0.destroyBlock($$4, false);
         }
-        super.playerWillDestroy(level, pos, state, player);
+        super.playerWillDestroy($$0, $$1, $$2, $$3);
     }
 
-    public void onRemove(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState newState, boolean isMoving) {
-        if (state.is(newState.getBlock())) {
+    public void onRemove(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if ($$0.is($$3.getBlock())) {
             return;
         }
-        super.onRemove(state, level, pos, newState, isMoving);
-        net.minecraft.core.BlockPos blockPos = pos.relative(((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite());
-        if (this.isFittingBase(state, level.getBlockState(blockPos))) {
-            level.destroyBlock(blockPos, true);
+        super.onRemove($$0, $$1, $$2, $$3, $$4);
+        net.minecraft.core.BlockPos $$5 = $$2.relative(((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite());
+        if (this.isFittingBase($$0, $$1.getBlockState($$5))) {
+            $$1.destroyBlock($$5, true);
         }
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (facing.getOpposite() == state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) && !state.canSurvive((net.minecraft.world.level.LevelReader)level, currentPos)) {
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if ($$1.getOpposite() == $$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) && !$$0.canSurvive((net.minecraft.world.level.LevelReader)$$3, $$4)) {
             return net.minecraft.world.level.block.Blocks.AIR.defaultBlockState();
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(pos.relative(((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite()));
-        return this.isFittingBase(state, blockState) || blockState.is(net.minecraft.world.level.block.Blocks.MOVING_PISTON) && blockState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) == state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
+        net.minecraft.world.level.block.state.BlockState $$3 = $$1.getBlockState($$2.relative(((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite()));
+        return this.isFittingBase($$0, $$3) || $$3.is(net.minecraft.world.level.block.Blocks.MOVING_PISTON) && $$3.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) == $$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
     }
 
-    public void neighborChanged(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.Block block, net.minecraft.core.BlockPos fromPos, boolean isMoving) {
-        if (state.canSurvive((net.minecraft.world.level.LevelReader)level, pos)) {
-            level.neighborChanged(pos.relative(((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite()), block, fromPos);
+    public void neighborChanged(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.Block $$3, net.minecraft.core.BlockPos $$4, boolean $$5) {
+        if ($$0.canSurvive((net.minecraft.world.level.LevelReader)$$1, $$2)) {
+            $$1.neighborChanged($$2.relative(((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite()), $$3, $$4);
         }
     }
 
-    public net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
-        return new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)(state.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.PistonType.STICKY ? net.minecraft.world.level.block.Blocks.STICKY_PISTON : net.minecraft.world.level.block.Blocks.PISTON));
+    public net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
+        return new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)($$2.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.PistonType.STICKY ? net.minecraft.world.level.block.Blocks.STICKY_PISTON : net.minecraft.world.level.block.Blocks.PISTON));
     }
 
-    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Rotation rot) {
-        return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)rot.rotate((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Rotation $$1) {
+        return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$1.rotate((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Mirror mirror) {
-        return state.rotate(mirror.getRotation((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Mirror $$1) {
+        return $$0.rotate($$1.getRotation((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, TYPE, SHORT});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, TYPE, SHORT});
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 