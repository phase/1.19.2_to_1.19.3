--- net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
+++ net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
@@ -48,27 +48,27 @@
         return this.isSourcePiston;
     }
 
-    public float getProgress(float partialTicks) {
-        if (partialTicks > 1.0f) {
-            partialTicks = 1.0f;
+    public float getProgress(float $$0) {
+        if ($$0 > 1.0f) {
+            $$0 = 1.0f;
         }
-        return net.minecraft.util.Mth.lerp((float)partialTicks, (float)this.progressO, (float)this.progress);
+        return net.minecraft.util.Mth.lerp((float)$$0, (float)this.progressO, (float)this.progress);
     }
 
-    public float getXOff(float partialTicks) {
-        return (float)this.direction.getStepX() * this.getExtendedProgress(this.getProgress(partialTicks));
+    public float getXOff(float $$0) {
+        return (float)this.direction.getStepX() * this.getExtendedProgress(this.getProgress($$0));
     }
 
-    public float getYOff(float partialTicks) {
-        return (float)this.direction.getStepY() * this.getExtendedProgress(this.getProgress(partialTicks));
+    public float getYOff(float $$0) {
+        return (float)this.direction.getStepY() * this.getExtendedProgress(this.getProgress($$0));
     }
 
-    public float getZOff(float partialTicks) {
-        return (float)this.direction.getStepZ() * this.getExtendedProgress(this.getProgress(partialTicks));
+    public float getZOff(float $$0) {
+        return (float)this.direction.getStepZ() * this.getExtendedProgress(this.getProgress($$0));
     }
 
-    public float getExtendedProgress(float progress) {
-        return this.extending ? progress - 1.0f : 1.0f - progress;
+    public float getExtendedProgress(float $$0) {
+        return this.extending ? $$0 - 1.0f : 1.0f - $$0;
     }
 
     public net.minecraft.world.level.block.state.BlockState getCollisionRelatedBlockState() {
@@ -130,9 +130,9 @@
         }
     }
 
-    public static void moveEntityByPiston(net.minecraft.core.Direction direction, net.minecraft.world.entity.Entity entity, double progress, net.minecraft.core.Direction direction2) {
-        NOCLIP.set((java.lang.Object)direction);
-        entity.move(net.minecraft.world.entity.MoverType.PISTON, new net.minecraft.world.phys.Vec3(progress * (double)direction2.getStepX(), progress * (double)direction2.getStepY(), progress * (double)direction2.getStepZ()));
+    public static void moveEntityByPiston(net.minecraft.core.Direction $$0, net.minecraft.world.entity.Entity $$1, double $$2, net.minecraft.core.Direction $$3) {
+        NOCLIP.set((java.lang.Object)$$0);
+        $$1.move(net.minecraft.world.entity.MoverType.PISTON, new net.minecraft.world.phys.Vec3($$2 * (double)$$3.getStepX(), $$2 * (double)$$3.getStepY(), $$2 * (double)$$3.getStepZ()));
         NOCLIP.set(null);
     }
 
@@ -153,8 +153,8 @@
         }
     }
 
-    public static boolean matchesStickyCritera(net.minecraft.world.phys.AABB shape, net.minecraft.world.entity.Entity entity) {
-        return entity.getPistonPushReaction() == net.minecraft.world.level.material.PushReaction.NORMAL && entity.isOnGround() && entity.getX() >= shape.minX && entity.getX() <= shape.maxX && entity.getZ() >= shape.minZ && entity.getZ() <= shape.maxZ;
+    public static boolean matchesStickyCritera(net.minecraft.world.phys.AABB $$0, net.minecraft.world.entity.Entity $$1) {
+        return $$1.getPistonPushReaction() == net.minecraft.world.level.material.PushReaction.NORMAL && $$1.isOnGround() && $$1.getX() >= $$0.minX && $$1.getX() <= $$0.maxX && $$1.getZ() >= $$0.minZ && $$1.getZ() <= $$0.maxZ;
     }
 
     public boolean isStickyForEntities() {
@@ -165,26 +165,26 @@
         return this.extending ? this.direction : this.direction.getOpposite();
     }
 
-    public static double getMovement(net.minecraft.world.phys.AABB headShape, net.minecraft.core.Direction direction, net.minecraft.world.phys.AABB facing) {
-        switch (net.minecraft.world.level.block.piston.PistonMovingBlockEntity$1.$SwitchMap$net$minecraft$core$Direction[direction.ordinal()]) {
+    public static double getMovement(net.minecraft.world.phys.AABB $$0, net.minecraft.core.Direction $$1, net.minecraft.world.phys.AABB $$2) {
+        switch (net.minecraft.world.level.block.piston.PistonMovingBlockEntity$1.$SwitchMap$net$minecraft$core$Direction[$$1.ordinal()]) {
             case 1: {
-                return headShape.maxX - facing.minX;
+                return $$0.maxX - $$2.minX;
             }
             case 2: {
-                return facing.maxX - headShape.minX;
+                return $$2.maxX - $$0.minX;
             }
             default: {
-                return headShape.maxY - facing.minY;
+                return $$0.maxY - $$2.minY;
             }
             case 4: {
-                return facing.maxY - headShape.minY;
+                return $$2.maxY - $$0.minY;
             }
             case 5: {
-                return headShape.maxZ - facing.minZ;
+                return $$0.maxZ - $$2.minZ;
             }
             case 6: 
         }
-        return facing.maxZ - headShape.minZ;
+        return $$2.maxZ - $$0.minZ;
     }
 
     public static net.minecraft.world.phys.AABB moveByPositionAndProgress(net.minecraft.core.BlockPos $$0, net.minecraft.world.phys.AABB $$1, net.minecraft.world.level.block.piston.PistonMovingBlockEntity $$2) {
@@ -262,7 +262,8 @@
 
     public void load(net.minecraft.nbt.CompoundTag $$0) {
         super.load($$0);
-        this.movedState = net.minecraft.nbt.NbtUtils.readBlockState((net.minecraft.nbt.CompoundTag)$$0.getCompound("blockState"));
+        net.minecraft.core.HolderLookup$RegistryLookup $$1 = this.level != null ? this.level.holderLookup(net.minecraft.core.Registry.BLOCK_REGISTRY) : net.minecraft.core.HolderLookup.forRegistry((net.minecraft.core.Registry)net.minecraft.core.Registry.BLOCK);
+        this.movedState = net.minecraft.nbt.NbtUtils.readBlockState((net.minecraft.core.HolderLookup)$$1, (net.minecraft.nbt.CompoundTag)$$0.getCompound("blockState"));
         this.direction = net.minecraft.core.Direction.from3DDataValue((int)$$0.getInt("facing"));
         this.progressO = this.progress = $$0.getFloat("progress");
         this.extending = $$0.getBoolean("extending");
@@ -278,24 +279,41 @@
         $$0.putBoolean("source", this.isSourcePiston);
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.phys.shapes.VoxelShape voxelShape = !this.extending && this.isSourcePiston && this.movedState.getBlock() instanceof net.minecraft.world.level.block.piston.PistonBaseBlock ? ((net.minecraft.world.level.block.state.BlockState)this.movedState.setValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonBaseBlock.EXTENDED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)true))).getCollisionShape(level, pos) : net.minecraft.world.phys.shapes.Shapes.empty();
-        net.minecraft.core.Direction direction = (net.minecraft.core.Direction)NOCLIP.get();
-        if ((double)this.progress < 1.0 && direction == this.getMovementDirection()) {
-            return voxelShape;
+    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1) {
+        net.minecraft.world.level.block.state.BlockState $$6;
+        net.minecraft.world.phys.shapes.VoxelShape $$3;
+        if (!this.extending && this.isSourcePiston && this.movedState.getBlock() instanceof net.minecraft.world.level.block.piston.PistonBaseBlock) {
+            net.minecraft.world.phys.shapes.VoxelShape $$2 = ((net.minecraft.world.level.block.state.BlockState)this.movedState.setValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonBaseBlock.EXTENDED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)true))).getCollisionShape($$0, $$1);
+        } else {
+            $$3 = net.minecraft.world.phys.shapes.Shapes.empty();
         }
-        net.minecraft.world.level.block.state.BlockState blockState = this.isSourcePiston() ? (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)net.minecraft.world.level.block.Blocks.PISTON_HEAD.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonHeadBlock.FACING, (java.lang.Comparable)this.direction)).setValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonHeadBlock.SHORT, (java.lang.Comparable)java.lang.Boolean.valueOf((this.extending != 1.0f - this.progress < 0.25f ? 1 : 0) != 0)) : this.movedState;
-        float f = this.getExtendedProgress(this.progress);
-        double d = (float)this.direction.getStepX() * f;
-        double d2 = (float)this.direction.getStepY() * f;
-        double d3 = (float)this.direction.getStepZ() * f;
-        return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)voxelShape, (net.minecraft.world.phys.shapes.VoxelShape)blockState.getCollisionShape(level, pos).move(d, d2, d3));
+        net.minecraft.core.Direction $$4 = (net.minecraft.core.Direction)NOCLIP.get();
+        if ((double)this.progress < 1.0 && $$4 == this.getMovementDirection()) {
+            return $$3;
+        }
+        if (this.isSourcePiston()) {
+            net.minecraft.world.level.block.state.BlockState $$5 = (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)net.minecraft.world.level.block.Blocks.PISTON_HEAD.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonHeadBlock.FACING, (java.lang.Comparable)this.direction)).setValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonHeadBlock.SHORT, (java.lang.Comparable)java.lang.Boolean.valueOf((this.extending != 1.0f - this.progress < 0.25f ? 1 : 0) != 0));
+        } else {
+            $$6 = this.movedState;
+        }
+        float $$7 = this.getExtendedProgress(this.progress);
+        double $$8 = (float)this.direction.getStepX() * $$7;
+        double $$9 = (float)this.direction.getStepY() * $$7;
+        double $$10 = (float)this.direction.getStepZ() * $$7;
+        return net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)$$3, (net.minecraft.world.phys.shapes.VoxelShape)$$6.getCollisionShape($$0, $$1).move($$8, $$9, $$10));
     }
 
     public long getLastTicked() {
         return this.lastTicked;
     }
 
+    public void setLevel(net.minecraft.world.level.Level $$0) {
+        super.setLevel($$0);
+        if ($$0.holderLookup(net.minecraft.core.Registry.BLOCK_REGISTRY).get(this.movedState.getBlock().builtInRegistryHolder().key()).isEmpty()) {
+            this.movedState = net.minecraft.world.level.block.Blocks.AIR.defaultBlockState();
+        }
+    }
+
     public static /* synthetic */ net.minecraft.core.Direction lambda$static$0() {
         return null;
     }