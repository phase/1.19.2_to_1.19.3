--- net/minecraft/world/level/block/piston/MovingPistonBlock.java
+++ net/minecraft/world/level/block/piston/MovingPistonBlock.java
@@ -28,78 +28,78 @@
         return net.minecraft.world.level.block.piston.MovingPistonBlock.createTickerHelper($$2, (net.minecraft.world.level.block.entity.BlockEntityType)net.minecraft.world.level.block.entity.BlockEntityType.PISTON, net.minecraft.world.level.block.piston.PistonMovingBlockEntity::tick);
     }
 
-    public void onRemove(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState newState, boolean isMoving) {
-        if (state.is(newState.getBlock())) {
+    public void onRemove(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if ($$0.is($$3.getBlock())) {
             return;
         }
-        net.minecraft.world.level.block.entity.BlockEntity blockEntity = level.getBlockEntity(pos);
-        if (blockEntity instanceof net.minecraft.world.level.block.piston.PistonMovingBlockEntity) {
-            ((net.minecraft.world.level.block.piston.PistonMovingBlockEntity)blockEntity).finalTick();
+        net.minecraft.world.level.block.entity.BlockEntity $$5 = $$1.getBlockEntity($$2);
+        if ($$5 instanceof net.minecraft.world.level.block.piston.PistonMovingBlockEntity) {
+            ((net.minecraft.world.level.block.piston.PistonMovingBlockEntity)$$5).finalTick();
         }
     }
 
-    public void destroy(net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.core.BlockPos blockPos = pos.relative(((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite());
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(blockPos);
-        if (blockState.getBlock() instanceof net.minecraft.world.level.block.piston.PistonBaseBlock && ((java.lang.Boolean)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonBaseBlock.EXTENDED)).booleanValue()) {
-            level.removeBlock(blockPos, false);
+    public void destroy(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
+        net.minecraft.core.BlockPos $$3 = $$1.relative(((net.minecraft.core.Direction)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite());
+        net.minecraft.world.level.block.state.BlockState $$4 = $$0.getBlockState($$3);
+        if ($$4.getBlock() instanceof net.minecraft.world.level.block.piston.PistonBaseBlock && ((java.lang.Boolean)$$4.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.piston.PistonBaseBlock.EXTENDED)).booleanValue()) {
+            $$0.removeBlock($$3, false);
         }
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        if (!level.isClientSide && level.getBlockEntity(pos) == null) {
-            level.removeBlock(pos, false);
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        if (!$$1.isClientSide && $$1.getBlockEntity($$2) == null) {
+            $$1.removeBlock($$2, false);
             return net.minecraft.world.InteractionResult.CONSUME;
         }
         return net.minecraft.world.InteractionResult.PASS;
     }
 
-    public java.util.List<net.minecraft.world.item.ItemStack> getDrops(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.storage.loot.LootContext$Builder builder) {
-        net.minecraft.world.level.block.piston.PistonMovingBlockEntity pistonMovingBlockEntity = this.getBlockEntity((net.minecraft.world.level.BlockGetter)builder.getLevel(), new net.minecraft.core.BlockPos((net.minecraft.world.phys.Vec3)builder.getParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.ORIGIN)));
-        if (pistonMovingBlockEntity == null) {
+    public java.util.List<net.minecraft.world.item.ItemStack> getDrops(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.storage.loot.LootContext$Builder $$1) {
+        net.minecraft.world.level.block.piston.PistonMovingBlockEntity $$2 = this.getBlockEntity((net.minecraft.world.level.BlockGetter)$$1.getLevel(), new net.minecraft.core.BlockPos((net.minecraft.world.phys.Vec3)$$1.getParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.ORIGIN)));
+        if ($$2 == null) {
             return java.util.Collections.emptyList();
         }
-        return pistonMovingBlockEntity.getMovedState().getDrops(builder);
+        return $$2.getMovedState().getDrops($$1);
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
         return net.minecraft.world.phys.shapes.Shapes.empty();
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        net.minecraft.world.level.block.piston.PistonMovingBlockEntity pistonMovingBlockEntity = this.getBlockEntity(level, pos);
-        if (pistonMovingBlockEntity != null) {
-            return pistonMovingBlockEntity.getCollisionShape(level, pos);
+    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        net.minecraft.world.level.block.piston.PistonMovingBlockEntity $$4 = this.getBlockEntity($$1, $$2);
+        if ($$4 != null) {
+            return $$4.getCollisionShape($$1, $$2);
         }
         return net.minecraft.world.phys.shapes.Shapes.empty();
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.block.piston.PistonMovingBlockEntity getBlockEntity(net.minecraft.world.level.BlockGetter blockReader, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.block.entity.BlockEntity blockEntity = blockReader.getBlockEntity(pos);
-        if (blockEntity instanceof net.minecraft.world.level.block.piston.PistonMovingBlockEntity) {
-            return (net.minecraft.world.level.block.piston.PistonMovingBlockEntity)blockEntity;
+    public net.minecraft.world.level.block.piston.PistonMovingBlockEntity getBlockEntity(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1) {
+        net.minecraft.world.level.block.entity.BlockEntity $$2 = $$0.getBlockEntity($$1);
+        if ($$2 instanceof net.minecraft.world.level.block.piston.PistonMovingBlockEntity) {
+            return (net.minecraft.world.level.block.piston.PistonMovingBlockEntity)$$2;
         }
         return null;
     }
 
-    public net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
+    public net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
         return net.minecraft.world.item.ItemStack.EMPTY;
     }
 
-    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Rotation rot) {
-        return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)rot.rotate((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Rotation $$1) {
+        return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$1.rotate((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Mirror mirror) {
-        return state.rotate(mirror.getRotation((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Mirror $$1) {
+        return $$0.rotate($$1.getRotation((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, TYPE});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, TYPE});
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 