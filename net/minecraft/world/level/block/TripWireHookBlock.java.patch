--- net/minecraft/world/level/block/TripWireHookBlock.java
+++ net/minecraft/world/level/block/TripWireHookBlock.java
@@ -23,8 +23,8 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)net.minecraft.core.Direction.NORTH)).setValue((net.minecraft.world.level.block.state.properties.Property)POWERED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false))).setValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false)));
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        switch (net.minecraft.world.level.block.TripWireHookBlock$1.$SwitchMap$net$minecraft$core$Direction[((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).ordinal()]) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        switch (net.minecraft.world.level.block.TripWireHookBlock$1.$SwitchMap$net$minecraft$core$Direction[((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).ordinal()]) {
             default: {
                 return EAST_AABB;
             }
@@ -39,94 +39,92 @@
         return NORTH_AABB;
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.core.Direction direction = (net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
-        net.minecraft.core.BlockPos blockPos = pos.relative(direction.getOpposite());
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(blockPos);
-        return direction.getAxis().isHorizontal() && blockState.isFaceSturdy((net.minecraft.world.level.BlockGetter)level, blockPos, direction);
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
+        net.minecraft.core.Direction $$3 = (net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+        net.minecraft.core.BlockPos $$4 = $$2.relative($$3.getOpposite());
+        net.minecraft.world.level.block.state.BlockState $$5 = $$1.getBlockState($$4);
+        return $$3.getAxis().isHorizontal() && $$5.isFaceSturdy((net.minecraft.world.level.BlockGetter)$$1, $$4, $$3);
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (facing.getOpposite() == state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) && !state.canSurvive((net.minecraft.world.level.LevelReader)level, currentPos)) {
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if ($$1.getOpposite() == $$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) && !$$0.canSurvive((net.minecraft.world.level.LevelReader)$$3, $$4)) {
             return net.minecraft.world.level.block.Blocks.AIR.defaultBlockState();
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        net.minecraft.core.Direction[] directionArray;
-        net.minecraft.world.level.block.state.BlockState blockState = (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)POWERED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false))).setValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false));
-        net.minecraft.world.level.Level level = context.getLevel();
-        net.minecraft.core.BlockPos blockPos = context.getClickedPos();
-        for (net.minecraft.core.Direction direction : directionArray = context.getNearestLookingDirections()) {
-            net.minecraft.core.Direction direction2;
-            if (!direction.getAxis().isHorizontal() || !(blockState = (net.minecraft.world.level.block.state.BlockState)blockState.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)(direction2 = direction.getOpposite()))).canSurvive((net.minecraft.world.level.LevelReader)level, blockPos)) continue;
-            return blockState;
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        net.minecraft.core.Direction[] $$4;
+        net.minecraft.world.level.block.state.BlockState $$1 = (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)POWERED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false))).setValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false));
+        net.minecraft.world.level.Level $$2 = $$0.getLevel();
+        net.minecraft.core.BlockPos $$3 = $$0.getClickedPos();
+        for (net.minecraft.core.Direction $$5 : $$4 = $$0.getNearestLookingDirections()) {
+            net.minecraft.core.Direction $$6;
+            if (!$$5.getAxis().isHorizontal() || !($$1 = (net.minecraft.world.level.block.state.BlockState)$$1.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)($$6 = $$5.getOpposite()))).canSurvive((net.minecraft.world.level.LevelReader)$$2, $$3)) continue;
+            return $$1;
         }
         return null;
     }
 
-    public void setPlacedBy(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.entity.LivingEntity placer, net.minecraft.world.item.ItemStack stack) {
-        this.calculateState(level, pos, state, false, false, -1, null);
+    public void setPlacedBy(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.entity.LivingEntity $$3, net.minecraft.world.item.ItemStack $$4) {
+        this.calculateState($$0, $$1, $$2, false, false, -1, null);
     }
 
-    public void calculateState(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState hookState, boolean attaching, boolean shouldNotifyNeighbours, int searchRange, @javax.annotation.Nullable net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.world.level.block.state.BlockState blockState;
-        net.minecraft.core.BlockPos blockPos;
-        net.minecraft.core.Direction direction = (net.minecraft.core.Direction)hookState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
-        boolean bl = (java.lang.Boolean)hookState.getValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED);
-        boolean bl2 = (java.lang.Boolean)hookState.getValue((net.minecraft.world.level.block.state.properties.Property)POWERED);
-        boolean bl3 = !attaching;
-        boolean bl4 = false;
-        int n = 0;
-        net.minecraft.world.level.block.state.BlockState[] blockStateArray = new net.minecraft.world.level.block.state.BlockState[42];
-        for (int i = 1; i < 42; ++i) {
-            blockPos = pos.relative(direction, i);
-            blockState = level.getBlockState(blockPos);
-            if (blockState.is(net.minecraft.world.level.block.Blocks.TRIPWIRE_HOOK)) {
-                if (blockState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) != direction.getOpposite()) break;
-                n = i;
+    public void calculateState(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, boolean $$3, boolean $$4, int $$5, @javax.annotation.Nullable net.minecraft.world.level.block.state.BlockState $$6) {
+        net.minecraft.core.Direction $$7 = (net.minecraft.core.Direction)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+        boolean $$8 = (java.lang.Boolean)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED);
+        boolean $$9 = (java.lang.Boolean)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)POWERED);
+        boolean $$10 = !$$3;
+        boolean $$11 = false;
+        int $$12 = 0;
+        net.minecraft.world.level.block.state.BlockState[] $$13 = new net.minecraft.world.level.block.state.BlockState[42];
+        for (int $$14 = 1; $$14 < 42; ++$$14) {
+            net.minecraft.core.BlockPos $$15 = $$1.relative($$7, $$14);
+            net.minecraft.world.level.block.state.BlockState $$16 = $$0.getBlockState($$15);
+            if ($$16.is(net.minecraft.world.level.block.Blocks.TRIPWIRE_HOOK)) {
+                if ($$16.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) != $$7.getOpposite()) break;
+                $$12 = $$14;
                 break;
             }
-            if (blockState.is(net.minecraft.world.level.block.Blocks.TRIPWIRE) || i == searchRange) {
-                if (i == searchRange) {
-                    blockState = (net.minecraft.world.level.block.state.BlockState)com.google.common.base.MoreObjects.firstNonNull((java.lang.Object)state, (java.lang.Object)blockState);
+            if ($$16.is(net.minecraft.world.level.block.Blocks.TRIPWIRE) || $$14 == $$5) {
+                if ($$14 == $$5) {
+                    $$16 = (net.minecraft.world.level.block.state.BlockState)com.google.common.base.MoreObjects.firstNonNull((java.lang.Object)$$6, (java.lang.Object)$$16);
                 }
-                boolean bl5 = (java.lang.Boolean)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.TripWireBlock.DISARMED) == false;
-                boolean bl6 = (java.lang.Boolean)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.TripWireBlock.POWERED);
-                bl4 |= bl5 && bl6;
-                blockStateArray[i] = blockState;
-                if (i != searchRange) continue;
-                level.scheduleTick(pos, (net.minecraft.world.level.block.Block)this, 10);
-                bl3 &= bl5;
+                boolean $$17 = (java.lang.Boolean)$$16.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.TripWireBlock.DISARMED) == false;
+                boolean $$18 = (java.lang.Boolean)$$16.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.TripWireBlock.POWERED);
+                $$11 |= $$17 && $$18;
+                $$13[$$14] = $$16;
+                if ($$14 != $$5) continue;
+                $$0.scheduleTick($$1, (net.minecraft.world.level.block.Block)this, 10);
+                $$10 &= $$17;
                 continue;
             }
-            blockStateArray[i] = null;
-            bl3 = false;
+            $$13[$$14] = null;
+            $$10 = false;
         }
-        net.minecraft.world.level.block.state.BlockState blockState2 = (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)bl3))).setValue((net.minecraft.world.level.block.state.properties.Property)POWERED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)(bl4 &= (bl3 &= n > 1))));
-        if (n > 0) {
-            blockPos = pos.relative(direction, n);
-            blockState = direction.getOpposite();
-            level.setBlock(blockPos, (net.minecraft.world.level.block.state.BlockState)blockState2.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)blockState), 3);
-            this.notifyNeighbors(level, blockPos, (net.minecraft.core.Direction)blockState);
-            this.emitState(level, blockPos, bl3, bl4, bl, bl2);
+        net.minecraft.world.level.block.state.BlockState $$19 = (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)$$10))).setValue((net.minecraft.world.level.block.state.properties.Property)POWERED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)($$11 &= ($$10 &= $$12 > 1))));
+        if ($$12 > 0) {
+            net.minecraft.core.BlockPos $$20 = $$1.relative($$7, $$12);
+            net.minecraft.core.Direction $$21 = $$7.getOpposite();
+            $$0.setBlock($$20, (net.minecraft.world.level.block.state.BlockState)$$19.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$21), 3);
+            this.notifyNeighbors($$0, $$20, $$21);
+            this.emitState($$0, $$20, $$10, $$11, $$8, $$9);
         }
-        this.emitState(level, pos, bl3, bl4, bl, bl2);
-        if (!attaching) {
-            level.setBlock(pos, (net.minecraft.world.level.block.state.BlockState)blockState2.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)direction), 3);
-            if (shouldNotifyNeighbours) {
-                this.notifyNeighbors(level, pos, direction);
+        this.emitState($$0, $$1, $$10, $$11, $$8, $$9);
+        if (!$$3) {
+            $$0.setBlock($$1, (net.minecraft.world.level.block.state.BlockState)$$19.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$7), 3);
+            if ($$4) {
+                this.notifyNeighbors($$0, $$1, $$7);
             }
         }
-        if (bl != bl3) {
-            for (int i = 1; i < n; ++i) {
-                blockState = pos.relative(direction, i);
-                net.minecraft.world.level.block.state.BlockState blockState3 = blockStateArray[i];
-                if (blockState3 == null) continue;
-                level.setBlock((net.minecraft.core.BlockPos)blockState, (net.minecraft.world.level.block.state.BlockState)blockState3.setValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)bl3)), 3);
-                if (level.getBlockState((net.minecraft.core.BlockPos)blockState).isAir()) continue;
+        if ($$8 != $$10) {
+            for (int $$22 = 1; $$22 < $$12; ++$$22) {
+                net.minecraft.core.BlockPos $$23 = $$1.relative($$7, $$22);
+                net.minecraft.world.level.block.state.BlockState $$24 = $$13[$$22];
+                if ($$24 == null) continue;
+                $$0.setBlock($$23, (net.minecraft.world.level.block.state.BlockState)$$24.setValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)$$10)), 3);
+                if ($$0.getBlockState($$23).isAir()) continue;
             }
         }
     }
@@ -151,55 +149,55 @@
         }
     }
 
-    public void notifyNeighbors(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction direction) {
-        level.updateNeighborsAt(pos, (net.minecraft.world.level.block.Block)this);
-        level.updateNeighborsAt(pos.relative(direction.getOpposite()), (net.minecraft.world.level.block.Block)this);
+    public void notifyNeighbors(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.core.Direction $$2) {
+        $$0.updateNeighborsAt($$1, (net.minecraft.world.level.block.Block)this);
+        $$0.updateNeighborsAt($$1.relative($$2.getOpposite()), (net.minecraft.world.level.block.Block)this);
     }
 
-    public void onRemove(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState newState, boolean isMoving) {
-        if (isMoving || state.is(newState.getBlock())) {
+    public void onRemove(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if ($$4 || $$0.is($$3.getBlock())) {
             return;
         }
-        boolean bl = (java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED);
-        boolean bl2 = (java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)POWERED);
-        if (bl || bl2) {
-            this.calculateState(level, pos, state, true, false, -1, null);
+        boolean $$5 = (java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)ATTACHED);
+        boolean $$6 = (java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)POWERED);
+        if ($$5 || $$6) {
+            this.calculateState($$1, $$2, $$0, true, false, -1, null);
         }
-        if (bl2) {
-            level.updateNeighborsAt(pos, (net.minecraft.world.level.block.Block)this);
-            level.updateNeighborsAt(pos.relative(((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite()), (net.minecraft.world.level.block.Block)this);
+        if ($$6) {
+            $$1.updateNeighborsAt($$2, (net.minecraft.world.level.block.Block)this);
+            $$1.updateNeighborsAt($$2.relative(((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)).getOpposite()), (net.minecraft.world.level.block.Block)this);
         }
-        super.onRemove(state, level, pos, newState, isMoving);
+        super.onRemove($$0, $$1, $$2, $$3, $$4);
     }
 
-    public int getSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.BlockGetter blockAccess, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction side) {
-        return (java.lang.Boolean)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)POWERED) != false ? 15 : 0;
+    public int getSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.core.Direction $$3) {
+        return (java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)POWERED) != false ? 15 : 0;
     }
 
-    public int getDirectSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.BlockGetter blockAccess, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction side) {
-        if (!((java.lang.Boolean)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)POWERED)).booleanValue()) {
+    public int getDirectSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.core.Direction $$3) {
+        if (!((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)POWERED)).booleanValue()) {
             return 0;
         }
-        if (blockState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) == side) {
+        if ($$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) == $$3) {
             return 15;
         }
         return 0;
     }
 
-    public boolean isSignalSource(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean isSignalSource(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
-    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Rotation rotation) {
-        return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)rotation.rotate((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Rotation $$1) {
+        return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$1.rotate((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Mirror mirror) {
-        return state.rotate(mirror.getRotation((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Mirror $$1) {
+        return $$0.rotate($$1.getRotation((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, POWERED, ATTACHED});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, POWERED, ATTACHED});
     }
 
     static {