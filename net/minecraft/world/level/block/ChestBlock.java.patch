--- net/minecraft/world/level/block/ChestBlock.java
+++ net/minecraft/world/level/block/ChestBlock.java
@@ -26,41 +26,41 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)net.minecraft.core.Direction.NORTH)).setValue((net.minecraft.world.level.block.state.properties.Property)TYPE, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.ChestType.SINGLE)).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false)));
     }
 
-    public static net.minecraft.world.level.block.DoubleBlockCombiner$BlockType getBlockType(net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.world.level.block.state.properties.ChestType chestType = (net.minecraft.world.level.block.state.properties.ChestType)state.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE);
-        if (chestType == net.minecraft.world.level.block.state.properties.ChestType.SINGLE) {
+    public static net.minecraft.world.level.block.DoubleBlockCombiner$BlockType getBlockType(net.minecraft.world.level.block.state.BlockState $$0) {
+        net.minecraft.world.level.block.state.properties.ChestType $$1 = (net.minecraft.world.level.block.state.properties.ChestType)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE);
+        if ($$1 == net.minecraft.world.level.block.state.properties.ChestType.SINGLE) {
             return net.minecraft.world.level.block.DoubleBlockCombiner$BlockType.SINGLE;
         }
-        if (chestType == net.minecraft.world.level.block.state.properties.ChestType.RIGHT) {
+        if ($$1 == net.minecraft.world.level.block.state.properties.ChestType.RIGHT) {
             return net.minecraft.world.level.block.DoubleBlockCombiner$BlockType.FIRST;
         }
         return net.minecraft.world.level.block.DoubleBlockCombiner$BlockType.SECOND;
     }
 
-    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState state) {
+    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState $$0) {
         return net.minecraft.world.level.block.RenderShape.ENTITYBLOCK_ANIMATED;
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)level));
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
+            $$3.scheduleTick($$4, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)$$3));
         }
-        if (facingState.is((net.minecraft.world.level.block.Block)this) && facing.getAxis().isHorizontal()) {
-            net.minecraft.world.level.block.state.properties.ChestType chestType = (net.minecraft.world.level.block.state.properties.ChestType)facingState.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE);
-            if (state.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.ChestType.SINGLE && chestType != net.minecraft.world.level.block.state.properties.ChestType.SINGLE && state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) == facingState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) && net.minecraft.world.level.block.ChestBlock.getConnectedDirection((net.minecraft.world.level.block.state.BlockState)facingState) == facing.getOpposite()) {
-                return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)TYPE, (java.lang.Comparable)chestType.getOpposite());
+        if ($$2.is((net.minecraft.world.level.block.Block)this) && $$1.getAxis().isHorizontal()) {
+            net.minecraft.world.level.block.state.properties.ChestType $$6 = (net.minecraft.world.level.block.state.properties.ChestType)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE);
+            if ($$0.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.ChestType.SINGLE && $$6 != net.minecraft.world.level.block.state.properties.ChestType.SINGLE && $$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) == $$2.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) && net.minecraft.world.level.block.ChestBlock.getConnectedDirection((net.minecraft.world.level.block.state.BlockState)$$2) == $$1.getOpposite()) {
+                return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)TYPE, (java.lang.Comparable)$$6.getOpposite());
             }
-        } else if (net.minecraft.world.level.block.ChestBlock.getConnectedDirection((net.minecraft.world.level.block.state.BlockState)state) == facing) {
-            return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)TYPE, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.ChestType.SINGLE);
+        } else if (net.minecraft.world.level.block.ChestBlock.getConnectedDirection((net.minecraft.world.level.block.state.BlockState)$$0) == $$1) {
+            return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)TYPE, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.ChestType.SINGLE);
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        if (state.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.ChestType.SINGLE) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        if ($$0.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.ChestType.SINGLE) {
             return AABB;
         }
-        switch (net.minecraft.world.level.block.ChestBlock$4.$SwitchMap$net$minecraft$core$Direction[net.minecraft.world.level.block.ChestBlock.getConnectedDirection((net.minecraft.world.level.block.state.BlockState)state).ordinal()]) {
+        switch (net.minecraft.world.level.block.ChestBlock$4.$SwitchMap$net$minecraft$core$Direction[net.minecraft.world.level.block.ChestBlock.getConnectedDirection((net.minecraft.world.level.block.state.BlockState)$$0).ordinal()]) {
             default: {
                 return NORTH_AABB;
             }
@@ -75,73 +75,73 @@
         return EAST_AABB;
     }
 
-    public static net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.core.Direction direction = (net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
-        return state.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.ChestType.LEFT ? direction.getClockWise() : direction.getCounterClockWise();
+    public static net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState $$0) {
+        net.minecraft.core.Direction $$1 = (net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING);
+        return $$0.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.ChestType.LEFT ? $$1.getClockWise() : $$1.getCounterClockWise();
     }
 
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        net.minecraft.core.Direction direction;
-        net.minecraft.world.level.block.state.properties.ChestType chestType = net.minecraft.world.level.block.state.properties.ChestType.SINGLE;
-        net.minecraft.core.Direction direction2 = context.getHorizontalDirection().getOpposite();
-        net.minecraft.world.level.material.FluidState fluidState = context.getLevel().getFluidState(context.getClickedPos());
-        boolean bl = context.isSecondaryUseActive();
-        net.minecraft.core.Direction direction3 = context.getClickedFace();
-        if (direction3.getAxis().isHorizontal() && bl && (direction = this.candidatePartnerFacing(context, direction3.getOpposite())) != null && direction.getAxis() != direction3.getAxis()) {
-            direction2 = direction;
-            net.minecraft.world.level.block.state.properties.ChestType chestType2 = chestType = direction2.getCounterClockWise() == direction3.getOpposite() ? net.minecraft.world.level.block.state.properties.ChestType.RIGHT : net.minecraft.world.level.block.state.properties.ChestType.LEFT;
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        net.minecraft.core.Direction $$6;
+        net.minecraft.world.level.block.state.properties.ChestType $$1 = net.minecraft.world.level.block.state.properties.ChestType.SINGLE;
+        net.minecraft.core.Direction $$2 = $$0.getHorizontalDirection().getOpposite();
+        net.minecraft.world.level.material.FluidState $$3 = $$0.getLevel().getFluidState($$0.getClickedPos());
+        boolean $$4 = $$0.isSecondaryUseActive();
+        net.minecraft.core.Direction $$5 = $$0.getClickedFace();
+        if ($$5.getAxis().isHorizontal() && $$4 && ($$6 = this.candidatePartnerFacing($$0, $$5.getOpposite())) != null && $$6.getAxis() != $$5.getAxis()) {
+            $$2 = $$6;
+            net.minecraft.world.level.block.state.properties.ChestType chestType = $$1 = $$2.getCounterClockWise() == $$5.getOpposite() ? net.minecraft.world.level.block.state.properties.ChestType.RIGHT : net.minecraft.world.level.block.state.properties.ChestType.LEFT;
         }
-        if (chestType == net.minecraft.world.level.block.state.properties.ChestType.SINGLE && !bl) {
-            if (direction2 == this.candidatePartnerFacing(context, direction2.getClockWise())) {
-                chestType = net.minecraft.world.level.block.state.properties.ChestType.LEFT;
-            } else if (direction2 == this.candidatePartnerFacing(context, direction2.getCounterClockWise())) {
-                chestType = net.minecraft.world.level.block.state.properties.ChestType.RIGHT;
+        if ($$1 == net.minecraft.world.level.block.state.properties.ChestType.SINGLE && !$$4) {
+            if ($$2 == this.candidatePartnerFacing($$0, $$2.getClockWise())) {
+                $$1 = net.minecraft.world.level.block.state.properties.ChestType.LEFT;
+            } else if ($$2 == this.candidatePartnerFacing($$0, $$2.getCounterClockWise())) {
+                $$1 = net.minecraft.world.level.block.state.properties.ChestType.RIGHT;
             }
         }
-        return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)direction2)).setValue((net.minecraft.world.level.block.state.properties.Property)TYPE, (java.lang.Comparable)chestType)).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((fluidState.getType() == net.minecraft.world.level.material.Fluids.WATER ? 1 : 0) != 0));
+        return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$2)).setValue((net.minecraft.world.level.block.state.properties.Property)TYPE, (java.lang.Comparable)$$1)).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf(($$3.getType() == net.minecraft.world.level.material.Fluids.WATER ? 1 : 0) != 0));
     }
 
-    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState state) {
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
+    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState $$0) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
             return net.minecraft.world.level.material.Fluids.WATER.getSource(false);
         }
-        return super.getFluidState(state);
+        return super.getFluidState($$0);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.core.Direction candidatePartnerFacing(net.minecraft.world.item.context.BlockPlaceContext context, net.minecraft.core.Direction direction) {
-        net.minecraft.world.level.block.state.BlockState blockState = context.getLevel().getBlockState(context.getClickedPos().relative(direction));
-        return blockState.is((net.minecraft.world.level.block.Block)this) && blockState.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.ChestType.SINGLE ? (net.minecraft.core.Direction)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) : null;
+    public net.minecraft.core.Direction candidatePartnerFacing(net.minecraft.world.item.context.BlockPlaceContext $$0, net.minecraft.core.Direction $$1) {
+        net.minecraft.world.level.block.state.BlockState $$2 = $$0.getLevel().getBlockState($$0.getClickedPos().relative($$1));
+        return $$2.is((net.minecraft.world.level.block.Block)this) && $$2.getValue((net.minecraft.world.level.block.state.properties.Property)TYPE) == net.minecraft.world.level.block.state.properties.ChestType.SINGLE ? (net.minecraft.core.Direction)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)FACING) : null;
     }
 
-    public void setPlacedBy(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.entity.LivingEntity placer, net.minecraft.world.item.ItemStack stack) {
-        net.minecraft.world.level.block.entity.BlockEntity blockEntity;
-        if (stack.hasCustomHoverName() && (blockEntity = level.getBlockEntity(pos)) instanceof net.minecraft.world.level.block.entity.ChestBlockEntity) {
-            ((net.minecraft.world.level.block.entity.ChestBlockEntity)blockEntity).setCustomName(stack.getHoverName());
+    public void setPlacedBy(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.entity.LivingEntity $$3, net.minecraft.world.item.ItemStack $$4) {
+        net.minecraft.world.level.block.entity.BlockEntity $$5;
+        if ($$4.hasCustomHoverName() && ($$5 = $$0.getBlockEntity($$1)) instanceof net.minecraft.world.level.block.entity.ChestBlockEntity) {
+            ((net.minecraft.world.level.block.entity.ChestBlockEntity)$$5).setCustomName($$4.getHoverName());
         }
     }
 
-    public void onRemove(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState newState, boolean isMoving) {
-        if (state.is(newState.getBlock())) {
+    public void onRemove(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if ($$0.is($$3.getBlock())) {
             return;
         }
-        net.minecraft.world.level.block.entity.BlockEntity blockEntity = level.getBlockEntity(pos);
-        if (blockEntity instanceof net.minecraft.world.Container) {
-            net.minecraft.world.Containers.dropContents((net.minecraft.world.level.Level)level, (net.minecraft.core.BlockPos)pos, (net.minecraft.world.Container)((net.minecraft.world.Container)blockEntity));
-            level.updateNeighbourForOutputSignal(pos, (net.minecraft.world.level.block.Block)this);
+        net.minecraft.world.level.block.entity.BlockEntity $$5 = $$1.getBlockEntity($$2);
+        if ($$5 instanceof net.minecraft.world.Container) {
+            net.minecraft.world.Containers.dropContents((net.minecraft.world.level.Level)$$1, (net.minecraft.core.BlockPos)$$2, (net.minecraft.world.Container)((net.minecraft.world.Container)$$5));
+            $$1.updateNeighbourForOutputSignal($$2, (net.minecraft.world.level.block.Block)this);
         }
-        super.onRemove(state, level, pos, newState, isMoving);
+        super.onRemove($$0, $$1, $$2, $$3, $$4);
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        if (level.isClientSide) {
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        if ($$1.isClientSide) {
             return net.minecraft.world.InteractionResult.SUCCESS;
         }
-        net.minecraft.world.MenuProvider menuProvider = this.getMenuProvider(state, level, pos);
-        if (menuProvider != null) {
-            player.openMenu(menuProvider);
-            player.awardStat(this.getOpenChestStat());
-            net.minecraft.world.entity.monster.piglin.PiglinAi.angerNearbyPiglins((net.minecraft.world.entity.player.Player)player, (boolean)true);
+        net.minecraft.world.MenuProvider $$6 = this.getMenuProvider($$0, $$1, $$2);
+        if ($$6 != null) {
+            $$3.openMenu($$6);
+            $$3.awardStat(this.getOpenChestStat());
+            net.minecraft.world.entity.monster.piglin.PiglinAi.angerNearbyPiglins((net.minecraft.world.entity.player.Player)$$3, (boolean)true);
         }
         return net.minecraft.world.InteractionResult.CONSUME;
     }
@@ -155,21 +155,26 @@
     }
 
     @javax.annotation.Nullable
-    public static net.minecraft.world.Container getContainer(net.minecraft.world.level.block.ChestBlock chest, net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, boolean override) {
-        return (net.minecraft.world.Container)((java.util.Optional)chest.combine(state, level, pos, override).apply(CHEST_COMBINER)).orElse(null);
+    public static net.minecraft.world.Container getContainer(net.minecraft.world.level.block.ChestBlock $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.world.level.Level $$2, net.minecraft.core.BlockPos $$3, boolean $$4) {
+        return (net.minecraft.world.Container)((java.util.Optional)$$0.combine($$1, $$2, $$3, $$4).apply(CHEST_COMBINER)).orElse(null);
     }
 
-    public net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult<? extends net.minecraft.world.level.block.entity.ChestBlockEntity> combine(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, boolean override) {
-        java.util.function.BiPredicate biPredicate = override ? ($$0, $$1) -> false : net.minecraft.world.level.block.ChestBlock::isChestBlockedAt;
-        return net.minecraft.world.level.block.DoubleBlockCombiner.combineWithNeigbour((net.minecraft.world.level.block.entity.BlockEntityType)((net.minecraft.world.level.block.entity.BlockEntityType)this.blockEntityType.get()), net.minecraft.world.level.block.ChestBlock::getBlockType, net.minecraft.world.level.block.ChestBlock::getConnectedDirection, (net.minecraft.world.level.block.state.properties.DirectionProperty)FACING, (net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)pos, (java.util.function.BiPredicate)biPredicate);
+    public net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult<? extends net.minecraft.world.level.block.entity.ChestBlockEntity> combine(net.minecraft.world.level.block.state.BlockState $$02, net.minecraft.world.level.Level $$12, net.minecraft.core.BlockPos $$2, boolean $$3) {
+        java.util.function.BiPredicate $$5;
+        if ($$3) {
+            java.util.function.BiPredicate $$4 = ($$0, $$1) -> false;
+        } else {
+            $$5 = net.minecraft.world.level.block.ChestBlock::isChestBlockedAt;
+        }
+        return net.minecraft.world.level.block.DoubleBlockCombiner.combineWithNeigbour((net.minecraft.world.level.block.entity.BlockEntityType)((net.minecraft.world.level.block.entity.BlockEntityType)this.blockEntityType.get()), net.minecraft.world.level.block.ChestBlock::getBlockType, net.minecraft.world.level.block.ChestBlock::getConnectedDirection, (net.minecraft.world.level.block.state.properties.DirectionProperty)FACING, (net.minecraft.world.level.block.state.BlockState)$$02, (net.minecraft.world.level.LevelAccessor)$$12, (net.minecraft.core.BlockPos)$$2, (java.util.function.BiPredicate)$$5);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        return (net.minecraft.world.MenuProvider)((java.util.Optional)this.combine(state, level, pos, false).apply(MENU_PROVIDER_COMBINER)).orElse(null);
+    public net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2) {
+        return (net.minecraft.world.MenuProvider)((java.util.Optional)this.combine($$0, $$1, $$2, false).apply(MENU_PROVIDER_COMBINER)).orElse(null);
     }
 
-    public static net.minecraft.world.level.block.DoubleBlockCombiner$Combiner<net.minecraft.world.level.block.entity.ChestBlockEntity, it.unimi.dsi.fastutil.floats.Float2FloatFunction> opennessCombiner(net.minecraft.world.level.block.entity.LidBlockEntity lid) {
+    public static net.minecraft.world.level.block.DoubleBlockCombiner$Combiner<net.minecraft.world.level.block.entity.ChestBlockEntity, it.unimi.dsi.fastutil.floats.Float2FloatFunction> opennessCombiner(net.minecraft.world.level.block.entity.LidBlockEntity $$0) {
         return new /* Unavailable Anonymous Inner Class!! */;
     }
 
@@ -182,47 +187,47 @@
         return $$0.isClientSide ? net.minecraft.world.level.block.ChestBlock.createTickerHelper($$2, (net.minecraft.world.level.block.entity.BlockEntityType)this.blockEntityType(), net.minecraft.world.level.block.entity.ChestBlockEntity::lidAnimateTick) : null;
     }
 
-    public static boolean isChestBlockedAt(net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos) {
-        return net.minecraft.world.level.block.ChestBlock.isBlockedChestByBlock((net.minecraft.world.level.BlockGetter)level, (net.minecraft.core.BlockPos)pos) || net.minecraft.world.level.block.ChestBlock.isCatSittingOnChest((net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)pos);
+    public static boolean isChestBlockedAt(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1) {
+        return net.minecraft.world.level.block.ChestBlock.isBlockedChestByBlock((net.minecraft.world.level.BlockGetter)$$0, (net.minecraft.core.BlockPos)$$1) || net.minecraft.world.level.block.ChestBlock.isCatSittingOnChest((net.minecraft.world.level.LevelAccessor)$$0, (net.minecraft.core.BlockPos)$$1);
     }
 
-    public static boolean isBlockedChestByBlock(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.core.BlockPos blockPos = pos.above();
-        return level.getBlockState(blockPos).isRedstoneConductor(level, blockPos);
+    public static boolean isBlockedChestByBlock(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1) {
+        net.minecraft.core.BlockPos $$2 = $$1.above();
+        return $$0.getBlockState($$2).isRedstoneConductor($$0, $$2);
     }
 
-    public static boolean isCatSittingOnChest(net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos) {
-        java.util.List list = level.getEntitiesOfClass(net.minecraft.world.entity.animal.Cat.class, new net.minecraft.world.phys.AABB((double)pos.getX(), (double)(pos.getY() + 1), (double)pos.getZ(), (double)(pos.getX() + 1), (double)(pos.getY() + 2), (double)(pos.getZ() + 1)));
-        if (!list.isEmpty()) {
-            for (net.minecraft.world.entity.animal.Cat cat : list) {
-                if (!cat.isInSittingPose()) continue;
+    public static boolean isCatSittingOnChest(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1) {
+        java.util.List $$2 = $$0.getEntitiesOfClass(net.minecraft.world.entity.animal.Cat.class, new net.minecraft.world.phys.AABB((double)$$1.getX(), (double)($$1.getY() + 1), (double)$$1.getZ(), (double)($$1.getX() + 1), (double)($$1.getY() + 2), (double)($$1.getZ() + 1)));
+        if (!$$2.isEmpty()) {
+            for (net.minecraft.world.entity.animal.Cat $$3 : $$2) {
+                if (!$$3.isInSittingPose()) continue;
                 return true;
             }
         }
         return false;
     }
 
-    public boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
-    public int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        return net.minecraft.world.inventory.AbstractContainerMenu.getRedstoneSignalFromContainer((net.minecraft.world.Container)net.minecraft.world.level.block.ChestBlock.getContainer((net.minecraft.world.level.block.ChestBlock)this, (net.minecraft.world.level.block.state.BlockState)blockState, (net.minecraft.world.level.Level)level, (net.minecraft.core.BlockPos)pos, (boolean)false));
+    public int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2) {
+        return net.minecraft.world.inventory.AbstractContainerMenu.getRedstoneSignalFromContainer((net.minecraft.world.Container)net.minecraft.world.level.block.ChestBlock.getContainer((net.minecraft.world.level.block.ChestBlock)this, (net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.level.Level)$$1, (net.minecraft.core.BlockPos)$$2, (boolean)false));
     }
 
-    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Rotation rotation) {
-        return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)rotation.rotate((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Rotation $$1) {
+        return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)FACING, (java.lang.Comparable)$$1.rotate((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Mirror mirror) {
-        return state.rotate(mirror.getRotation((net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
+    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Mirror $$1) {
+        return $$0.rotate($$1.getRotation((net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)FACING)));
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, TYPE, WATERLOGGED});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{FACING, TYPE, WATERLOGGED});
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 