--- net/minecraft/world/level/block/state/properties/IntegerProperty.java
+++ net/minecraft/world/level/block/state/properties/IntegerProperty.java
@@ -10,34 +10,34 @@
     public int min;
     public int max;
 
-    public net.minecraft.world.level.block.state.properties.IntegerProperty(java.lang.String name, int min, int max) {
-        super(name, java.lang.Integer.class);
-        if (min < 0) {
-            throw new java.lang.IllegalArgumentException("Min value of " + name + " must be 0 or greater");
+    public net.minecraft.world.level.block.state.properties.IntegerProperty(java.lang.String $$0, int $$1, int $$2) {
+        super($$0, java.lang.Integer.class);
+        if ($$1 < 0) {
+            throw new java.lang.IllegalArgumentException("Min value of " + $$0 + " must be 0 or greater");
         }
-        if (max <= min) {
-            throw new java.lang.IllegalArgumentException("Max value of " + name + " must be greater than min (" + min + ")");
+        if ($$2 <= $$1) {
+            throw new java.lang.IllegalArgumentException("Max value of " + $$0 + " must be greater than min (" + $$1 + ")");
         }
-        this.min = min;
-        this.max = max;
-        java.util.HashSet hashSet = com.google.common.collect.Sets.newHashSet();
-        for (int i = min; i <= max; ++i) {
-            hashSet.add((java.lang.Object)i);
+        this.min = $$1;
+        this.max = $$2;
+        java.util.HashSet $$3 = com.google.common.collect.Sets.newHashSet();
+        for (int $$4 = $$1; $$4 <= $$2; ++$$4) {
+            $$3.add((java.lang.Object)$$4);
         }
-        this.values = com.google.common.collect.ImmutableSet.copyOf((java.util.Collection)hashSet);
+        this.values = com.google.common.collect.ImmutableSet.copyOf((java.util.Collection)$$3);
     }
 
     public java.util.Collection<java.lang.Integer> getPossibleValues() {
         return this.values;
     }
 
-    public boolean equals(java.lang.Object other) {
-        if (this == other) {
+    public boolean equals(java.lang.Object $$0) {
+        if (this == $$0) {
             return true;
         }
-        if (other instanceof net.minecraft.world.level.block.state.properties.IntegerProperty && super.equals(other)) {
-            net.minecraft.world.level.block.state.properties.IntegerProperty integerProperty = (net.minecraft.world.level.block.state.properties.IntegerProperty)other;
-            return this.values.equals((java.lang.Object)integerProperty.values);
+        if ($$0 instanceof net.minecraft.world.level.block.state.properties.IntegerProperty && super.equals($$0)) {
+            net.minecraft.world.level.block.state.properties.IntegerProperty $$1 = (net.minecraft.world.level.block.state.properties.IntegerProperty)$$0;
+            return this.values.equals((java.lang.Object)$$1.values);
         }
         return false;
     }
@@ -46,22 +46,22 @@
         return 31 * super.generateHashCode() + this.values.hashCode();
     }
 
-    public static net.minecraft.world.level.block.state.properties.IntegerProperty create(java.lang.String name, int min, int max) {
-        return new net.minecraft.world.level.block.state.properties.IntegerProperty(name, min, max);
+    public static net.minecraft.world.level.block.state.properties.IntegerProperty create(java.lang.String $$0, int $$1, int $$2) {
+        return new net.minecraft.world.level.block.state.properties.IntegerProperty($$0, $$1, $$2);
     }
 
-    public java.util.Optional<java.lang.Integer> getValue(java.lang.String value) {
+    public java.util.Optional<java.lang.Integer> getValue(java.lang.String $$0) {
         try {
-            java.lang.Integer n = java.lang.Integer.valueOf((java.lang.String)value);
-            return n >= this.min && n <= this.max ? java.util.Optional.of((java.lang.Object)n) : java.util.Optional.empty();
+            java.lang.Integer $$1 = java.lang.Integer.valueOf((java.lang.String)$$0);
+            return $$1 >= this.min && $$1 <= this.max ? java.util.Optional.of((java.lang.Object)$$1) : java.util.Optional.empty();
         }
-        catch (java.lang.NumberFormatException numberFormatException) {
+        catch (java.lang.NumberFormatException $$2) {
             return java.util.Optional.empty();
         }
     }
 
-    public java.lang.String getName(java.lang.Integer value) {
-        return value.toString();
+    public java.lang.String getName(java.lang.Integer $$0) {
+        return $$0.toString();
     }
 }
 