--- net/minecraft/world/level/block/state/predicate/BlockStatePredicate.java
+++ net/minecraft/world/level/block/state/predicate/BlockStatePredicate.java
@@ -10,13 +10,13 @@
     public net.minecraft.world.level.block.state.StateDefinition<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> definition;
     public java.util.Map<net.minecraft.world.level.block.state.properties.Property<?>, java.util.function.Predicate<java.lang.Object>> properties;
 
-    public net.minecraft.world.level.block.state.predicate.BlockStatePredicate(net.minecraft.world.level.block.state.StateDefinition<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> definition) {
+    public net.minecraft.world.level.block.state.predicate.BlockStatePredicate(net.minecraft.world.level.block.state.StateDefinition<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
         this.properties = com.google.common.collect.Maps.newHashMap();
-        this.definition = definition;
+        this.definition = $$0;
     }
 
-    public static net.minecraft.world.level.block.state.predicate.BlockStatePredicate forBlock(net.minecraft.world.level.block.Block block) {
-        return new net.minecraft.world.level.block.state.predicate.BlockStatePredicate(block.getStateDefinition());
+    public static net.minecraft.world.level.block.state.predicate.BlockStatePredicate forBlock(net.minecraft.world.level.block.Block $$0) {
+        return new net.minecraft.world.level.block.state.predicate.BlockStatePredicate($$0.getStateDefinition());
     }
 
     public boolean test(@javax.annotation.Nullable net.minecraft.world.level.block.state.BlockState $$0) {
@@ -33,16 +33,16 @@
         return true;
     }
 
-    public <T extends java.lang.Comparable<T>> boolean applies(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.state.properties.Property<T> property, java.util.function.Predicate<java.lang.Object> valuePredicate) {
-        java.lang.Comparable comparable = state.getValue(property);
-        return valuePredicate.test((java.lang.Object)comparable);
+    public <T extends java.lang.Comparable<T>> boolean applies(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.state.properties.Property<T> $$1, java.util.function.Predicate<java.lang.Object> $$2) {
+        java.lang.Comparable $$3 = $$0.getValue($$1);
+        return $$2.test((java.lang.Object)$$3);
     }
 
-    public <V extends java.lang.Comparable<V>> net.minecraft.world.level.block.state.predicate.BlockStatePredicate where(net.minecraft.world.level.block.state.properties.Property<V> property, java.util.function.Predicate<java.lang.Object> valuePredicate) {
-        if (!this.definition.getProperties().contains(property)) {
-            throw new java.lang.IllegalArgumentException(this.definition + " cannot support property " + property);
+    public <V extends java.lang.Comparable<V>> net.minecraft.world.level.block.state.predicate.BlockStatePredicate where(net.minecraft.world.level.block.state.properties.Property<V> $$0, java.util.function.Predicate<java.lang.Object> $$1) {
+        if (!this.definition.getProperties().contains($$0)) {
+            throw new java.lang.IllegalArgumentException(this.definition + " cannot support property " + $$0);
         }
-        this.properties.put(property, valuePredicate);
+        this.properties.put($$0, $$1);
         return this;
     }
 