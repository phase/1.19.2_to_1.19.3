--- net/minecraft/world/level/block/state/pattern/BlockPatternBuilder.java
+++ net/minecraft/world/level/block/state/pattern/BlockPatternBuilder.java
@@ -17,27 +17,27 @@
         this.lookup.put((java.lang.Object)java.lang.Character.valueOf((char)' '), $$0 -> true);
     }
 
-    public net.minecraft.world.level.block.state.pattern.BlockPatternBuilder aisle(java.lang.String ... aisle) {
-        if (org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[])aisle) || org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence)aisle[0])) {
+    public net.minecraft.world.level.block.state.pattern.BlockPatternBuilder aisle(java.lang.String ... $$0) {
+        if (org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[])$$0) || org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence)$$0[0])) {
             throw new java.lang.IllegalArgumentException("Empty pattern for aisle");
         }
         if (this.pattern.isEmpty()) {
-            this.height = aisle.length;
-            this.width = aisle[0].length();
+            this.height = $$0.length;
+            this.width = $$0[0].length();
         }
-        if (aisle.length != this.height) {
-            throw new java.lang.IllegalArgumentException("Expected aisle with height of " + this.height + ", but was given one with a height of " + aisle.length + ")");
+        if ($$0.length != this.height) {
+            throw new java.lang.IllegalArgumentException("Expected aisle with height of " + this.height + ", but was given one with a height of " + $$0.length + ")");
         }
-        for (java.lang.String string : aisle) {
-            if (string.length() != this.width) {
-                throw new java.lang.IllegalArgumentException("Not all rows in the given aisle are the correct width (expected " + this.width + ", found one with " + string.length() + ")");
+        for (java.lang.String $$1 : $$0) {
+            if ($$1.length() != this.width) {
+                throw new java.lang.IllegalArgumentException("Not all rows in the given aisle are the correct width (expected " + this.width + ", found one with " + $$1.length() + ")");
             }
-            for (char c : string.toCharArray()) {
-                if (this.lookup.containsKey((java.lang.Object)java.lang.Character.valueOf((char)c))) continue;
-                this.lookup.put((java.lang.Object)java.lang.Character.valueOf((char)c), null);
+            for (char $$2 : $$1.toCharArray()) {
+                if (this.lookup.containsKey((java.lang.Object)java.lang.Character.valueOf((char)$$2))) continue;
+                this.lookup.put((java.lang.Object)java.lang.Character.valueOf((char)$$2), null);
             }
         }
-        this.pattern.add((java.lang.Object)aisle);
+        this.pattern.add((java.lang.Object)$$0);
         return this;
     }
 
@@ -45,8 +45,8 @@
         return new net.minecraft.world.level.block.state.pattern.BlockPatternBuilder();
     }
 
-    public net.minecraft.world.level.block.state.pattern.BlockPatternBuilder where(char symbol, java.util.function.Predicate<net.minecraft.world.level.block.state.pattern.BlockInWorld> blockMatcher) {
-        this.lookup.put((java.lang.Object)java.lang.Character.valueOf((char)symbol), blockMatcher);
+    public net.minecraft.world.level.block.state.pattern.BlockPatternBuilder where(char $$0, java.util.function.Predicate<net.minecraft.world.level.block.state.pattern.BlockInWorld> $$1) {
+        this.lookup.put((java.lang.Object)java.lang.Character.valueOf((char)$$0), $$1);
         return this;
     }
 