--- net/minecraft/world/level/block/state/StateDefinition$Builder.java
+++ net/minecraft/world/level/block/state/StateDefinition$Builder.java
@@ -8,35 +8,35 @@
     public O owner;
     public java.util.Map<java.lang.String, net.minecraft.world.level.block.state.properties.Property<?>> properties;
 
-    public net.minecraft.world.level.block.state.StateDefinition$Builder(O owner) {
+    public net.minecraft.world.level.block.state.StateDefinition$Builder(O $$0) {
         this.properties = com.google.common.collect.Maps.newHashMap();
-        this.owner = owner;
+        this.owner = $$0;
     }
 
-    public net.minecraft.world.level.block.state.StateDefinition$Builder<O, S> add(net.minecraft.world.level.block.state.properties.Property<?> ... properties) {
-        for (net.minecraft.world.level.block.state.properties.Property<?> property : properties) {
-            this.validateProperty(property);
-            this.properties.put((java.lang.Object)property.getName(), property);
+    public net.minecraft.world.level.block.state.StateDefinition$Builder<O, S> add(net.minecraft.world.level.block.state.properties.Property<?> ... $$0) {
+        for (net.minecraft.world.level.block.state.properties.Property<?> $$1 : $$0) {
+            this.validateProperty($$1);
+            this.properties.put((java.lang.Object)$$1.getName(), $$1);
         }
         return this;
     }
 
-    public <T extends java.lang.Comparable<T>> void validateProperty(net.minecraft.world.level.block.state.properties.Property<T> property) {
-        java.lang.String string = property.getName();
-        if (!net.minecraft.world.level.block.state.StateDefinition.NAME_PATTERN.matcher((java.lang.CharSequence)string).matches()) {
-            throw new java.lang.IllegalArgumentException(this.owner + " has invalidly named property: " + string);
+    public <T extends java.lang.Comparable<T>> void validateProperty(net.minecraft.world.level.block.state.properties.Property<T> $$0) {
+        java.lang.String $$1 = $$0.getName();
+        if (!net.minecraft.world.level.block.state.StateDefinition.NAME_PATTERN.matcher((java.lang.CharSequence)$$1).matches()) {
+            throw new java.lang.IllegalArgumentException(this.owner + " has invalidly named property: " + $$1);
         }
-        java.util.Collection collection = property.getPossibleValues();
-        if (collection.size() <= 1) {
-            throw new java.lang.IllegalArgumentException(this.owner + " attempted use property " + string + " with <= 1 possible values");
+        java.util.Collection $$2 = $$0.getPossibleValues();
+        if ($$2.size() <= 1) {
+            throw new java.lang.IllegalArgumentException(this.owner + " attempted use property " + $$1 + " with <= 1 possible values");
         }
-        for (java.lang.Comparable comparable : collection) {
-            java.lang.String string2 = property.getName(comparable);
-            if (net.minecraft.world.level.block.state.StateDefinition.NAME_PATTERN.matcher((java.lang.CharSequence)string2).matches()) continue;
-            throw new java.lang.IllegalArgumentException(this.owner + " has property: " + string + " with invalidly named value: " + string2);
+        for (java.lang.Comparable $$3 : $$2) {
+            java.lang.String $$4 = $$0.getName($$3);
+            if (net.minecraft.world.level.block.state.StateDefinition.NAME_PATTERN.matcher((java.lang.CharSequence)$$4).matches()) continue;
+            throw new java.lang.IllegalArgumentException(this.owner + " has property: " + $$1 + " with invalidly named value: " + $$4);
         }
-        if (this.properties.containsKey((java.lang.Object)string)) {
-            throw new java.lang.IllegalArgumentException(this.owner + " has duplicate property: " + string);
+        if (this.properties.containsKey((java.lang.Object)$$1)) {
+            throw new java.lang.IllegalArgumentException(this.owner + " has duplicate property: " + $$1);
         }
     }
 