--- net/minecraft/world/level/block/state/StateHolder.java
+++ net/minecraft/world/level/block/state/StateHolder.java
@@ -13,26 +13,26 @@
     public com.google.common.collect.Table<net.minecraft.world.level.block.state.properties.Property<?>, java.lang.Comparable<?>, S> neighbours;
     public com.mojang.serialization.MapCodec<S> propertiesCodec;
 
-    public net.minecraft.world.level.block.state.StateHolder(O owner, com.google.common.collect.ImmutableMap<net.minecraft.world.level.block.state.properties.Property<?>, java.lang.Comparable<?>> values, com.mojang.serialization.MapCodec<S> propertiesCodec) {
-        this.owner = owner;
-        this.values = values;
-        this.propertiesCodec = propertiesCodec;
+    public net.minecraft.world.level.block.state.StateHolder(O $$0, com.google.common.collect.ImmutableMap<net.minecraft.world.level.block.state.properties.Property<?>, java.lang.Comparable<?>> $$1, com.mojang.serialization.MapCodec<S> $$2) {
+        this.owner = $$0;
+        this.values = $$1;
+        this.propertiesCodec = $$2;
     }
 
-    public <T extends java.lang.Comparable<T>> S cycle(net.minecraft.world.level.block.state.properties.Property<T> property) {
-        return (S)this.setValue(property, (java.lang.Comparable)net.minecraft.world.level.block.state.StateHolder.findNextInCollection((java.util.Collection)property.getPossibleValues(), (java.lang.Object)this.getValue(property)));
+    public <T extends java.lang.Comparable<T>> S cycle(net.minecraft.world.level.block.state.properties.Property<T> $$0) {
+        return (S)this.setValue($$0, (java.lang.Comparable)net.minecraft.world.level.block.state.StateHolder.findNextInCollection((java.util.Collection)$$0.getPossibleValues(), (java.lang.Object)this.getValue($$0)));
     }
 
-    public static <T> T findNextInCollection(java.util.Collection<T> collection, T value) {
-        java.util.Iterator iterator = collection.iterator();
-        while (iterator.hasNext()) {
-            if (!iterator.next().equals(value)) continue;
-            if (iterator.hasNext()) {
-                return (T)iterator.next();
+    public static <T> T findNextInCollection(java.util.Collection<T> $$0, T $$1) {
+        java.util.Iterator $$2 = $$0.iterator();
+        while ($$2.hasNext()) {
+            if (!$$2.next().equals($$1)) continue;
+            if ($$2.hasNext()) {
+                return (T)$$2.next();
             }
-            return (T)collection.iterator().next();
+            return (T)$$0.iterator().next();
         }
-        return (T)iterator.next();
+        return (T)$$2.next();
     }
 
     public java.lang.String toString() {
@@ -50,39 +50,39 @@
         return java.util.Collections.unmodifiableCollection((java.util.Collection)this.values.keySet());
     }
 
-    public <T extends java.lang.Comparable<T>> boolean hasProperty(net.minecraft.world.level.block.state.properties.Property<T> property) {
-        return this.values.containsKey(property);
+    public <T extends java.lang.Comparable<T>> boolean hasProperty(net.minecraft.world.level.block.state.properties.Property<T> $$0) {
+        return this.values.containsKey($$0);
     }
 
-    public <T extends java.lang.Comparable<T>> T getValue(net.minecraft.world.level.block.state.properties.Property<T> property) {
-        java.lang.Comparable comparable = (java.lang.Comparable)this.values.get(property);
-        if (comparable == null) {
-            throw new java.lang.IllegalArgumentException("Cannot get property " + property + " as it does not exist in " + this.owner);
+    public <T extends java.lang.Comparable<T>> T getValue(net.minecraft.world.level.block.state.properties.Property<T> $$0) {
+        java.lang.Comparable $$1 = (java.lang.Comparable)this.values.get($$0);
+        if ($$1 == null) {
+            throw new java.lang.IllegalArgumentException("Cannot get property " + $$0 + " as it does not exist in " + this.owner);
         }
-        return (T)((java.lang.Comparable)property.getValueClass().cast((java.lang.Object)comparable));
+        return (T)((java.lang.Comparable)$$0.getValueClass().cast((java.lang.Object)$$1));
     }
 
-    public <T extends java.lang.Comparable<T>> java.util.Optional<T> getOptionalValue(net.minecraft.world.level.block.state.properties.Property<T> property) {
-        java.lang.Comparable comparable = (java.lang.Comparable)this.values.get(property);
-        if (comparable == null) {
+    public <T extends java.lang.Comparable<T>> java.util.Optional<T> getOptionalValue(net.minecraft.world.level.block.state.properties.Property<T> $$0) {
+        java.lang.Comparable $$1 = (java.lang.Comparable)this.values.get($$0);
+        if ($$1 == null) {
             return java.util.Optional.empty();
         }
-        return java.util.Optional.of((java.lang.Object)((java.lang.Comparable)property.getValueClass().cast((java.lang.Object)comparable)));
+        return java.util.Optional.of((java.lang.Object)((java.lang.Comparable)$$0.getValueClass().cast((java.lang.Object)$$1)));
     }
 
-    public <T extends java.lang.Comparable<T>, V extends T> S setValue(net.minecraft.world.level.block.state.properties.Property<T> property, V value) {
-        java.lang.Comparable comparable = (java.lang.Comparable)this.values.get(property);
-        if (comparable == null) {
-            throw new java.lang.IllegalArgumentException("Cannot set property " + property + " as it does not exist in " + this.owner);
+    public <T extends java.lang.Comparable<T>, V extends T> S setValue(net.minecraft.world.level.block.state.properties.Property<T> $$0, V $$1) {
+        java.lang.Comparable $$2 = (java.lang.Comparable)this.values.get($$0);
+        if ($$2 == null) {
+            throw new java.lang.IllegalArgumentException("Cannot set property " + $$0 + " as it does not exist in " + this.owner);
         }
-        if (comparable == value) {
+        if ($$2 == $$1) {
             return (S)this;
         }
-        java.lang.Object object = this.neighbours.get(property, value);
-        if (object == null) {
-            throw new java.lang.IllegalArgumentException("Cannot set property " + property + " to " + value + " on " + this.owner + ", it is not an allowed value");
+        java.lang.Object $$3 = this.neighbours.get($$0, $$1);
+        if ($$3 == null) {
+            throw new java.lang.IllegalArgumentException("Cannot set property " + $$0 + " to " + $$1 + " on " + this.owner + ", it is not an allowed value");
         }
-        return (S)object;
+        return (S)$$3;
     }
 
     public void populateNeighbours(java.util.Map<java.util.Map<net.minecraft.world.level.block.state.properties.Property<?>, java.lang.Comparable<?>>, S> $$0) {