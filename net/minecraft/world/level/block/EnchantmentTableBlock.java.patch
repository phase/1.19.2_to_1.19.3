--- net/minecraft/world/level/block/EnchantmentTableBlock.java
+++ net/minecraft/world/level/block/EnchantmentTableBlock.java
@@ -17,11 +17,11 @@
         return $$0.getBlockState($$1.offset((net.minecraft.core.Vec3i)$$2)).is(net.minecraft.world.level.block.Blocks.BOOKSHELF) && $$0.isEmptyBlock($$1.offset($$2.getX() / 2, $$2.getY(), $$2.getZ() / 2));
     }
 
-    public boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
         return SHAPE;
     }
 
@@ -33,7 +33,7 @@
         }
     }
 
-    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState state) {
+    public net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState $$0) {
         return net.minecraft.world.level.block.RenderShape.MODEL;
     }
 
@@ -46,32 +46,32 @@
         return $$0.isClientSide ? net.minecraft.world.level.block.EnchantmentTableBlock.createTickerHelper($$2, (net.minecraft.world.level.block.entity.BlockEntityType)net.minecraft.world.level.block.entity.BlockEntityType.ENCHANTING_TABLE, net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity::bookAnimationTick) : null;
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        if (level.isClientSide) {
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        if ($$1.isClientSide) {
             return net.minecraft.world.InteractionResult.SUCCESS;
         }
-        player.openMenu(state.getMenuProvider(level, pos));
+        $$3.openMenu($$0.getMenuProvider($$1, $$2));
         return net.minecraft.world.InteractionResult.CONSUME;
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.block.entity.BlockEntity blockEntity = level.getBlockEntity(pos);
-        if (blockEntity instanceof net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity) {
-            net.minecraft.network.chat.Component component = ((net.minecraft.world.Nameable)blockEntity).getDisplayName();
-            return new net.minecraft.world.SimpleMenuProvider(($$2, $$3, $$4) -> new net.minecraft.world.inventory.EnchantmentMenu($$2, $$3, net.minecraft.world.inventory.ContainerLevelAccess.create((net.minecraft.world.level.Level)level, (net.minecraft.core.BlockPos)pos)), component);
+    public net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$22) {
+        net.minecraft.world.level.block.entity.BlockEntity $$32 = $$1.getBlockEntity($$22);
+        if ($$32 instanceof net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity) {
+            net.minecraft.network.chat.Component $$42 = ((net.minecraft.world.Nameable)$$32).getDisplayName();
+            return new net.minecraft.world.SimpleMenuProvider(($$2, $$3, $$4) -> new net.minecraft.world.inventory.EnchantmentMenu($$2, $$3, net.minecraft.world.inventory.ContainerLevelAccess.create((net.minecraft.world.level.Level)$$1, (net.minecraft.core.BlockPos)$$22)), $$42);
         }
         return null;
     }
 
-    public void setPlacedBy(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.entity.LivingEntity placer, net.minecraft.world.item.ItemStack stack) {
-        net.minecraft.world.level.block.entity.BlockEntity blockEntity;
-        if (stack.hasCustomHoverName() && (blockEntity = level.getBlockEntity(pos)) instanceof net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity) {
-            ((net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity)blockEntity).setCustomName(stack.getHoverName());
+    public void setPlacedBy(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.entity.LivingEntity $$3, net.minecraft.world.item.ItemStack $$4) {
+        net.minecraft.world.level.block.entity.BlockEntity $$5;
+        if ($$4.hasCustomHoverName() && ($$5 = $$0.getBlockEntity($$1)) instanceof net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity) {
+            ((net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity)$$5).setCustomName($$4.getHoverName());
         }
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 