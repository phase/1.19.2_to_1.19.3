--- net/minecraft/world/level/block/ScaffoldingBlock.java
+++ net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -22,46 +22,46 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE, (java.lang.Comparable)java.lang.Integer.valueOf((int)7))).setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false))).setValue((net.minecraft.world.level.block.state.properties.Property)BOTTOM, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)false)));
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{DISTANCE, WATERLOGGED, BOTTOM});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{DISTANCE, WATERLOGGED, BOTTOM});
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        if (!context.isHoldingItem(state.getBlock().asItem())) {
-            return (java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)BOTTOM) != false ? UNSTABLE_SHAPE : STABLE_SHAPE;
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        if (!$$3.isHoldingItem($$0.getBlock().asItem())) {
+            return (java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)BOTTOM) != false ? UNSTABLE_SHAPE : STABLE_SHAPE;
         }
         return net.minecraft.world.phys.shapes.Shapes.block();
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
+    public net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2) {
         return net.minecraft.world.phys.shapes.Shapes.block();
     }
 
-    public boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.item.context.BlockPlaceContext useContext) {
-        return useContext.getItemInHand().is(this.asItem());
+    public boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.item.context.BlockPlaceContext $$1) {
+        return $$1.getItemInHand().is(this.asItem());
     }
 
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        net.minecraft.core.BlockPos blockPos = context.getClickedPos();
-        net.minecraft.world.level.Level level = context.getLevel();
-        int n = net.minecraft.world.level.block.ScaffoldingBlock.getDistance((net.minecraft.world.level.BlockGetter)level, (net.minecraft.core.BlockPos)blockPos);
-        return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf((level.getFluidState(blockPos).getType() == net.minecraft.world.level.material.Fluids.WATER ? 1 : 0) != 0))).setValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE, (java.lang.Comparable)java.lang.Integer.valueOf((int)n))).setValue((net.minecraft.world.level.block.state.properties.Property)BOTTOM, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)this.isBottom((net.minecraft.world.level.BlockGetter)level, blockPos, n)));
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        net.minecraft.core.BlockPos $$1 = $$0.getClickedPos();
+        net.minecraft.world.level.Level $$2 = $$0.getLevel();
+        int $$3 = net.minecraft.world.level.block.ScaffoldingBlock.getDistance((net.minecraft.world.level.BlockGetter)$$2, (net.minecraft.core.BlockPos)$$1);
+        return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED, (java.lang.Comparable)java.lang.Boolean.valueOf(($$2.getFluidState($$1).getType() == net.minecraft.world.level.material.Fluids.WATER ? 1 : 0) != 0))).setValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE, (java.lang.Comparable)java.lang.Integer.valueOf((int)$$3))).setValue((net.minecraft.world.level.block.state.properties.Property)BOTTOM, (java.lang.Comparable)java.lang.Boolean.valueOf((boolean)this.isBottom((net.minecraft.world.level.BlockGetter)$$2, $$1, $$3)));
     }
 
-    public void onPlace(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState oldState, boolean isMoving) {
-        if (!level.isClientSide) {
-            level.scheduleTick(pos, (net.minecraft.world.level.block.Block)this, 1);
+    public void onPlace(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if (!$$1.isClientSide) {
+            $$1.scheduleTick($$2, (net.minecraft.world.level.block.Block)this, 1);
         }
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)level));
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
+            $$3.scheduleTick($$4, (net.minecraft.world.level.material.Fluid)net.minecraft.world.level.material.Fluids.WATER, net.minecraft.world.level.material.Fluids.WATER.getTickDelay((net.minecraft.world.level.LevelReader)$$3));
         }
-        if (!level.isClientSide()) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.block.Block)this, 1);
+        if (!$$3.isClientSide()) {
+            $$3.scheduleTick($$4, (net.minecraft.world.level.block.Block)this, 1);
         }
-        return state;
+        return $$0;
     }
 
     public void tick(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.server.level.ServerLevel $$1, net.minecraft.core.BlockPos $$2, net.minecraft.util.RandomSource $$3) {
@@ -78,13 +78,13 @@
         }
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        return net.minecraft.world.level.block.ScaffoldingBlock.getDistance((net.minecraft.world.level.BlockGetter)level, (net.minecraft.core.BlockPos)pos) < 7;
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
+        return net.minecraft.world.level.block.ScaffoldingBlock.getDistance((net.minecraft.world.level.BlockGetter)$$1, (net.minecraft.core.BlockPos)$$2) < 7;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        if (!context.isAbove(net.minecraft.world.phys.shapes.Shapes.block(), pos, true) || context.isDescending()) {
-            if ((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE) != 0 && ((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)BOTTOM)).booleanValue() && context.isAbove(BELOW_BLOCK, pos, true)) {
+    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        if (!$$3.isAbove(net.minecraft.world.phys.shapes.Shapes.block(), $$2, true) || $$3.isDescending()) {
+            if ((java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE) != 0 && ((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)BOTTOM)).booleanValue() && $$3.isAbove(BELOW_BLOCK, $$2, true)) {
                 return UNSTABLE_SHAPE_BOTTOM;
             }
             return net.minecraft.world.phys.shapes.Shapes.empty();
@@ -92,32 +92,32 @@
         return STABLE_SHAPE;
     }
 
-    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState state) {
-        if (((java.lang.Boolean)state.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
+    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState $$0) {
+        if (((java.lang.Boolean)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WATERLOGGED)).booleanValue()) {
             return net.minecraft.world.level.material.Fluids.WATER.getSource(false);
         }
-        return super.getFluidState(state);
+        return super.getFluidState($$0);
     }
 
-    public boolean isBottom(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, int distance) {
-        return distance > 0 && !level.getBlockState(pos.below()).is((net.minecraft.world.level.block.Block)this);
+    public boolean isBottom(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, int $$2) {
+        return $$2 > 0 && !$$0.getBlockState($$1.below()).is((net.minecraft.world.level.block.Block)this);
     }
 
-    public static int getDistance(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.core.Direction direction;
-        net.minecraft.world.level.block.state.BlockState blockState;
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos = pos.mutable().move(net.minecraft.core.Direction.DOWN);
-        net.minecraft.world.level.block.state.BlockState blockState2 = level.getBlockState((net.minecraft.core.BlockPos)mutableBlockPos);
-        int n = 7;
-        if (blockState2.is(net.minecraft.world.level.block.Blocks.SCAFFOLDING)) {
-            n = (java.lang.Integer)blockState2.getValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE);
-        } else if (blockState2.isFaceSturdy(level, (net.minecraft.core.BlockPos)mutableBlockPos, net.minecraft.core.Direction.UP)) {
+    public static int getDistance(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1) {
+        net.minecraft.core.Direction $$5;
+        net.minecraft.world.level.block.state.BlockState $$6;
+        net.minecraft.core.BlockPos$MutableBlockPos $$2 = $$1.mutable().move(net.minecraft.core.Direction.DOWN);
+        net.minecraft.world.level.block.state.BlockState $$3 = $$0.getBlockState((net.minecraft.core.BlockPos)$$2);
+        int $$4 = 7;
+        if ($$3.is(net.minecraft.world.level.block.Blocks.SCAFFOLDING)) {
+            $$4 = (java.lang.Integer)$$3.getValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE);
+        } else if ($$3.isFaceSturdy($$0, (net.minecraft.core.BlockPos)$$2, net.minecraft.core.Direction.UP)) {
             return 0;
         }
         java.util.Iterator iterator = net.minecraft.core.Direction$Plane.HORIZONTAL.iterator();
-        while (iterator.hasNext() && (!(blockState = level.getBlockState((net.minecraft.core.BlockPos)mutableBlockPos.setWithOffset((net.minecraft.core.Vec3i)pos, direction = (net.minecraft.core.Direction)iterator.next()))).is(net.minecraft.world.level.block.Blocks.SCAFFOLDING) || (n = java.lang.Math.min((int)n, (int)((java.lang.Integer)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE) + 1))) != 1)) {
+        while (iterator.hasNext() && (!($$6 = $$0.getBlockState((net.minecraft.core.BlockPos)$$2.setWithOffset((net.minecraft.core.Vec3i)$$1, $$5 = (net.minecraft.core.Direction)iterator.next()))).is(net.minecraft.world.level.block.Blocks.SCAFFOLDING) || ($$4 = java.lang.Math.min((int)$$4, (int)((java.lang.Integer)$$6.getValue((net.minecraft.world.level.block.state.properties.Property)DISTANCE) + 1))) != 1)) {
         }
-        return n;
+        return $$4;
     }
 
     static {