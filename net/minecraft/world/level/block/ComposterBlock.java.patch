--- net/minecraft/world/level/block/ComposterBlock.java
+++ net/minecraft/world/level/block/ComposterBlock.java
@@ -119,8 +119,8 @@
         net.minecraft.world.level.block.ComposterBlock.add((float)1.0f, (net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.PUMPKIN_PIE);
     }
 
-    public static void add(float chance, net.minecraft.world.level.ItemLike item) {
-        COMPOSTABLES.put((java.lang.Object)item.asItem(), chance);
+    public static void add(float $$0, net.minecraft.world.level.ItemLike $$1) {
+        COMPOSTABLES.put((java.lang.Object)$$1.asItem(), $$0);
     }
 
     public net.minecraft.world.level.block.ComposterBlock(net.minecraft.world.level.block.state.BlockBehaviour$Properties $$0) {
@@ -128,104 +128,104 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)LEVEL, (java.lang.Comparable)java.lang.Integer.valueOf((int)0)));
     }
 
-    public static void handleFill(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, boolean success) {
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(pos);
-        level.playLocalSound((double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), success ? net.minecraft.sounds.SoundEvents.COMPOSTER_FILL_SUCCESS : net.minecraft.sounds.SoundEvents.COMPOSTER_FILL, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f, false);
-        double d = blockState.getShape((net.minecraft.world.level.BlockGetter)level, pos).max(net.minecraft.core.Direction$Axis.Y, 0.5, 0.5) + 0.03125;
-        double d2 = (double)0.13125f;
-        double d3 = (double)0.7375f;
-        net.minecraft.util.RandomSource randomSource = level.getRandom();
-        for (int i = 0; i < 10; ++i) {
-            double d4 = randomSource.nextGaussian() * 0.02;
-            double d5 = randomSource.nextGaussian() * 0.02;
-            double d6 = randomSource.nextGaussian() * 0.02;
-            level.addParticle((net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.COMPOSTER, (double)pos.getX() + (double)0.13125f + (double)0.7375f * (double)randomSource.nextFloat(), (double)pos.getY() + d + (double)randomSource.nextFloat() * (1.0 - d), (double)pos.getZ() + (double)0.13125f + (double)0.7375f * (double)randomSource.nextFloat(), d4, d5, d6);
+    public static void handleFill(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, boolean $$2) {
+        net.minecraft.world.level.block.state.BlockState $$3 = $$0.getBlockState($$1);
+        $$0.playLocalSound($$1, $$2 ? net.minecraft.sounds.SoundEvents.COMPOSTER_FILL_SUCCESS : net.minecraft.sounds.SoundEvents.COMPOSTER_FILL, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f, false);
+        double $$4 = $$3.getShape((net.minecraft.world.level.BlockGetter)$$0, $$1).max(net.minecraft.core.Direction$Axis.Y, 0.5, 0.5) + 0.03125;
+        double $$5 = (double)0.13125f;
+        double $$6 = (double)0.7375f;
+        net.minecraft.util.RandomSource $$7 = $$0.getRandom();
+        for (int $$8 = 0; $$8 < 10; ++$$8) {
+            double $$9 = $$7.nextGaussian() * 0.02;
+            double $$10 = $$7.nextGaussian() * 0.02;
+            double $$11 = $$7.nextGaussian() * 0.02;
+            $$0.addParticle((net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.COMPOSTER, (double)$$1.getX() + (double)0.13125f + (double)0.7375f * (double)$$7.nextFloat(), (double)$$1.getY() + $$4 + (double)$$7.nextFloat() * (1.0 - $$4), (double)$$1.getZ() + (double)0.13125f + (double)0.7375f * (double)$$7.nextFloat(), $$9, $$10, $$11);
         }
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        return SHAPES[(java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL)];
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        return SHAPES[(java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL)];
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos) {
+    public net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2) {
         return OUTER_SHAPE;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
+    public net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
         return SHAPES[0];
     }
 
-    public void onPlace(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState oldState, boolean isMoving) {
-        if ((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL) == 7) {
-            level.scheduleTick(pos, state.getBlock(), 20);
+    public void onPlace(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if ((java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL) == 7) {
+            $$1.scheduleTick($$2, $$0.getBlock(), 20);
         }
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        int n = (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
-        net.minecraft.world.item.ItemStack itemStack = player.getItemInHand(hand);
-        if (n < 8 && COMPOSTABLES.containsKey((java.lang.Object)itemStack.getItem())) {
-            if (n < 7 && !level.isClientSide) {
-                net.minecraft.world.level.block.state.BlockState blockState = net.minecraft.world.level.block.ComposterBlock.addItem((net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)pos, (net.minecraft.world.item.ItemStack)itemStack);
-                level.levelEvent(1500, pos, state != blockState ? 1 : 0);
-                player.awardStat(net.minecraft.stats.Stats.ITEM_USED.get((java.lang.Object)itemStack.getItem()));
-                if (!player.getAbilities().instabuild) {
-                    itemStack.shrink(1);
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        int $$6 = (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
+        net.minecraft.world.item.ItemStack $$7 = $$3.getItemInHand($$4);
+        if ($$6 < 8 && COMPOSTABLES.containsKey((java.lang.Object)$$7.getItem())) {
+            if ($$6 < 7 && !$$1.isClientSide) {
+                net.minecraft.world.level.block.state.BlockState $$8 = net.minecraft.world.level.block.ComposterBlock.addItem((net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.level.LevelAccessor)$$1, (net.minecraft.core.BlockPos)$$2, (net.minecraft.world.item.ItemStack)$$7);
+                $$1.levelEvent(1500, $$2, $$0 != $$8 ? 1 : 0);
+                $$3.awardStat(net.minecraft.stats.Stats.ITEM_USED.get((java.lang.Object)$$7.getItem()));
+                if (!$$3.getAbilities().instabuild) {
+                    $$7.shrink(1);
                 }
             }
-            return net.minecraft.world.InteractionResult.sidedSuccess((boolean)level.isClientSide);
+            return net.minecraft.world.InteractionResult.sidedSuccess((boolean)$$1.isClientSide);
         }
-        if (n == 8) {
-            net.minecraft.world.level.block.ComposterBlock.extractProduce((net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.level.Level)level, (net.minecraft.core.BlockPos)pos);
-            return net.minecraft.world.InteractionResult.sidedSuccess((boolean)level.isClientSide);
+        if ($$6 == 8) {
+            net.minecraft.world.level.block.ComposterBlock.extractProduce((net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.level.Level)$$1, (net.minecraft.core.BlockPos)$$2);
+            return net.minecraft.world.InteractionResult.sidedSuccess((boolean)$$1.isClientSide);
         }
         return net.minecraft.world.InteractionResult.PASS;
     }
 
-    public static net.minecraft.world.level.block.state.BlockState insertItem(net.minecraft.world.level.block.state.BlockState state, net.minecraft.server.level.ServerLevel level, net.minecraft.world.item.ItemStack stack, net.minecraft.core.BlockPos pos) {
-        int n = (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
-        if (n < 7 && COMPOSTABLES.containsKey((java.lang.Object)stack.getItem())) {
-            net.minecraft.world.level.block.state.BlockState blockState = net.minecraft.world.level.block.ComposterBlock.addItem((net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)pos, (net.minecraft.world.item.ItemStack)stack);
-            stack.shrink(1);
-            return blockState;
+    public static net.minecraft.world.level.block.state.BlockState insertItem(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.server.level.ServerLevel $$1, net.minecraft.world.item.ItemStack $$2, net.minecraft.core.BlockPos $$3) {
+        int $$4 = (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
+        if ($$4 < 7 && COMPOSTABLES.containsKey((java.lang.Object)$$2.getItem())) {
+            net.minecraft.world.level.block.state.BlockState $$5 = net.minecraft.world.level.block.ComposterBlock.addItem((net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.level.LevelAccessor)$$1, (net.minecraft.core.BlockPos)$$3, (net.minecraft.world.item.ItemStack)$$2);
+            $$2.shrink(1);
+            return $$5;
         }
-        return state;
+        return $$0;
     }
 
-    public static net.minecraft.world.level.block.state.BlockState extractProduce(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        if (!level.isClientSide) {
-            float f = 0.7f;
-            double d = (double)(level.random.nextFloat() * 0.7f) + (double)0.15f;
-            double d2 = (double)(level.random.nextFloat() * 0.7f) + 0.06000000238418579 + 0.6;
-            double d3 = (double)(level.random.nextFloat() * 0.7f) + (double)0.15f;
-            net.minecraft.world.entity.item.ItemEntity itemEntity = new net.minecraft.world.entity.item.ItemEntity(level, (double)pos.getX() + d, (double)pos.getY() + d2, (double)pos.getZ() + d3, new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.BONE_MEAL));
-            itemEntity.setDefaultPickUpDelay();
-            level.addFreshEntity((net.minecraft.world.entity.Entity)itemEntity);
+    public static net.minecraft.world.level.block.state.BlockState extractProduce(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2) {
+        if (!$$1.isClientSide) {
+            float $$3 = 0.7f;
+            double $$4 = (double)($$1.random.nextFloat() * 0.7f) + (double)0.15f;
+            double $$5 = (double)($$1.random.nextFloat() * 0.7f) + 0.06000000238418579 + 0.6;
+            double $$6 = (double)($$1.random.nextFloat() * 0.7f) + (double)0.15f;
+            net.minecraft.world.entity.item.ItemEntity $$7 = new net.minecraft.world.entity.item.ItemEntity($$1, (double)$$2.getX() + $$4, (double)$$2.getY() + $$5, (double)$$2.getZ() + $$6, new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.BONE_MEAL));
+            $$7.setDefaultPickUpDelay();
+            $$1.addFreshEntity((net.minecraft.world.entity.Entity)$$7);
         }
-        net.minecraft.world.level.block.state.BlockState blockState = net.minecraft.world.level.block.ComposterBlock.empty((net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)pos);
-        level.playSound(null, pos, net.minecraft.sounds.SoundEvents.COMPOSTER_EMPTY, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f);
-        return blockState;
+        net.minecraft.world.level.block.state.BlockState $$8 = net.minecraft.world.level.block.ComposterBlock.empty((net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.level.LevelAccessor)$$1, (net.minecraft.core.BlockPos)$$2);
+        $$1.playSound(null, $$2, net.minecraft.sounds.SoundEvents.COMPOSTER_EMPTY, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f);
+        return $$8;
     }
 
-    public static net.minecraft.world.level.block.state.BlockState empty(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.block.state.BlockState blockState = (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)LEVEL, (java.lang.Comparable)java.lang.Integer.valueOf((int)0));
-        level.setBlock(pos, blockState, 3);
-        return blockState;
+    public static net.minecraft.world.level.block.state.BlockState empty(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelAccessor $$1, net.minecraft.core.BlockPos $$2) {
+        net.minecraft.world.level.block.state.BlockState $$3 = (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)LEVEL, (java.lang.Comparable)java.lang.Integer.valueOf((int)0));
+        $$1.setBlock($$2, $$3, 3);
+        return $$3;
     }
 
-    public static net.minecraft.world.level.block.state.BlockState addItem(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos, net.minecraft.world.item.ItemStack stack) {
-        int n = (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
-        float f = COMPOSTABLES.getFloat((java.lang.Object)stack.getItem());
-        if (n == 0 && f > 0.0f || level.getRandom().nextDouble() < (double)f) {
-            int n2 = n + 1;
-            net.minecraft.world.level.block.state.BlockState blockState = (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)LEVEL, (java.lang.Comparable)java.lang.Integer.valueOf((int)n2));
-            level.setBlock(pos, blockState, 3);
-            if (n2 == 7) {
-                level.scheduleTick(pos, state.getBlock(), 20);
+    public static net.minecraft.world.level.block.state.BlockState addItem(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelAccessor $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.item.ItemStack $$3) {
+        int $$4 = (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
+        float $$5 = COMPOSTABLES.getFloat((java.lang.Object)$$3.getItem());
+        if ($$4 == 0 && $$5 > 0.0f || $$1.getRandom().nextDouble() < (double)$$5) {
+            int $$6 = $$4 + 1;
+            net.minecraft.world.level.block.state.BlockState $$7 = (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)LEVEL, (java.lang.Comparable)java.lang.Integer.valueOf((int)$$6));
+            $$1.setBlock($$2, $$7, 3);
+            if ($$6 == 7) {
+                $$1.scheduleTick($$2, $$0.getBlock(), 20);
             }
-            return blockState;
+            return $$7;
         }
-        return state;
+        return $$0;
     }
 
     public void tick(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.server.level.ServerLevel $$1, net.minecraft.core.BlockPos $$2, net.minecraft.util.RandomSource $$3) {
@@ -235,49 +235,49 @@
         }
     }
 
-    public boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
-    public int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        return (java.lang.Integer)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
+    public int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2) {
+        return (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{LEVEL});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{LEVEL});
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 
-    public net.minecraft.world.WorldlyContainer getContainer(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos) {
-        int n = (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
-        if (n == 8) {
-            return new net.minecraft.world.level.block.ComposterBlock$OutputContainer(state, level, pos, new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.BONE_MEAL));
+    public net.minecraft.world.WorldlyContainer getContainer(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelAccessor $$1, net.minecraft.core.BlockPos $$2) {
+        int $$3 = (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)LEVEL);
+        if ($$3 == 8) {
+            return new net.minecraft.world.level.block.ComposterBlock$OutputContainer($$0, $$1, $$2, new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.BONE_MEAL));
         }
-        if (n < 7) {
-            return new net.minecraft.world.level.block.ComposterBlock$InputContainer(state, level, pos);
+        if ($$3 < 7) {
+            return new net.minecraft.world.level.block.ComposterBlock$InputContainer($$0, $$1, $$2);
         }
         return new net.minecraft.world.level.block.ComposterBlock$EmptyContainer();
     }
 
-    public static /* synthetic */ void lambda$static$0(net.minecraft.world.phys.shapes.VoxelShape[] shapes) {
-        for (int i = 0; i < 8; ++i) {
-            shapes[i] = net.minecraft.world.phys.shapes.Shapes.join((net.minecraft.world.phys.shapes.VoxelShape)OUTER_SHAPE, (net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.level.block.Block.box((double)2.0, (double)java.lang.Math.max((int)2, (int)(1 + i * 2)), (double)2.0, (double)14.0, (double)16.0, (double)14.0), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST);
+    public static /* synthetic */ void lambda$static$0(net.minecraft.world.phys.shapes.VoxelShape[] $$0) {
+        for (int $$1 = 0; $$1 < 8; ++$$1) {
+            $$0[$$1] = net.minecraft.world.phys.shapes.Shapes.join((net.minecraft.world.phys.shapes.VoxelShape)OUTER_SHAPE, (net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.level.block.Block.box((double)2.0, (double)java.lang.Math.max((int)2, (int)(1 + $$1 * 2)), (double)2.0, (double)14.0, (double)16.0, (double)14.0), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST);
         }
-        shapes[8] = shapes[7];
+        $$0[8] = $$0[7];
     }
 
     static {
         LEVEL = net.minecraft.world.level.block.state.properties.BlockStateProperties.LEVEL_COMPOSTER;
         COMPOSTABLES = new it.unimi.dsi.fastutil.objects.Object2FloatOpenHashMap();
         OUTER_SHAPE = net.minecraft.world.phys.shapes.Shapes.block();
-        SHAPES = (net.minecraft.world.phys.shapes.VoxelShape[])net.minecraft.Util.make((java.lang.Object)new net.minecraft.world.phys.shapes.VoxelShape[9], shapes -> {
-            for (int i = 0; i < 8; ++i) {
-                shapes[i] = net.minecraft.world.phys.shapes.Shapes.join((net.minecraft.world.phys.shapes.VoxelShape)OUTER_SHAPE, (net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.level.block.Block.box((double)2.0, (double)java.lang.Math.max((int)2, (int)(1 + i * 2)), (double)2.0, (double)14.0, (double)16.0, (double)14.0), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST);
+        SHAPES = (net.minecraft.world.phys.shapes.VoxelShape[])net.minecraft.Util.make((java.lang.Object)new net.minecraft.world.phys.shapes.VoxelShape[9], $$0 -> {
+            for (int $$1 = 0; $$1 < 8; ++$$1) {
+                $$0[$$1] = net.minecraft.world.phys.shapes.Shapes.join((net.minecraft.world.phys.shapes.VoxelShape)OUTER_SHAPE, (net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.level.block.Block.box((double)2.0, (double)java.lang.Math.max((int)2, (int)(1 + $$1 * 2)), (double)2.0, (double)14.0, (double)16.0, (double)14.0), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST);
             }
-            shapes[8] = shapes[7];
+            $$0[8] = $$0[7];
         });
     }
 }