--- net/minecraft/world/level/block/SugarCaneBlock.java
+++ net/minecraft/world/level/block/SugarCaneBlock.java
@@ -15,7 +15,7 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)AGE, (java.lang.Comparable)java.lang.Integer.valueOf((int)0)));
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
         return SHAPE;
     }
 
@@ -43,32 +43,32 @@
         }
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (!state.canSurvive((net.minecraft.world.level.LevelReader)level, currentPos)) {
-            level.scheduleTick(currentPos, (net.minecraft.world.level.block.Block)this, 1);
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if (!$$0.canSurvive((net.minecraft.world.level.LevelReader)$$3, $$4)) {
+            $$3.scheduleTick($$4, (net.minecraft.world.level.block.Block)this, 1);
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(pos.below());
-        if (blockState.is((net.minecraft.world.level.block.Block)this)) {
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
+        net.minecraft.world.level.block.state.BlockState $$3 = $$1.getBlockState($$2.below());
+        if ($$3.is((net.minecraft.world.level.block.Block)this)) {
             return true;
         }
-        if (blockState.is(net.minecraft.tags.BlockTags.DIRT) || blockState.is(net.minecraft.world.level.block.Blocks.SAND) || blockState.is(net.minecraft.world.level.block.Blocks.RED_SAND)) {
-            net.minecraft.core.BlockPos blockPos = pos.below();
-            for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.HORIZONTAL) {
-                net.minecraft.world.level.block.state.BlockState blockState2 = level.getBlockState(blockPos.relative(direction));
-                net.minecraft.world.level.material.FluidState fluidState = level.getFluidState(blockPos.relative(direction));
-                if (!fluidState.is(net.minecraft.tags.FluidTags.WATER) && !blockState2.is(net.minecraft.world.level.block.Blocks.FROSTED_ICE)) continue;
+        if ($$3.is(net.minecraft.tags.BlockTags.DIRT) || $$3.is(net.minecraft.world.level.block.Blocks.SAND) || $$3.is(net.minecraft.world.level.block.Blocks.RED_SAND)) {
+            net.minecraft.core.BlockPos $$4 = $$2.below();
+            for (net.minecraft.core.Direction $$5 : net.minecraft.core.Direction$Plane.HORIZONTAL) {
+                net.minecraft.world.level.block.state.BlockState $$6 = $$1.getBlockState($$4.relative($$5));
+                net.minecraft.world.level.material.FluidState $$7 = $$1.getFluidState($$4.relative($$5));
+                if (!$$7.is(net.minecraft.tags.FluidTags.WATER) && !$$6.is(net.minecraft.world.level.block.Blocks.FROSTED_ICE)) continue;
                 return true;
             }
         }
         return false;
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{AGE});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{AGE});
     }
 
     static {