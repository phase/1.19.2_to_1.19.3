--- net/minecraft/world/level/block/CakeBlock.java
+++ net/minecraft/world/level/block/CakeBlock.java
@@ -18,80 +18,80 @@
         this.registerDefaultState((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.stateDefinition.any()).setValue((net.minecraft.world.level.block.state.properties.Property)BITES, (java.lang.Comparable)java.lang.Integer.valueOf((int)0)));
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        return SHAPE_BY_BITE[(java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)BITES)];
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        return SHAPE_BY_BITE[(java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)BITES)];
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        net.minecraft.world.level.block.Block block;
-        net.minecraft.world.item.ItemStack itemStack = player.getItemInHand(hand);
-        net.minecraft.world.item.Item item = itemStack.getItem();
-        if (itemStack.is(net.minecraft.tags.ItemTags.CANDLES) && (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)BITES) == 0 && (block = net.minecraft.world.level.block.Block.byItem((net.minecraft.world.item.Item)item)) instanceof net.minecraft.world.level.block.CandleBlock) {
-            if (!player.isCreative()) {
-                itemStack.shrink(1);
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        net.minecraft.world.level.block.Block $$8;
+        net.minecraft.world.item.ItemStack $$6 = $$3.getItemInHand($$4);
+        net.minecraft.world.item.Item $$7 = $$6.getItem();
+        if ($$6.is(net.minecraft.tags.ItemTags.CANDLES) && (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)BITES) == 0 && ($$8 = net.minecraft.world.level.block.Block.byItem((net.minecraft.world.item.Item)$$7)) instanceof net.minecraft.world.level.block.CandleBlock) {
+            if (!$$3.isCreative()) {
+                $$6.shrink(1);
             }
-            level.playSound(null, pos, net.minecraft.sounds.SoundEvents.CAKE_ADD_CANDLE, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f);
-            level.setBlockAndUpdate(pos, net.minecraft.world.level.block.CandleCakeBlock.byCandle((net.minecraft.world.level.block.Block)block));
-            level.gameEvent((net.minecraft.world.entity.Entity)player, net.minecraft.world.level.gameevent.GameEvent.BLOCK_CHANGE, pos);
-            player.awardStat(net.minecraft.stats.Stats.ITEM_USED.get((java.lang.Object)item));
+            $$1.playSound(null, $$2, net.minecraft.sounds.SoundEvents.CAKE_ADD_CANDLE, net.minecraft.sounds.SoundSource.BLOCKS, 1.0f, 1.0f);
+            $$1.setBlockAndUpdate($$2, net.minecraft.world.level.block.CandleCakeBlock.byCandle((net.minecraft.world.level.block.Block)$$8));
+            $$1.gameEvent((net.minecraft.world.entity.Entity)$$3, net.minecraft.world.level.gameevent.GameEvent.BLOCK_CHANGE, $$2);
+            $$3.awardStat(net.minecraft.stats.Stats.ITEM_USED.get((java.lang.Object)$$7));
             return net.minecraft.world.InteractionResult.SUCCESS;
         }
-        if (level.isClientSide) {
-            if (net.minecraft.world.level.block.CakeBlock.eat((net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)pos, (net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.entity.player.Player)player).consumesAction()) {
+        if ($$1.isClientSide) {
+            if (net.minecraft.world.level.block.CakeBlock.eat((net.minecraft.world.level.LevelAccessor)$$1, (net.minecraft.core.BlockPos)$$2, (net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.entity.player.Player)$$3).consumesAction()) {
                 return net.minecraft.world.InteractionResult.SUCCESS;
             }
-            if (itemStack.isEmpty()) {
+            if ($$6.isEmpty()) {
                 return net.minecraft.world.InteractionResult.CONSUME;
             }
         }
-        return net.minecraft.world.level.block.CakeBlock.eat((net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)pos, (net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.entity.player.Player)player);
+        return net.minecraft.world.level.block.CakeBlock.eat((net.minecraft.world.level.LevelAccessor)$$1, (net.minecraft.core.BlockPos)$$2, (net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.entity.player.Player)$$3);
     }
 
-    public static net.minecraft.world.InteractionResult eat(net.minecraft.world.level.LevelAccessor levelAccessor, net.minecraft.core.BlockPos level, net.minecraft.world.level.block.state.BlockState pos, net.minecraft.world.entity.player.Player state) {
-        if (!state.canEat(false)) {
+    public static net.minecraft.world.InteractionResult eat(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.entity.player.Player $$3) {
+        if (!$$3.canEat(false)) {
             return net.minecraft.world.InteractionResult.PASS;
         }
-        state.awardStat(net.minecraft.stats.Stats.EAT_CAKE_SLICE);
-        state.getFoodData().eat(2, 0.1f);
-        int player = (java.lang.Integer)pos.getValue((net.minecraft.world.level.block.state.properties.Property)BITES);
-        levelAccessor.gameEvent((net.minecraft.world.entity.Entity)state, net.minecraft.world.level.gameevent.GameEvent.EAT, level);
-        if (player < 6) {
-            levelAccessor.setBlock(level, (net.minecraft.world.level.block.state.BlockState)pos.setValue((net.minecraft.world.level.block.state.properties.Property)BITES, (java.lang.Comparable)java.lang.Integer.valueOf((int)(player + 1))), 3);
+        $$3.awardStat(net.minecraft.stats.Stats.EAT_CAKE_SLICE);
+        $$3.getFoodData().eat(2, 0.1f);
+        int $$4 = (java.lang.Integer)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)BITES);
+        $$0.gameEvent((net.minecraft.world.entity.Entity)$$3, net.minecraft.world.level.gameevent.GameEvent.EAT, $$1);
+        if ($$4 < 6) {
+            $$0.setBlock($$1, (net.minecraft.world.level.block.state.BlockState)$$2.setValue((net.minecraft.world.level.block.state.properties.Property)BITES, (java.lang.Comparable)java.lang.Integer.valueOf((int)($$4 + 1))), 3);
         } else {
-            levelAccessor.removeBlock(level, false);
-            levelAccessor.gameEvent((net.minecraft.world.entity.Entity)state, net.minecraft.world.level.gameevent.GameEvent.BLOCK_DESTROY, level);
+            $$0.removeBlock($$1, false);
+            $$0.gameEvent((net.minecraft.world.entity.Entity)$$3, net.minecraft.world.level.gameevent.GameEvent.BLOCK_DESTROY, $$1);
         }
         return net.minecraft.world.InteractionResult.SUCCESS;
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (facing == net.minecraft.core.Direction.DOWN && !state.canSurvive((net.minecraft.world.level.LevelReader)level, currentPos)) {
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if ($$1 == net.minecraft.core.Direction.DOWN && !$$0.canSurvive((net.minecraft.world.level.LevelReader)$$3, $$4)) {
             return net.minecraft.world.level.block.Blocks.AIR.defaultBlockState();
         }
-        return super.updateShape(state, facing, facingState, level, currentPos, facingPos);
+        return super.updateShape($$0, $$1, $$2, $$3, $$4, $$5);
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        return level.getBlockState(pos.below()).getMaterial().isSolid();
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
+        return $$1.getBlockState($$2.below()).getMaterial().isSolid();
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{BITES});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{BITES});
     }
 
-    public int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        return net.minecraft.world.level.block.CakeBlock.getOutputSignal((int)((java.lang.Integer)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)BITES)));
+    public int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2) {
+        return net.minecraft.world.level.block.CakeBlock.getOutputSignal((int)((java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)BITES)));
     }
 
     public static int getOutputSignal(int $$0) {
         return (7 - $$0) * 2;
     }
 
-    public boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState $$0) {
         return true;
     }
 
-    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.pathfinder.PathComputationType type) {
+    public boolean isPathfindable(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.pathfinder.PathComputationType $$3) {
         return false;
     }
 