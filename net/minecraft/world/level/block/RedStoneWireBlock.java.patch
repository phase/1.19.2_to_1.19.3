--- net/minecraft/world/level/block/RedStoneWireBlock.java
+++ net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -37,289 +37,288 @@
         }
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.world.level.block.state.BlockState state) {
-        net.minecraft.world.phys.shapes.VoxelShape voxelShape = SHAPE_DOT;
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.HORIZONTAL) {
-            net.minecraft.world.level.block.state.properties.RedstoneSide redstoneSide = (net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)direction));
-            if (redstoneSide == net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE) {
-                voxelShape = net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)voxelShape, (net.minecraft.world.phys.shapes.VoxelShape)((net.minecraft.world.phys.shapes.VoxelShape)SHAPES_FLOOR.get((java.lang.Object)direction)));
+    public net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.world.level.block.state.BlockState $$0) {
+        net.minecraft.world.phys.shapes.VoxelShape $$1 = SHAPE_DOT;
+        for (net.minecraft.core.Direction $$2 : net.minecraft.core.Direction$Plane.HORIZONTAL) {
+            net.minecraft.world.level.block.state.properties.RedstoneSide $$3 = (net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$2));
+            if ($$3 == net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE) {
+                $$1 = net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)$$1, (net.minecraft.world.phys.shapes.VoxelShape)((net.minecraft.world.phys.shapes.VoxelShape)SHAPES_FLOOR.get((java.lang.Object)$$2)));
                 continue;
             }
-            if (redstoneSide != net.minecraft.world.level.block.state.properties.RedstoneSide.UP) continue;
-            voxelShape = net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)voxelShape, (net.minecraft.world.phys.shapes.VoxelShape)((net.minecraft.world.phys.shapes.VoxelShape)SHAPES_UP.get((java.lang.Object)direction)));
+            if ($$3 != net.minecraft.world.level.block.state.properties.RedstoneSide.UP) continue;
+            $$1 = net.minecraft.world.phys.shapes.Shapes.or((net.minecraft.world.phys.shapes.VoxelShape)$$1, (net.minecraft.world.phys.shapes.VoxelShape)((net.minecraft.world.phys.shapes.VoxelShape)SHAPES_UP.get((java.lang.Object)$$2)));
         }
-        return voxelShape;
+        return $$1;
     }
 
-    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.world.phys.shapes.CollisionContext context) {
-        return (net.minecraft.world.phys.shapes.VoxelShape)SHAPES_CACHE.get(state.setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)java.lang.Integer.valueOf((int)0)));
+    public net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.shapes.CollisionContext $$3) {
+        return (net.minecraft.world.phys.shapes.VoxelShape)SHAPES_CACHE.get($$0.setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)java.lang.Integer.valueOf((int)0)));
     }
 
-    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext context) {
-        return this.getConnectionState((net.minecraft.world.level.BlockGetter)context.getLevel(), this.crossState, context.getClickedPos());
+    public net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.context.BlockPlaceContext $$0) {
+        return this.getConnectionState((net.minecraft.world.level.BlockGetter)$$0.getLevel(), this.crossState, $$0.getClickedPos());
     }
 
-    public net.minecraft.world.level.block.state.BlockState getConnectionState(net.minecraft.world.level.BlockGetter level, net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.BlockPos pos) {
-        boolean bl;
-        boolean bl2 = net.minecraft.world.level.block.RedStoneWireBlock.isDot((net.minecraft.world.level.block.state.BlockState)state);
-        state = this.getMissingConnections(level, (net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)POWER))), pos);
-        if (bl2 && net.minecraft.world.level.block.RedStoneWireBlock.isDot((net.minecraft.world.level.block.state.BlockState)state)) {
-            return state;
+    public net.minecraft.world.level.block.state.BlockState getConnectionState(net.minecraft.world.level.BlockGetter $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.core.BlockPos $$2) {
+        boolean $$9;
+        boolean $$3 = net.minecraft.world.level.block.RedStoneWireBlock.isDot((net.minecraft.world.level.block.state.BlockState)$$1);
+        $$1 = this.getMissingConnections($$0, (net.minecraft.world.level.block.state.BlockState)this.defaultBlockState().setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)((java.lang.Integer)$$1.getValue((net.minecraft.world.level.block.state.properties.Property)POWER))), $$2);
+        if ($$3 && net.minecraft.world.level.block.RedStoneWireBlock.isDot((net.minecraft.world.level.block.state.BlockState)$$1)) {
+            return $$1;
         }
-        boolean bl3 = ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)).isConnected();
-        boolean bl4 = ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)).isConnected();
-        boolean bl5 = ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)).isConnected();
-        boolean bl6 = ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)).isConnected();
-        boolean bl7 = !bl3 && !bl4;
-        boolean bl8 = bl = !bl5 && !bl6;
-        if (!bl6 && bl7) {
-            state = (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE);
+        boolean $$4 = ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$1.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)).isConnected();
+        boolean $$5 = ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$1.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)).isConnected();
+        boolean $$6 = ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$1.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)).isConnected();
+        boolean $$7 = ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$1.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)).isConnected();
+        boolean $$8 = !$$4 && !$$5;
+        boolean bl = $$9 = !$$6 && !$$7;
+        if (!$$7 && $$8) {
+            $$1 = (net.minecraft.world.level.block.state.BlockState)$$1.setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE);
         }
-        if (!bl5 && bl7) {
-            state = (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE);
+        if (!$$6 && $$8) {
+            $$1 = (net.minecraft.world.level.block.state.BlockState)$$1.setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE);
         }
-        if (!bl3 && bl) {
-            state = (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE);
+        if (!$$4 && $$9) {
+            $$1 = (net.minecraft.world.level.block.state.BlockState)$$1.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE);
         }
-        if (!bl4 && bl) {
-            state = (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE);
+        if (!$$5 && $$9) {
+            $$1 = (net.minecraft.world.level.block.state.BlockState)$$1.setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE);
         }
-        return state;
+        return $$1;
     }
 
-    public net.minecraft.world.level.block.state.BlockState getMissingConnections(net.minecraft.world.level.BlockGetter level, net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.BlockPos pos) {
-        boolean bl = !level.getBlockState(pos.above()).isRedstoneConductor(level, pos);
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.HORIZONTAL) {
-            if (((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)direction))).isConnected()) continue;
-            net.minecraft.world.level.block.state.properties.RedstoneSide redstoneSide = this.getConnectingSide(level, pos, direction, bl);
-            state = (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)direction), (java.lang.Comparable)redstoneSide);
+    public net.minecraft.world.level.block.state.BlockState getMissingConnections(net.minecraft.world.level.BlockGetter $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.core.BlockPos $$2) {
+        boolean $$3 = !$$0.getBlockState($$2.above()).isRedstoneConductor($$0, $$2);
+        for (net.minecraft.core.Direction $$4 : net.minecraft.core.Direction$Plane.HORIZONTAL) {
+            if (((net.minecraft.world.level.block.state.properties.RedstoneSide)$$1.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$4))).isConnected()) continue;
+            net.minecraft.world.level.block.state.properties.RedstoneSide $$5 = this.getConnectingSide($$0, $$2, $$4, $$3);
+            $$1 = (net.minecraft.world.level.block.state.BlockState)$$1.setValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$4), (java.lang.Comparable)$$5);
         }
-        return state;
+        return $$1;
     }
 
-    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction facing, net.minecraft.world.level.block.state.BlockState facingState, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos currentPos, net.minecraft.core.BlockPos facingPos) {
-        if (facing == net.minecraft.core.Direction.DOWN) {
-            return state;
+    public net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.LevelAccessor $$3, net.minecraft.core.BlockPos $$4, net.minecraft.core.BlockPos $$5) {
+        if ($$1 == net.minecraft.core.Direction.DOWN) {
+            return $$0;
         }
-        if (facing == net.minecraft.core.Direction.UP) {
-            return this.getConnectionState((net.minecraft.world.level.BlockGetter)level, state, currentPos);
+        if ($$1 == net.minecraft.core.Direction.UP) {
+            return this.getConnectionState((net.minecraft.world.level.BlockGetter)$$3, $$0, $$4);
         }
-        net.minecraft.world.level.block.state.properties.RedstoneSide redstoneSide = this.getConnectingSide((net.minecraft.world.level.BlockGetter)level, currentPos, facing);
-        if (redstoneSide.isConnected() == ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)facing))).isConnected() && !net.minecraft.world.level.block.RedStoneWireBlock.isCross((net.minecraft.world.level.block.state.BlockState)state)) {
-            return (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)facing), (java.lang.Comparable)redstoneSide);
+        net.minecraft.world.level.block.state.properties.RedstoneSide $$6 = this.getConnectingSide((net.minecraft.world.level.BlockGetter)$$3, $$4, $$1);
+        if ($$6.isConnected() == ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$1))).isConnected() && !net.minecraft.world.level.block.RedStoneWireBlock.isCross((net.minecraft.world.level.block.state.BlockState)$$0)) {
+            return (net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$1), (java.lang.Comparable)$$6);
         }
-        return this.getConnectionState((net.minecraft.world.level.BlockGetter)level, (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.crossState.setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)POWER)))).setValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)facing), (java.lang.Comparable)redstoneSide), currentPos);
+        return this.getConnectionState((net.minecraft.world.level.BlockGetter)$$3, (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)this.crossState.setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)((java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)POWER)))).setValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$1), (java.lang.Comparable)$$6), $$4);
     }
 
-    public static boolean isCross(net.minecraft.world.level.block.state.BlockState state) {
-        return ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)).isConnected() && ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)).isConnected() && ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)).isConnected() && ((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)).isConnected();
+    public static boolean isCross(net.minecraft.world.level.block.state.BlockState $$0) {
+        return ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)).isConnected() && ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)).isConnected() && ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)).isConnected() && ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)).isConnected();
     }
 
-    public static boolean isDot(net.minecraft.world.level.block.state.BlockState state) {
-        return !((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)).isConnected() && !((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)).isConnected() && !((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)).isConnected() && !((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)).isConnected();
+    public static boolean isDot(net.minecraft.world.level.block.state.BlockState $$0) {
+        return !((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)).isConnected() && !((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)).isConnected() && !((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)).isConnected() && !((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)).isConnected();
     }
 
-    public void updateIndirectNeighbourShapes(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos, int flags, int recursionLeft) {
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos = new net.minecraft.core.BlockPos$MutableBlockPos();
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.HORIZONTAL) {
-            net.minecraft.core.BlockPos blockPos;
-            net.minecraft.world.level.block.state.properties.RedstoneSide redstoneSide = (net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)direction));
-            if (redstoneSide == net.minecraft.world.level.block.state.properties.RedstoneSide.NONE || level.getBlockState((net.minecraft.core.BlockPos)mutableBlockPos.setWithOffset((net.minecraft.core.Vec3i)pos, direction)).is((net.minecraft.world.level.block.Block)this)) continue;
-            mutableBlockPos.move(net.minecraft.core.Direction.DOWN);
-            net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState((net.minecraft.core.BlockPos)mutableBlockPos);
-            if (blockState.is((net.minecraft.world.level.block.Block)this)) {
-                blockPos = mutableBlockPos.relative(direction.getOpposite());
-                level.neighborShapeChanged(direction.getOpposite(), level.getBlockState(blockPos), (net.minecraft.core.BlockPos)mutableBlockPos, blockPos, flags, recursionLeft);
+    public void updateIndirectNeighbourShapes(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelAccessor $$1, net.minecraft.core.BlockPos $$2, int $$3, int $$4) {
+        net.minecraft.core.BlockPos$MutableBlockPos $$5 = new net.minecraft.core.BlockPos$MutableBlockPos();
+        for (net.minecraft.core.Direction $$6 : net.minecraft.core.Direction$Plane.HORIZONTAL) {
+            net.minecraft.world.level.block.state.properties.RedstoneSide $$7 = (net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$6));
+            if ($$7 == net.minecraft.world.level.block.state.properties.RedstoneSide.NONE || $$1.getBlockState((net.minecraft.core.BlockPos)$$5.setWithOffset((net.minecraft.core.Vec3i)$$2, $$6)).is((net.minecraft.world.level.block.Block)this)) continue;
+            $$5.move(net.minecraft.core.Direction.DOWN);
+            net.minecraft.world.level.block.state.BlockState $$8 = $$1.getBlockState((net.minecraft.core.BlockPos)$$5);
+            if ($$8.is((net.minecraft.world.level.block.Block)this)) {
+                net.minecraft.core.BlockPos $$9 = $$5.relative($$6.getOpposite());
+                $$1.neighborShapeChanged($$6.getOpposite(), $$1.getBlockState($$9), (net.minecraft.core.BlockPos)$$5, $$9, $$3, $$4);
             }
-            mutableBlockPos.setWithOffset((net.minecraft.core.Vec3i)pos, direction).move(net.minecraft.core.Direction.UP);
-            blockPos = level.getBlockState((net.minecraft.core.BlockPos)mutableBlockPos);
-            if (!blockPos.is((net.minecraft.world.level.block.Block)this)) continue;
-            net.minecraft.core.BlockPos blockPos2 = mutableBlockPos.relative(direction.getOpposite());
-            level.neighborShapeChanged(direction.getOpposite(), level.getBlockState(blockPos2), (net.minecraft.core.BlockPos)mutableBlockPos, blockPos2, flags, recursionLeft);
+            $$5.setWithOffset((net.minecraft.core.Vec3i)$$2, $$6).move(net.minecraft.core.Direction.UP);
+            net.minecraft.world.level.block.state.BlockState $$10 = $$1.getBlockState((net.minecraft.core.BlockPos)$$5);
+            if (!$$10.is((net.minecraft.world.level.block.Block)this)) continue;
+            net.minecraft.core.BlockPos $$11 = $$5.relative($$6.getOpposite());
+            $$1.neighborShapeChanged($$6.getOpposite(), $$1.getBlockState($$11), (net.minecraft.core.BlockPos)$$5, $$11, $$3, $$4);
         }
     }
 
-    public net.minecraft.world.level.block.state.properties.RedstoneSide getConnectingSide(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction face) {
-        return this.getConnectingSide(level, pos, face, !level.getBlockState(pos.above()).isRedstoneConductor(level, pos));
+    public net.minecraft.world.level.block.state.properties.RedstoneSide getConnectingSide(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.core.Direction $$2) {
+        return this.getConnectingSide($$0, $$1, $$2, !$$0.getBlockState($$1.above()).isRedstoneConductor($$0, $$1));
     }
 
-    public net.minecraft.world.level.block.state.properties.RedstoneSide getConnectingSide(net.minecraft.world.level.BlockGetter level, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction direction, boolean nonNormalCubeAbove) {
-        boolean bl;
-        net.minecraft.core.BlockPos blockPos = pos.relative(direction);
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(blockPos);
-        if (nonNormalCubeAbove && (bl = this.canSurviveOn(level, blockPos, blockState)) && net.minecraft.world.level.block.RedStoneWireBlock.shouldConnectTo((net.minecraft.world.level.block.state.BlockState)level.getBlockState(blockPos.above()))) {
-            if (blockState.isFaceSturdy(level, blockPos, direction.getOpposite())) {
+    public net.minecraft.world.level.block.state.properties.RedstoneSide getConnectingSide(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.core.Direction $$2, boolean $$3) {
+        boolean $$6;
+        net.minecraft.core.BlockPos $$4 = $$1.relative($$2);
+        net.minecraft.world.level.block.state.BlockState $$5 = $$0.getBlockState($$4);
+        if ($$3 && ($$6 = this.canSurviveOn($$0, $$4, $$5)) && net.minecraft.world.level.block.RedStoneWireBlock.shouldConnectTo((net.minecraft.world.level.block.state.BlockState)$$0.getBlockState($$4.above()))) {
+            if ($$5.isFaceSturdy($$0, $$4, $$2.getOpposite())) {
                 return net.minecraft.world.level.block.state.properties.RedstoneSide.UP;
             }
             return net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE;
         }
-        if (net.minecraft.world.level.block.RedStoneWireBlock.shouldConnectTo((net.minecraft.world.level.block.state.BlockState)blockState, (net.minecraft.core.Direction)direction) || !blockState.isRedstoneConductor(level, blockPos) && net.minecraft.world.level.block.RedStoneWireBlock.shouldConnectTo((net.minecraft.world.level.block.state.BlockState)level.getBlockState(blockPos.below()))) {
+        if (net.minecraft.world.level.block.RedStoneWireBlock.shouldConnectTo((net.minecraft.world.level.block.state.BlockState)$$5, (net.minecraft.core.Direction)$$2) || !$$5.isRedstoneConductor($$0, $$4) && net.minecraft.world.level.block.RedStoneWireBlock.shouldConnectTo((net.minecraft.world.level.block.state.BlockState)$$0.getBlockState($$4.below()))) {
             return net.minecraft.world.level.block.state.properties.RedstoneSide.SIDE;
         }
         return net.minecraft.world.level.block.state.properties.RedstoneSide.NONE;
     }
 
-    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.core.BlockPos blockPos = pos.below();
-        net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(blockPos);
-        return this.canSurviveOn((net.minecraft.world.level.BlockGetter)level, blockPos, blockState);
+    public boolean canSurvive(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.LevelReader $$1, net.minecraft.core.BlockPos $$2) {
+        net.minecraft.core.BlockPos $$3 = $$2.below();
+        net.minecraft.world.level.block.state.BlockState $$4 = $$1.getBlockState($$3);
+        return this.canSurviveOn((net.minecraft.world.level.BlockGetter)$$1, $$3, $$4);
     }
 
-    public boolean canSurviveOn(net.minecraft.world.level.BlockGetter reader, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
-        return state.isFaceSturdy(reader, pos, net.minecraft.core.Direction.UP) || state.is(net.minecraft.world.level.block.Blocks.HOPPER);
+    public boolean canSurviveOn(net.minecraft.world.level.BlockGetter $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
+        return $$2.isFaceSturdy($$0, $$1, net.minecraft.core.Direction.UP) || $$2.is(net.minecraft.world.level.block.Blocks.HOPPER);
     }
 
-    public void updatePowerStrength(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
-        int n = this.calculateTargetStrength(level, pos);
-        if ((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)POWER) != n) {
-            if (level.getBlockState(pos) == state) {
-                level.setBlock(pos, (net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)java.lang.Integer.valueOf((int)n)), 2);
+    public void updatePowerStrength(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2) {
+        int $$3 = this.calculateTargetStrength($$0, $$1);
+        if ((java.lang.Integer)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)POWER) != $$3) {
+            if ($$0.getBlockState($$1) == $$2) {
+                $$0.setBlock($$1, (net.minecraft.world.level.block.state.BlockState)$$2.setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)java.lang.Integer.valueOf((int)$$3)), 2);
             }
-            java.util.HashSet hashSet = com.google.common.collect.Sets.newHashSet();
-            hashSet.add((java.lang.Object)pos);
-            for (net.minecraft.core.Direction direction : net.minecraft.core.Direction.values()) {
-                hashSet.add((java.lang.Object)pos.relative(direction));
+            java.util.HashSet $$4 = com.google.common.collect.Sets.newHashSet();
+            $$4.add((java.lang.Object)$$1);
+            for (net.minecraft.core.Direction $$5 : net.minecraft.core.Direction.values()) {
+                $$4.add((java.lang.Object)$$1.relative($$5));
             }
-            for (net.minecraft.core.BlockPos blockPos : hashSet) {
-                level.updateNeighborsAt(blockPos, (net.minecraft.world.level.block.Block)this);
+            for (net.minecraft.core.BlockPos $$6 : $$4) {
+                $$0.updateNeighborsAt($$6, (net.minecraft.world.level.block.Block)this);
             }
         }
     }
 
-    public int calculateTargetStrength(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
+    public int calculateTargetStrength(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1) {
         this.shouldSignal = false;
-        int n = level.getBestNeighborSignal(pos);
+        int $$2 = $$0.getBestNeighborSignal($$1);
         this.shouldSignal = true;
-        int n2 = 0;
-        if (n < 15) {
-            for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.HORIZONTAL) {
-                net.minecraft.core.BlockPos blockPos = pos.relative(direction);
-                net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(blockPos);
-                n2 = java.lang.Math.max((int)n2, (int)this.getWireSignal(blockState));
-                net.minecraft.core.BlockPos blockPos2 = pos.above();
-                if (blockState.isRedstoneConductor((net.minecraft.world.level.BlockGetter)level, blockPos) && !level.getBlockState(blockPos2).isRedstoneConductor((net.minecraft.world.level.BlockGetter)level, blockPos2)) {
-                    n2 = java.lang.Math.max((int)n2, (int)this.getWireSignal(level.getBlockState(blockPos.above())));
+        int $$3 = 0;
+        if ($$2 < 15) {
+            for (net.minecraft.core.Direction $$4 : net.minecraft.core.Direction$Plane.HORIZONTAL) {
+                net.minecraft.core.BlockPos $$5 = $$1.relative($$4);
+                net.minecraft.world.level.block.state.BlockState $$6 = $$0.getBlockState($$5);
+                $$3 = java.lang.Math.max((int)$$3, (int)this.getWireSignal($$6));
+                net.minecraft.core.BlockPos $$7 = $$1.above();
+                if ($$6.isRedstoneConductor((net.minecraft.world.level.BlockGetter)$$0, $$5) && !$$0.getBlockState($$7).isRedstoneConductor((net.minecraft.world.level.BlockGetter)$$0, $$7)) {
+                    $$3 = java.lang.Math.max((int)$$3, (int)this.getWireSignal($$0.getBlockState($$5.above())));
                     continue;
                 }
-                if (blockState.isRedstoneConductor((net.minecraft.world.level.BlockGetter)level, blockPos)) continue;
-                n2 = java.lang.Math.max((int)n2, (int)this.getWireSignal(level.getBlockState(blockPos.below())));
+                if ($$6.isRedstoneConductor((net.minecraft.world.level.BlockGetter)$$0, $$5)) continue;
+                $$3 = java.lang.Math.max((int)$$3, (int)this.getWireSignal($$0.getBlockState($$5.below())));
             }
         }
-        return java.lang.Math.max((int)n, (int)(n2 - 1));
+        return java.lang.Math.max((int)$$2, (int)($$3 - 1));
     }
 
-    public int getWireSignal(net.minecraft.world.level.block.state.BlockState state) {
-        return state.is((net.minecraft.world.level.block.Block)this) ? (java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)POWER) : 0;
+    public int getWireSignal(net.minecraft.world.level.block.state.BlockState $$0) {
+        return $$0.is((net.minecraft.world.level.block.Block)this) ? (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)POWER) : 0;
     }
 
-    public void checkCornerChangeAt(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        if (!level.getBlockState(pos).is((net.minecraft.world.level.block.Block)this)) {
+    public void checkCornerChangeAt(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1) {
+        if (!$$0.getBlockState($$1).is((net.minecraft.world.level.block.Block)this)) {
             return;
         }
-        level.updateNeighborsAt(pos, (net.minecraft.world.level.block.Block)this);
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction.values()) {
-            level.updateNeighborsAt(pos.relative(direction), (net.minecraft.world.level.block.Block)this);
+        $$0.updateNeighborsAt($$1, (net.minecraft.world.level.block.Block)this);
+        for (net.minecraft.core.Direction $$2 : net.minecraft.core.Direction.values()) {
+            $$0.updateNeighborsAt($$1.relative($$2), (net.minecraft.world.level.block.Block)this);
         }
     }
 
-    public void onPlace(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState oldState, boolean isMoving) {
-        if (oldState.is(state.getBlock()) || level.isClientSide) {
+    public void onPlace(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if ($$3.is($$0.getBlock()) || $$1.isClientSide) {
             return;
         }
-        this.updatePowerStrength(level, pos, state);
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.VERTICAL) {
-            level.updateNeighborsAt(pos.relative(direction), (net.minecraft.world.level.block.Block)this);
+        this.updatePowerStrength($$1, $$2, $$0);
+        for (net.minecraft.core.Direction $$5 : net.minecraft.core.Direction$Plane.VERTICAL) {
+            $$1.updateNeighborsAt($$2.relative($$5), (net.minecraft.world.level.block.Block)this);
         }
-        this.updateNeighborsOfNeighboringWires(level, pos);
+        this.updateNeighborsOfNeighboringWires($$1, $$2);
     }
 
-    public void onRemove(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState newState, boolean isMoving) {
-        if (isMoving || state.is(newState.getBlock())) {
+    public void onRemove(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.state.BlockState $$3, boolean $$4) {
+        if ($$4 || $$0.is($$3.getBlock())) {
             return;
         }
-        super.onRemove(state, level, pos, newState, isMoving);
-        if (level.isClientSide) {
+        super.onRemove($$0, $$1, $$2, $$3, $$4);
+        if ($$1.isClientSide) {
             return;
         }
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction.values()) {
-            level.updateNeighborsAt(pos.relative(direction), (net.minecraft.world.level.block.Block)this);
+        for (net.minecraft.core.Direction $$5 : net.minecraft.core.Direction.values()) {
+            $$1.updateNeighborsAt($$2.relative($$5), (net.minecraft.world.level.block.Block)this);
         }
-        this.updatePowerStrength(level, pos, state);
-        this.updateNeighborsOfNeighboringWires(level, pos);
+        this.updatePowerStrength($$1, $$2, $$0);
+        this.updateNeighborsOfNeighboringWires($$1, $$2);
     }
 
-    public void updateNeighborsOfNeighboringWires(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.HORIZONTAL) {
-            this.checkCornerChangeAt(level, pos.relative(direction));
+    public void updateNeighborsOfNeighboringWires(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1) {
+        for (net.minecraft.core.Direction $$2 : net.minecraft.core.Direction$Plane.HORIZONTAL) {
+            this.checkCornerChangeAt($$0, $$1.relative($$2));
         }
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.HORIZONTAL) {
-            net.minecraft.core.BlockPos blockPos = pos.relative(direction);
-            if (level.getBlockState(blockPos).isRedstoneConductor((net.minecraft.world.level.BlockGetter)level, blockPos)) {
-                this.checkCornerChangeAt(level, blockPos.above());
+        for (net.minecraft.core.Direction $$3 : net.minecraft.core.Direction$Plane.HORIZONTAL) {
+            net.minecraft.core.BlockPos $$4 = $$1.relative($$3);
+            if ($$0.getBlockState($$4).isRedstoneConductor((net.minecraft.world.level.BlockGetter)$$0, $$4)) {
+                this.checkCornerChangeAt($$0, $$4.above());
                 continue;
             }
-            this.checkCornerChangeAt(level, blockPos.below());
+            this.checkCornerChangeAt($$0, $$4.below());
         }
     }
 
-    public void neighborChanged(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.Block block, net.minecraft.core.BlockPos fromPos, boolean isMoving) {
-        if (level.isClientSide) {
+    public void neighborChanged(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.level.block.Block $$3, net.minecraft.core.BlockPos $$4, boolean $$5) {
+        if ($$1.isClientSide) {
             return;
         }
-        if (state.canSurvive((net.minecraft.world.level.LevelReader)level, pos)) {
-            this.updatePowerStrength(level, pos, state);
+        if ($$0.canSurvive((net.minecraft.world.level.LevelReader)$$1, $$2)) {
+            this.updatePowerStrength($$1, $$2, $$0);
         } else {
-            net.minecraft.world.level.block.RedStoneWireBlock.dropResources((net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.world.level.Level)level, (net.minecraft.core.BlockPos)pos);
-            level.removeBlock(pos, false);
+            net.minecraft.world.level.block.RedStoneWireBlock.dropResources((net.minecraft.world.level.block.state.BlockState)$$0, (net.minecraft.world.level.Level)$$1, (net.minecraft.core.BlockPos)$$2);
+            $$1.removeBlock($$2, false);
         }
     }
 
-    public int getDirectSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.BlockGetter blockAccess, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction side) {
+    public int getDirectSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.core.Direction $$3) {
         if (!this.shouldSignal) {
             return 0;
         }
-        return blockState.getSignal(blockAccess, pos, side);
+        return $$0.getSignal($$1, $$2, $$3);
     }
 
-    public int getSignal(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.world.level.BlockGetter blockAccess, net.minecraft.core.BlockPos pos, net.minecraft.core.Direction side) {
-        if (!this.shouldSignal || side == net.minecraft.core.Direction.DOWN) {
+    public int getSignal(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.BlockGetter $$1, net.minecraft.core.BlockPos $$2, net.minecraft.core.Direction $$3) {
+        if (!this.shouldSignal || $$3 == net.minecraft.core.Direction.DOWN) {
             return 0;
         }
-        int n = (java.lang.Integer)blockState.getValue((net.minecraft.world.level.block.state.properties.Property)POWER);
-        if (n == 0) {
+        int $$4 = (java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)POWER);
+        if ($$4 == 0) {
             return 0;
         }
-        if (side == net.minecraft.core.Direction.UP || ((net.minecraft.world.level.block.state.properties.RedstoneSide)this.getConnectionState(blockAccess, blockState, pos).getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)side.getOpposite()))).isConnected()) {
-            return n;
+        if ($$3 == net.minecraft.core.Direction.UP || ((net.minecraft.world.level.block.state.properties.RedstoneSide)this.getConnectionState($$1, $$0, $$2).getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$3.getOpposite()))).isConnected()) {
+            return $$4;
         }
         return 0;
     }
 
-    public static boolean shouldConnectTo(net.minecraft.world.level.block.state.BlockState state) {
-        return net.minecraft.world.level.block.RedStoneWireBlock.shouldConnectTo((net.minecraft.world.level.block.state.BlockState)state, null);
+    public static boolean shouldConnectTo(net.minecraft.world.level.block.state.BlockState $$0) {
+        return net.minecraft.world.level.block.RedStoneWireBlock.shouldConnectTo((net.minecraft.world.level.block.state.BlockState)$$0, null);
     }
 
-    public static boolean shouldConnectTo(net.minecraft.world.level.block.state.BlockState state, @javax.annotation.Nullable net.minecraft.core.Direction direction) {
-        if (state.is(net.minecraft.world.level.block.Blocks.REDSTONE_WIRE)) {
+    public static boolean shouldConnectTo(net.minecraft.world.level.block.state.BlockState $$0, @javax.annotation.Nullable net.minecraft.core.Direction $$1) {
+        if ($$0.is(net.minecraft.world.level.block.Blocks.REDSTONE_WIRE)) {
             return true;
         }
-        if (state.is(net.minecraft.world.level.block.Blocks.REPEATER)) {
-            net.minecraft.core.Direction direction2 = (net.minecraft.core.Direction)state.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.RepeaterBlock.FACING);
-            return direction2 == direction || direction2.getOpposite() == direction;
+        if ($$0.is(net.minecraft.world.level.block.Blocks.REPEATER)) {
+            net.minecraft.core.Direction $$2 = (net.minecraft.core.Direction)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.RepeaterBlock.FACING);
+            return $$2 == $$1 || $$2.getOpposite() == $$1;
         }
-        if (state.is(net.minecraft.world.level.block.Blocks.OBSERVER)) {
-            return direction == state.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.ObserverBlock.FACING);
+        if ($$0.is(net.minecraft.world.level.block.Blocks.OBSERVER)) {
+            return $$1 == $$0.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.ObserverBlock.FACING);
         }
-        return state.isSignalSource() && direction != null;
+        return $$0.isSignalSource() && $$1 != null;
     }
 
-    public boolean isSignalSource(net.minecraft.world.level.block.state.BlockState state) {
+    public boolean isSignalSource(net.minecraft.world.level.block.state.BlockState $$0) {
         return this.shouldSignal;
     }
 
-    public static int getColorForPower(int power) {
-        net.minecraft.world.phys.Vec3 vec3 = COLORS[power];
-        return net.minecraft.util.Mth.color((float)((float)vec3.x()), (float)((float)vec3.y()), (float)((float)vec3.z()));
+    public static int getColorForPower(int $$0) {
+        net.minecraft.world.phys.Vec3 $$1 = COLORS[$$0];
+        return net.minecraft.util.Mth.color((float)((float)$$1.x()), (float)((float)$$1.y()), (float)((float)$$1.z()));
     }
 
     public void spawnParticlesAlongLine(net.minecraft.world.level.Level $$0, net.minecraft.util.RandomSource $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.phys.Vec3 $$3, net.minecraft.core.Direction $$4, net.minecraft.core.Direction $$5, float $$6, float $$7) {
@@ -355,58 +354,58 @@
         }
     }
 
-    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Rotation rotation) {
-        switch (net.minecraft.world.level.block.RedStoneWireBlock$1.$SwitchMap$net$minecraft$world$level$block$Rotation[rotation.ordinal()]) {
+    public net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Rotation $$1) {
+        switch (net.minecraft.world.level.block.RedStoneWireBlock$1.$SwitchMap$net$minecraft$world$level$block$Rotation[$$1.ordinal()]) {
             case 1: {
-                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)))).setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)));
+                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)))).setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)));
             }
             case 2: {
-                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)))).setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)))).setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)));
+                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)))).setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)))).setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)));
             }
             case 3: {
-                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)))).setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)))).setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)));
+                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)))).setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)))).setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)));
             }
         }
-        return state;
+        return $$0;
     }
 
-    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.Mirror mirror) {
-        switch (net.minecraft.world.level.block.RedStoneWireBlock$1.$SwitchMap$net$minecraft$world$level$block$Mirror[mirror.ordinal()]) {
+    public net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.Mirror $$1) {
+        switch (net.minecraft.world.level.block.RedStoneWireBlock$1.$SwitchMap$net$minecraft$world$level$block$Mirror[$$1.ordinal()]) {
             case 1: {
-                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)));
+                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)NORTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)SOUTH)))).setValue((net.minecraft.world.level.block.state.properties.Property)SOUTH, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)NORTH)));
             }
             case 2: {
-                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)state.setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)))).setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)state.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)));
+                return (net.minecraft.world.level.block.state.BlockState)((net.minecraft.world.level.block.state.BlockState)$$0.setValue((net.minecraft.world.level.block.state.properties.Property)EAST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)WEST)))).setValue((net.minecraft.world.level.block.state.properties.Property)WEST, (java.lang.Comparable)((net.minecraft.world.level.block.state.properties.RedstoneSide)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)EAST)));
             }
         }
-        return super.mirror(state, mirror);
+        return super.mirror($$0, $$1);
     }
 
-    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> builder) {
-        builder.add(new net.minecraft.world.level.block.state.properties.Property[]{NORTH, EAST, SOUTH, WEST, POWER});
+    public void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder<net.minecraft.world.level.block.Block, net.minecraft.world.level.block.state.BlockState> $$0) {
+        $$0.add(new net.minecraft.world.level.block.state.properties.Property[]{NORTH, EAST, SOUTH, WEST, POWER});
     }
 
-    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.BlockHitResult hit) {
-        if (!player.getAbilities().mayBuild) {
+    public net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3, net.minecraft.world.InteractionHand $$4, net.minecraft.world.phys.BlockHitResult $$5) {
+        if (!$$3.getAbilities().mayBuild) {
             return net.minecraft.world.InteractionResult.PASS;
         }
-        if (net.minecraft.world.level.block.RedStoneWireBlock.isCross((net.minecraft.world.level.block.state.BlockState)state) || net.minecraft.world.level.block.RedStoneWireBlock.isDot((net.minecraft.world.level.block.state.BlockState)state)) {
-            net.minecraft.world.level.block.state.BlockState blockState = net.minecraft.world.level.block.RedStoneWireBlock.isCross((net.minecraft.world.level.block.state.BlockState)state) ? this.defaultBlockState() : this.crossState;
-            blockState = (net.minecraft.world.level.block.state.BlockState)blockState.setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)((java.lang.Integer)state.getValue((net.minecraft.world.level.block.state.properties.Property)POWER)));
-            if ((blockState = this.getConnectionState((net.minecraft.world.level.BlockGetter)level, blockState, pos)) != state) {
-                level.setBlock(pos, blockState, 3);
-                this.updatesOnShapeChange(level, pos, state, blockState);
+        if (net.minecraft.world.level.block.RedStoneWireBlock.isCross((net.minecraft.world.level.block.state.BlockState)$$0) || net.minecraft.world.level.block.RedStoneWireBlock.isDot((net.minecraft.world.level.block.state.BlockState)$$0)) {
+            net.minecraft.world.level.block.state.BlockState $$6 = net.minecraft.world.level.block.RedStoneWireBlock.isCross((net.minecraft.world.level.block.state.BlockState)$$0) ? this.defaultBlockState() : this.crossState;
+            $$6 = (net.minecraft.world.level.block.state.BlockState)$$6.setValue((net.minecraft.world.level.block.state.properties.Property)POWER, (java.lang.Comparable)((java.lang.Integer)$$0.getValue((net.minecraft.world.level.block.state.properties.Property)POWER)));
+            if (($$6 = this.getConnectionState((net.minecraft.world.level.BlockGetter)$$1, $$6, $$2)) != $$0) {
+                $$1.setBlock($$2, $$6, 3);
+                this.updatesOnShapeChange($$1, $$2, $$0, $$6);
                 return net.minecraft.world.InteractionResult.SUCCESS;
             }
         }
         return net.minecraft.world.InteractionResult.PASS;
     }
 
-    public void updatesOnShapeChange(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState oldState, net.minecraft.world.level.block.state.BlockState newState) {
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction$Plane.HORIZONTAL) {
-            net.minecraft.core.BlockPos blockPos = pos.relative(direction);
-            if (((net.minecraft.world.level.block.state.properties.RedstoneSide)oldState.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)direction))).isConnected() == ((net.minecraft.world.level.block.state.properties.RedstoneSide)newState.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)direction))).isConnected() || !level.getBlockState(blockPos).isRedstoneConductor((net.minecraft.world.level.BlockGetter)level, blockPos)) continue;
-            level.updateNeighborsAtExceptFromFacing(blockPos, newState.getBlock(), direction.getOpposite());
+    public void updatesOnShapeChange(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.world.level.block.state.BlockState $$3) {
+        for (net.minecraft.core.Direction $$4 : net.minecraft.core.Direction$Plane.HORIZONTAL) {
+            net.minecraft.core.BlockPos $$5 = $$1.relative($$4);
+            if (((net.minecraft.world.level.block.state.properties.RedstoneSide)$$2.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$4))).isConnected() == ((net.minecraft.world.level.block.state.properties.RedstoneSide)$$3.getValue((net.minecraft.world.level.block.state.properties.Property)PROPERTY_BY_DIRECTION.get((java.lang.Object)$$4))).isConnected() || !$$0.getBlockState($$5).isRedstoneConductor((net.minecraft.world.level.BlockGetter)$$0, $$5)) continue;
+            $$0.updateNeighborsAtExceptFromFacing($$5, $$3.getBlock(), $$4.getOpposite());
         }
     }
 