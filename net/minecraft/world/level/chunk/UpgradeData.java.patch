--- net/minecraft/world/level/chunk/UpgradeData.java
+++ net/minecraft/world/level/chunk/UpgradeData.java
@@ -51,93 +51,90 @@
         }
     }
 
-    public void upgrade(net.minecraft.world.level.chunk.LevelChunk chunk) {
-        this.upgradeInside(chunk);
-        for (net.minecraft.core.Direction8 direction8 : DIRECTIONS) {
-            net.minecraft.world.level.chunk.UpgradeData.upgradeSides((net.minecraft.world.level.chunk.LevelChunk)chunk, (net.minecraft.core.Direction8)direction8);
+    public void upgrade(net.minecraft.world.level.chunk.LevelChunk $$0) {
+        this.upgradeInside($$0);
+        for (net.minecraft.core.Direction8 $$12 : DIRECTIONS) {
+            net.minecraft.world.level.chunk.UpgradeData.upgradeSides((net.minecraft.world.level.chunk.LevelChunk)$$0, (net.minecraft.core.Direction8)$$12);
         }
-        net.minecraft.world.level.Level level = chunk.getLevel();
+        net.minecraft.world.level.Level $$2 = $$0.getLevel();
         this.neighborBlockTicks.forEach($$1 -> {
-            net.minecraft.world.level.block.Block $$2 = $$1.type() == net.minecraft.world.level.block.Blocks.AIR ? level.getBlockState($$1.pos()).getBlock() : (net.minecraft.world.level.block.Block)$$1.type();
-            level.scheduleTick($$1.pos(), $$2, $$1.delay(), $$1.priority());
+            net.minecraft.world.level.block.Block $$2 = $$1.type() == net.minecraft.world.level.block.Blocks.AIR ? $$2.getBlockState($$1.pos()).getBlock() : (net.minecraft.world.level.block.Block)$$1.type();
+            $$2.scheduleTick($$1.pos(), $$2, $$1.delay(), $$1.priority());
         });
         this.neighborFluidTicks.forEach($$1 -> {
-            net.minecraft.world.level.material.Fluid $$2 = $$1.type() == net.minecraft.world.level.material.Fluids.EMPTY ? level.getFluidState($$1.pos()).getType() : (net.minecraft.world.level.material.Fluid)$$1.type();
-            level.scheduleTick($$1.pos(), $$2, $$1.delay(), $$1.priority());
+            net.minecraft.world.level.material.Fluid $$2 = $$1.type() == net.minecraft.world.level.material.Fluids.EMPTY ? $$2.getFluidState($$1.pos()).getType() : (net.minecraft.world.level.material.Fluid)$$1.type();
+            $$2.scheduleTick($$1.pos(), $$2, $$1.delay(), $$1.priority());
         });
-        CHUNKY_FIXERS.forEach($$1 -> $$1.processChunk((net.minecraft.world.level.LevelAccessor)level));
+        CHUNKY_FIXERS.forEach($$1 -> $$1.processChunk((net.minecraft.world.level.LevelAccessor)$$2));
     }
 
-    public static void upgradeSides(net.minecraft.world.level.chunk.LevelChunk chunk, net.minecraft.core.Direction8 direction8) {
-        net.minecraft.world.level.Level level = chunk.getLevel();
-        if (!chunk.getUpgradeData().sides.remove((java.lang.Object)direction8)) {
+    public static void upgradeSides(net.minecraft.world.level.chunk.LevelChunk $$0, net.minecraft.core.Direction8 $$1) {
+        net.minecraft.world.level.Level $$2 = $$0.getLevel();
+        if (!$$0.getUpgradeData().sides.remove((java.lang.Object)$$1)) {
             return;
         }
-        java.util.Set set = direction8.getDirections();
-        boolean bl = false;
-        int n = 15;
-        boolean bl2 = set.contains((java.lang.Object)net.minecraft.core.Direction.EAST);
-        boolean bl3 = set.contains((java.lang.Object)net.minecraft.core.Direction.WEST);
-        boolean bl4 = set.contains((java.lang.Object)net.minecraft.core.Direction.SOUTH);
-        boolean bl5 = set.contains((java.lang.Object)net.minecraft.core.Direction.NORTH);
-        boolean bl6 = set.size() == 1;
-        net.minecraft.world.level.ChunkPos chunkPos = chunk.getPos();
-        int n2 = chunkPos.getMinBlockX() + (bl6 && (bl5 || bl4) ? 1 : (bl3 ? 0 : 15));
-        int n3 = chunkPos.getMinBlockX() + (bl6 && (bl5 || bl4) ? 14 : (bl3 ? 0 : 15));
-        int n4 = chunkPos.getMinBlockZ() + (bl6 && (bl2 || bl3) ? 1 : (bl5 ? 0 : 15));
-        int n5 = chunkPos.getMinBlockZ() + (bl6 && (bl2 || bl3) ? 14 : (bl5 ? 0 : 15));
-        net.minecraft.core.Direction[] directionArray = net.minecraft.core.Direction.values();
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos = new net.minecraft.core.BlockPos$MutableBlockPos();
-        for (net.minecraft.core.BlockPos blockPos : net.minecraft.core.BlockPos.betweenClosed((int)n2, (int)level.getMinBuildHeight(), (int)n4, (int)n3, (int)(level.getMaxBuildHeight() - 1), (int)n5)) {
-            net.minecraft.world.level.block.state.BlockState blockState;
-            net.minecraft.world.level.block.state.BlockState blockState2 = blockState = level.getBlockState(blockPos);
-            for (net.minecraft.core.Direction direction : directionArray) {
-                mutableBlockPos.setWithOffset((net.minecraft.core.Vec3i)blockPos, direction);
-                blockState2 = net.minecraft.world.level.chunk.UpgradeData.updateState((net.minecraft.world.level.block.state.BlockState)blockState2, (net.minecraft.core.Direction)direction, (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)blockPos, (net.minecraft.core.BlockPos)mutableBlockPos);
+        java.util.Set $$3 = $$1.getDirections();
+        boolean $$4 = false;
+        int $$5 = 15;
+        boolean $$6 = $$3.contains((java.lang.Object)net.minecraft.core.Direction.EAST);
+        boolean $$7 = $$3.contains((java.lang.Object)net.minecraft.core.Direction.WEST);
+        boolean $$8 = $$3.contains((java.lang.Object)net.minecraft.core.Direction.SOUTH);
+        boolean $$9 = $$3.contains((java.lang.Object)net.minecraft.core.Direction.NORTH);
+        boolean $$10 = $$3.size() == 1;
+        net.minecraft.world.level.ChunkPos $$11 = $$0.getPos();
+        int $$12 = $$11.getMinBlockX() + ($$10 && ($$9 || $$8) ? 1 : ($$7 ? 0 : 15));
+        int $$13 = $$11.getMinBlockX() + ($$10 && ($$9 || $$8) ? 14 : ($$7 ? 0 : 15));
+        int $$14 = $$11.getMinBlockZ() + ($$10 && ($$6 || $$7) ? 1 : ($$9 ? 0 : 15));
+        int $$15 = $$11.getMinBlockZ() + ($$10 && ($$6 || $$7) ? 14 : ($$9 ? 0 : 15));
+        net.minecraft.core.Direction[] $$16 = net.minecraft.core.Direction.values();
+        net.minecraft.core.BlockPos$MutableBlockPos $$17 = new net.minecraft.core.BlockPos$MutableBlockPos();
+        for (net.minecraft.core.BlockPos $$18 : net.minecraft.core.BlockPos.betweenClosed((int)$$12, (int)$$2.getMinBuildHeight(), (int)$$14, (int)$$13, (int)($$2.getMaxBuildHeight() - 1), (int)$$15)) {
+            net.minecraft.world.level.block.state.BlockState $$19;
+            net.minecraft.world.level.block.state.BlockState $$20 = $$19 = $$2.getBlockState($$18);
+            for (net.minecraft.core.Direction $$21 : $$16) {
+                $$17.setWithOffset((net.minecraft.core.Vec3i)$$18, $$21);
+                $$20 = net.minecraft.world.level.chunk.UpgradeData.updateState((net.minecraft.world.level.block.state.BlockState)$$20, (net.minecraft.core.Direction)$$21, (net.minecraft.world.level.LevelAccessor)$$2, (net.minecraft.core.BlockPos)$$18, (net.minecraft.core.BlockPos)$$17);
             }
-            net.minecraft.world.level.block.Block.updateOrDestroy((net.minecraft.world.level.block.state.BlockState)blockState, (net.minecraft.world.level.block.state.BlockState)blockState2, (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)blockPos, (int)18);
+            net.minecraft.world.level.block.Block.updateOrDestroy((net.minecraft.world.level.block.state.BlockState)$$19, (net.minecraft.world.level.block.state.BlockState)$$20, (net.minecraft.world.level.LevelAccessor)$$2, (net.minecraft.core.BlockPos)$$18, (int)18);
         }
     }
 
-    public static net.minecraft.world.level.block.state.BlockState updateState(net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.Direction direction, net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos, net.minecraft.core.BlockPos offsetPos) {
-        return ((net.minecraft.world.level.chunk.UpgradeData$BlockFixer)MAP.getOrDefault((java.lang.Object)state.getBlock(), (java.lang.Object)net.minecraft.world.level.chunk.UpgradeData$BlockFixers.DEFAULT)).updateShape(state, direction, level.getBlockState(offsetPos), level, pos, offsetPos);
+    public static net.minecraft.world.level.block.state.BlockState updateState(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.Direction $$1, net.minecraft.world.level.LevelAccessor $$2, net.minecraft.core.BlockPos $$3, net.minecraft.core.BlockPos $$4) {
+        return ((net.minecraft.world.level.chunk.UpgradeData$BlockFixer)MAP.getOrDefault((java.lang.Object)$$0.getBlock(), (java.lang.Object)net.minecraft.world.level.chunk.UpgradeData$BlockFixers.DEFAULT)).updateShape($$0, $$1, $$2.getBlockState($$4), $$2, $$3, $$4);
     }
 
-    public void upgradeInside(net.minecraft.world.level.chunk.LevelChunk chunk) {
-        int n;
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos = new net.minecraft.core.BlockPos$MutableBlockPos();
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos2 = new net.minecraft.core.BlockPos$MutableBlockPos();
-        net.minecraft.world.level.ChunkPos chunkPos = chunk.getPos();
-        net.minecraft.world.level.Level level = chunk.getLevel();
-        for (n = 0;
- n < this.index.length; ++n) {
-            net.minecraft.world.level.chunk.LevelChunkSection levelChunkSection = chunk.getSection(n);
-            int[] nArray = this.index[n];
-            this.index[n] = null;
-            if (nArray == null || nArray.length <= 0) continue;
-            net.minecraft.core.Direction[] directionArray = net.minecraft.core.Direction.values();
-            net.minecraft.world.level.chunk.PalettedContainer palettedContainer = levelChunkSection.getStates();
-            for (int n2 : nArray) {
-                net.minecraft.world.level.block.state.BlockState blockState;
-                int n3 = n2 & 0xF;
-                int n4 = n2 >> 8 & 0xF;
-                int n5 = n2 >> 4 & 0xF;
-                mutableBlockPos.set(chunkPos.getMinBlockX() + n3, levelChunkSection.bottomBlockY() + n4, chunkPos.getMinBlockZ() + n5);
-                net.minecraft.world.level.block.state.BlockState blockState2 = blockState = (net.minecraft.world.level.block.state.BlockState)palettedContainer.get(n2);
-                for (net.minecraft.core.Direction direction : directionArray) {
-                    mutableBlockPos2.setWithOffset((net.minecraft.core.Vec3i)mutableBlockPos, direction);
-                    if (net.minecraft.core.SectionPos.blockToSectionCoord((int)mutableBlockPos.getX()) != chunkPos.x || net.minecraft.core.SectionPos.blockToSectionCoord((int)mutableBlockPos.getZ()) != chunkPos.z) continue;
-                    blockState2 = net.minecraft.world.level.chunk.UpgradeData.updateState((net.minecraft.world.level.block.state.BlockState)blockState2, (net.minecraft.core.Direction)direction, (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)mutableBlockPos, (net.minecraft.core.BlockPos)mutableBlockPos2);
+    public void upgradeInside(net.minecraft.world.level.chunk.LevelChunk $$0) {
+        net.minecraft.core.BlockPos$MutableBlockPos $$1 = new net.minecraft.core.BlockPos$MutableBlockPos();
+        net.minecraft.core.BlockPos$MutableBlockPos $$2 = new net.minecraft.core.BlockPos$MutableBlockPos();
+        net.minecraft.world.level.ChunkPos $$3 = $$0.getPos();
+        net.minecraft.world.level.Level $$4 = $$0.getLevel();
+        for (int $$5 = 0; $$5 < this.index.length; ++$$5) {
+            net.minecraft.world.level.chunk.LevelChunkSection $$6 = $$0.getSection($$5);
+            int[] $$7 = this.index[$$5];
+            this.index[$$5] = null;
+            if ($$7 == null || $$7.length <= 0) continue;
+            net.minecraft.core.Direction[] $$8 = net.minecraft.core.Direction.values();
+            net.minecraft.world.level.chunk.PalettedContainer $$9 = $$6.getStates();
+            for (int $$10 : $$7) {
+                net.minecraft.world.level.block.state.BlockState $$14;
+                int $$11 = $$10 & 0xF;
+                int $$12 = $$10 >> 8 & 0xF;
+                int $$13 = $$10 >> 4 & 0xF;
+                $$1.set($$3.getMinBlockX() + $$11, $$6.bottomBlockY() + $$12, $$3.getMinBlockZ() + $$13);
+                net.minecraft.world.level.block.state.BlockState $$15 = $$14 = (net.minecraft.world.level.block.state.BlockState)$$9.get($$10);
+                for (net.minecraft.core.Direction $$16 : $$8) {
+                    $$2.setWithOffset((net.minecraft.core.Vec3i)$$1, $$16);
+                    if (net.minecraft.core.SectionPos.blockToSectionCoord((int)$$1.getX()) != $$3.x || net.minecraft.core.SectionPos.blockToSectionCoord((int)$$1.getZ()) != $$3.z) continue;
+                    $$15 = net.minecraft.world.level.chunk.UpgradeData.updateState((net.minecraft.world.level.block.state.BlockState)$$15, (net.minecraft.core.Direction)$$16, (net.minecraft.world.level.LevelAccessor)$$4, (net.minecraft.core.BlockPos)$$1, (net.minecraft.core.BlockPos)$$2);
                 }
-                net.minecraft.world.level.block.Block.updateOrDestroy((net.minecraft.world.level.block.state.BlockState)blockState, (net.minecraft.world.level.block.state.BlockState)blockState2, (net.minecraft.world.level.LevelAccessor)level, (net.minecraft.core.BlockPos)mutableBlockPos, (int)18);
+                net.minecraft.world.level.block.Block.updateOrDestroy((net.minecraft.world.level.block.state.BlockState)$$14, (net.minecraft.world.level.block.state.BlockState)$$15, (net.minecraft.world.level.LevelAccessor)$$4, (net.minecraft.core.BlockPos)$$1, (int)18);
             }
         }
-        for (n = 0;
- n < this.index.length; ++n) {
-            if (this.index[n] != null) {
-                LOGGER.warn("Discarding update data for section {} for chunk ({} {})", new java.lang.Object[]{level.getSectionYFromSectionIndex(n), chunkPos.x, chunkPos.z});
+        for (int $$17 = 0; $$17 < this.index.length; ++$$17) {
+            if (this.index[$$17] != null) {
+                LOGGER.warn("Discarding update data for section {} for chunk ({} {})", new java.lang.Object[]{$$4.getSectionYFromSectionIndex($$17), $$3.x, $$3.z});
             }
-            this.index[n] = null;
+            this.index[$$17] = null;
         }
     }
 