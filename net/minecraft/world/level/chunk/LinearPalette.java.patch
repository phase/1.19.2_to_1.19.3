--- net/minecraft/world/level/chunk/LinearPalette.java
+++ net/minecraft/world/level/chunk/LinearPalette.java
@@ -36,46 +36,45 @@
         return new net.minecraft.world.level.chunk.LinearPalette($$1, $$0, $$2, $$3);
     }
 
-    public int idFor(T state) {
-        int n;
-        for (n = 0;
- n < this.size; ++n) {
-            if (this.values[n] != state) continue;
-            return n;
+    public int idFor(T $$0) {
+        int $$2;
+        for (int $$1 = 0; $$1 < this.size; ++$$1) {
+            if (this.values[$$1] != $$0) continue;
+            return $$1;
         }
-        if ((n = this.size++) < this.values.length) {
-            this.values[n] = state;
-            return n;
+        if (($$2 = this.size++) < this.values.length) {
+            this.values[$$2] = $$0;
+            return $$2;
         }
-        return this.resizeHandler.onResize(this.bits + 1, state);
+        return this.resizeHandler.onResize(this.bits + 1, $$0);
     }
 
-    public boolean maybeHas(java.util.function.Predicate<T> filter) {
-        for (int i = 0; i < this.size; ++i) {
-            if (!filter.test(this.values[i])) continue;
+    public boolean maybeHas(java.util.function.Predicate<T> $$0) {
+        for (int $$1 = 0; $$1 < this.size; ++$$1) {
+            if (!$$0.test(this.values[$$1])) continue;
             return true;
         }
         return false;
     }
 
-    public T valueFor(int indexKey) {
-        if (indexKey >= 0 && indexKey < this.size) {
-            return (T)this.values[indexKey];
+    public T valueFor(int $$0) {
+        if ($$0 >= 0 && $$0 < this.size) {
+            return (T)this.values[$$0];
         }
-        throw new net.minecraft.world.level.chunk.MissingPaletteEntryException(indexKey);
+        throw new net.minecraft.world.level.chunk.MissingPaletteEntryException($$0);
     }
 
-    public void read(net.minecraft.network.FriendlyByteBuf buf) {
-        this.size = buf.readVarInt();
-        for (int i = 0; i < this.size; ++i) {
-            this.values[i] = this.registry.byIdOrThrow(buf.readVarInt());
+    public void read(net.minecraft.network.FriendlyByteBuf $$0) {
+        this.size = $$0.readVarInt();
+        for (int $$1 = 0; $$1 < this.size; ++$$1) {
+            this.values[$$1] = this.registry.byIdOrThrow($$0.readVarInt());
         }
     }
 
-    public void write(net.minecraft.network.FriendlyByteBuf buf) {
-        buf.writeVarInt(this.size);
-        for (int i = 0; i < this.size; ++i) {
-            buf.writeVarInt(this.registry.getId(this.values[i]));
+    public void write(net.minecraft.network.FriendlyByteBuf $$0) {
+        $$0.writeVarInt(this.size);
+        for (int $$1 = 0; $$1 < this.size; ++$$1) {
+            $$0.writeVarInt(this.registry.getId(this.values[$$1]));
         }
     }
 