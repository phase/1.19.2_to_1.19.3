--- net/minecraft/world/level/chunk/HashMapPalette.java
+++ net/minecraft/world/level/chunk/HashMapPalette.java
@@ -31,43 +31,43 @@
         return new net.minecraft.world.level.chunk.HashMapPalette($$1, $$0, $$2, $$3);
     }
 
-    public int idFor(T state) {
-        int n = this.values.getId(state);
-        if (n == -1 && (n = this.values.add(state)) >= 1 << this.bits) {
-            n = this.resizeHandler.onResize(this.bits + 1, state);
+    public int idFor(T $$0) {
+        int $$1 = this.values.getId($$0);
+        if ($$1 == -1 && ($$1 = this.values.add($$0)) >= 1 << this.bits) {
+            $$1 = this.resizeHandler.onResize(this.bits + 1, $$0);
         }
-        return n;
+        return $$1;
     }
 
-    public boolean maybeHas(java.util.function.Predicate<T> filter) {
-        for (int i = 0; i < this.getSize(); ++i) {
-            if (!filter.test(this.values.byId(i))) continue;
+    public boolean maybeHas(java.util.function.Predicate<T> $$0) {
+        for (int $$1 = 0; $$1 < this.getSize(); ++$$1) {
+            if (!$$0.test(this.values.byId($$1))) continue;
             return true;
         }
         return false;
     }
 
-    public T valueFor(int indexKey) {
-        java.lang.Object object = this.values.byId(indexKey);
-        if (object == null) {
-            throw new net.minecraft.world.level.chunk.MissingPaletteEntryException(indexKey);
+    public T valueFor(int $$0) {
+        java.lang.Object $$1 = this.values.byId($$0);
+        if ($$1 == null) {
+            throw new net.minecraft.world.level.chunk.MissingPaletteEntryException($$0);
         }
-        return (T)object;
+        return (T)$$1;
     }
 
-    public void read(net.minecraft.network.FriendlyByteBuf buf) {
+    public void read(net.minecraft.network.FriendlyByteBuf $$0) {
         this.values.clear();
-        int n = buf.readVarInt();
-        for (int i = 0; i < n; ++i) {
-            this.values.add(this.registry.byIdOrThrow(buf.readVarInt()));
+        int $$1 = $$0.readVarInt();
+        for (int $$2 = 0; $$2 < $$1; ++$$2) {
+            this.values.add(this.registry.byIdOrThrow($$0.readVarInt()));
         }
     }
 
-    public void write(net.minecraft.network.FriendlyByteBuf buf) {
-        int n = this.getSize();
-        buf.writeVarInt(n);
-        for (int i = 0; i < n; ++i) {
-            buf.writeVarInt(this.registry.getId(this.values.byId(i)));
+    public void write(net.minecraft.network.FriendlyByteBuf $$0) {
+        int $$1 = this.getSize();
+        $$0.writeVarInt($$1);
+        for (int $$2 = 0; $$2 < $$1; ++$$2) {
+            $$0.writeVarInt(this.registry.getId(this.values.byId($$2)));
         }
     }
 