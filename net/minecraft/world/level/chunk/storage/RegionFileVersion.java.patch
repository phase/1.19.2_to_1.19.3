--- net/minecraft/world/level/chunk/storage/RegionFileVersion.java
+++ net/minecraft/world/level/chunk/storage/RegionFileVersion.java
@@ -13,36 +13,36 @@
     public net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper<java.io.InputStream> inputWrapper;
     public net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper<java.io.OutputStream> outputWrapper;
 
-    public net.minecraft.world.level.chunk.storage.RegionFileVersion(int id, net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper<java.io.InputStream> inputWrapper, net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper<java.io.OutputStream> outputWrapper) {
-        this.id = id;
-        this.inputWrapper = inputWrapper;
-        this.outputWrapper = outputWrapper;
+    public net.minecraft.world.level.chunk.storage.RegionFileVersion(int $$0, net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper<java.io.InputStream> $$1, net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper<java.io.OutputStream> $$2) {
+        this.id = $$0;
+        this.inputWrapper = $$1;
+        this.outputWrapper = $$2;
     }
 
-    public static net.minecraft.world.level.chunk.storage.RegionFileVersion register(net.minecraft.world.level.chunk.storage.RegionFileVersion fileVersion) {
-        VERSIONS.put(fileVersion.id, (java.lang.Object)fileVersion);
-        return fileVersion;
+    public static net.minecraft.world.level.chunk.storage.RegionFileVersion register(net.minecraft.world.level.chunk.storage.RegionFileVersion $$0) {
+        VERSIONS.put($$0.id, (java.lang.Object)$$0);
+        return $$0;
     }
 
     @javax.annotation.Nullable
-    public static net.minecraft.world.level.chunk.storage.RegionFileVersion fromId(int id) {
-        return (net.minecraft.world.level.chunk.storage.RegionFileVersion)VERSIONS.get(id);
+    public static net.minecraft.world.level.chunk.storage.RegionFileVersion fromId(int $$0) {
+        return (net.minecraft.world.level.chunk.storage.RegionFileVersion)VERSIONS.get($$0);
     }
 
-    public static boolean isValidVersion(int id) {
-        return VERSIONS.containsKey(id);
+    public static boolean isValidVersion(int $$0) {
+        return VERSIONS.containsKey($$0);
     }
 
     public int getId() {
         return this.id;
     }
 
-    public java.io.OutputStream wrap(java.io.OutputStream outputStream) throws java.io.IOException {
-        return (java.io.OutputStream)this.outputWrapper.wrap((java.lang.Object)outputStream);
+    public java.io.OutputStream wrap(java.io.OutputStream $$0) throws java.io.IOException {
+        return (java.io.OutputStream)this.outputWrapper.wrap((java.lang.Object)$$0);
     }
 
-    public java.io.InputStream wrap(java.io.InputStream inputStream) throws java.io.IOException {
-        return (java.io.InputStream)this.inputWrapper.wrap((java.lang.Object)inputStream);
+    public java.io.InputStream wrap(java.io.InputStream $$0) throws java.io.IOException {
+        return (java.io.InputStream)this.inputWrapper.wrap((java.lang.Object)$$0);
     }
 
     public static /* synthetic */ java.io.OutputStream lambda$static$5(java.io.OutputStream $$0) throws java.io.IOException {