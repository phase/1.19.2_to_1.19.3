--- net/minecraft/world/level/chunk/ChunkStatus.java
+++ net/minecraft/world/level/chunk/ChunkStatus.java
@@ -33,24 +33,24 @@
     public net.minecraft.world.level.chunk.ChunkStatus$ChunkType chunkType;
     public java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> heightmapsAfter;
 
-    public static java.util.concurrent.CompletableFuture<com.mojang.datafixers.util.Either<net.minecraft.world.level.chunk.ChunkAccess, net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure>> lightChunk(net.minecraft.world.level.chunk.ChunkStatus status, net.minecraft.server.level.ThreadedLevelLightEngine lightEngine, net.minecraft.world.level.chunk.ChunkAccess chunk) {
-        boolean bl = net.minecraft.world.level.chunk.ChunkStatus.isLighted((net.minecraft.world.level.chunk.ChunkStatus)status, (net.minecraft.world.level.chunk.ChunkAccess)chunk);
-        if (!chunk.getStatus().isOrAfter(status)) {
-            ((net.minecraft.world.level.chunk.ProtoChunk)chunk).setStatus(status);
+    public static java.util.concurrent.CompletableFuture<com.mojang.datafixers.util.Either<net.minecraft.world.level.chunk.ChunkAccess, net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure>> lightChunk(net.minecraft.world.level.chunk.ChunkStatus $$0, net.minecraft.server.level.ThreadedLevelLightEngine $$1, net.minecraft.world.level.chunk.ChunkAccess $$2) {
+        boolean $$3 = net.minecraft.world.level.chunk.ChunkStatus.isLighted((net.minecraft.world.level.chunk.ChunkStatus)$$0, (net.minecraft.world.level.chunk.ChunkAccess)$$2);
+        if (!$$2.getStatus().isOrAfter($$0)) {
+            ((net.minecraft.world.level.chunk.ProtoChunk)$$2).setStatus($$0);
         }
-        return lightEngine.lightChunk(chunk, bl).thenApply(com.mojang.datafixers.util.Either::left);
+        return $$1.lightChunk($$2, $$3).thenApply(com.mojang.datafixers.util.Either::left);
     }
 
-    public static net.minecraft.world.level.chunk.ChunkStatus registerSimple(java.lang.String key, @javax.annotation.Nullable net.minecraft.world.level.chunk.ChunkStatus parent, int taskRange, java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> heightmaps, net.minecraft.world.level.chunk.ChunkStatus$ChunkType type, net.minecraft.world.level.chunk.ChunkStatus$SimpleGenerationTask generationWorker) {
-        return net.minecraft.world.level.chunk.ChunkStatus.register((java.lang.String)key, (net.minecraft.world.level.chunk.ChunkStatus)parent, (int)taskRange, heightmaps, (net.minecraft.world.level.chunk.ChunkStatus$ChunkType)type, (net.minecraft.world.level.chunk.ChunkStatus$GenerationTask)generationWorker);
+    public static net.minecraft.world.level.chunk.ChunkStatus registerSimple(java.lang.String $$0, @javax.annotation.Nullable net.minecraft.world.level.chunk.ChunkStatus $$1, int $$2, java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> $$3, net.minecraft.world.level.chunk.ChunkStatus$ChunkType $$4, net.minecraft.world.level.chunk.ChunkStatus$SimpleGenerationTask $$5) {
+        return net.minecraft.world.level.chunk.ChunkStatus.register((java.lang.String)$$0, (net.minecraft.world.level.chunk.ChunkStatus)$$1, (int)$$2, $$3, (net.minecraft.world.level.chunk.ChunkStatus$ChunkType)$$4, (net.minecraft.world.level.chunk.ChunkStatus$GenerationTask)$$5);
     }
 
-    public static net.minecraft.world.level.chunk.ChunkStatus register(java.lang.String key, @javax.annotation.Nullable net.minecraft.world.level.chunk.ChunkStatus parent, int taskRange, java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> heightmaps, net.minecraft.world.level.chunk.ChunkStatus$ChunkType type, net.minecraft.world.level.chunk.ChunkStatus$GenerationTask generationWorker) {
-        return net.minecraft.world.level.chunk.ChunkStatus.register((java.lang.String)key, (net.minecraft.world.level.chunk.ChunkStatus)parent, (int)taskRange, heightmaps, (net.minecraft.world.level.chunk.ChunkStatus$ChunkType)type, (net.minecraft.world.level.chunk.ChunkStatus$GenerationTask)generationWorker, (net.minecraft.world.level.chunk.ChunkStatus$LoadingTask)PASSTHROUGH_LOAD_TASK);
+    public static net.minecraft.world.level.chunk.ChunkStatus register(java.lang.String $$0, @javax.annotation.Nullable net.minecraft.world.level.chunk.ChunkStatus $$1, int $$2, java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> $$3, net.minecraft.world.level.chunk.ChunkStatus$ChunkType $$4, net.minecraft.world.level.chunk.ChunkStatus$GenerationTask $$5) {
+        return net.minecraft.world.level.chunk.ChunkStatus.register((java.lang.String)$$0, (net.minecraft.world.level.chunk.ChunkStatus)$$1, (int)$$2, $$3, (net.minecraft.world.level.chunk.ChunkStatus$ChunkType)$$4, (net.minecraft.world.level.chunk.ChunkStatus$GenerationTask)$$5, (net.minecraft.world.level.chunk.ChunkStatus$LoadingTask)PASSTHROUGH_LOAD_TASK);
     }
 
-    public static net.minecraft.world.level.chunk.ChunkStatus register(java.lang.String key, @javax.annotation.Nullable net.minecraft.world.level.chunk.ChunkStatus parent, int taskRange, java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> heightmaps, net.minecraft.world.level.chunk.ChunkStatus$ChunkType type, net.minecraft.world.level.chunk.ChunkStatus$GenerationTask generationWorker, net.minecraft.world.level.chunk.ChunkStatus$LoadingTask loadingWorker) {
-        return (net.minecraft.world.level.chunk.ChunkStatus)net.minecraft.core.Registry.register((net.minecraft.core.Registry)net.minecraft.core.Registry.CHUNK_STATUS, (java.lang.String)key, (java.lang.Object)new net.minecraft.world.level.chunk.ChunkStatus(key, parent, taskRange, heightmaps, type, generationWorker, loadingWorker));
+    public static net.minecraft.world.level.chunk.ChunkStatus register(java.lang.String $$0, @javax.annotation.Nullable net.minecraft.world.level.chunk.ChunkStatus $$1, int $$2, java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> $$3, net.minecraft.world.level.chunk.ChunkStatus$ChunkType $$4, net.minecraft.world.level.chunk.ChunkStatus$GenerationTask $$5, net.minecraft.world.level.chunk.ChunkStatus$LoadingTask $$6) {
+        return (net.minecraft.world.level.chunk.ChunkStatus)net.minecraft.core.Registry.register((net.minecraft.core.Registry)net.minecraft.core.Registry.CHUNK_STATUS, (java.lang.String)$$0, (java.lang.Object)new net.minecraft.world.level.chunk.ChunkStatus($$0, $$1, $$2, $$3, $$4, $$5, $$6));
     }
 
     public static java.util.List<net.minecraft.world.level.chunk.ChunkStatus> getStatusList() {
@@ -65,8 +65,8 @@
         return $$0;
     }
 
-    public static boolean isLighted(net.minecraft.world.level.chunk.ChunkStatus status, net.minecraft.world.level.chunk.ChunkAccess chunk) {
-        return chunk.getStatus().isOrAfter(status) && chunk.isLightCorrect();
+    public static boolean isLighted(net.minecraft.world.level.chunk.ChunkStatus $$0, net.minecraft.world.level.chunk.ChunkAccess $$1) {
+        return $$1.getStatus().isOrAfter($$0) && $$1.isLightCorrect();
     }
 
     public static net.minecraft.world.level.chunk.ChunkStatus getStatusAroundFullChunk(int $$0) {
@@ -83,19 +83,19 @@
         return STATUS_BY_RANGE.size();
     }
 
-    public static int getDistance(net.minecraft.world.level.chunk.ChunkStatus status) {
-        return RANGE_BY_STATUS.getInt(status.getIndex());
+    public static int getDistance(net.minecraft.world.level.chunk.ChunkStatus $$0) {
+        return RANGE_BY_STATUS.getInt($$0.getIndex());
     }
 
-    public net.minecraft.world.level.chunk.ChunkStatus(java.lang.String name, @javax.annotation.Nullable net.minecraft.world.level.chunk.ChunkStatus parent, int range, java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> heightmapsAfter, net.minecraft.world.level.chunk.ChunkStatus$ChunkType chunkType, net.minecraft.world.level.chunk.ChunkStatus$GenerationTask generationTask, net.minecraft.world.level.chunk.ChunkStatus$LoadingTask loadingTask) {
-        this.name = name;
-        this.parent = parent == null ? this : parent;
-        this.generationTask = generationTask;
-        this.loadingTask = loadingTask;
-        this.range = range;
-        this.chunkType = chunkType;
-        this.heightmapsAfter = heightmapsAfter;
-        this.index = parent == null ? 0 : parent.getIndex() + 1;
+    public net.minecraft.world.level.chunk.ChunkStatus(java.lang.String $$0, @javax.annotation.Nullable net.minecraft.world.level.chunk.ChunkStatus $$1, int $$2, java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> $$3, net.minecraft.world.level.chunk.ChunkStatus$ChunkType $$4, net.minecraft.world.level.chunk.ChunkStatus$GenerationTask $$5, net.minecraft.world.level.chunk.ChunkStatus$LoadingTask $$6) {
+        this.name = $$0;
+        this.parent = $$1 == null ? this : $$1;
+        this.generationTask = $$5;
+        this.loadingTask = $$6;
+        this.range = $$2;
+        this.chunkType = $$4;
+        this.heightmapsAfter = $$3;
+        this.index = $$1 == null ? 0 : $$1.getIndex() + 1;
     }
 
     public int getIndex() {
@@ -132,16 +132,16 @@
         return this.chunkType;
     }
 
-    public static net.minecraft.world.level.chunk.ChunkStatus byName(java.lang.String location) {
-        return (net.minecraft.world.level.chunk.ChunkStatus)net.minecraft.core.Registry.CHUNK_STATUS.get(net.minecraft.resources.ResourceLocation.tryParse((java.lang.String)location));
+    public static net.minecraft.world.level.chunk.ChunkStatus byName(java.lang.String $$0) {
+        return (net.minecraft.world.level.chunk.ChunkStatus)net.minecraft.core.Registry.CHUNK_STATUS.get(net.minecraft.resources.ResourceLocation.tryParse((java.lang.String)$$0));
     }
 
     public java.util.EnumSet<net.minecraft.world.level.levelgen.Heightmap$Types> heightmapsAfter() {
         return this.heightmapsAfter;
     }
 
-    public boolean isOrAfter(net.minecraft.world.level.chunk.ChunkStatus status) {
-        return this.getIndex() >= status.getIndex();
+    public boolean isOrAfter(net.minecraft.world.level.chunk.ChunkStatus $$0) {
+        return this.getIndex() >= $$0.getIndex();
     }
 
     public java.lang.String toString() {
@@ -269,7 +269,7 @@
 
     public static /* synthetic */ java.util.concurrent.CompletableFuture lambda$static$2(net.minecraft.world.level.chunk.ChunkStatus $$0, java.util.concurrent.Executor $$1, net.minecraft.server.level.ServerLevel $$2, net.minecraft.world.level.chunk.ChunkGenerator $$3, net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager $$4, net.minecraft.server.level.ThreadedLevelLightEngine $$5, java.util.function.Function $$6, java.util.List $$7, net.minecraft.world.level.chunk.ChunkAccess $$8, boolean $$9) {
         if (!$$8.getStatus().isOrAfter($$0)) {
-            if ($$2.getServer().getWorldData().worldGenSettings().generateStructures()) {
+            if ($$2.getServer().getWorldData().worldGenOptions().generateStructures()) {
                 $$3.createStructures($$2.registryAccess(), $$2.getChunkSource().randomState(), $$2.structureManager(), $$8, $$4, $$2.getSeed());
             }
             if ($$8 instanceof net.minecraft.world.level.chunk.ProtoChunk) {
@@ -310,7 +310,7 @@
 );
         STRUCTURE_STARTS = net.minecraft.world.level.chunk.ChunkStatus.register((java.lang.String)"structure_starts", (net.minecraft.world.level.chunk.ChunkStatus)EMPTY, (int)0, (java.util.EnumSet)PRE_FEATURES, (net.minecraft.world.level.chunk.ChunkStatus$ChunkType)net.minecraft.world.level.chunk.ChunkStatus$ChunkType.PROTOCHUNK, ($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9) -> {
             if (!$$8.getStatus().isOrAfter($$0)) {
-                if ($$2.getServer().getWorldData().worldGenSettings().generateStructures()) {
+                if ($$2.getServer().getWorldData().worldGenOptions().generateStructures()) {
                     $$3.createStructures($$2.registryAccess(), $$2.getChunkSource().randomState(), $$2.structureManager(), $$8, $$4, $$2.getSeed());
                 }
                 if ($$8 instanceof net.minecraft.world.level.chunk.ProtoChunk) {