--- net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
+++ net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
@@ -36,20 +36,20 @@
         return com.google.common.collect.ImmutableSet.of((java.lang.Object)net.minecraft.world.level.storage.loot.parameters.LootContextParams.ORIGIN);
     }
 
-    public net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack stack, net.minecraft.world.level.storage.loot.LootContext context) {
-        net.minecraft.server.level.ServerLevel serverLevel;
-        net.minecraft.core.BlockPos blockPos;
-        if (!stack.is(net.minecraft.world.item.Items.MAP)) {
-            return stack;
+    public net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.level.storage.loot.LootContext $$1) {
+        net.minecraft.server.level.ServerLevel $$3;
+        net.minecraft.core.BlockPos $$4;
+        if (!$$0.is(net.minecraft.world.item.Items.MAP)) {
+            return $$0;
         }
-        net.minecraft.world.phys.Vec3 vec3 = (net.minecraft.world.phys.Vec3)context.getParamOrNull(net.minecraft.world.level.storage.loot.parameters.LootContextParams.ORIGIN);
-        if (vec3 != null && (blockPos = (serverLevel = context.getLevel()).findNearestMapStructure(this.destination, new net.minecraft.core.BlockPos(vec3), this.searchRadius, this.skipKnownStructures)) != null) {
-            net.minecraft.world.item.ItemStack itemStack = net.minecraft.world.item.MapItem.create((net.minecraft.world.level.Level)serverLevel, (int)blockPos.getX(), (int)blockPos.getZ(), (byte)this.zoom, (boolean)true, (boolean)true);
-            net.minecraft.world.item.MapItem.renderBiomePreviewMap((net.minecraft.server.level.ServerLevel)serverLevel, (net.minecraft.world.item.ItemStack)itemStack);
-            net.minecraft.world.level.saveddata.maps.MapItemSavedData.addTargetDecoration((net.minecraft.world.item.ItemStack)itemStack, (net.minecraft.core.BlockPos)blockPos, (java.lang.String)"+", (net.minecraft.world.level.saveddata.maps.MapDecoration$Type)this.mapDecoration);
-            return itemStack;
+        net.minecraft.world.phys.Vec3 $$2 = (net.minecraft.world.phys.Vec3)$$1.getParamOrNull(net.minecraft.world.level.storage.loot.parameters.LootContextParams.ORIGIN);
+        if ($$2 != null && ($$4 = ($$3 = $$1.getLevel()).findNearestMapStructure(this.destination, new net.minecraft.core.BlockPos($$2), this.searchRadius, this.skipKnownStructures)) != null) {
+            net.minecraft.world.item.ItemStack $$5 = net.minecraft.world.item.MapItem.create((net.minecraft.world.level.Level)$$3, (int)$$4.getX(), (int)$$4.getZ(), (byte)this.zoom, (boolean)true, (boolean)true);
+            net.minecraft.world.item.MapItem.renderBiomePreviewMap((net.minecraft.server.level.ServerLevel)$$3, (net.minecraft.world.item.ItemStack)$$5);
+            net.minecraft.world.level.saveddata.maps.MapItemSavedData.addTargetDecoration((net.minecraft.world.item.ItemStack)$$5, (net.minecraft.core.BlockPos)$$4, (java.lang.String)"+", (net.minecraft.world.level.saveddata.maps.MapDecoration$Type)this.mapDecoration);
+            return $$5;
         }
-        return stack;
+        return $$0;
     }
 
     public static net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder makeExplorationMap() {