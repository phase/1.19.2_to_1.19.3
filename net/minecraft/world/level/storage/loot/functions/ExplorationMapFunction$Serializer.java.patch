--- net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction$Serializer.java
+++ net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction$Serializer.java
@@ -9,39 +9,39 @@
     public net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Serializer() {
     }
 
-    public void serialize(com.google.gson.JsonObject json, net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction value, com.google.gson.JsonSerializationContext serializationContext) {
-        super.serialize(json, (net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction)value, serializationContext);
-        if (!value.destination.equals((java.lang.Object)net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.DEFAULT_DESTINATION)) {
-            json.addProperty("destination", value.destination.location().toString());
+    public void serialize(com.google.gson.JsonObject $$0, net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction $$1, com.google.gson.JsonSerializationContext $$2) {
+        super.serialize($$0, (net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction)$$1, $$2);
+        if (!$$1.destination.equals((java.lang.Object)net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.DEFAULT_DESTINATION)) {
+            $$0.addProperty("destination", $$1.destination.location().toString());
         }
-        if (value.mapDecoration != net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.DEFAULT_DECORATION) {
-            json.add("decoration", serializationContext.serialize((java.lang.Object)value.mapDecoration.toString().toLowerCase(java.util.Locale.ROOT)));
+        if ($$1.mapDecoration != net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.DEFAULT_DECORATION) {
+            $$0.add("decoration", $$2.serialize((java.lang.Object)$$1.mapDecoration.toString().toLowerCase(java.util.Locale.ROOT)));
         }
-        if (value.zoom != 2) {
-            json.addProperty("zoom", (java.lang.Number)java.lang.Byte.valueOf((byte)value.zoom));
+        if ($$1.zoom != 2) {
+            $$0.addProperty("zoom", (java.lang.Number)java.lang.Byte.valueOf((byte)$$1.zoom));
         }
-        if (value.searchRadius != 50) {
-            json.addProperty("search_radius", (java.lang.Number)java.lang.Integer.valueOf((int)value.searchRadius));
+        if ($$1.searchRadius != 50) {
+            $$0.addProperty("search_radius", (java.lang.Number)java.lang.Integer.valueOf((int)$$1.searchRadius));
         }
-        if (!value.skipKnownStructures) {
-            json.addProperty("skip_existing_chunks", java.lang.Boolean.valueOf((boolean)value.skipKnownStructures));
+        if (!$$1.skipKnownStructures) {
+            $$0.addProperty("skip_existing_chunks", java.lang.Boolean.valueOf((boolean)$$1.skipKnownStructures));
         }
     }
 
-    public net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction deserialize(com.google.gson.JsonObject object, com.google.gson.JsonDeserializationContext deserializationContext, net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] conditions) {
-        net.minecraft.tags.TagKey tagKey = net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Serializer.readStructure((com.google.gson.JsonObject)object);
-        java.lang.String string = object.has("decoration") ? net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)object, (java.lang.String)"decoration") : "mansion";
-        net.minecraft.world.level.saveddata.maps.MapDecoration$Type type = net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.DEFAULT_DECORATION;
+    public net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction deserialize(com.google.gson.JsonObject $$0, com.google.gson.JsonDeserializationContext $$1, net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] $$2) {
+        net.minecraft.tags.TagKey $$3 = net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Serializer.readStructure((com.google.gson.JsonObject)$$0);
+        java.lang.String $$4 = $$0.has("decoration") ? net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"decoration") : "mansion";
+        net.minecraft.world.level.saveddata.maps.MapDecoration$Type $$5 = net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.DEFAULT_DECORATION;
         try {
-            type = net.minecraft.world.level.saveddata.maps.MapDecoration$Type.valueOf((java.lang.String)string.toUpperCase(java.util.Locale.ROOT));
+            $$5 = net.minecraft.world.level.saveddata.maps.MapDecoration$Type.valueOf((java.lang.String)$$4.toUpperCase(java.util.Locale.ROOT));
         }
-        catch (java.lang.IllegalArgumentException illegalArgumentException) {
-            net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.LOGGER.error("Error while parsing loot table decoration entry. Found {}. Defaulting to {}", (java.lang.Object)string, (java.lang.Object)net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.DEFAULT_DECORATION);
+        catch (java.lang.IllegalArgumentException $$6) {
+            net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.LOGGER.error("Error while parsing loot table decoration entry. Found {}. Defaulting to {}", (java.lang.Object)$$4, (java.lang.Object)net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction.DEFAULT_DECORATION);
         }
-        byte by = net.minecraft.util.GsonHelper.getAsByte((com.google.gson.JsonObject)object, (java.lang.String)"zoom", (byte)2);
-        int n = net.minecraft.util.GsonHelper.getAsInt((com.google.gson.JsonObject)object, (java.lang.String)"search_radius", (int)50);
-        boolean bl = net.minecraft.util.GsonHelper.getAsBoolean((com.google.gson.JsonObject)object, (java.lang.String)"skip_existing_chunks", (boolean)true);
-        return new net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction(conditions, tagKey, type, by, n, bl);
+        byte $$7 = net.minecraft.util.GsonHelper.getAsByte((com.google.gson.JsonObject)$$0, (java.lang.String)"zoom", (byte)2);
+        int $$8 = net.minecraft.util.GsonHelper.getAsInt((com.google.gson.JsonObject)$$0, (java.lang.String)"search_radius", (int)50);
+        boolean $$9 = net.minecraft.util.GsonHelper.getAsBoolean((com.google.gson.JsonObject)$$0, (java.lang.String)"skip_existing_chunks", (boolean)true);
+        return new net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction($$2, $$3, $$5, $$7, $$8, $$9);
     }
 
     public static net.minecraft.tags.TagKey<net.minecraft.world.level.levelgen.structure.Structure> readStructure(com.google.gson.JsonObject $$0) {