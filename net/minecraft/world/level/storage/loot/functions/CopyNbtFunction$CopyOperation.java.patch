--- net/minecraft/world/level/storage/loot/functions/CopyNbtFunction$CopyOperation.java
+++ net/minecraft/world/level/storage/loot/functions/CopyNbtFunction$CopyOperation.java
@@ -11,19 +11,19 @@
     public net.minecraft.commands.arguments.NbtPathArgument$NbtPath targetPath;
     public net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy op;
 
-    public net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation(java.lang.String sourcePathText, java.lang.String targetPathText, net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy mergeStrategy) {
-        this.sourcePathText = sourcePathText;
-        this.sourcePath = net.minecraft.world.level.storage.loot.functions.CopyNbtFunction.compileNbtPath((java.lang.String)sourcePathText);
-        this.targetPathText = targetPathText;
-        this.targetPath = net.minecraft.world.level.storage.loot.functions.CopyNbtFunction.compileNbtPath((java.lang.String)targetPathText);
-        this.op = mergeStrategy;
+    public net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation(java.lang.String $$0, java.lang.String $$1, net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy $$2) {
+        this.sourcePathText = $$0;
+        this.sourcePath = net.minecraft.world.level.storage.loot.functions.CopyNbtFunction.compileNbtPath((java.lang.String)$$0);
+        this.targetPathText = $$1;
+        this.targetPath = net.minecraft.world.level.storage.loot.functions.CopyNbtFunction.compileNbtPath((java.lang.String)$$1);
+        this.op = $$2;
     }
 
-    public void apply(java.util.function.Supplier<net.minecraft.nbt.Tag> targetTag, net.minecraft.nbt.Tag sourceTag) {
+    public void apply(java.util.function.Supplier<net.minecraft.nbt.Tag> $$0, net.minecraft.nbt.Tag $$1) {
         try {
-            java.util.List list = this.sourcePath.get(sourceTag);
-            if (!list.isEmpty()) {
-                this.op.merge((net.minecraft.nbt.Tag)targetTag.get(), this.targetPath, list);
+            java.util.List $$2 = this.sourcePath.get($$1);
+            if (!$$2.isEmpty()) {
+                this.op.merge((net.minecraft.nbt.Tag)$$0.get(), this.targetPath, $$2);
             }
         }
         catch (com.mojang.brigadier.exceptions.CommandSyntaxException commandSyntaxException) {
@@ -39,11 +39,11 @@
         return $$0;
     }
 
-    public static net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation fromJson(com.google.gson.JsonObject json) {
-        java.lang.String string = net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)json, (java.lang.String)"source");
-        java.lang.String string2 = net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)json, (java.lang.String)"target");
-        net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy mergeStrategy = net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy.getByName((java.lang.String)net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)json, (java.lang.String)"op"));
-        return new net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation(string, string2, mergeStrategy);
+    public static net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation fromJson(com.google.gson.JsonObject $$0) {
+        java.lang.String $$1 = net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"source");
+        java.lang.String $$2 = net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"target");
+        net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy $$3 = net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy.getByName((java.lang.String)net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"op"));
+        return new net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation($$1, $$2, $$3);
     }
 }
 