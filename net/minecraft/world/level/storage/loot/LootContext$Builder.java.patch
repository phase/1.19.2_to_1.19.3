--- net/minecraft/world/level/storage/loot/LootContext$Builder.java
+++ net/minecraft/world/level/storage/loot/LootContext$Builder.java
@@ -11,10 +11,10 @@
     public net.minecraft.util.RandomSource random;
     public float luck;
 
-    public net.minecraft.world.level.storage.loot.LootContext$Builder(net.minecraft.server.level.ServerLevel level) {
+    public net.minecraft.world.level.storage.loot.LootContext$Builder(net.minecraft.server.level.ServerLevel $$0) {
         this.params = com.google.common.collect.Maps.newIdentityHashMap();
         this.dynamicDrops = com.google.common.collect.Maps.newHashMap();
-        this.level = level;
+        this.level = $$0;
     }
 
     public net.minecraft.world.level.storage.loot.LootContext$Builder withRandom(net.minecraft.util.RandomSource $$0) {
@@ -22,9 +22,9 @@
         return this;
     }
 
-    public net.minecraft.world.level.storage.loot.LootContext$Builder withOptionalRandomSeed(long seed) {
-        if (seed != 0L) {
-            this.random = net.minecraft.util.RandomSource.create((long)seed);
+    public net.minecraft.world.level.storage.loot.LootContext$Builder withOptionalRandomSeed(long $$0) {
+        if ($$0 != 0L) {
+            this.random = net.minecraft.util.RandomSource.create((long)$$0);
         }
         return this;
     }
@@ -34,28 +34,28 @@
         return this;
     }
 
-    public net.minecraft.world.level.storage.loot.LootContext$Builder withLuck(float luck) {
-        this.luck = luck;
+    public net.minecraft.world.level.storage.loot.LootContext$Builder withLuck(float $$0) {
+        this.luck = $$0;
         return this;
     }
 
-    public <T> net.minecraft.world.level.storage.loot.LootContext$Builder withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam<T> parameter, T value) {
-        this.params.put(parameter, value);
+    public <T> net.minecraft.world.level.storage.loot.LootContext$Builder withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam<T> $$0, T $$1) {
+        this.params.put($$0, $$1);
         return this;
     }
 
-    public <T> net.minecraft.world.level.storage.loot.LootContext$Builder withOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam<T> parameter, @javax.annotation.Nullable T value) {
-        if (value == null) {
-            this.params.remove(parameter);
+    public <T> net.minecraft.world.level.storage.loot.LootContext$Builder withOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam<T> $$0, @javax.annotation.Nullable T $$1) {
+        if ($$1 == null) {
+            this.params.remove($$0);
         } else {
-            this.params.put(parameter, value);
+            this.params.put($$0, $$1);
         }
         return this;
     }
 
-    public net.minecraft.world.level.storage.loot.LootContext$Builder withDynamicDrop(net.minecraft.resources.ResourceLocation dynamicDropId, net.minecraft.world.level.storage.loot.LootContext$DynamicDrop dynamicDrop) {
-        net.minecraft.world.level.storage.loot.LootContext$DynamicDrop dynamicDrop2 = (net.minecraft.world.level.storage.loot.LootContext$DynamicDrop)this.dynamicDrops.put((java.lang.Object)dynamicDropId, (java.lang.Object)dynamicDrop);
-        if (dynamicDrop2 != null) {
+    public net.minecraft.world.level.storage.loot.LootContext$Builder withDynamicDrop(net.minecraft.resources.ResourceLocation $$0, net.minecraft.world.level.storage.loot.LootContext$DynamicDrop $$1) {
+        net.minecraft.world.level.storage.loot.LootContext$DynamicDrop $$2 = (net.minecraft.world.level.storage.loot.LootContext$DynamicDrop)this.dynamicDrops.put((java.lang.Object)$$0, (java.lang.Object)$$1);
+        if ($$2 != null) {
             throw new java.lang.IllegalStateException("Duplicated dynamic drop '" + this.dynamicDrops + "'");
         }
         return this;
@@ -65,34 +65,34 @@
         return this.level;
     }
 
-    public <T> T getParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam<T> parameter) {
-        java.lang.Object object = this.params.get(parameter);
-        if (object == null) {
-            throw new java.lang.IllegalArgumentException("No parameter " + parameter);
+    public <T> T getParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam<T> $$0) {
+        java.lang.Object $$1 = this.params.get($$0);
+        if ($$1 == null) {
+            throw new java.lang.IllegalArgumentException("No parameter " + $$0);
         }
-        return (T)object;
+        return (T)$$1;
     }
 
     @javax.annotation.Nullable
-    public <T> T getOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam<T> parameter) {
-        return (T)this.params.get(parameter);
+    public <T> T getOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam<T> $$0) {
+        return (T)this.params.get($$0);
     }
 
-    public net.minecraft.world.level.storage.loot.LootContext create(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet parameterSet) {
-        com.google.common.collect.Sets$SetView setView = com.google.common.collect.Sets.difference((java.util.Set)this.params.keySet(), (java.util.Set)parameterSet.getAllowed());
-        if (!setView.isEmpty()) {
-            throw new java.lang.IllegalArgumentException("Parameters not allowed in this parameter set: " + (java.util.Set)setView);
+    public net.minecraft.world.level.storage.loot.LootContext create(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet $$0) {
+        com.google.common.collect.Sets$SetView $$1 = com.google.common.collect.Sets.difference((java.util.Set)this.params.keySet(), (java.util.Set)$$0.getAllowed());
+        if (!$$1.isEmpty()) {
+            throw new java.lang.IllegalArgumentException("Parameters not allowed in this parameter set: " + (java.util.Set)$$1);
         }
-        com.google.common.collect.Sets$SetView setView2 = com.google.common.collect.Sets.difference((java.util.Set)parameterSet.getRequired(), (java.util.Set)this.params.keySet());
-        if (!setView2.isEmpty()) {
-            throw new java.lang.IllegalArgumentException("Missing required parameters: " + (java.util.Set)setView2);
+        com.google.common.collect.Sets$SetView $$2 = com.google.common.collect.Sets.difference((java.util.Set)$$0.getRequired(), (java.util.Set)this.params.keySet());
+        if (!$$2.isEmpty()) {
+            throw new java.lang.IllegalArgumentException("Missing required parameters: " + (java.util.Set)$$2);
         }
-        net.minecraft.util.RandomSource randomSource = this.random;
-        if (randomSource == null) {
-            randomSource = net.minecraft.util.RandomSource.create();
+        net.minecraft.util.RandomSource $$3 = this.random;
+        if ($$3 == null) {
+            $$3 = net.minecraft.util.RandomSource.create();
         }
-        net.minecraft.server.MinecraftServer minecraftServer = this.level.getServer();
-        return new net.minecraft.world.level.storage.loot.LootContext(randomSource, this.luck, this.level, arg_0 -> ((net.minecraft.world.level.storage.loot.LootTables)minecraftServer.getLootTables()).get(arg_0), arg_0 -> ((net.minecraft.world.level.storage.loot.PredicateManager)minecraftServer.getPredicateManager()).get(arg_0), this.params, this.dynamicDrops);
+        net.minecraft.server.MinecraftServer $$4 = this.level.getServer();
+        return new net.minecraft.world.level.storage.loot.LootContext($$3, this.luck, this.level, arg_0 -> ((net.minecraft.world.level.storage.loot.LootTables)$$4.getLootTables()).get(arg_0), arg_0 -> ((net.minecraft.world.level.storage.loot.PredicateManager)$$4.getPredicateManager()).get(arg_0), this.params, this.dynamicDrops);
     }
 }
 