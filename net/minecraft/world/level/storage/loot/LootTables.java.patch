--- net/minecraft/world/level/storage/loot/LootTables.java
+++ net/minecraft/world/level/storage/loot/LootTables.java
@@ -11,45 +11,45 @@
     public java.util.Map<net.minecraft.resources.ResourceLocation, net.minecraft.world.level.storage.loot.LootTable> tables;
     public net.minecraft.world.level.storage.loot.PredicateManager predicateManager;
 
-    public net.minecraft.world.level.storage.loot.LootTables(net.minecraft.world.level.storage.loot.PredicateManager predicateManager) {
+    public net.minecraft.world.level.storage.loot.LootTables(net.minecraft.world.level.storage.loot.PredicateManager $$0) {
         super(GSON, "loot_tables");
         this.tables = com.google.common.collect.ImmutableMap.of();
-        this.predicateManager = predicateManager;
+        this.predicateManager = $$0;
     }
 
-    public net.minecraft.world.level.storage.loot.LootTable get(net.minecraft.resources.ResourceLocation lootTableId) {
-        return (net.minecraft.world.level.storage.loot.LootTable)this.tables.getOrDefault((java.lang.Object)lootTableId, (java.lang.Object)net.minecraft.world.level.storage.loot.LootTable.EMPTY);
+    public net.minecraft.world.level.storage.loot.LootTable get(net.minecraft.resources.ResourceLocation $$0) {
+        return (net.minecraft.world.level.storage.loot.LootTable)this.tables.getOrDefault((java.lang.Object)$$0, (java.lang.Object)net.minecraft.world.level.storage.loot.LootTable.EMPTY);
     }
 
-    public void apply(java.util.Map<net.minecraft.resources.ResourceLocation, com.google.gson.JsonElement> object, net.minecraft.server.packs.resources.ResourceManager resourceManager, net.minecraft.util.profiling.ProfilerFiller profiler) {
-        com.google.common.collect.ImmutableMap$Builder builder = com.google.common.collect.ImmutableMap.builder();
-        com.google.gson.JsonElement jsonElement = (com.google.gson.JsonElement)object.remove((java.lang.Object)net.minecraft.world.level.storage.loot.BuiltInLootTables.EMPTY);
-        if (jsonElement != null) {
+    public void apply(java.util.Map<net.minecraft.resources.ResourceLocation, com.google.gson.JsonElement> $$02, net.minecraft.server.packs.resources.ResourceManager $$12, net.minecraft.util.profiling.ProfilerFiller $$22) {
+        com.google.common.collect.ImmutableMap$Builder $$3 = com.google.common.collect.ImmutableMap.builder();
+        com.google.gson.JsonElement $$4 = (com.google.gson.JsonElement)$$02.remove((java.lang.Object)net.minecraft.world.level.storage.loot.BuiltInLootTables.EMPTY);
+        if ($$4 != null) {
             LOGGER.warn("Datapack tried to redefine {} loot table, ignoring", (java.lang.Object)net.minecraft.world.level.storage.loot.BuiltInLootTables.EMPTY);
         }
-        object.forEach(($$1, $$2) -> {
+        $$02.forEach(($$1, $$2) -> {
             try {
                 net.minecraft.world.level.storage.loot.LootTable $$3 = (net.minecraft.world.level.storage.loot.LootTable)GSON.fromJson($$2, net.minecraft.world.level.storage.loot.LootTable.class);
-                builder.put($$1, (java.lang.Object)$$3);
+                $$3.put($$1, (java.lang.Object)$$3);
             }
             catch (java.lang.Exception $$4) {
                 LOGGER.error("Couldn't parse loot table {}", $$1, (java.lang.Object)((java.lang.Object)$$4));
             }
         });
-        builder.put((java.lang.Object)net.minecraft.world.level.storage.loot.BuiltInLootTables.EMPTY, (java.lang.Object)net.minecraft.world.level.storage.loot.LootTable.EMPTY);
-        com.google.common.collect.ImmutableMap immutableMap = builder.build();
-        net.minecraft.world.level.storage.loot.ValidationContext validationContext = new net.minecraft.world.level.storage.loot.ValidationContext(net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.ALL_PARAMS, arg_0 -> ((net.minecraft.world.level.storage.loot.PredicateManager)this.predicateManager).get(arg_0), arg_0 -> ((com.google.common.collect.ImmutableMap)immutableMap).get(arg_0));
-        immutableMap.forEach(($$1, $$2) -> net.minecraft.world.level.storage.loot.LootTables.validate((net.minecraft.world.level.storage.loot.ValidationContext)validationContext, (net.minecraft.resources.ResourceLocation)$$1, (net.minecraft.world.level.storage.loot.LootTable)$$2));
-        validationContext.getProblems().forEach(($$0, $$1) -> LOGGER.warn("Found validation problem in {}: {}", $$0, $$1));
-        this.tables = immutableMap;
+        $$3.put((java.lang.Object)net.minecraft.world.level.storage.loot.BuiltInLootTables.EMPTY, (java.lang.Object)net.minecraft.world.level.storage.loot.LootTable.EMPTY);
+        com.google.common.collect.ImmutableMap $$5 = $$3.build();
+        net.minecraft.world.level.storage.loot.ValidationContext $$6 = new net.minecraft.world.level.storage.loot.ValidationContext(net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.ALL_PARAMS, arg_0 -> ((net.minecraft.world.level.storage.loot.PredicateManager)this.predicateManager).get(arg_0), arg_0 -> ((com.google.common.collect.ImmutableMap)$$5).get(arg_0));
+        $$5.forEach(($$1, $$2) -> net.minecraft.world.level.storage.loot.LootTables.validate((net.minecraft.world.level.storage.loot.ValidationContext)$$6, (net.minecraft.resources.ResourceLocation)$$1, (net.minecraft.world.level.storage.loot.LootTable)$$2));
+        $$6.getProblems().forEach(($$0, $$1) -> LOGGER.warn("Found validation problem in {}: {}", $$0, $$1));
+        this.tables = $$5;
     }
 
-    public static void validate(net.minecraft.world.level.storage.loot.ValidationContext validator, net.minecraft.resources.ResourceLocation id, net.minecraft.world.level.storage.loot.LootTable lootTable) {
-        lootTable.validate(validator.setParams(lootTable.getParamSet()).enterTable("{" + id + "}", id));
+    public static void validate(net.minecraft.world.level.storage.loot.ValidationContext $$0, net.minecraft.resources.ResourceLocation $$1, net.minecraft.world.level.storage.loot.LootTable $$2) {
+        $$2.validate($$0.setParams($$2.getParamSet()).enterTable("{" + $$1 + "}", $$1));
     }
 
-    public static com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.LootTable lootTable) {
-        return GSON.toJsonTree((java.lang.Object)lootTable);
+    public static com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.LootTable $$0) {
+        return GSON.toJsonTree((java.lang.Object)$$0);
     }
 
     public java.util.Set<net.minecraft.resources.ResourceLocation> getIds() {