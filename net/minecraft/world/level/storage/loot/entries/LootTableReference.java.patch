--- net/minecraft/world/level/storage/loot/entries/LootTableReference.java
+++ net/minecraft/world/level/storage/loot/entries/LootTableReference.java
@@ -8,36 +8,36 @@
  {
     public net.minecraft.resources.ResourceLocation name;
 
-    public net.minecraft.world.level.storage.loot.entries.LootTableReference(net.minecraft.resources.ResourceLocation lootTableId, int weight, int quality, net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] conditions, net.minecraft.world.level.storage.loot.functions.LootItemFunction[] functions) {
-        super(weight, quality, conditions, functions);
-        this.name = lootTableId;
+    public net.minecraft.world.level.storage.loot.entries.LootTableReference(net.minecraft.resources.ResourceLocation $$0, int $$1, int $$2, net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] $$3, net.minecraft.world.level.storage.loot.functions.LootItemFunction[] $$4) {
+        super($$1, $$2, $$3, $$4);
+        this.name = $$0;
     }
 
     public net.minecraft.world.level.storage.loot.entries.LootPoolEntryType getType() {
         return net.minecraft.world.level.storage.loot.entries.LootPoolEntries.REFERENCE;
     }
 
-    public void createItemStack(java.util.function.Consumer<net.minecraft.world.item.ItemStack> stackConsumer, net.minecraft.world.level.storage.loot.LootContext lootContext) {
-        net.minecraft.world.level.storage.loot.LootTable lootTable = lootContext.getLootTable(this.name);
-        lootTable.getRandomItemsRaw(lootContext, stackConsumer);
+    public void createItemStack(java.util.function.Consumer<net.minecraft.world.item.ItemStack> $$0, net.minecraft.world.level.storage.loot.LootContext $$1) {
+        net.minecraft.world.level.storage.loot.LootTable $$2 = $$1.getLootTable(this.name);
+        $$2.getRandomItemsRaw($$1, $$0);
     }
 
-    public void validate(net.minecraft.world.level.storage.loot.ValidationContext validationContext) {
-        if (validationContext.hasVisitedTable(this.name)) {
-            validationContext.reportProblem("Table " + this.name + " is recursively called");
+    public void validate(net.minecraft.world.level.storage.loot.ValidationContext $$0) {
+        if ($$0.hasVisitedTable(this.name)) {
+            $$0.reportProblem("Table " + this.name + " is recursively called");
             return;
         }
-        super.validate(validationContext);
-        net.minecraft.world.level.storage.loot.LootTable lootTable = validationContext.resolveLootTable(this.name);
-        if (lootTable == null) {
-            validationContext.reportProblem("Unknown loot table called " + this.name);
+        super.validate($$0);
+        net.minecraft.world.level.storage.loot.LootTable $$1 = $$0.resolveLootTable(this.name);
+        if ($$1 == null) {
+            $$0.reportProblem("Unknown loot table called " + this.name);
         } else {
-            lootTable.validate(validationContext.enterTable("->{" + this.name + "}", this.name));
+            $$1.validate($$0.enterTable("->{" + this.name + "}", this.name));
         }
     }
 
-    public static net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder<?> lootTableReference(net.minecraft.resources.ResourceLocation table) {
-        return net.minecraft.world.level.storage.loot.entries.LootTableReference.simpleBuilder(($$1, $$2, $$3, $$4) -> new net.minecraft.world.level.storage.loot.entries.LootTableReference(table, $$1, $$2, $$3, $$4));
+    public static net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder<?> lootTableReference(net.minecraft.resources.ResourceLocation $$0) {
+        return net.minecraft.world.level.storage.loot.entries.LootTableReference.simpleBuilder(($$1, $$2, $$3, $$4) -> new net.minecraft.world.level.storage.loot.entries.LootTableReference($$0, $$1, $$2, $$3, $$4));
     }
 }
 