--- net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java
+++ net/minecraft/world/level/storage/loot/entries/AlternativesEntry.java
@@ -14,20 +14,20 @@
         return net.minecraft.world.level.storage.loot.entries.LootPoolEntries.ALTERNATIVES;
     }
 
-    public net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[] entries) {
-        switch (entries.length) {
+    public net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[] $$0) {
+        switch ($$0.length) {
             case 0: {
                 return ALWAYS_FALSE;
             }
             case 1: {
-                return entries[0];
+                return $$0[0];
             }
             case 2: {
-                return entries[0].or(entries[1]);
+                return $$0[0].or($$0[1]);
             }
         }
         return ($$1, $$2) -> {
-            for (net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer $$3 : entries) {
+            for (net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer $$3 : $$0) {
                 if (!$$3.expand($$1, $$2)) continue;
                 return true;
             }
@@ -35,16 +35,16 @@
         };
     }
 
-    public void validate(net.minecraft.world.level.storage.loot.ValidationContext validationContext) {
-        super.validate(validationContext);
-        for (int i = 0; i < this.children.length - 1; ++i) {
-            if (!org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[])this.children[i].conditions)) continue;
-            validationContext.reportProblem("Unreachable entry!");
+    public void validate(net.minecraft.world.level.storage.loot.ValidationContext $$0) {
+        super.validate($$0);
+        for (int $$1 = 0; $$1 < this.children.length - 1; ++$$1) {
+            if (!org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[])this.children[$$1].conditions)) continue;
+            $$0.reportProblem("Unreachable entry!");
         }
     }
 
-    public static net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder alternatives(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder<?> ... children) {
-        return new net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder(children);
+    public static net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder alternatives(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder<?> ... $$0) {
+        return new net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder($$0);
     }
 
     public static <E> net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder alternatives(java.util.Collection<E> $$0, java.util.function.Function<E, net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder<?>> $$1) {