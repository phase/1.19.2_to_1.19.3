--- net/minecraft/world/level/storage/loot/predicates/LootItemConditions.java
+++ net/minecraft/world/level/storage/loot/predicates/LootItemConditions.java
@@ -26,28 +26,28 @@
     public net.minecraft.world.level.storage.loot.predicates.LootItemConditions() {
     }
 
-    public static net.minecraft.world.level.storage.loot.predicates.LootItemConditionType register(java.lang.String registryName, net.minecraft.world.level.storage.loot.Serializer<? extends net.minecraft.world.level.storage.loot.predicates.LootItemCondition> serializer) {
-        return (net.minecraft.world.level.storage.loot.predicates.LootItemConditionType)net.minecraft.core.Registry.register((net.minecraft.core.Registry)net.minecraft.core.Registry.LOOT_CONDITION_TYPE, (net.minecraft.resources.ResourceLocation)new net.minecraft.resources.ResourceLocation(registryName), (java.lang.Object)new net.minecraft.world.level.storage.loot.predicates.LootItemConditionType(serializer));
+    public static net.minecraft.world.level.storage.loot.predicates.LootItemConditionType register(java.lang.String $$0, net.minecraft.world.level.storage.loot.Serializer<? extends net.minecraft.world.level.storage.loot.predicates.LootItemCondition> $$1) {
+        return (net.minecraft.world.level.storage.loot.predicates.LootItemConditionType)net.minecraft.core.Registry.register((net.minecraft.core.Registry)net.minecraft.core.Registry.LOOT_CONDITION_TYPE, (net.minecraft.resources.ResourceLocation)new net.minecraft.resources.ResourceLocation($$0), (java.lang.Object)new net.minecraft.world.level.storage.loot.predicates.LootItemConditionType($$1));
     }
 
     public static java.lang.Object createGsonAdapter() {
         return net.minecraft.world.level.storage.loot.GsonAdapterFactory.builder((net.minecraft.core.Registry)net.minecraft.core.Registry.LOOT_CONDITION_TYPE, (java.lang.String)"condition", (java.lang.String)"condition", net.minecraft.world.level.storage.loot.predicates.LootItemCondition::getType).build();
     }
 
-    public static <T> java.util.function.Predicate<T> andConditions(java.util.function.Predicate<T>[] conditions) {
-        switch (conditions.length) {
+    public static <T> java.util.function.Predicate<T> andConditions(java.util.function.Predicate<T>[] $$02) {
+        switch ($$02.length) {
             case 0: {
                 return $$0 -> true;
             }
             case 1: {
-                return conditions[0];
+                return $$02[0];
             }
             case 2: {
-                return conditions[0].and(conditions[1]);
+                return $$02[0].and($$02[1]);
             }
         }
         return $$1 -> {
-            for (java.util.function.Predicate $$2 : conditions) {
+            for (java.util.function.Predicate $$2 : $$02) {
                 if ($$2.test($$1)) continue;
                 return false;
             }
@@ -55,20 +55,20 @@
         };
     }
 
-    public static <T> java.util.function.Predicate<T> orConditions(java.util.function.Predicate<T>[] conditions) {
-        switch (conditions.length) {
+    public static <T> java.util.function.Predicate<T> orConditions(java.util.function.Predicate<T>[] $$02) {
+        switch ($$02.length) {
             case 0: {
                 return $$0 -> false;
             }
             case 1: {
-                return conditions[0];
+                return $$02[0];
             }
             case 2: {
-                return conditions[0].or(conditions[1]);
+                return $$02[0].or($$02[1]);
             }
         }
         return $$1 -> {
-            for (java.util.function.Predicate $$2 : conditions) {
+            for (java.util.function.Predicate $$2 : $$02) {
                 if (!$$2.test($$1)) continue;
                 return true;
             }