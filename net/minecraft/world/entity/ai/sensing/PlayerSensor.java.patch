--- net/minecraft/world/entity/ai/sensing/PlayerSensor.java
+++ net/minecraft/world/entity/ai/sensing/PlayerSensor.java
@@ -13,14 +13,14 @@
         return com.google.common.collect.ImmutableSet.of((java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_PLAYERS, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_PLAYER, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER);
     }
 
-    public void doTick(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.LivingEntity entity) {
-        java.util.List list = (java.util.List)level.players().stream().filter(net.minecraft.world.entity.EntitySelector.NO_SPECTATORS).filter($$1 -> entity.closerThan((net.minecraft.world.entity.Entity)$$1, 16.0)).sorted(java.util.Comparator.comparingDouble(arg_0 -> ((net.minecraft.world.entity.LivingEntity)entity).distanceToSqr(arg_0))).collect(java.util.stream.Collectors.toList());
-        net.minecraft.world.entity.ai.Brain brain = entity.getBrain();
-        brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_PLAYERS, (java.lang.Object)list);
-        java.util.List list2 = (java.util.List)list.stream().filter($$1 -> net.minecraft.world.entity.ai.sensing.PlayerSensor.isEntityTargetable((net.minecraft.world.entity.LivingEntity)entity, (net.minecraft.world.entity.LivingEntity)$$1)).collect(java.util.stream.Collectors.toList());
-        brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_PLAYER, list2.isEmpty() ? null : (net.minecraft.world.entity.player.Player)list2.get(0));
-        java.util.Optional optional = list2.stream().filter($$1 -> net.minecraft.world.entity.ai.sensing.PlayerSensor.isEntityAttackable((net.minecraft.world.entity.LivingEntity)entity, (net.minecraft.world.entity.LivingEntity)$$1)).findFirst();
-        brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, optional);
+    public void doTick(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.LivingEntity $$12) {
+        java.util.List $$2 = (java.util.List)$$0.players().stream().filter(net.minecraft.world.entity.EntitySelector.NO_SPECTATORS).filter($$1 -> $$12.closerThan((net.minecraft.world.entity.Entity)$$1, 16.0)).sorted(java.util.Comparator.comparingDouble(arg_0 -> ((net.minecraft.world.entity.LivingEntity)$$12).distanceToSqr(arg_0))).collect(java.util.stream.Collectors.toList());
+        net.minecraft.world.entity.ai.Brain $$3 = $$12.getBrain();
+        $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_PLAYERS, (java.lang.Object)$$2);
+        java.util.List $$4 = (java.util.List)$$2.stream().filter($$1 -> net.minecraft.world.entity.ai.sensing.PlayerSensor.isEntityTargetable((net.minecraft.world.entity.LivingEntity)$$12, (net.minecraft.world.entity.LivingEntity)$$1)).collect(java.util.stream.Collectors.toList());
+        $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_PLAYER, $$4.isEmpty() ? null : (net.minecraft.world.entity.player.Player)$$4.get(0));
+        java.util.Optional $$5 = $$4.stream().filter($$1 -> net.minecraft.world.entity.ai.sensing.PlayerSensor.isEntityAttackable((net.minecraft.world.entity.LivingEntity)$$12, (net.minecraft.world.entity.LivingEntity)$$1)).findFirst();
+        $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, $$5);
     }
 }
 