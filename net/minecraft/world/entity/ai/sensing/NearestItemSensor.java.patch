--- net/minecraft/world/entity/ai/sensing/NearestItemSensor.java
+++ net/minecraft/world/entity/ai/sensing/NearestItemSensor.java
@@ -17,12 +17,12 @@
         return com.google.common.collect.ImmutableSet.of((java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM);
     }
 
-    public void doTick(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.Mob entity) {
-        net.minecraft.world.entity.ai.Brain brain = entity.getBrain();
-        java.util.List list = level.getEntitiesOfClass(net.minecraft.world.entity.item.ItemEntity.class, entity.getBoundingBox().inflate(32.0, 16.0, 32.0), $$0 -> true);
-        list.sort(java.util.Comparator.comparingDouble(arg_0 -> ((net.minecraft.world.entity.Mob)entity).distanceToSqr(arg_0)));
-        java.util.Optional optional = list.stream().filter($$1 -> entity.wantsToPickUp($$1.getItem())).filter($$1 -> $$1.closerThan((net.minecraft.world.entity.Entity)entity, 32.0)).filter(arg_0 -> ((net.minecraft.world.entity.Mob)entity).hasLineOfSight(arg_0)).findFirst();
-        brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, optional);
+    public void doTick(net.minecraft.server.level.ServerLevel $$02, net.minecraft.world.entity.Mob $$12) {
+        net.minecraft.world.entity.ai.Brain $$2 = $$12.getBrain();
+        java.util.List $$3 = $$02.getEntitiesOfClass(net.minecraft.world.entity.item.ItemEntity.class, $$12.getBoundingBox().inflate(32.0, 16.0, 32.0), $$0 -> true);
+        $$3.sort(java.util.Comparator.comparingDouble(arg_0 -> ((net.minecraft.world.entity.Mob)$$12).distanceToSqr(arg_0)));
+        java.util.Optional $$4 = $$3.stream().filter($$1 -> $$12.wantsToPickUp($$1.getItem())).filter($$1 -> $$1.closerThan((net.minecraft.world.entity.Entity)$$12, 32.0)).filter(arg_0 -> ((net.minecraft.world.entity.Mob)$$12).hasLineOfSight(arg_0)).findFirst();
+        $$2.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, $$4);
     }
 }
 