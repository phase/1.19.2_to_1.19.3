--- net/minecraft/world/entity/ai/Brain$1.java
+++ net/minecraft/world/entity/ai/Brain$1.java
@@ -31,8 +31,8 @@
         return com.mojang.serialization.DataResult.success((java.lang.Object)new net.minecraft.world.entity.ai.Brain(this.val$memoryTypes, this.val$sensorTypes, $$3, () -> ((org.apache.commons.lang3.mutable.MutableObject)this.val$codecReference).getValue()));
     }
 
-    public <T, U> com.mojang.serialization.DataResult<net.minecraft.world.entity.ai.Brain$MemoryValue<U>> captureRead(net.minecraft.world.entity.ai.memory.MemoryModuleType<U> memoryType, com.mojang.serialization.DynamicOps<T> ops, T input) {
-        return ((com.mojang.serialization.DataResult)memoryType.getCodec().map(com.mojang.serialization.DataResult::success).orElseGet(() -> com.mojang.serialization.DataResult.error((java.lang.String)("No codec for memory: " + memoryType)))).flatMap($$2 -> $$2.parse(ops, input)).map($$1 -> new net.minecraft.world.entity.ai.Brain$MemoryValue(memoryType, java.util.Optional.of((java.lang.Object)$$1)));
+    public <T, U> com.mojang.serialization.DataResult<net.minecraft.world.entity.ai.Brain$MemoryValue<U>> captureRead(net.minecraft.world.entity.ai.memory.MemoryModuleType<U> $$0, com.mojang.serialization.DynamicOps<T> $$12, T $$22) {
+        return ((com.mojang.serialization.DataResult)$$0.getCodec().map(com.mojang.serialization.DataResult::success).orElseGet(() -> com.mojang.serialization.DataResult.error((java.lang.String)("No codec for memory: " + $$0)))).flatMap($$2 -> $$2.parse($$12, $$22)).map($$1 -> new net.minecraft.world.entity.ai.Brain$MemoryValue($$0, java.util.Optional.of((java.lang.Object)$$1)));
     }
 
     public <T> com.mojang.serialization.RecordBuilder<T> encode(net.minecraft.world.entity.ai.Brain<E> $$0, com.mojang.serialization.DynamicOps<T> $$1, com.mojang.serialization.RecordBuilder<T> $$22) {