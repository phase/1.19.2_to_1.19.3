--- net/minecraft/world/entity/ai/behavior/InteractWith.java
+++ net/minecraft/world/entity/ai/behavior/InteractWith.java
@@ -33,8 +33,8 @@
         return new net.minecraft.world.entity.ai.behavior.InteractWith($$02, $$1, $$0 -> true, $$2, $$3, $$4, $$5);
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, E owner) {
-        return this.selfFilter.test(owner) && this.seesAtLeastOneValidTarget(owner);
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, E $$1) {
+        return this.selfFilter.test($$1) && this.seesAtLeastOneValidTarget($$1);
     }
 
     public boolean seesAtLeastOneValidTarget(E $$0) {
@@ -46,17 +46,17 @@
         return this.type.equals((java.lang.Object)$$0.getType()) && this.targetFilter.test((java.lang.Object)$$0);
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        net.minecraft.world.entity.ai.Brain brain = entity.getBrain();
-        java.util.Optional optional = brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-        if (optional.isEmpty()) {
+    public void start(net.minecraft.server.level.ServerLevel $$0, E $$12, long $$2) {
+        net.minecraft.world.entity.ai.Brain $$3 = $$12.getBrain();
+        java.util.Optional $$4 = $$3.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+        if ($$4.isEmpty()) {
             return;
         }
-        net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities nearestVisibleLivingEntities = (net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities)optional.get();
-        nearestVisibleLivingEntities.findClosest($$1 -> this.canInteract(entity, $$1)).ifPresent($$1 -> {
-            brain.setMemory(this.memory, $$1);
-            brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.LOOK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EntityTracker((net.minecraft.world.entity.Entity)$$1, true));
-            brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.memory.WalkTarget((net.minecraft.world.entity.ai.behavior.PositionTracker)new net.minecraft.world.entity.ai.behavior.EntityTracker((net.minecraft.world.entity.Entity)$$1, false), this.speedModifier, this.maxDist));
+        net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities $$5 = (net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities)$$4.get();
+        $$5.findClosest($$1 -> this.canInteract($$12, $$1)).ifPresent($$1 -> {
+            $$3.setMemory(this.memory, $$1);
+            $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.LOOK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EntityTracker((net.minecraft.world.entity.Entity)$$1, true));
+            $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.memory.WalkTarget((net.minecraft.world.entity.ai.behavior.PositionTracker)new net.minecraft.world.entity.ai.behavior.EntityTracker((net.minecraft.world.entity.Entity)$$1, false), this.speedModifier, this.maxDist));
         });
     }
 