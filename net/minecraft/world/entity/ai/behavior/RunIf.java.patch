--- net/minecraft/world/entity/ai/behavior/RunIf.java
+++ net/minecraft/world/entity/ai/behavior/RunIf.java
@@ -36,28 +36,28 @@
         this($$02, $$0 -> true, $$1, false);
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, E owner) {
-        return this.predicate.test(owner) && this.wrappedBehavior.checkExtraStartConditions(level, owner);
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, E $$1) {
+        return this.predicate.test($$1) && this.wrappedBehavior.checkExtraStartConditions($$0, $$1);
     }
 
-    public boolean canStillUse(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        return this.checkWhileRunningAlso && this.predicate.test(entity) && this.wrappedBehavior.canStillUse(level, entity, gameTime);
+    public boolean canStillUse(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        return this.checkWhileRunningAlso && this.predicate.test($$1) && this.wrappedBehavior.canStillUse($$0, $$1, $$2);
     }
 
-    public boolean timedOut(long gameTime) {
+    public boolean timedOut(long $$0) {
         return false;
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        this.wrappedBehavior.start(level, entity, gameTime);
+    public void start(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        this.wrappedBehavior.start($$0, $$1, $$2);
     }
 
-    public void tick(net.minecraft.server.level.ServerLevel level, E owner, long gameTime) {
-        this.wrappedBehavior.tick(level, owner, gameTime);
+    public void tick(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        this.wrappedBehavior.tick($$0, $$1, $$2);
     }
 
-    public void stop(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        this.wrappedBehavior.stop(level, entity, gameTime);
+    public void stop(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        this.wrappedBehavior.stop($$0, $$1, $$2);
     }
 
     public java.lang.String toString() {