--- net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
+++ net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
@@ -8,45 +8,45 @@
     public net.minecraft.world.entity.ai.behavior.BehaviorUtils() {
     }
 
-    public static void lockGazeAndWalkToEachOther(net.minecraft.world.entity.LivingEntity firstEntity, net.minecraft.world.entity.LivingEntity secondEntity, float speed) {
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.lookAtEachOther((net.minecraft.world.entity.LivingEntity)firstEntity, (net.minecraft.world.entity.LivingEntity)secondEntity);
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemoriesToEachOther((net.minecraft.world.entity.LivingEntity)firstEntity, (net.minecraft.world.entity.LivingEntity)secondEntity, (float)speed);
+    public static void lockGazeAndWalkToEachOther(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.LivingEntity $$1, float $$2) {
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.lookAtEachOther((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemoriesToEachOther((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)$$1, (float)$$2);
     }
 
-    public static boolean entityIsVisible(net.minecraft.world.entity.ai.Brain<?> brain, net.minecraft.world.entity.LivingEntity target) {
-        java.util.Optional optional = brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
-        return optional.isPresent() && ((net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities)optional.get()).contains(target);
+    public static boolean entityIsVisible(net.minecraft.world.entity.ai.Brain<?> $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        java.util.Optional $$2 = $$0.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+        return $$2.isPresent() && ((net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities)$$2.get()).contains($$1);
     }
 
-    public static boolean targetIsValid(net.minecraft.world.entity.ai.Brain<?> brains, net.minecraft.world.entity.ai.memory.MemoryModuleType<? extends net.minecraft.world.entity.LivingEntity> memorymodule, net.minecraft.world.entity.EntityType<?> entityType) {
-        return net.minecraft.world.entity.ai.behavior.BehaviorUtils.targetIsValid(brains, memorymodule, $$1 -> $$1.getType() == entityType);
+    public static boolean targetIsValid(net.minecraft.world.entity.ai.Brain<?> $$0, net.minecraft.world.entity.ai.memory.MemoryModuleType<? extends net.minecraft.world.entity.LivingEntity> $$12, net.minecraft.world.entity.EntityType<?> $$2) {
+        return net.minecraft.world.entity.ai.behavior.BehaviorUtils.targetIsValid($$0, $$12, $$1 -> $$1.getType() == $$2);
     }
 
-    public static boolean targetIsValid(net.minecraft.world.entity.ai.Brain<?> brain, net.minecraft.world.entity.ai.memory.MemoryModuleType<? extends net.minecraft.world.entity.LivingEntity> memoryType, java.util.function.Predicate<net.minecraft.world.entity.LivingEntity> livingPredicate) {
-        return brain.getMemory(memoryType).filter(livingPredicate).filter(net.minecraft.world.entity.LivingEntity::isAlive).filter($$1 -> net.minecraft.world.entity.ai.behavior.BehaviorUtils.entityIsVisible((net.minecraft.world.entity.ai.Brain)brain, (net.minecraft.world.entity.LivingEntity)$$1)).isPresent();
+    public static boolean targetIsValid(net.minecraft.world.entity.ai.Brain<?> $$0, net.minecraft.world.entity.ai.memory.MemoryModuleType<? extends net.minecraft.world.entity.LivingEntity> $$12, java.util.function.Predicate<net.minecraft.world.entity.LivingEntity> $$2) {
+        return $$0.getMemory($$12).filter($$2).filter(net.minecraft.world.entity.LivingEntity::isAlive).filter($$1 -> net.minecraft.world.entity.ai.behavior.BehaviorUtils.entityIsVisible((net.minecraft.world.entity.ai.Brain)$$0, (net.minecraft.world.entity.LivingEntity)$$1)).isPresent();
     }
 
-    public static void lookAtEachOther(net.minecraft.world.entity.LivingEntity firstEntity, net.minecraft.world.entity.LivingEntity secondEntity) {
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.lookAtEntity((net.minecraft.world.entity.LivingEntity)firstEntity, (net.minecraft.world.entity.LivingEntity)secondEntity);
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.lookAtEntity((net.minecraft.world.entity.LivingEntity)secondEntity, (net.minecraft.world.entity.LivingEntity)firstEntity);
+    public static void lookAtEachOther(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.lookAtEntity((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.lookAtEntity((net.minecraft.world.entity.LivingEntity)$$1, (net.minecraft.world.entity.LivingEntity)$$0);
     }
 
-    public static void lookAtEntity(net.minecraft.world.entity.LivingEntity entity, net.minecraft.world.entity.LivingEntity target) {
-        entity.getBrain().setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.LOOK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EntityTracker((net.minecraft.world.entity.Entity)target, true));
+    public static void lookAtEntity(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        $$0.getBrain().setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.LOOK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EntityTracker((net.minecraft.world.entity.Entity)$$1, true));
     }
 
-    public static void setWalkAndLookTargetMemoriesToEachOther(net.minecraft.world.entity.LivingEntity firstEntity, net.minecraft.world.entity.LivingEntity secondEntity, float speed) {
-        int n = 2;
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)firstEntity, (net.minecraft.world.entity.Entity)secondEntity, (float)speed, (int)2);
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)secondEntity, (net.minecraft.world.entity.Entity)firstEntity, (float)speed, (int)2);
+    public static void setWalkAndLookTargetMemoriesToEachOther(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.LivingEntity $$1, float $$2) {
+        int $$3 = 2;
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.Entity)$$1, (float)$$2, (int)2);
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)$$1, (net.minecraft.world.entity.Entity)$$0, (float)$$2, (int)2);
     }
 
-    public static void setWalkAndLookTargetMemories(net.minecraft.world.entity.LivingEntity livingEntity, net.minecraft.world.entity.Entity target, float speed, int distance) {
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)livingEntity, (net.minecraft.world.entity.ai.behavior.PositionTracker)new net.minecraft.world.entity.ai.behavior.EntityTracker(target, true), (float)speed, (int)distance);
+    public static void setWalkAndLookTargetMemories(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.Entity $$1, float $$2, int $$3) {
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.ai.behavior.PositionTracker)new net.minecraft.world.entity.ai.behavior.EntityTracker($$1, true), (float)$$2, (int)$$3);
     }
 
-    public static void setWalkAndLookTargetMemories(net.minecraft.world.entity.LivingEntity livingEntity, net.minecraft.core.BlockPos pos, float speed, int distance) {
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)livingEntity, (net.minecraft.world.entity.ai.behavior.PositionTracker)new net.minecraft.world.entity.ai.behavior.BlockPosTracker(pos), (float)speed, (int)distance);
+    public static void setWalkAndLookTargetMemories(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.core.BlockPos $$1, float $$2, int $$3) {
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.ai.behavior.PositionTracker)new net.minecraft.world.entity.ai.behavior.BlockPosTracker($$1), (float)$$2, (int)$$3);
     }
 
     public static void setWalkAndLookTargetMemories(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.ai.behavior.PositionTracker $$1, float $$2, int $$3) {
@@ -55,9 +55,9 @@
         $$0.getBrain().setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET, (java.lang.Object)$$4);
     }
 
-    public static void throwItem(net.minecraft.world.entity.LivingEntity livingEntity, net.minecraft.world.item.ItemStack stack, net.minecraft.world.phys.Vec3 offset) {
-        net.minecraft.world.phys.Vec3 vec3 = new net.minecraft.world.phys.Vec3((double)0.3f, (double)0.3f, (double)0.3f);
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.throwItem((net.minecraft.world.entity.LivingEntity)livingEntity, (net.minecraft.world.item.ItemStack)stack, (net.minecraft.world.phys.Vec3)offset, (net.minecraft.world.phys.Vec3)vec3, (float)0.3f);
+    public static void throwItem(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.item.ItemStack $$1, net.minecraft.world.phys.Vec3 $$2) {
+        net.minecraft.world.phys.Vec3 $$3 = new net.minecraft.world.phys.Vec3((double)0.3f, (double)0.3f, (double)0.3f);
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.throwItem((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.item.ItemStack)$$1, (net.minecraft.world.phys.Vec3)$$2, (net.minecraft.world.phys.Vec3)$$3, (float)0.3f);
     }
 
     public static void throwItem(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.item.ItemStack $$1, net.minecraft.world.phys.Vec3 $$2, net.minecraft.world.phys.Vec3 $$3, float $$4) {
@@ -71,64 +71,64 @@
         $$0.level.addFreshEntity((net.minecraft.world.entity.Entity)$$6);
     }
 
-    public static net.minecraft.core.SectionPos findSectionClosestToVillage(net.minecraft.server.level.ServerLevel serverLevel, net.minecraft.core.SectionPos sectionPos, int radius) {
-        int n = serverLevel.sectionsToVillage(sectionPos);
-        return (net.minecraft.core.SectionPos)net.minecraft.core.SectionPos.cube((net.minecraft.core.SectionPos)sectionPos, (int)radius).filter($$2 -> serverLevel.sectionsToVillage($$2) < n).min(java.util.Comparator.comparingInt(arg_0 -> ((net.minecraft.server.level.ServerLevel)serverLevel).sectionsToVillage(arg_0))).orElse((java.lang.Object)sectionPos);
+    public static net.minecraft.core.SectionPos findSectionClosestToVillage(net.minecraft.server.level.ServerLevel $$0, net.minecraft.core.SectionPos $$1, int $$22) {
+        int $$3 = $$0.sectionsToVillage($$1);
+        return (net.minecraft.core.SectionPos)net.minecraft.core.SectionPos.cube((net.minecraft.core.SectionPos)$$1, (int)$$22).filter($$2 -> $$0.sectionsToVillage($$2) < $$3).min(java.util.Comparator.comparingInt(arg_0 -> ((net.minecraft.server.level.ServerLevel)$$0).sectionsToVillage(arg_0))).orElse((java.lang.Object)$$1);
     }
 
-    public static boolean isWithinAttackRange(net.minecraft.world.entity.Mob mob, net.minecraft.world.entity.LivingEntity target, int cooldown) {
-        net.minecraft.world.item.Item item = mob.getMainHandItem().getItem();
-        if (item instanceof net.minecraft.world.item.ProjectileWeaponItem) {
-            net.minecraft.world.item.ProjectileWeaponItem projectileWeaponItem = (net.minecraft.world.item.ProjectileWeaponItem)item;
-            if (mob.canFireProjectileWeapon((net.minecraft.world.item.ProjectileWeaponItem)item)) {
-                int n = projectileWeaponItem.getDefaultProjectileRange() - cooldown;
-                return mob.closerThan((net.minecraft.world.entity.Entity)target, (double)n);
+    public static boolean isWithinAttackRange(net.minecraft.world.entity.Mob $$0, net.minecraft.world.entity.LivingEntity $$1, int $$2) {
+        net.minecraft.world.item.Item $$3 = $$0.getMainHandItem().getItem();
+        if ($$3 instanceof net.minecraft.world.item.ProjectileWeaponItem) {
+            net.minecraft.world.item.ProjectileWeaponItem $$4 = (net.minecraft.world.item.ProjectileWeaponItem)$$3;
+            if ($$0.canFireProjectileWeapon((net.minecraft.world.item.ProjectileWeaponItem)$$3)) {
+                int $$5 = $$4.getDefaultProjectileRange() - $$2;
+                return $$0.closerThan((net.minecraft.world.entity.Entity)$$1, (double)$$5);
             }
         }
-        return mob.isWithinMeleeAttackRange(target);
+        return $$0.isWithinMeleeAttackRange($$1);
     }
 
-    public static boolean isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(net.minecraft.world.entity.LivingEntity livingEntity, net.minecraft.world.entity.LivingEntity target, double distance) {
-        java.util.Optional optional = livingEntity.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET);
-        if (optional.isEmpty()) {
+    public static boolean isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.LivingEntity $$1, double $$2) {
+        java.util.Optional $$3 = $$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET);
+        if ($$3.isEmpty()) {
             return false;
         }
-        double d = livingEntity.distanceToSqr(((net.minecraft.world.entity.LivingEntity)optional.get()).position());
-        double d2 = livingEntity.distanceToSqr(target.position());
-        return d2 > d + distance * distance;
+        double $$4 = $$0.distanceToSqr(((net.minecraft.world.entity.LivingEntity)$$3.get()).position());
+        double $$5 = $$0.distanceToSqr($$1.position());
+        return $$5 > $$4 + $$2 * $$2;
     }
 
-    public static boolean canSee(net.minecraft.world.entity.LivingEntity livingEntity, net.minecraft.world.entity.LivingEntity target) {
-        net.minecraft.world.entity.ai.Brain brain = livingEntity.getBrain();
-        if (!brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES)) {
+    public static boolean canSee(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        net.minecraft.world.entity.ai.Brain $$2 = $$0.getBrain();
+        if (!$$2.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES)) {
             return false;
         }
-        return ((net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities)brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).contains(target);
+        return ((net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities)$$2.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).contains($$1);
     }
 
-    public static net.minecraft.world.entity.LivingEntity getNearestTarget(net.minecraft.world.entity.LivingEntity centerEntity, java.util.Optional<net.minecraft.world.entity.LivingEntity> optionalEntity, net.minecraft.world.entity.LivingEntity livingEntity) {
-        if (optionalEntity.isEmpty()) {
-            return livingEntity;
+    public static net.minecraft.world.entity.LivingEntity getNearestTarget(net.minecraft.world.entity.LivingEntity $$0, java.util.Optional<net.minecraft.world.entity.LivingEntity> $$1, net.minecraft.world.entity.LivingEntity $$2) {
+        if ($$1.isEmpty()) {
+            return $$2;
         }
-        return net.minecraft.world.entity.ai.behavior.BehaviorUtils.getTargetNearestMe((net.minecraft.world.entity.LivingEntity)centerEntity, (net.minecraft.world.entity.LivingEntity)((net.minecraft.world.entity.LivingEntity)optionalEntity.get()), (net.minecraft.world.entity.LivingEntity)livingEntity);
+        return net.minecraft.world.entity.ai.behavior.BehaviorUtils.getTargetNearestMe((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)((net.minecraft.world.entity.LivingEntity)$$1.get()), (net.minecraft.world.entity.LivingEntity)$$2);
     }
 
-    public static net.minecraft.world.entity.LivingEntity getTargetNearestMe(net.minecraft.world.entity.LivingEntity centerEntity, net.minecraft.world.entity.LivingEntity livingEntity1, net.minecraft.world.entity.LivingEntity livingEntity2) {
-        net.minecraft.world.phys.Vec3 vec3 = livingEntity1.position();
-        net.minecraft.world.phys.Vec3 vec32 = livingEntity2.position();
-        return centerEntity.distanceToSqr(vec3) < centerEntity.distanceToSqr(vec32) ? livingEntity1 : livingEntity2;
+    public static net.minecraft.world.entity.LivingEntity getTargetNearestMe(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.LivingEntity $$1, net.minecraft.world.entity.LivingEntity $$2) {
+        net.minecraft.world.phys.Vec3 $$3 = $$1.position();
+        net.minecraft.world.phys.Vec3 $$4 = $$2.position();
+        return $$0.distanceToSqr($$3) < $$0.distanceToSqr($$4) ? $$1 : $$2;
     }
 
-    public static java.util.Optional<net.minecraft.world.entity.LivingEntity> getLivingEntityFromUUIDMemory(net.minecraft.world.entity.LivingEntity livingEntity, net.minecraft.world.entity.ai.memory.MemoryModuleType<java.util.UUID> targetMemory) {
-        java.util.Optional optional = livingEntity.getBrain().getMemory(targetMemory);
-        return optional.map($$1 -> ((net.minecraft.server.level.ServerLevel)$$0.level).getEntity($$1)).map($$0 -> {
+    public static java.util.Optional<net.minecraft.world.entity.LivingEntity> getLivingEntityFromUUIDMemory(net.minecraft.world.entity.LivingEntity $$02, net.minecraft.world.entity.ai.memory.MemoryModuleType<java.util.UUID> $$12) {
+        java.util.Optional $$2 = $$02.getBrain().getMemory($$12);
+        return $$2.map($$1 -> ((net.minecraft.server.level.ServerLevel)$$0.level).getEntity($$1)).map($$0 -> {
             net.minecraft.world.entity.LivingEntity $$1;
             return $$0 instanceof net.minecraft.world.entity.LivingEntity ? ($$1 = (net.minecraft.world.entity.LivingEntity)$$0) : null;
         });
     }
 
-    public static java.util.stream.Stream<net.minecraft.world.entity.npc.Villager> getNearbyVillagersWithCondition(net.minecraft.world.entity.npc.Villager villager, java.util.function.Predicate<net.minecraft.world.entity.npc.Villager> villagerPredicate) {
-        return (java.util.stream.Stream)villager.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_LIVING_ENTITIES).map($$2 -> $$2.stream().filter($$1 -> $$1 instanceof net.minecraft.world.entity.npc.Villager && $$1 != villager).map($$0 -> (net.minecraft.world.entity.npc.Villager)$$0).filter(net.minecraft.world.entity.LivingEntity::isAlive).filter(villagerPredicate)).orElseGet(java.util.stream.Stream::empty);
+    public static java.util.stream.Stream<net.minecraft.world.entity.npc.Villager> getNearbyVillagersWithCondition(net.minecraft.world.entity.npc.Villager $$0, java.util.function.Predicate<net.minecraft.world.entity.npc.Villager> $$1) {
+        return (java.util.stream.Stream)$$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_LIVING_ENTITIES).map($$2 -> $$2.stream().filter($$1 -> $$1 instanceof net.minecraft.world.entity.npc.Villager && $$1 != $$0).map($$0 -> (net.minecraft.world.entity.npc.Villager)$$0).filter(net.minecraft.world.entity.LivingEntity::isAlive).filter($$1)).orElseGet(java.util.stream.Stream::empty);
     }
 
     @javax.annotation.Nullable