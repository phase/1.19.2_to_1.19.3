--- net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
+++ net/minecraft/world/entity/ai/behavior/InsideBrownianWalk.java
@@ -13,16 +13,16 @@
         this.speedModifier = $$0;
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.PathfinderMob owner) {
-        return !level.canSeeSky(owner.blockPosition());
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.PathfinderMob $$1) {
+        return !$$0.canSeeSky($$1.blockPosition());
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.PathfinderMob entity, long gameTime) {
-        net.minecraft.core.BlockPos blockPos = entity.blockPosition();
-        java.util.List list = (java.util.List)net.minecraft.core.BlockPos.betweenClosedStream((net.minecraft.core.BlockPos)blockPos.offset(-1, -1, -1), (net.minecraft.core.BlockPos)blockPos.offset(1, 1, 1)).map(net.minecraft.core.BlockPos::immutable).collect(java.util.stream.Collectors.toList());
-        java.util.Collections.shuffle((java.util.List)list);
-        java.util.Optional optional = list.stream().filter($$1 -> !level.canSeeSky($$1)).filter($$2 -> level.loadedAndEntityCanStandOn($$2, (net.minecraft.world.entity.Entity)entity)).filter($$2 -> level.noCollision((net.minecraft.world.entity.Entity)entity)).findFirst();
-        optional.ifPresent($$1 -> entity.getBrain().setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.memory.WalkTarget($$1, this.speedModifier, 0)));
+    public void start(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.PathfinderMob $$12, long $$22) {
+        net.minecraft.core.BlockPos $$3 = $$12.blockPosition();
+        java.util.List $$4 = (java.util.List)net.minecraft.core.BlockPos.betweenClosedStream((net.minecraft.core.BlockPos)$$3.offset(-1, -1, -1), (net.minecraft.core.BlockPos)$$3.offset(1, 1, 1)).map(net.minecraft.core.BlockPos::immutable).collect(java.util.stream.Collectors.toList());
+        java.util.Collections.shuffle((java.util.List)$$4);
+        java.util.Optional $$5 = $$4.stream().filter($$1 -> !$$0.canSeeSky($$1)).filter($$2 -> $$0.loadedAndEntityCanStandOn($$2, (net.minecraft.world.entity.Entity)$$12)).filter($$2 -> $$0.noCollision((net.minecraft.world.entity.Entity)$$12)).findFirst();
+        $$5.ifPresent($$1 -> $$12.getBrain().setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.memory.WalkTarget($$1, this.speedModifier, 0)));
     }
 }
 