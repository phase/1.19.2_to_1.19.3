--- net/minecraft/world/entity/ai/behavior/RunSometimes.java
+++ net/minecraft/world/entity/ai/behavior/RunSometimes.java
@@ -23,12 +23,12 @@
         this.interval = $$2;
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, E owner) {
-        if (!this.wrappedBehavior.checkExtraStartConditions(level, owner)) {
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, E $$1) {
+        if (!this.wrappedBehavior.checkExtraStartConditions($$0, $$1)) {
             return false;
         }
         if (this.resetTicks) {
-            this.resetTicksUntilNextStart(level);
+            this.resetTicksUntilNextStart($$0);
             this.resetTicks = false;
         }
         if (this.ticksUntilNextStart > 0) {
@@ -37,29 +37,29 @@
         return !this.wasRunning && this.ticksUntilNextStart == 0;
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        this.wrappedBehavior.start(level, entity, gameTime);
+    public void start(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        this.wrappedBehavior.start($$0, $$1, $$2);
     }
 
-    public boolean canStillUse(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        return this.wrappedBehavior.canStillUse(level, entity, gameTime);
+    public boolean canStillUse(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        return this.wrappedBehavior.canStillUse($$0, $$1, $$2);
     }
 
-    public void tick(net.minecraft.server.level.ServerLevel level, E owner, long gameTime) {
-        this.wrappedBehavior.tick(level, owner, gameTime);
+    public void tick(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        this.wrappedBehavior.tick($$0, $$1, $$2);
         this.wasRunning = this.wrappedBehavior.getStatus() == net.minecraft.world.entity.ai.behavior.Behavior$Status.RUNNING;
     }
 
-    public void stop(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        this.resetTicksUntilNextStart(level);
-        this.wrappedBehavior.stop(level, entity, gameTime);
+    public void stop(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        this.resetTicksUntilNextStart($$0);
+        this.wrappedBehavior.stop($$0, $$1, $$2);
     }
 
     public void resetTicksUntilNextStart(net.minecraft.server.level.ServerLevel $$0) {
         this.ticksUntilNextStart = this.interval.sample($$0.random);
     }
 
-    public boolean timedOut(long gameTime) {
+    public boolean timedOut(long $$0) {
         return false;
     }
 