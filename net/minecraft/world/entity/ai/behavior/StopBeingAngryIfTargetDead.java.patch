--- net/minecraft/world/entity/ai/behavior/StopBeingAngryIfTargetDead.java
+++ net/minecraft/world/entity/ai/behavior/StopBeingAngryIfTargetDead.java
@@ -10,10 +10,10 @@
         super((java.util.Map)com.google.common.collect.ImmutableMap.of((java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryStatus.VALUE_PRESENT));
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.getLivingEntityFromUUIDMemory(entity, (net.minecraft.world.entity.ai.memory.MemoryModuleType)net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT).ifPresent($$2 -> {
-            if ($$2.isDeadOrDying() && ($$2.getType() != net.minecraft.world.entity.EntityType.PLAYER || level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_FORGIVE_DEAD_PLAYERS))) {
-                entity.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
+    public void start(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$22) {
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.getLivingEntityFromUUIDMemory($$1, (net.minecraft.world.entity.ai.memory.MemoryModuleType)net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT).ifPresent($$2 -> {
+            if ($$2.isDeadOrDying() && ($$2.getType() != net.minecraft.world.entity.EntityType.PLAYER || $$0.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_FORGIVE_DEAD_PLAYERS))) {
+                $$1.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
             }
         });
     }