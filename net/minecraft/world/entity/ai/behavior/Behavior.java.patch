--- net/minecraft/world/entity/ai/behavior/Behavior.java
+++ net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -31,48 +31,48 @@
         return this.status;
     }
 
-    public boolean tryStart(net.minecraft.server.level.ServerLevel level, E owner, long gameTime) {
-        if (this.hasRequiredMemories(owner) && this.checkExtraStartConditions(level, owner)) {
+    public boolean tryStart(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        if (this.hasRequiredMemories($$1) && this.checkExtraStartConditions($$0, $$1)) {
             this.status = net.minecraft.world.entity.ai.behavior.Behavior$Status.RUNNING;
-            int n = this.minDuration + level.getRandom().nextInt(this.maxDuration + 1 - this.minDuration);
-            this.endTimestamp = gameTime + (long)n;
-            this.start(level, owner, gameTime);
+            int $$3 = this.minDuration + $$0.getRandom().nextInt(this.maxDuration + 1 - this.minDuration);
+            this.endTimestamp = $$2 + (long)$$3;
+            this.start($$0, $$1, $$2);
             return true;
         }
         return false;
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
+    public void start(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
     }
 
-    public void tickOrStop(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        if (!this.timedOut(gameTime) && this.canStillUse(level, entity, gameTime)) {
-            this.tick(level, entity, gameTime);
+    public void tickOrStop(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        if (!this.timedOut($$2) && this.canStillUse($$0, $$1, $$2)) {
+            this.tick($$0, $$1, $$2);
         } else {
-            this.doStop(level, entity, gameTime);
+            this.doStop($$0, $$1, $$2);
         }
     }
 
-    public void tick(net.minecraft.server.level.ServerLevel level, E owner, long gameTime) {
+    public void tick(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
     }
 
-    public void doStop(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
+    public void doStop(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
         this.status = net.minecraft.world.entity.ai.behavior.Behavior$Status.STOPPED;
-        this.stop(level, entity, gameTime);
+        this.stop($$0, $$1, $$2);
     }
 
-    public void stop(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
+    public void stop(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
     }
 
-    public boolean canStillUse(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
+    public boolean canStillUse(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
         return false;
     }
 
-    public boolean timedOut(long gameTime) {
-        return gameTime > this.endTimestamp;
+    public boolean timedOut(long $$0) {
+        return $$0 > this.endTimestamp;
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, E owner) {
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, E $$1) {
         return true;
     }
 
@@ -80,11 +80,11 @@
         return this.getClass().getSimpleName();
     }
 
-    public boolean hasRequiredMemories(E owner) {
-        for (java.util.Map$Entry entry : this.entryCondition.entrySet()) {
-            net.minecraft.world.entity.ai.memory.MemoryModuleType memoryModuleType = (net.minecraft.world.entity.ai.memory.MemoryModuleType)entry.getKey();
-            net.minecraft.world.entity.ai.memory.MemoryStatus memoryStatus = (net.minecraft.world.entity.ai.memory.MemoryStatus)entry.getValue();
-            if (owner.getBrain().checkMemory(memoryModuleType, memoryStatus)) continue;
+    public boolean hasRequiredMemories(E $$0) {
+        for (java.util.Map$Entry $$1 : this.entryCondition.entrySet()) {
+            net.minecraft.world.entity.ai.memory.MemoryModuleType $$2 = (net.minecraft.world.entity.ai.memory.MemoryModuleType)$$1.getKey();
+            net.minecraft.world.entity.ai.memory.MemoryStatus $$3 = (net.minecraft.world.entity.ai.memory.MemoryStatus)$$1.getValue();
+            if ($$0.getBrain().checkMemory($$2, $$3)) continue;
             return false;
         }
         return true;