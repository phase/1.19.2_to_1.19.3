--- net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
+++ net/minecraft/world/entity/ai/behavior/CrossbowAttack.java
@@ -15,28 +15,28 @@
         this.crossbowState = net.minecraft.world.entity.ai.behavior.CrossbowAttack$CrossbowState.UNCHARGED;
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, E owner) {
-        net.minecraft.world.entity.LivingEntity livingEntity = net.minecraft.world.entity.ai.behavior.CrossbowAttack.getAttackTarget(owner);
-        return owner.isHolding(net.minecraft.world.item.Items.CROSSBOW) && net.minecraft.world.entity.ai.behavior.BehaviorUtils.canSee(owner, (net.minecraft.world.entity.LivingEntity)livingEntity) && net.minecraft.world.entity.ai.behavior.BehaviorUtils.isWithinAttackRange(owner, (net.minecraft.world.entity.LivingEntity)livingEntity, (int)0);
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, E $$1) {
+        net.minecraft.world.entity.LivingEntity $$2 = net.minecraft.world.entity.ai.behavior.CrossbowAttack.getAttackTarget($$1);
+        return $$1.isHolding(net.minecraft.world.item.Items.CROSSBOW) && net.minecraft.world.entity.ai.behavior.BehaviorUtils.canSee($$1, (net.minecraft.world.entity.LivingEntity)$$2) && net.minecraft.world.entity.ai.behavior.BehaviorUtils.isWithinAttackRange($$1, (net.minecraft.world.entity.LivingEntity)$$2, (int)0);
     }
 
-    public boolean canStillUse(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        return entity.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET) && this.checkExtraStartConditions(level, entity);
+    public boolean canStillUse(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        return $$1.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET) && this.checkExtraStartConditions($$0, $$1);
     }
 
-    public void tick(net.minecraft.server.level.ServerLevel level, E owner, long gameTime) {
-        net.minecraft.world.entity.LivingEntity livingEntity = net.minecraft.world.entity.ai.behavior.CrossbowAttack.getAttackTarget(owner);
-        this.lookAtTarget(owner, livingEntity);
-        this.crossbowAttack(owner, livingEntity);
+    public void tick(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        net.minecraft.world.entity.LivingEntity $$3 = net.minecraft.world.entity.ai.behavior.CrossbowAttack.getAttackTarget($$1);
+        this.lookAtTarget($$1, $$3);
+        this.crossbowAttack($$1, $$3);
     }
 
-    public void stop(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        if (entity.isUsingItem()) {
-            entity.stopUsingItem();
+    public void stop(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        if ($$1.isUsingItem()) {
+            $$1.stopUsingItem();
         }
-        if (entity.isHolding(net.minecraft.world.item.Items.CROSSBOW)) {
-            ((net.minecraft.world.entity.monster.CrossbowAttackMob)entity).setChargingCrossbow(false);
-            net.minecraft.world.item.CrossbowItem.setCharged((net.minecraft.world.item.ItemStack)entity.getUseItem(), (boolean)false);
+        if ($$1.isHolding(net.minecraft.world.item.Items.CROSSBOW)) {
+            ((net.minecraft.world.entity.monster.CrossbowAttackMob)$$1).setChargingCrossbow(false);
+            net.minecraft.world.item.CrossbowItem.setCharged((net.minecraft.world.item.ItemStack)$$1.getUseItem(), (boolean)false);
         }
     }
 