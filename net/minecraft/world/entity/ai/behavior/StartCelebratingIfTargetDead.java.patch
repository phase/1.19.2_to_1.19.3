--- net/minecraft/world/entity/ai/behavior/StartCelebratingIfTargetDead.java
+++ net/minecraft/world/entity/ai/behavior/StartCelebratingIfTargetDead.java
@@ -15,24 +15,24 @@
         this.dancePredicate = $$1;
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.LivingEntity owner) {
-        return this.getAttackTarget(owner).isDeadOrDying();
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        return this.getAttackTarget($$1).isDeadOrDying();
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.LivingEntity entity, long gameTime) {
-        net.minecraft.world.entity.LivingEntity livingEntity = this.getAttackTarget(entity);
-        if (this.dancePredicate.test((java.lang.Object)entity, (java.lang.Object)livingEntity)) {
-            entity.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.DANCING, (java.lang.Object)true, (long)this.celebrateDuration);
+    public void start(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.LivingEntity $$1, long $$2) {
+        net.minecraft.world.entity.LivingEntity $$3 = this.getAttackTarget($$1);
+        if (this.dancePredicate.test((java.lang.Object)$$1, (java.lang.Object)$$3)) {
+            $$1.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.DANCING, (java.lang.Object)true, (long)this.celebrateDuration);
         }
-        entity.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION, (java.lang.Object)livingEntity.blockPosition(), (long)this.celebrateDuration);
-        if (livingEntity.getType() != net.minecraft.world.entity.EntityType.PLAYER || level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_FORGIVE_DEAD_PLAYERS)) {
-            entity.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET);
-            entity.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
+        $$1.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION, (java.lang.Object)$$3.blockPosition(), (long)this.celebrateDuration);
+        if ($$3.getType() != net.minecraft.world.entity.EntityType.PLAYER || $$0.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_FORGIVE_DEAD_PLAYERS)) {
+            $$1.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET);
+            $$1.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
         }
     }
 
-    public net.minecraft.world.entity.LivingEntity getAttackTarget(net.minecraft.world.entity.LivingEntity livingEntity) {
-        return (net.minecraft.world.entity.LivingEntity)livingEntity.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET).get();
+    public net.minecraft.world.entity.LivingEntity getAttackTarget(net.minecraft.world.entity.LivingEntity $$0) {
+        return (net.minecraft.world.entity.LivingEntity)$$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET).get();
     }
 }
 