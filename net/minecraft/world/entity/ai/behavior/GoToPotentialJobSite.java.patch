--- net/minecraft/world/entity/ai/behavior/GoToPotentialJobSite.java
+++ net/minecraft/world/entity/ai/behavior/GoToPotentialJobSite.java
@@ -14,23 +14,23 @@
         this.speedModifier = $$0;
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.npc.Villager owner) {
-        return (java.lang.Boolean)owner.getBrain().getActiveNonCoreActivity().map($$0 -> $$0 == net.minecraft.world.entity.schedule.Activity.IDLE || $$0 == net.minecraft.world.entity.schedule.Activity.WORK || $$0 == net.minecraft.world.entity.schedule.Activity.PLAY).orElse((java.lang.Object)true);
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$02, net.minecraft.world.entity.npc.Villager $$1) {
+        return (java.lang.Boolean)$$1.getBrain().getActiveNonCoreActivity().map($$0 -> $$0 == net.minecraft.world.entity.schedule.Activity.IDLE || $$0 == net.minecraft.world.entity.schedule.Activity.WORK || $$0 == net.minecraft.world.entity.schedule.Activity.PLAY).orElse((java.lang.Object)true);
     }
 
-    public boolean canStillUse(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.npc.Villager entity, long gameTime) {
-        return entity.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.POTENTIAL_JOB_SITE);
+    public boolean canStillUse(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.npc.Villager $$1, long $$2) {
+        return $$1.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.POTENTIAL_JOB_SITE);
     }
 
-    public void tick(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.npc.Villager owner, long gameTime) {
-        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)owner, (net.minecraft.core.BlockPos)((net.minecraft.core.GlobalPos)owner.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.POTENTIAL_JOB_SITE).get()).pos(), (float)this.speedModifier, (int)1);
+    public void tick(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.npc.Villager $$1, long $$2) {
+        net.minecraft.world.entity.ai.behavior.BehaviorUtils.setWalkAndLookTargetMemories((net.minecraft.world.entity.LivingEntity)$$1, (net.minecraft.core.BlockPos)((net.minecraft.core.GlobalPos)$$1.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.POTENTIAL_JOB_SITE).get()).pos(), (float)this.speedModifier, (int)1);
     }
 
-    public void stop(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.npc.Villager entity, long gameTime) {
-        java.util.Optional optional = entity.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.POTENTIAL_JOB_SITE);
-        optional.ifPresent($$1 -> {
+    public void stop(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.npc.Villager $$12, long $$2) {
+        java.util.Optional $$3 = $$12.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.POTENTIAL_JOB_SITE);
+        $$3.ifPresent($$1 -> {
             net.minecraft.core.BlockPos $$2 = $$1.pos();
-            net.minecraft.server.level.ServerLevel $$3 = level.getServer().getLevel($$1.dimension());
+            net.minecraft.server.level.ServerLevel $$3 = $$0.getServer().getLevel($$1.dimension());
             if ($$3 == null) {
                 return;
             }
@@ -38,9 +38,9 @@
             if ($$4.exists($$2, $$0 -> true)) {
                 $$4.release($$2);
             }
-            net.minecraft.network.protocol.game.DebugPackets.sendPoiTicketCountPacket((net.minecraft.server.level.ServerLevel)level, (net.minecraft.core.BlockPos)$$2);
+            net.minecraft.network.protocol.game.DebugPackets.sendPoiTicketCountPacket((net.minecraft.server.level.ServerLevel)$$0, (net.minecraft.core.BlockPos)$$2);
         });
-        entity.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.POTENTIAL_JOB_SITE);
+        $$12.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.POTENTIAL_JOB_SITE);
     }
 
     public /* synthetic */ boolean canStillUse(net.minecraft.server.level.ServerLevel serverLevel, net.minecraft.world.entity.LivingEntity livingEntity, long l) {