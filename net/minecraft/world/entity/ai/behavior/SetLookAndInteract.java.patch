--- net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java
+++ net/minecraft/world/entity/ai/behavior/SetLookAndInteract.java
@@ -23,21 +23,21 @@
         this($$02, $$1, $$0 -> true, $$0 -> true);
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.LivingEntity owner) {
-        return this.selfFilter.test((java.lang.Object)owner) && this.getVisibleEntities(owner).contains(arg_0 -> this.isMatchingTarget(arg_0));
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        return this.selfFilter.test((java.lang.Object)$$1) && this.getVisibleEntities($$1).contains(arg_0 -> this.isMatchingTarget(arg_0));
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, net.minecraft.world.entity.LivingEntity entity, long gameTime) {
-        super.start(level, entity, gameTime);
-        net.minecraft.world.entity.ai.Brain brain = entity.getBrain();
-        brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).flatMap($$12 -> $$12.findClosest($$1 -> $$1.distanceToSqr((net.minecraft.world.entity.Entity)entity) <= (double)this.interactionRangeSqr && this.isMatchingTarget($$1))).ifPresent($$1 -> {
-            brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.INTERACTION_TARGET, $$1);
-            brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.LOOK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EntityTracker((net.minecraft.world.entity.Entity)$$1, true));
+    public void start(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.LivingEntity $$13, long $$2) {
+        super.start($$0, $$13, $$2);
+        net.minecraft.world.entity.ai.Brain $$3 = $$13.getBrain();
+        $$3.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).flatMap($$12 -> $$12.findClosest($$1 -> $$1.distanceToSqr((net.minecraft.world.entity.Entity)$$13) <= (double)this.interactionRangeSqr && this.isMatchingTarget($$1))).ifPresent($$1 -> {
+            $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.INTERACTION_TARGET, $$1);
+            $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.LOOK_TARGET, (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EntityTracker((net.minecraft.world.entity.Entity)$$1, true));
         });
     }
 
-    public boolean isMatchingTarget(net.minecraft.world.entity.LivingEntity livingEntity) {
-        return this.type.equals((java.lang.Object)livingEntity.getType()) && this.targetFilter.test((java.lang.Object)livingEntity);
+    public boolean isMatchingTarget(net.minecraft.world.entity.LivingEntity $$0) {
+        return this.type.equals((java.lang.Object)$$0.getType()) && this.targetFilter.test((java.lang.Object)$$0);
     }
 
     public net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities getVisibleEntities(net.minecraft.world.entity.LivingEntity $$0) {