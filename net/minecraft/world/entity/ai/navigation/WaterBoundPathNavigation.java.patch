--- net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation.java
+++ net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation.java
@@ -12,10 +12,10 @@
         super($$0, $$1);
     }
 
-    public net.minecraft.world.level.pathfinder.PathFinder createPathFinder(int maxVisitedNodes) {
+    public net.minecraft.world.level.pathfinder.PathFinder createPathFinder(int $$0) {
         this.allowBreaching = this.mob.getType() == net.minecraft.world.entity.EntityType.DOLPHIN;
         this.nodeEvaluator = new net.minecraft.world.level.pathfinder.SwimNodeEvaluator(this.allowBreaching);
-        return new net.minecraft.world.level.pathfinder.PathFinder(this.nodeEvaluator, maxVisitedNodes);
+        return new net.minecraft.world.level.pathfinder.PathFinder(this.nodeEvaluator, $$0);
     }
 
     public boolean canUpdatePath() {
@@ -34,11 +34,11 @@
         return net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation.isClearForMovementBetween((net.minecraft.world.entity.Mob)this.mob, (net.minecraft.world.phys.Vec3)$$0, (net.minecraft.world.phys.Vec3)$$1);
     }
 
-    public boolean isStableDestination(net.minecraft.core.BlockPos pos) {
-        return !this.level.getBlockState(pos).isSolidRender((net.minecraft.world.level.BlockGetter)this.level, pos);
+    public boolean isStableDestination(net.minecraft.core.BlockPos $$0) {
+        return !this.level.getBlockState($$0).isSolidRender((net.minecraft.world.level.BlockGetter)this.level, $$0);
     }
 
-    public void setCanFloat(boolean canSwim) {
+    public void setCanFloat(boolean $$0) {
     }
 }
 