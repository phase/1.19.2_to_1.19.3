--- net/minecraft/world/entity/ai/memory/ExpirableValue.java
+++ net/minecraft/world/entity/ai/memory/ExpirableValue.java
@@ -19,12 +19,12 @@
         }
     }
 
-    public static <T> net.minecraft.world.entity.ai.memory.ExpirableValue<T> of(T value) {
-        return new net.minecraft.world.entity.ai.memory.ExpirableValue(value, java.lang.Long.MAX_VALUE);
+    public static <T> net.minecraft.world.entity.ai.memory.ExpirableValue<T> of(T $$0) {
+        return new net.minecraft.world.entity.ai.memory.ExpirableValue($$0, java.lang.Long.MAX_VALUE);
     }
 
-    public static <T> net.minecraft.world.entity.ai.memory.ExpirableValue<T> of(T value, long timeToLive) {
-        return new net.minecraft.world.entity.ai.memory.ExpirableValue(value, timeToLive);
+    public static <T> net.minecraft.world.entity.ai.memory.ExpirableValue<T> of(T $$0, long $$1) {
+        return new net.minecraft.world.entity.ai.memory.ExpirableValue($$0, $$1);
     }
 
     public long getTimeToLive() {
@@ -48,8 +48,8 @@
         return this.timeToLive != java.lang.Long.MAX_VALUE;
     }
 
-    public static <T> com.mojang.serialization.Codec<net.minecraft.world.entity.ai.memory.ExpirableValue<T>> codec(com.mojang.serialization.Codec<T> valueCodec) {
-        return com.mojang.serialization.codecs.RecordCodecBuilder.create($$12 -> $$12.group((com.mojang.datafixers.kinds.App)valueCodec.fieldOf("value").forGetter($$0 -> $$0.value), (com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.LONG.optionalFieldOf("ttl").forGetter($$0 -> $$0.canExpire() ? java.util.Optional.of((java.lang.Object)$$0.timeToLive) : java.util.Optional.empty())).apply((com.mojang.datafixers.kinds.Applicative)$$12, ($$0, $$1) -> new net.minecraft.world.entity.ai.memory.ExpirableValue($$0, ((java.lang.Long)$$1.orElse((java.lang.Object)java.lang.Long.MAX_VALUE)).longValue())));
+    public static <T> com.mojang.serialization.Codec<net.minecraft.world.entity.ai.memory.ExpirableValue<T>> codec(com.mojang.serialization.Codec<T> $$0) {
+        return com.mojang.serialization.codecs.RecordCodecBuilder.create($$12 -> $$12.group((com.mojang.datafixers.kinds.App)$$0.fieldOf("value").forGetter($$0 -> $$0.value), (com.mojang.datafixers.kinds.App)com.mojang.serialization.Codec.LONG.optionalFieldOf("ttl").forGetter($$0 -> $$0.canExpire() ? java.util.Optional.of((java.lang.Object)$$0.timeToLive) : java.util.Optional.empty())).apply((com.mojang.datafixers.kinds.Applicative)$$12, ($$0, $$1) -> new net.minecraft.world.entity.ai.memory.ExpirableValue($$0, ((java.lang.Long)$$1.orElse((java.lang.Object)java.lang.Long.MAX_VALUE)).longValue())));
     }
 }
 