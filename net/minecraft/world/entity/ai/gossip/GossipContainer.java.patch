--- net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -53,8 +53,8 @@
         return $$7;
     }
 
-    public net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips getOrCreate(java.util.UUID identifier) {
-        return (net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips)this.gossips.computeIfAbsent((java.lang.Object)identifier, $$0 -> new net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips());
+    public net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips getOrCreate(java.util.UUID $$02) {
+        return (net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips)this.gossips.computeIfAbsent((java.lang.Object)$$02, $$0 -> new net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips());
     }
 
     public void transferFrom(net.minecraft.world.entity.ai.gossip.GossipContainer $$02, net.minecraft.util.RandomSource $$1, int $$2) {
@@ -67,21 +67,21 @@
         });
     }
 
-    public int getReputation(java.util.UUID identifier, java.util.function.Predicate<net.minecraft.world.entity.ai.gossip.GossipType> gossip) {
-        net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips entityGossips = (net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips)this.gossips.get((java.lang.Object)identifier);
-        return entityGossips != null ? entityGossips.weightedValue(gossip) : 0;
+    public int getReputation(java.util.UUID $$0, java.util.function.Predicate<net.minecraft.world.entity.ai.gossip.GossipType> $$1) {
+        net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips $$2 = (net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips)this.gossips.get((java.lang.Object)$$0);
+        return $$2 != null ? $$2.weightedValue($$1) : 0;
     }
 
     public long getCountForType(net.minecraft.world.entity.ai.gossip.GossipType $$0, java.util.function.DoublePredicate $$1) {
         return this.gossips.values().stream().filter($$2 -> $$1.test((double)($$2.entries.getOrDefault((java.lang.Object)$$0, 0) * $$1.weight))).count();
     }
 
-    public void add(java.util.UUID identifier, net.minecraft.world.entity.ai.gossip.GossipType gossipType, int gossipValue) {
-        net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips entityGossips = this.getOrCreate(identifier);
-        entityGossips.entries.mergeInt((java.lang.Object)gossipType, gossipValue, ($$1, $$2) -> this.mergeValuesForAddition(gossipType, $$1, $$2));
-        entityGossips.makeSureValueIsntTooLowOrTooHigh(gossipType);
-        if (entityGossips.isEmpty()) {
-            this.gossips.remove((java.lang.Object)identifier);
+    public void add(java.util.UUID $$0, net.minecraft.world.entity.ai.gossip.GossipType $$12, int $$22) {
+        net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips $$3 = this.getOrCreate($$0);
+        $$3.entries.mergeInt((java.lang.Object)$$12, $$22, ($$1, $$2) -> this.mergeValuesForAddition($$12, $$1, $$2));
+        $$3.makeSureValueIsntTooLowOrTooHigh($$12);
+        if ($$3.isEmpty()) {
+            this.gossips.remove((java.lang.Object)$$0);
         }
     }
 
@@ -109,21 +109,21 @@
         }
     }
 
-    public <T> com.mojang.serialization.Dynamic<T> store(com.mojang.serialization.DynamicOps<T> dynamic) {
-        return new com.mojang.serialization.Dynamic(dynamic, dynamic.createList(this.unpack().map($$1 -> $$1.store(dynamic)).map(com.mojang.serialization.Dynamic::getValue)));
+    public <T> com.mojang.serialization.Dynamic<T> store(com.mojang.serialization.DynamicOps<T> $$0) {
+        return new com.mojang.serialization.Dynamic($$0, $$0.createList(this.unpack().map($$1 -> $$1.store($$0)).map(com.mojang.serialization.Dynamic::getValue)));
     }
 
-    public void update(com.mojang.serialization.Dynamic<?> dynamic) {
-        dynamic.asStream().map(net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry::load).flatMap($$0 -> $$0.result().stream()).forEach($$0 -> this.getOrCreate((java.util.UUID)$$0.target).entries.put((java.lang.Object)$$0.type, $$0.value));
+    public void update(com.mojang.serialization.Dynamic<?> $$02) {
+        $$02.asStream().map(net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry::load).flatMap($$0 -> $$0.result().stream()).forEach($$0 -> this.getOrCreate((java.util.UUID)$$0.target).entries.put((java.lang.Object)$$0.type, $$0.value));
     }
 
-    public static int mergeValuesForTransfer(int value1, int value2) {
-        return java.lang.Math.max((int)value1, (int)value2);
+    public static int mergeValuesForTransfer(int $$0, int $$1) {
+        return java.lang.Math.max((int)$$0, (int)$$1);
     }
 
-    public int mergeValuesForAddition(net.minecraft.world.entity.ai.gossip.GossipType gossipType, int existing, int additive) {
-        int n = existing + additive;
-        return n > gossipType.max ? java.lang.Math.max((int)gossipType.max, (int)existing) : n;
+    public int mergeValuesForAddition(net.minecraft.world.entity.ai.gossip.GossipType $$0, int $$1, int $$2) {
+        int $$3 = $$1 + $$2;
+        return $$3 > $$0.max ? java.lang.Math.max((int)$$0.max, (int)$$1) : $$3;
     }
 
     public /* synthetic */ void lambda$getGossipEntries$0(java.util.Map $$0, java.util.UUID $$1) {