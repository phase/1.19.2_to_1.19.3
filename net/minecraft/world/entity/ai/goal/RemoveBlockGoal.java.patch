--- net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
+++ net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
@@ -50,10 +50,10 @@
         this.ticksSinceReachedGoal = 0;
     }
 
-    public void playDestroyProgressSound(net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos) {
+    public void playDestroyProgressSound(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1) {
     }
 
-    public void playBreakSound(net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos) {
+    public void playBreakSound(net.minecraft.world.level.Level $$0, net.minecraft.core.BlockPos $$1) {
     }
 
     public void tick() {
@@ -95,22 +95,22 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.core.BlockPos getPosWithBlock(net.minecraft.core.BlockPos pos, net.minecraft.world.level.BlockGetter level) {
-        net.minecraft.core.BlockPos[] blockPosArray;
-        if (level.getBlockState(pos).is(this.blockToRemove)) {
-            return pos;
+    public net.minecraft.core.BlockPos getPosWithBlock(net.minecraft.core.BlockPos $$0, net.minecraft.world.level.BlockGetter $$1) {
+        net.minecraft.core.BlockPos[] $$2;
+        if ($$1.getBlockState($$0).is(this.blockToRemove)) {
+            return $$0;
         }
-        for (net.minecraft.core.BlockPos blockPos : blockPosArray = new net.minecraft.core.BlockPos[]{pos.below(), pos.west(), pos.east(), pos.north(), pos.south(), pos.below().below()}) {
-            if (!level.getBlockState(blockPos).is(this.blockToRemove)) continue;
-            return blockPos;
+        for (net.minecraft.core.BlockPos $$3 : $$2 = new net.minecraft.core.BlockPos[]{$$0.below(), $$0.west(), $$0.east(), $$0.north(), $$0.south(), $$0.below().below()}) {
+            if (!$$1.getBlockState($$3).is(this.blockToRemove)) continue;
+            return $$3;
         }
         return null;
     }
 
-    public boolean isValidTarget(net.minecraft.world.level.LevelReader level, net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.chunk.ChunkAccess chunkAccess = level.getChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)pos.getX()), net.minecraft.core.SectionPos.blockToSectionCoord((int)pos.getZ()), net.minecraft.world.level.chunk.ChunkStatus.FULL, false);
-        if (chunkAccess != null) {
-            return chunkAccess.getBlockState(pos).is(this.blockToRemove) && chunkAccess.getBlockState(pos.above()).isAir() && chunkAccess.getBlockState(pos.above(2)).isAir();
+    public boolean isValidTarget(net.minecraft.world.level.LevelReader $$0, net.minecraft.core.BlockPos $$1) {
+        net.minecraft.world.level.chunk.ChunkAccess $$2 = $$0.getChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)$$1.getX()), net.minecraft.core.SectionPos.blockToSectionCoord((int)$$1.getZ()), net.minecraft.world.level.chunk.ChunkStatus.FULL, false);
+        if ($$2 != null) {
+            return $$2.getBlockState($$1).is(this.blockToRemove) && $$2.getBlockState($$1.above()).isAir() && $$2.getBlockState($$1.above(2)).isAir();
         }
         return false;
     }