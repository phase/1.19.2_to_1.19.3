--- net/minecraft/world/entity/ambient/Bat.java
+++ net/minecraft/world/entity/ambient/Bat.java
@@ -44,7 +44,7 @@
         return net.minecraft.sounds.SoundEvents.BAT_AMBIENT;
     }
 
-    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource damageSource) {
+    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource $$0) {
         return net.minecraft.sounds.SoundEvents.BAT_HURT;
     }
 
@@ -56,7 +56,7 @@
         return false;
     }
 
-    public void doPush(net.minecraft.world.entity.Entity entity) {
+    public void doPush(net.minecraft.world.entity.Entity $$0) {
     }
 
     public void pushEntities() {
@@ -70,12 +70,12 @@
         return ((java.lang.Byte)this.entityData.get(DATA_ID_FLAGS) & 1) != 0;
     }
 
-    public void setResting(boolean isResting) {
-        byte by = (java.lang.Byte)this.entityData.get(DATA_ID_FLAGS);
-        if (isResting) {
-            this.entityData.set(DATA_ID_FLAGS, (java.lang.Object)((byte)(by | 1)));
+    public void setResting(boolean $$0) {
+        byte $$1 = (java.lang.Byte)this.entityData.get(DATA_ID_FLAGS);
+        if ($$0) {
+            this.entityData.set(DATA_ID_FLAGS, (java.lang.Object)((byte)($$1 | 1)));
         } else {
-            this.entityData.set(DATA_ID_FLAGS, (java.lang.Object)((byte)(by & 0xFFFFFFFE)));
+            this.entityData.set(DATA_ID_FLAGS, (java.lang.Object)((byte)($$1 & 0xFFFFFFFE)));
         }
     }
 
@@ -142,31 +142,31 @@
         return false;
     }
 
-    public void checkFallDamage(double y, boolean onGround, net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.BlockPos pos) {
+    public void checkFallDamage(double $$0, boolean $$1, net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.core.BlockPos $$3) {
     }
 
     public boolean isIgnoringBlockTriggers() {
         return true;
     }
 
-    public boolean hurt(net.minecraft.world.damagesource.DamageSource source, float amount) {
-        if (this.isInvulnerableTo(source)) {
+    public boolean hurt(net.minecraft.world.damagesource.DamageSource $$0, float $$1) {
+        if (this.isInvulnerableTo($$0)) {
             return false;
         }
         if (!this.level.isClientSide && this.isResting()) {
             this.setResting(false);
         }
-        return super.hurt(source, amount);
+        return super.hurt($$0, $$1);
     }
 
-    public void readAdditionalSaveData(net.minecraft.nbt.CompoundTag compound) {
-        super.readAdditionalSaveData(compound);
-        this.entityData.set(DATA_ID_FLAGS, (java.lang.Object)compound.getByte("BatFlags"));
+    public void readAdditionalSaveData(net.minecraft.nbt.CompoundTag $$0) {
+        super.readAdditionalSaveData($$0);
+        this.entityData.set(DATA_ID_FLAGS, (java.lang.Object)$$0.getByte("BatFlags"));
     }
 
-    public void addAdditionalSaveData(net.minecraft.nbt.CompoundTag compound) {
-        super.addAdditionalSaveData(compound);
-        compound.putByte("BatFlags", ((java.lang.Byte)this.entityData.get(DATA_ID_FLAGS)).byteValue());
+    public void addAdditionalSaveData(net.minecraft.nbt.CompoundTag $$0) {
+        super.addAdditionalSaveData($$0);
+        $$0.putByte("BatFlags", ((java.lang.Byte)this.entityData.get(DATA_ID_FLAGS)).byteValue());
     }
 
     public static boolean checkBatSpawnRules(net.minecraft.world.entity.EntityType<net.minecraft.world.entity.ambient.Bat> $$0, net.minecraft.world.level.LevelAccessor $$1, net.minecraft.world.entity.MobSpawnType $$2, net.minecraft.core.BlockPos $$3, net.minecraft.util.RandomSource $$4) {
@@ -193,8 +193,8 @@
         return $$2 == 10 && $$1 >= 20 || $$2 == 11 && $$1 <= 3;
     }
 
-    public float getStandingEyeHeight(net.minecraft.world.entity.Pose pose, net.minecraft.world.entity.EntityDimensions size) {
-        return size.height / 2.0f;
+    public float getStandingEyeHeight(net.minecraft.world.entity.Pose $$0, net.minecraft.world.entity.EntityDimensions $$1) {
+        return $$1.height / 2.0f;
     }
 
     static {