--- net/minecraft/world/entity/schedule/Schedule.java
+++ net/minecraft/world/entity/schedule/Schedule.java
@@ -17,27 +17,27 @@
         this.timelines = com.google.common.collect.Maps.newHashMap();
     }
 
-    public static net.minecraft.world.entity.schedule.ScheduleBuilder register(java.lang.String key) {
-        net.minecraft.world.entity.schedule.Schedule schedule = (net.minecraft.world.entity.schedule.Schedule)net.minecraft.core.Registry.register((net.minecraft.core.Registry)net.minecraft.core.Registry.SCHEDULE, (java.lang.String)key, (java.lang.Object)new net.minecraft.world.entity.schedule.Schedule());
-        return new net.minecraft.world.entity.schedule.ScheduleBuilder(schedule);
+    public static net.minecraft.world.entity.schedule.ScheduleBuilder register(java.lang.String $$0) {
+        net.minecraft.world.entity.schedule.Schedule $$1 = (net.minecraft.world.entity.schedule.Schedule)net.minecraft.core.Registry.register((net.minecraft.core.Registry)net.minecraft.core.Registry.SCHEDULE, (java.lang.String)$$0, (java.lang.Object)new net.minecraft.world.entity.schedule.Schedule());
+        return new net.minecraft.world.entity.schedule.ScheduleBuilder($$1);
     }
 
-    public void ensureTimelineExistsFor(net.minecraft.world.entity.schedule.Activity activity) {
-        if (!this.timelines.containsKey((java.lang.Object)activity)) {
-            this.timelines.put((java.lang.Object)activity, (java.lang.Object)new net.minecraft.world.entity.schedule.Timeline());
+    public void ensureTimelineExistsFor(net.minecraft.world.entity.schedule.Activity $$0) {
+        if (!this.timelines.containsKey((java.lang.Object)$$0)) {
+            this.timelines.put((java.lang.Object)$$0, (java.lang.Object)new net.minecraft.world.entity.schedule.Timeline());
         }
     }
 
-    public net.minecraft.world.entity.schedule.Timeline getTimelineFor(net.minecraft.world.entity.schedule.Activity activity) {
-        return (net.minecraft.world.entity.schedule.Timeline)this.timelines.get((java.lang.Object)activity);
+    public net.minecraft.world.entity.schedule.Timeline getTimelineFor(net.minecraft.world.entity.schedule.Activity $$0) {
+        return (net.minecraft.world.entity.schedule.Timeline)this.timelines.get((java.lang.Object)$$0);
     }
 
-    public java.util.List<net.minecraft.world.entity.schedule.Timeline> getAllTimelinesExceptFor(net.minecraft.world.entity.schedule.Activity activity) {
-        return (java.util.List)this.timelines.entrySet().stream().filter(entry -> entry.getKey() != activity).map(java.util.Map$Entry::getValue).collect(java.util.stream.Collectors.toList());
+    public java.util.List<net.minecraft.world.entity.schedule.Timeline> getAllTimelinesExceptFor(net.minecraft.world.entity.schedule.Activity $$0) {
+        return (java.util.List)this.timelines.entrySet().stream().filter($$1 -> $$1.getKey() != $$0).map(java.util.Map$Entry::getValue).collect(java.util.stream.Collectors.toList());
     }
 
-    public net.minecraft.world.entity.schedule.Activity getActivityAt(int dayTime) {
-        return (net.minecraft.world.entity.schedule.Activity)this.timelines.entrySet().stream().max(java.util.Comparator.comparingDouble(entry -> ((net.minecraft.world.entity.schedule.Timeline)entry.getValue()).getValueAt(dayTime))).map(java.util.Map$Entry::getKey).orElse((java.lang.Object)net.minecraft.world.entity.schedule.Activity.IDLE);
+    public net.minecraft.world.entity.schedule.Activity getActivityAt(int $$0) {
+        return (net.minecraft.world.entity.schedule.Activity)this.timelines.entrySet().stream().max(java.util.Comparator.comparingDouble($$1 -> ((net.minecraft.world.entity.schedule.Timeline)$$1.getValue()).getValueAt($$0))).map(java.util.Map$Entry::getKey).orElse((java.lang.Object)net.minecraft.world.entity.schedule.Activity.IDLE);
     }
 
     static {