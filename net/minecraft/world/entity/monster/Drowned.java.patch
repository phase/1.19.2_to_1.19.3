--- net/minecraft/world/entity/monster/Drowned.java
+++ net/minecraft/world/entity/monster/Drowned.java
@@ -36,13 +36,13 @@
         this.targetSelector.addGoal(5, (net.minecraft.world.entity.ai.goal.Goal)new net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal((net.minecraft.world.entity.Mob)this, net.minecraft.world.entity.animal.Turtle.class, 10, true, false, net.minecraft.world.entity.animal.Turtle.BABY_ON_LAND_SELECTOR));
     }
 
-    public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor level, net.minecraft.world.DifficultyInstance difficulty, net.minecraft.world.entity.MobSpawnType reason, @javax.annotation.Nullable net.minecraft.world.entity.SpawnGroupData spawnData, @javax.annotation.Nullable net.minecraft.nbt.CompoundTag dataTag) {
-        spawnData = super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
-        if (this.getItemBySlot(net.minecraft.world.entity.EquipmentSlot.OFFHAND).isEmpty() && level.getRandom().nextFloat() < 0.03f) {
+    public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor $$0, net.minecraft.world.DifficultyInstance $$1, net.minecraft.world.entity.MobSpawnType $$2, @javax.annotation.Nullable net.minecraft.world.entity.SpawnGroupData $$3, @javax.annotation.Nullable net.minecraft.nbt.CompoundTag $$4) {
+        $$3 = super.finalizeSpawn($$0, $$1, $$2, $$3, $$4);
+        if (this.getItemBySlot(net.minecraft.world.entity.EquipmentSlot.OFFHAND).isEmpty() && $$0.getRandom().nextFloat() < 0.03f) {
             this.setItemSlot(net.minecraft.world.entity.EquipmentSlot.OFFHAND, new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.NAUTILUS_SHELL));
             this.setGuaranteedDrop(net.minecraft.world.entity.EquipmentSlot.OFFHAND);
         }
-        return spawnData;
+        return $$3;
     }
 
     public static boolean checkDrownedSpawnRules(net.minecraft.world.entity.EntityType<net.minecraft.world.entity.monster.Drowned> $$0, net.minecraft.world.level.ServerLevelAccessor $$1, net.minecraft.world.entity.MobSpawnType $$2, net.minecraft.core.BlockPos $$3, net.minecraft.util.RandomSource $$4) {
@@ -58,8 +58,8 @@
         return $$4.nextInt(40) == 0 && net.minecraft.world.entity.monster.Drowned.isDeepEnoughToSpawn((net.minecraft.world.level.LevelAccessor)$$1, (net.minecraft.core.BlockPos)$$3) && $$6;
     }
 
-    public static boolean isDeepEnoughToSpawn(net.minecraft.world.level.LevelAccessor level, net.minecraft.core.BlockPos pos) {
-        return pos.getY() < level.getSeaLevel() - 5;
+    public static boolean isDeepEnoughToSpawn(net.minecraft.world.level.LevelAccessor $$0, net.minecraft.core.BlockPos $$1) {
+        return $$1.getY() < $$0.getSeaLevel() - 5;
     }
 
     public boolean supportsBreakDoorGoal() {
@@ -73,7 +73,7 @@
         return net.minecraft.sounds.SoundEvents.DROWNED_AMBIENT;
     }
 
-    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource damageSource) {
+    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource $$0) {
         if (this.isInWater()) {
             return net.minecraft.sounds.SoundEvents.DROWNED_HURT_WATER;
         }
@@ -110,33 +110,33 @@
         }
     }
 
-    public boolean canReplaceCurrentItem(net.minecraft.world.item.ItemStack candidate, net.minecraft.world.item.ItemStack existing) {
-        if (existing.is(net.minecraft.world.item.Items.NAUTILUS_SHELL)) {
+    public boolean canReplaceCurrentItem(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1) {
+        if ($$1.is(net.minecraft.world.item.Items.NAUTILUS_SHELL)) {
             return false;
         }
-        if (existing.is(net.minecraft.world.item.Items.TRIDENT)) {
-            if (candidate.is(net.minecraft.world.item.Items.TRIDENT)) {
-                return candidate.getDamageValue() < existing.getDamageValue();
+        if ($$1.is(net.minecraft.world.item.Items.TRIDENT)) {
+            if ($$0.is(net.minecraft.world.item.Items.TRIDENT)) {
+                return $$0.getDamageValue() < $$1.getDamageValue();
             }
             return false;
         }
-        if (candidate.is(net.minecraft.world.item.Items.TRIDENT)) {
+        if ($$0.is(net.minecraft.world.item.Items.TRIDENT)) {
             return true;
         }
-        return super.canReplaceCurrentItem(candidate, existing);
+        return super.canReplaceCurrentItem($$0, $$1);
     }
 
     public boolean convertsInWater() {
         return false;
     }
 
-    public boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader level) {
-        return level.isUnobstructed((net.minecraft.world.entity.Entity)this);
+    public boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader $$0) {
+        return $$0.isUnobstructed((net.minecraft.world.entity.Entity)this);
     }
 
-    public boolean okTarget(@javax.annotation.Nullable net.minecraft.world.entity.LivingEntity target) {
-        if (target != null) {
-            return !this.level.isDay() || target.isInWater();
+    public boolean okTarget(@javax.annotation.Nullable net.minecraft.world.entity.LivingEntity $$0) {
+        if ($$0 != null) {
+            return !this.level.isDay() || $$0.isInWater();
         }
         return false;
     }
@@ -153,13 +153,13 @@
         return $$0 != null && $$0.isInWater();
     }
 
-    public void travel(net.minecraft.world.phys.Vec3 travelVector) {
+    public void travel(net.minecraft.world.phys.Vec3 $$0) {
         if (this.isEffectiveAi() && this.isInWater() && this.wantsToSwim()) {
-            this.moveRelative(0.01f, travelVector);
+            this.moveRelative(0.01f, $$0);
             this.move(net.minecraft.world.entity.MoverType.SELF, this.getDeltaMovement());
             this.setDeltaMovement(this.getDeltaMovement().scale(0.9));
         } else {
-            super.travel(travelVector);
+            super.travel($$0);
         }
     }
 
@@ -182,19 +182,19 @@
         return $$0 != null && ($$1 = $$0.getTarget()) != null && ($$2 = this.distanceToSqr((double)$$1.getX(), (double)$$1.getY(), (double)$$1.getZ())) < 4.0;
     }
 
-    public void performRangedAttack(net.minecraft.world.entity.LivingEntity target, float distanceFactor) {
-        net.minecraft.world.entity.projectile.ThrownTrident thrownTrident = new net.minecraft.world.entity.projectile.ThrownTrident(this.level, (net.minecraft.world.entity.LivingEntity)this, new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.TRIDENT));
-        double d = target.getX() - this.getX();
-        double d2 = target.getY(0.3333333333333333) - thrownTrident.getY();
-        double d3 = target.getZ() - this.getZ();
-        double d4 = java.lang.Math.sqrt((double)(d * d + d3 * d3));
-        thrownTrident.shoot(d, d2 + d4 * (double)0.2f, d3, 1.6f, (float)(14 - this.level.getDifficulty().getId() * 4));
+    public void performRangedAttack(net.minecraft.world.entity.LivingEntity $$0, float $$1) {
+        net.minecraft.world.entity.projectile.ThrownTrident $$2 = new net.minecraft.world.entity.projectile.ThrownTrident(this.level, (net.minecraft.world.entity.LivingEntity)this, new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.TRIDENT));
+        double $$3 = $$0.getX() - this.getX();
+        double $$4 = $$0.getY(0.3333333333333333) - $$2.getY();
+        double $$5 = $$0.getZ() - this.getZ();
+        double $$6 = java.lang.Math.sqrt((double)($$3 * $$3 + $$5 * $$5));
+        $$2.shoot($$3, $$4 + $$6 * (double)0.2f, $$5, 1.6f, (float)(14 - this.level.getDifficulty().getId() * 4));
         this.playSound(net.minecraft.sounds.SoundEvents.DROWNED_SHOOT, 1.0f, 1.0f / (this.getRandom().nextFloat() * 0.4f + 0.8f));
-        this.level.addFreshEntity((net.minecraft.world.entity.Entity)thrownTrident);
+        this.level.addFreshEntity((net.minecraft.world.entity.Entity)$$2);
     }
 
-    public void setSearchingForLand(boolean searchingForLand) {
-        this.searchingForLand = searchingForLand;
+    public void setSearchingForLand(boolean $$0) {
+        this.searchingForLand = $$0;
     }
 
     public static /* synthetic */ net.minecraft.world.entity.ai.navigation.PathNavigation access$002(net.minecraft.world.entity.monster.Drowned $$0, net.minecraft.world.entity.ai.navigation.PathNavigation $$1) {