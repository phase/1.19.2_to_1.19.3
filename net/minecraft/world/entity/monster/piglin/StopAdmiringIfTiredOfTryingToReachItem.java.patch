--- net/minecraft/world/entity/monster/piglin/StopAdmiringIfTiredOfTryingToReachItem.java
+++ net/minecraft/world/entity/monster/piglin/StopAdmiringIfTiredOfTryingToReachItem.java
@@ -9,29 +9,29 @@
     public int maxTimeToReachItem;
     public int disableTime;
 
-    public net.minecraft.world.entity.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem(int maxTimeToReachItem, int disableTime) {
+    public net.minecraft.world.entity.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem(int $$0, int $$1) {
         super((java.util.Map)com.google.common.collect.ImmutableMap.of((java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryStatus.VALUE_PRESENT, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryStatus.VALUE_PRESENT, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryStatus.REGISTERED, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, (java.lang.Object)net.minecraft.world.entity.ai.memory.MemoryStatus.REGISTERED));
-        this.maxTimeToReachItem = maxTimeToReachItem;
-        this.disableTime = disableTime;
+        this.maxTimeToReachItem = $$0;
+        this.disableTime = $$1;
     }
 
-    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel level, E owner) {
-        return owner.getOffhandItem().isEmpty();
+    public boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel $$0, E $$1) {
+        return $$1.getOffhandItem().isEmpty();
     }
 
-    public void start(net.minecraft.server.level.ServerLevel level, E entity, long gameTime) {
-        net.minecraft.world.entity.ai.Brain brain = entity.getBrain();
-        java.util.Optional optional = brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
-        if (!optional.isPresent()) {
-            brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, (java.lang.Object)0);
+    public void start(net.minecraft.server.level.ServerLevel $$0, E $$1, long $$2) {
+        net.minecraft.world.entity.ai.Brain $$3 = $$1.getBrain();
+        java.util.Optional $$4 = $$3.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
+        if (!$$4.isPresent()) {
+            $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, (java.lang.Object)0);
         } else {
-            int n = (java.lang.Integer)optional.get();
-            if (n > this.maxTimeToReachItem) {
-                brain.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM);
-                brain.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
-                brain.setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, (java.lang.Object)true, (long)this.disableTime);
+            int $$5 = (java.lang.Integer)$$4.get();
+            if ($$5 > this.maxTimeToReachItem) {
+                $$3.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM);
+                $$3.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
+                $$3.setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, (java.lang.Object)true, (long)this.disableTime);
             } else {
-                brain.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, (java.lang.Object)(n + 1));
+                $$3.setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, (java.lang.Object)($$5 + 1));
             }
         }
     }