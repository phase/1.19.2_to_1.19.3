--- net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -45,18 +45,18 @@
     public net.minecraft.world.entity.monster.piglin.PiglinAi() {
     }
 
-    public static net.minecraft.world.entity.ai.Brain<?> makeBrain(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> brain) {
-        net.minecraft.world.entity.monster.piglin.PiglinAi.initCoreActivity(brain);
-        net.minecraft.world.entity.monster.piglin.PiglinAi.initIdleActivity(brain);
-        net.minecraft.world.entity.monster.piglin.PiglinAi.initAdmireItemActivity(brain);
-        net.minecraft.world.entity.monster.piglin.PiglinAi.initFightActivity((net.minecraft.world.entity.monster.piglin.Piglin)piglin, brain);
-        net.minecraft.world.entity.monster.piglin.PiglinAi.initCelebrateActivity(brain);
-        net.minecraft.world.entity.monster.piglin.PiglinAi.initRetreatActivity(brain);
-        net.minecraft.world.entity.monster.piglin.PiglinAi.initRideHoglinActivity(brain);
-        brain.setCoreActivities((java.util.Set)com.google.common.collect.ImmutableSet.of((java.lang.Object)net.minecraft.world.entity.schedule.Activity.CORE));
-        brain.setDefaultActivity(net.minecraft.world.entity.schedule.Activity.IDLE);
-        brain.useDefaultActivity();
-        return brain;
+    public static net.minecraft.world.entity.ai.Brain<?> makeBrain(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> $$1) {
+        net.minecraft.world.entity.monster.piglin.PiglinAi.initCoreActivity($$1);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.initIdleActivity($$1);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.initAdmireItemActivity($$1);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.initFightActivity((net.minecraft.world.entity.monster.piglin.Piglin)$$0, $$1);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.initCelebrateActivity($$1);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.initRetreatActivity($$1);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.initRideHoglinActivity($$1);
+        $$1.setCoreActivities((java.util.Set)com.google.common.collect.ImmutableSet.of((java.lang.Object)net.minecraft.world.entity.schedule.Activity.CORE));
+        $$1.setDefaultActivity(net.minecraft.world.entity.schedule.Activity.IDLE);
+        $$1.useDefaultActivity();
+        return $$1;
     }
 
     public static void initMemories(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.util.RandomSource $$1) {
@@ -64,32 +64,32 @@
         $$0.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.HUNTED_RECENTLY, (java.lang.Object)true, (long)$$2);
     }
 
-    public static void initCoreActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> brain) {
-        brain.addActivity(net.minecraft.world.entity.schedule.Activity.CORE, 0, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.LookAtTargetSink(45, 90), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.MoveToTargetSink(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.InteractWithDoor(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.babyAvoidNemesis(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.avoidZombified(), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.StopHoldingItemIfNoLongerAdmiring(), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.StartAdmiringItemIfSeen(120), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.StartCelebratingIfTargetDead(300, net.minecraft.world.entity.monster.piglin.PiglinAi::wantsToDance), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.StopBeingAngryIfTargetDead()));
+    public static void initCoreActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> $$0) {
+        $$0.addActivity(net.minecraft.world.entity.schedule.Activity.CORE, 0, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.LookAtTargetSink(45, 90), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.MoveToTargetSink(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.InteractWithDoor(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.babyAvoidNemesis(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.avoidZombified(), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.StopHoldingItemIfNoLongerAdmiring(), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.StartAdmiringItemIfSeen(120), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.StartCelebratingIfTargetDead(300, net.minecraft.world.entity.monster.piglin.PiglinAi::wantsToDance), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.StopBeingAngryIfTargetDead()));
     }
 
-    public static void initIdleActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> brain) {
-        brain.addActivity(net.minecraft.world.entity.schedule.Activity.IDLE, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetEntityLookTarget(net.minecraft.world.entity.monster.piglin.PiglinAi::isPlayerHoldingLovedItem, 14.0f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.StartAttacking(net.minecraft.world.entity.monster.piglin.AbstractPiglin::isAdult, net.minecraft.world.entity.monster.piglin.PiglinAi::findNearestValidAttackTarget), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(net.minecraft.world.entity.monster.piglin.Piglin::canHunt, (net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.monster.piglin.StartHuntingHoglin()), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.avoidRepellent(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.babySometimesRideBabyHoglin(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleLookBehaviors(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleMovementBehaviors(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetLookAndInteract(net.minecraft.world.entity.EntityType.PLAYER, 4)));
+    public static void initIdleActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> $$0) {
+        $$0.addActivity(net.minecraft.world.entity.schedule.Activity.IDLE, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetEntityLookTarget(net.minecraft.world.entity.monster.piglin.PiglinAi::isPlayerHoldingLovedItem, 14.0f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.StartAttacking(net.minecraft.world.entity.monster.piglin.AbstractPiglin::isAdult, net.minecraft.world.entity.monster.piglin.PiglinAi::findNearestValidAttackTarget), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(net.minecraft.world.entity.monster.piglin.Piglin::canHunt, (net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.monster.piglin.StartHuntingHoglin()), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.avoidRepellent(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.babySometimesRideBabyHoglin(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleLookBehaviors(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleMovementBehaviors(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetLookAndInteract(net.minecraft.world.entity.EntityType.PLAYER, 4)));
     }
 
-    public static void initFightActivity(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.FIGHT, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid(entity -> !net.minecraft.world.entity.monster.piglin.PiglinAi.isNearestValidAttackTarget((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.entity.LivingEntity)entity)), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(net.minecraft.world.entity.monster.piglin.PiglinAi::hasCrossbow, (net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.ai.behavior.BackUpIfTooClose(5, 0.75f)), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.MeleeAttack(20), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.CrossbowAttack(), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.RememberIfHoglinWasKilled(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EraseMemoryIf(net.minecraft.world.entity.monster.piglin.PiglinAi::isNearZombified, net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET)), net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET);
+    public static void initFightActivity(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> $$12) {
+        $$12.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.FIGHT, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid($$1 -> !net.minecraft.world.entity.monster.piglin.PiglinAi.isNearestValidAttackTarget((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1)), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(net.minecraft.world.entity.monster.piglin.PiglinAi::hasCrossbow, (net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.ai.behavior.BackUpIfTooClose(5, 0.75f)), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach(1.0f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.MeleeAttack(20), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.CrossbowAttack(), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.RememberIfHoglinWasKilled(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EraseMemoryIf(net.minecraft.world.entity.monster.piglin.PiglinAi::isNearZombified, net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET)), net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET);
     }
 
-    public static void initCelebrateActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.CELEBRATE, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.avoidRepellent(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetEntityLookTarget(net.minecraft.world.entity.monster.piglin.PiglinAi::isPlayerHoldingLovedItem, 14.0f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.StartAttacking(net.minecraft.world.entity.monster.piglin.AbstractPiglin::isAdult, net.minecraft.world.entity.monster.piglin.PiglinAi::findNearestValidAttackTarget), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(piglin -> !piglin.isDancing(), (net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.ai.behavior.GoToTargetLocation(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION, 2, 1.0f)), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(net.minecraft.world.entity.monster.piglin.Piglin::isDancing, (net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.ai.behavior.GoToTargetLocation(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION, 4, 0.6f)), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunOne((java.util.List)com.google.common.collect.ImmutableList.of((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetEntityLookTarget(net.minecraft.world.entity.EntityType.PIGLIN, 8.0f), (java.lang.Object)1), (java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.RandomStroll(0.6f, 2, 1), (java.lang.Object)1), (java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.DoNothing(10, 20), (java.lang.Object)1)))), net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION);
+    public static void initCelebrateActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> $$02) {
+        $$02.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.CELEBRATE, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.avoidRepellent(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetEntityLookTarget(net.minecraft.world.entity.monster.piglin.PiglinAi::isPlayerHoldingLovedItem, 14.0f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.StartAttacking(net.minecraft.world.entity.monster.piglin.AbstractPiglin::isAdult, net.minecraft.world.entity.monster.piglin.PiglinAi::findNearestValidAttackTarget), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf($$0 -> !$$0.isDancing(), (net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.ai.behavior.GoToTargetLocation(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION, 2, 1.0f)), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(net.minecraft.world.entity.monster.piglin.Piglin::isDancing, (net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.ai.behavior.GoToTargetLocation(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION, 4, 0.6f)), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunOne((java.util.List)com.google.common.collect.ImmutableList.of((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetEntityLookTarget(net.minecraft.world.entity.EntityType.PIGLIN, 8.0f), (java.lang.Object)1), (java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.RandomStroll(0.6f, 2, 1), (java.lang.Object)1), (java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.DoNothing(10, 20), (java.lang.Object)1)))), net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION);
     }
 
-    public static void initAdmireItemActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.ADMIRE_ITEM, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.GoToWantedItem(net.minecraft.world.entity.monster.piglin.PiglinAi::isNotHoldingLovedItemInOffHand, 1.0f, true, 9), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.StopAdmiringIfItemTooFarAway(9), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem(200, 200)), net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM);
+    public static void initAdmireItemActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> $$0) {
+        $$0.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.ADMIRE_ITEM, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.GoToWantedItem(net.minecraft.world.entity.monster.piglin.PiglinAi::isNotHoldingLovedItemInOffHand, 1.0f, true, 9), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.StopAdmiringIfItemTooFarAway(9), (java.lang.Object)new net.minecraft.world.entity.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem(200, 200)), net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM);
     }
 
-    public static void initRetreatActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.AVOID, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)net.minecraft.world.entity.ai.behavior.SetWalkTargetAwayFrom.entity((net.minecraft.world.entity.ai.memory.MemoryModuleType)net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET, (float)1.0f, (int)12, (boolean)true), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleLookBehaviors(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleMovementBehaviors(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EraseMemoryIf(net.minecraft.world.entity.monster.piglin.PiglinAi::wantsToStopFleeing, net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET)), net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET);
+    public static void initRetreatActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> $$0) {
+        $$0.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.AVOID, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)net.minecraft.world.entity.ai.behavior.SetWalkTargetAwayFrom.entity((net.minecraft.world.entity.ai.memory.MemoryModuleType)net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET, (float)1.0f, (int)12, (boolean)true), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleLookBehaviors(), (java.lang.Object)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleMovementBehaviors(), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.EraseMemoryIf(net.minecraft.world.entity.monster.piglin.PiglinAi::wantsToStopFleeing, net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET)), net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET);
     }
 
-    public static void initRideHoglinActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> brain) {
-        brain.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.RIDE, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.Mount(0.8f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetEntityLookTarget(net.minecraft.world.entity.monster.piglin.PiglinAi::isPlayerHoldingLovedItem, 8.0f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(net.minecraft.world.entity.Entity::isPassenger, (net.minecraft.world.entity.ai.behavior.Behavior)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleLookBehaviors()), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.DismountOrSkipMounting(8, net.minecraft.world.entity.monster.piglin.PiglinAi::wantsToStopRiding)), net.minecraft.world.entity.ai.memory.MemoryModuleType.RIDE_TARGET);
+    public static void initRideHoglinActivity(net.minecraft.world.entity.ai.Brain<net.minecraft.world.entity.monster.piglin.Piglin> $$0) {
+        $$0.addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity.RIDE, 10, com.google.common.collect.ImmutableList.of((java.lang.Object)new net.minecraft.world.entity.ai.behavior.Mount(0.8f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.SetEntityLookTarget(net.minecraft.world.entity.monster.piglin.PiglinAi::isPlayerHoldingLovedItem, 8.0f), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.RunIf(net.minecraft.world.entity.Entity::isPassenger, (net.minecraft.world.entity.ai.behavior.Behavior)net.minecraft.world.entity.monster.piglin.PiglinAi.createIdleLookBehaviors()), (java.lang.Object)new net.minecraft.world.entity.ai.behavior.DismountOrSkipMounting(8, net.minecraft.world.entity.monster.piglin.PiglinAi::wantsToStopRiding)), net.minecraft.world.entity.ai.memory.MemoryModuleType.RIDE_TARGET);
     }
 
     public static net.minecraft.world.entity.ai.behavior.RunOne<net.minecraft.world.entity.monster.piglin.Piglin> createIdleLookBehaviors() {
@@ -112,525 +112,525 @@
         return new net.minecraft.world.entity.ai.behavior.CopyMemoryWithExpiry(net.minecraft.world.entity.monster.piglin.PiglinAi::isNearZombified, net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET, AVOID_ZOMBIFIED_DURATION);
     }
 
-    public static void updateActivity(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        net.minecraft.world.entity.ai.Brain brain = piglin.getBrain();
-        net.minecraft.world.entity.schedule.Activity activity = (net.minecraft.world.entity.schedule.Activity)brain.getActiveNonCoreActivity().orElse(null);
-        brain.setActiveActivityToFirstValid((java.util.List)com.google.common.collect.ImmutableList.of((java.lang.Object)net.minecraft.world.entity.schedule.Activity.ADMIRE_ITEM, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.FIGHT, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.AVOID, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.CELEBRATE, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.RIDE, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.IDLE));
-        net.minecraft.world.entity.schedule.Activity activity2 = (net.minecraft.world.entity.schedule.Activity)brain.getActiveNonCoreActivity().orElse(null);
-        if (activity != activity2) {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.getSoundForCurrentActivity((net.minecraft.world.entity.monster.piglin.Piglin)piglin).ifPresent(arg_0 -> ((net.minecraft.world.entity.monster.piglin.Piglin)piglin).playSoundEvent(arg_0));
+    public static void updateActivity(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        net.minecraft.world.entity.ai.Brain $$1 = $$0.getBrain();
+        net.minecraft.world.entity.schedule.Activity $$2 = (net.minecraft.world.entity.schedule.Activity)$$1.getActiveNonCoreActivity().orElse(null);
+        $$1.setActiveActivityToFirstValid((java.util.List)com.google.common.collect.ImmutableList.of((java.lang.Object)net.minecraft.world.entity.schedule.Activity.ADMIRE_ITEM, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.FIGHT, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.AVOID, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.CELEBRATE, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.RIDE, (java.lang.Object)net.minecraft.world.entity.schedule.Activity.IDLE));
+        net.minecraft.world.entity.schedule.Activity $$3 = (net.minecraft.world.entity.schedule.Activity)$$1.getActiveNonCoreActivity().orElse(null);
+        if ($$2 != $$3) {
+            net.minecraft.world.entity.monster.piglin.PiglinAi.getSoundForCurrentActivity((net.minecraft.world.entity.monster.piglin.Piglin)$$0).ifPresent(arg_0 -> ((net.minecraft.world.entity.monster.piglin.Piglin)$$0).playSoundEvent(arg_0));
         }
-        piglin.setAggressive(brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET));
-        if (!brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.RIDE_TARGET) && net.minecraft.world.entity.monster.piglin.PiglinAi.isBabyRidingBaby((net.minecraft.world.entity.monster.piglin.Piglin)piglin)) {
-            piglin.stopRiding();
+        $$0.setAggressive($$1.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET));
+        if (!$$1.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.RIDE_TARGET) && net.minecraft.world.entity.monster.piglin.PiglinAi.isBabyRidingBaby((net.minecraft.world.entity.monster.piglin.Piglin)$$0)) {
+            $$0.stopRiding();
         }
-        if (!brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION)) {
-            brain.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.DANCING);
+        if (!$$1.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION)) {
+            $$1.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.DANCING);
         }
-        piglin.setDancing(brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.DANCING));
+        $$0.setDancing($$1.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.DANCING));
     }
 
-    public static boolean isBabyRidingBaby(net.minecraft.world.entity.monster.piglin.Piglin passenger) {
-        if (!passenger.isBaby()) {
+    public static boolean isBabyRidingBaby(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        if (!$$0.isBaby()) {
             return false;
         }
-        net.minecraft.world.entity.Entity entity = passenger.getVehicle();
-        return entity instanceof net.minecraft.world.entity.monster.piglin.Piglin && ((net.minecraft.world.entity.monster.piglin.Piglin)entity).isBaby() || entity instanceof net.minecraft.world.entity.monster.hoglin.Hoglin && ((net.minecraft.world.entity.monster.hoglin.Hoglin)entity).isBaby();
+        net.minecraft.world.entity.Entity $$1 = $$0.getVehicle();
+        return $$1 instanceof net.minecraft.world.entity.monster.piglin.Piglin && ((net.minecraft.world.entity.monster.piglin.Piglin)$$1).isBaby() || $$1 instanceof net.minecraft.world.entity.monster.hoglin.Hoglin && ((net.minecraft.world.entity.monster.hoglin.Hoglin)$$1).isBaby();
     }
 
-    public static void pickUpItem(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.item.ItemEntity itemEntity) {
-        net.minecraft.world.item.ItemStack itemStack;
-        net.minecraft.world.entity.monster.piglin.PiglinAi.stopWalking((net.minecraft.world.entity.monster.piglin.Piglin)piglin);
-        if (itemEntity.getItem().is(net.minecraft.world.item.Items.GOLD_NUGGET)) {
-            piglin.take((net.minecraft.world.entity.Entity)itemEntity, itemEntity.getItem().getCount());
-            itemStack = itemEntity.getItem();
-            itemEntity.discard();
+    public static void pickUpItem(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.item.ItemEntity $$1) {
+        net.minecraft.world.item.ItemStack $$3;
+        net.minecraft.world.entity.monster.piglin.PiglinAi.stopWalking((net.minecraft.world.entity.monster.piglin.Piglin)$$0);
+        if ($$1.getItem().is(net.minecraft.world.item.Items.GOLD_NUGGET)) {
+            $$0.take((net.minecraft.world.entity.Entity)$$1, $$1.getItem().getCount());
+            net.minecraft.world.item.ItemStack $$2 = $$1.getItem();
+            $$1.discard();
         } else {
-            piglin.take((net.minecraft.world.entity.Entity)itemEntity, 1);
-            itemStack = net.minecraft.world.entity.monster.piglin.PiglinAi.removeOneItemFromItemEntity((net.minecraft.world.entity.item.ItemEntity)itemEntity);
+            $$0.take((net.minecraft.world.entity.Entity)$$1, 1);
+            $$3 = net.minecraft.world.entity.monster.piglin.PiglinAi.removeOneItemFromItemEntity((net.minecraft.world.entity.item.ItemEntity)$$1);
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isLovedItem((net.minecraft.world.item.ItemStack)itemStack)) {
-            piglin.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
-            net.minecraft.world.entity.monster.piglin.PiglinAi.holdInOffhand((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.item.ItemStack)itemStack);
-            net.minecraft.world.entity.monster.piglin.PiglinAi.admireGoldItem((net.minecraft.world.entity.LivingEntity)piglin);
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isLovedItem((net.minecraft.world.item.ItemStack)$$3)) {
+            $$0.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.holdInOffhand((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.item.ItemStack)$$3);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.admireGoldItem((net.minecraft.world.entity.LivingEntity)$$0);
             return;
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isFood((net.minecraft.world.item.ItemStack)itemStack) && !net.minecraft.world.entity.monster.piglin.PiglinAi.hasEatenRecently((net.minecraft.world.entity.monster.piglin.Piglin)piglin)) {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.eat((net.minecraft.world.entity.monster.piglin.Piglin)piglin);
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isFood((net.minecraft.world.item.ItemStack)$$3) && !net.minecraft.world.entity.monster.piglin.PiglinAi.hasEatenRecently((net.minecraft.world.entity.monster.piglin.Piglin)$$0)) {
+            net.minecraft.world.entity.monster.piglin.PiglinAi.eat((net.minecraft.world.entity.monster.piglin.Piglin)$$0);
             return;
         }
-        boolean bl = piglin.equipItemIfPossible(itemStack);
-        if (bl) {
+        boolean $$4 = $$0.equipItemIfPossible($$3);
+        if ($$4) {
             return;
         }
-        net.minecraft.world.entity.monster.piglin.PiglinAi.putInInventory((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.item.ItemStack)itemStack);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.putInInventory((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.item.ItemStack)$$3);
     }
 
-    public static void holdInOffhand(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.item.ItemStack stack) {
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isHoldingItemInOffHand((net.minecraft.world.entity.monster.piglin.Piglin)piglin)) {
-            piglin.spawnAtLocation(piglin.getItemInHand(net.minecraft.world.InteractionHand.OFF_HAND));
+    public static void holdInOffhand(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.item.ItemStack $$1) {
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isHoldingItemInOffHand((net.minecraft.world.entity.monster.piglin.Piglin)$$0)) {
+            $$0.spawnAtLocation($$0.getItemInHand(net.minecraft.world.InteractionHand.OFF_HAND));
         }
-        piglin.holdInOffHand(stack);
+        $$0.holdInOffHand($$1);
     }
 
-    public static net.minecraft.world.item.ItemStack removeOneItemFromItemEntity(net.minecraft.world.entity.item.ItemEntity itemEntity) {
-        net.minecraft.world.item.ItemStack itemStack = itemEntity.getItem();
-        net.minecraft.world.item.ItemStack itemStack2 = itemStack.split(1);
-        if (itemStack.isEmpty()) {
-            itemEntity.discard();
+    public static net.minecraft.world.item.ItemStack removeOneItemFromItemEntity(net.minecraft.world.entity.item.ItemEntity $$0) {
+        net.minecraft.world.item.ItemStack $$1 = $$0.getItem();
+        net.minecraft.world.item.ItemStack $$2 = $$1.split(1);
+        if ($$1.isEmpty()) {
+            $$0.discard();
         } else {
-            itemEntity.setItem(itemStack);
+            $$0.setItem($$1);
         }
-        return itemStack2;
+        return $$2;
     }
 
-    public static void stopHoldingOffHandItem(net.minecraft.world.entity.monster.piglin.Piglin piglin, boolean shouldBarter) {
-        net.minecraft.world.item.ItemStack itemStack = piglin.getItemInHand(net.minecraft.world.InteractionHand.OFF_HAND);
-        piglin.setItemInHand(net.minecraft.world.InteractionHand.OFF_HAND, net.minecraft.world.item.ItemStack.EMPTY);
-        if (piglin.isAdult()) {
-            boolean bl;
-            boolean bl2 = net.minecraft.world.entity.monster.piglin.PiglinAi.isBarterCurrency((net.minecraft.world.item.ItemStack)itemStack);
-            if (shouldBarter && bl2) {
-                net.minecraft.world.entity.monster.piglin.PiglinAi.throwItems((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (java.util.List)net.minecraft.world.entity.monster.piglin.PiglinAi.getBarterResponseItems((net.minecraft.world.entity.monster.piglin.Piglin)piglin));
-            } else if (!bl2 && !(bl = piglin.equipItemIfPossible(itemStack))) {
-                net.minecraft.world.entity.monster.piglin.PiglinAi.putInInventory((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.item.ItemStack)itemStack);
+    public static void stopHoldingOffHandItem(net.minecraft.world.entity.monster.piglin.Piglin $$0, boolean $$1) {
+        net.minecraft.world.item.ItemStack $$2 = $$0.getItemInHand(net.minecraft.world.InteractionHand.OFF_HAND);
+        $$0.setItemInHand(net.minecraft.world.InteractionHand.OFF_HAND, net.minecraft.world.item.ItemStack.EMPTY);
+        if ($$0.isAdult()) {
+            boolean $$4;
+            boolean $$3 = net.minecraft.world.entity.monster.piglin.PiglinAi.isBarterCurrency((net.minecraft.world.item.ItemStack)$$2);
+            if ($$1 && $$3) {
+                net.minecraft.world.entity.monster.piglin.PiglinAi.throwItems((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (java.util.List)net.minecraft.world.entity.monster.piglin.PiglinAi.getBarterResponseItems((net.minecraft.world.entity.monster.piglin.Piglin)$$0));
+            } else if (!$$3 && !($$4 = $$0.equipItemIfPossible($$2))) {
+                net.minecraft.world.entity.monster.piglin.PiglinAi.putInInventory((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.item.ItemStack)$$2);
             }
         } else {
-            boolean bl = piglin.equipItemIfPossible(itemStack);
-            if (!bl) {
-                net.minecraft.world.item.ItemStack itemStack2 = piglin.getMainHandItem();
-                if (net.minecraft.world.entity.monster.piglin.PiglinAi.isLovedItem((net.minecraft.world.item.ItemStack)itemStack2)) {
-                    net.minecraft.world.entity.monster.piglin.PiglinAi.putInInventory((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.item.ItemStack)itemStack2);
+            boolean $$5 = $$0.equipItemIfPossible($$2);
+            if (!$$5) {
+                net.minecraft.world.item.ItemStack $$6 = $$0.getMainHandItem();
+                if (net.minecraft.world.entity.monster.piglin.PiglinAi.isLovedItem((net.minecraft.world.item.ItemStack)$$6)) {
+                    net.minecraft.world.entity.monster.piglin.PiglinAi.putInInventory((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.item.ItemStack)$$6);
                 } else {
-                    net.minecraft.world.entity.monster.piglin.PiglinAi.throwItems((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (java.util.List)java.util.Collections.singletonList((java.lang.Object)itemStack2));
+                    net.minecraft.world.entity.monster.piglin.PiglinAi.throwItems((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (java.util.List)java.util.Collections.singletonList((java.lang.Object)$$6));
                 }
-                piglin.holdInMainHand(itemStack);
+                $$0.holdInMainHand($$2);
             }
         }
     }
 
-    public static void cancelAdmiring(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isAdmiringItem((net.minecraft.world.entity.monster.piglin.Piglin)piglin) && !piglin.getOffhandItem().isEmpty()) {
-            piglin.spawnAtLocation(piglin.getOffhandItem());
-            piglin.setItemInHand(net.minecraft.world.InteractionHand.OFF_HAND, net.minecraft.world.item.ItemStack.EMPTY);
+    public static void cancelAdmiring(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isAdmiringItem((net.minecraft.world.entity.monster.piglin.Piglin)$$0) && !$$0.getOffhandItem().isEmpty()) {
+            $$0.spawnAtLocation($$0.getOffhandItem());
+            $$0.setItemInHand(net.minecraft.world.InteractionHand.OFF_HAND, net.minecraft.world.item.ItemStack.EMPTY);
         }
     }
 
-    public static void putInInventory(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.item.ItemStack stack) {
-        net.minecraft.world.item.ItemStack itemStack = piglin.addToInventory(stack);
-        net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardRandomPos((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (java.util.List)java.util.Collections.singletonList((java.lang.Object)itemStack));
+    public static void putInInventory(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.item.ItemStack $$1) {
+        net.minecraft.world.item.ItemStack $$2 = $$0.addToInventory($$1);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardRandomPos((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (java.util.List)java.util.Collections.singletonList((java.lang.Object)$$2));
     }
 
-    public static void throwItems(net.minecraft.world.entity.monster.piglin.Piglin pilgin, java.util.List<net.minecraft.world.item.ItemStack> stacks) {
-        java.util.Optional optional = pilgin.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_PLAYER);
-        if (optional.isPresent()) {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardPlayer((net.minecraft.world.entity.monster.piglin.Piglin)pilgin, (net.minecraft.world.entity.player.Player)((net.minecraft.world.entity.player.Player)optional.get()), stacks);
+    public static void throwItems(net.minecraft.world.entity.monster.piglin.Piglin $$0, java.util.List<net.minecraft.world.item.ItemStack> $$1) {
+        java.util.Optional $$2 = $$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_PLAYER);
+        if ($$2.isPresent()) {
+            net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardPlayer((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.entity.player.Player)((net.minecraft.world.entity.player.Player)$$2.get()), $$1);
         } else {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardRandomPos((net.minecraft.world.entity.monster.piglin.Piglin)pilgin, stacks);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardRandomPos((net.minecraft.world.entity.monster.piglin.Piglin)$$0, $$1);
         }
     }
 
-    public static void throwItemsTowardRandomPos(net.minecraft.world.entity.monster.piglin.Piglin piglin, java.util.List<net.minecraft.world.item.ItemStack> stacks) {
-        net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardPos((net.minecraft.world.entity.monster.piglin.Piglin)piglin, stacks, (net.minecraft.world.phys.Vec3)net.minecraft.world.entity.monster.piglin.PiglinAi.getRandomNearbyPos((net.minecraft.world.entity.monster.piglin.Piglin)piglin));
+    public static void throwItemsTowardRandomPos(net.minecraft.world.entity.monster.piglin.Piglin $$0, java.util.List<net.minecraft.world.item.ItemStack> $$1) {
+        net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardPos((net.minecraft.world.entity.monster.piglin.Piglin)$$0, $$1, (net.minecraft.world.phys.Vec3)net.minecraft.world.entity.monster.piglin.PiglinAi.getRandomNearbyPos((net.minecraft.world.entity.monster.piglin.Piglin)$$0));
     }
 
-    public static void throwItemsTowardPlayer(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.player.Player player, java.util.List<net.minecraft.world.item.ItemStack> stacks) {
-        net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardPos((net.minecraft.world.entity.monster.piglin.Piglin)piglin, stacks, (net.minecraft.world.phys.Vec3)player.position());
+    public static void throwItemsTowardPlayer(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.player.Player $$1, java.util.List<net.minecraft.world.item.ItemStack> $$2) {
+        net.minecraft.world.entity.monster.piglin.PiglinAi.throwItemsTowardPos((net.minecraft.world.entity.monster.piglin.Piglin)$$0, $$2, (net.minecraft.world.phys.Vec3)$$1.position());
     }
 
-    public static void throwItemsTowardPos(net.minecraft.world.entity.monster.piglin.Piglin piglin, java.util.List<net.minecraft.world.item.ItemStack> stacks, net.minecraft.world.phys.Vec3 pos) {
-        if (!stacks.isEmpty()) {
-            piglin.swing(net.minecraft.world.InteractionHand.OFF_HAND);
-            for (net.minecraft.world.item.ItemStack itemStack : stacks) {
-                net.minecraft.world.entity.ai.behavior.BehaviorUtils.throwItem((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.item.ItemStack)itemStack, (net.minecraft.world.phys.Vec3)pos.add(0.0, 1.0, 0.0));
+    public static void throwItemsTowardPos(net.minecraft.world.entity.monster.piglin.Piglin $$0, java.util.List<net.minecraft.world.item.ItemStack> $$1, net.minecraft.world.phys.Vec3 $$2) {
+        if (!$$1.isEmpty()) {
+            $$0.swing(net.minecraft.world.InteractionHand.OFF_HAND);
+            for (net.minecraft.world.item.ItemStack $$3 : $$1) {
+                net.minecraft.world.entity.ai.behavior.BehaviorUtils.throwItem((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.item.ItemStack)$$3, (net.minecraft.world.phys.Vec3)$$2.add(0.0, 1.0, 0.0));
             }
         }
     }
 
-    public static java.util.List<net.minecraft.world.item.ItemStack> getBarterResponseItems(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        net.minecraft.world.level.storage.loot.LootTable lootTable = piglin.level.getServer().getLootTables().get(net.minecraft.world.level.storage.loot.BuiltInLootTables.PIGLIN_BARTERING);
-        it.unimi.dsi.fastutil.objects.ObjectArrayList objectArrayList = lootTable.getRandomItems(new net.minecraft.world.level.storage.loot.LootContext$Builder((net.minecraft.server.level.ServerLevel)piglin.level).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.THIS_ENTITY, (java.lang.Object)piglin).withRandom(piglin.level.random).create(net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.PIGLIN_BARTER));
-        return objectArrayList;
+    public static java.util.List<net.minecraft.world.item.ItemStack> getBarterResponseItems(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        net.minecraft.world.level.storage.loot.LootTable $$1 = $$0.level.getServer().getLootTables().get(net.minecraft.world.level.storage.loot.BuiltInLootTables.PIGLIN_BARTERING);
+        it.unimi.dsi.fastutil.objects.ObjectArrayList $$2 = $$1.getRandomItems(new net.minecraft.world.level.storage.loot.LootContext$Builder((net.minecraft.server.level.ServerLevel)$$0.level).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.THIS_ENTITY, (java.lang.Object)$$0).withRandom($$0.level.random).create(net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.PIGLIN_BARTER));
+        return $$2;
     }
 
-    public static boolean wantsToDance(net.minecraft.world.entity.LivingEntity piglin, net.minecraft.world.entity.LivingEntity target) {
-        if (target.getType() != net.minecraft.world.entity.EntityType.HOGLIN) {
+    public static boolean wantsToDance(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        if ($$1.getType() != net.minecraft.world.entity.EntityType.HOGLIN) {
             return false;
         }
-        return net.minecraft.util.RandomSource.create((long)piglin.level.getGameTime()).nextFloat() < 0.1f;
+        return net.minecraft.util.RandomSource.create((long)$$0.level.getGameTime()).nextFloat() < 0.1f;
     }
 
-    public static boolean wantsToPickup(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.item.ItemStack stack) {
-        if (piglin.isBaby() && stack.is(net.minecraft.tags.ItemTags.IGNORED_BY_PIGLIN_BABIES)) {
+    public static boolean wantsToPickup(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.item.ItemStack $$1) {
+        if ($$0.isBaby() && $$1.is(net.minecraft.tags.ItemTags.IGNORED_BY_PIGLIN_BABIES)) {
             return false;
         }
-        if (stack.is(net.minecraft.tags.ItemTags.PIGLIN_REPELLENTS)) {
+        if ($$1.is(net.minecraft.tags.ItemTags.PIGLIN_REPELLENTS)) {
             return false;
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isAdmiringDisabled((net.minecraft.world.entity.monster.piglin.Piglin)piglin) && piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET)) {
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isAdmiringDisabled((net.minecraft.world.entity.monster.piglin.Piglin)$$0) && $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET)) {
             return false;
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isBarterCurrency((net.minecraft.world.item.ItemStack)stack)) {
-            return net.minecraft.world.entity.monster.piglin.PiglinAi.isNotHoldingLovedItemInOffHand((net.minecraft.world.entity.monster.piglin.Piglin)piglin);
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isBarterCurrency((net.minecraft.world.item.ItemStack)$$1)) {
+            return net.minecraft.world.entity.monster.piglin.PiglinAi.isNotHoldingLovedItemInOffHand((net.minecraft.world.entity.monster.piglin.Piglin)$$0);
         }
-        boolean bl = piglin.canAddToInventory(stack);
-        if (stack.is(net.minecraft.world.item.Items.GOLD_NUGGET)) {
-            return bl;
+        boolean $$2 = $$0.canAddToInventory($$1);
+        if ($$1.is(net.minecraft.world.item.Items.GOLD_NUGGET)) {
+            return $$2;
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isFood((net.minecraft.world.item.ItemStack)stack)) {
-            return !net.minecraft.world.entity.monster.piglin.PiglinAi.hasEatenRecently((net.minecraft.world.entity.monster.piglin.Piglin)piglin) && bl;
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isFood((net.minecraft.world.item.ItemStack)$$1)) {
+            return !net.minecraft.world.entity.monster.piglin.PiglinAi.hasEatenRecently((net.minecraft.world.entity.monster.piglin.Piglin)$$0) && $$2;
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isLovedItem((net.minecraft.world.item.ItemStack)stack)) {
-            return net.minecraft.world.entity.monster.piglin.PiglinAi.isNotHoldingLovedItemInOffHand((net.minecraft.world.entity.monster.piglin.Piglin)piglin) && bl;
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isLovedItem((net.minecraft.world.item.ItemStack)$$1)) {
+            return net.minecraft.world.entity.monster.piglin.PiglinAi.isNotHoldingLovedItemInOffHand((net.minecraft.world.entity.monster.piglin.Piglin)$$0) && $$2;
         }
-        return piglin.canReplaceCurrentItem(stack);
+        return $$0.canReplaceCurrentItem($$1);
     }
 
     public static boolean isLovedItem(net.minecraft.world.item.ItemStack $$0) {
         return $$0.is(net.minecraft.tags.ItemTags.PIGLIN_LOVED);
     }
 
-    public static boolean wantsToStopRiding(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.Entity vehicle) {
-        if (vehicle instanceof net.minecraft.world.entity.Mob) {
-            net.minecraft.world.entity.Mob mob = (net.minecraft.world.entity.Mob)vehicle;
-            return !mob.isBaby() || !mob.isAlive() || net.minecraft.world.entity.monster.piglin.PiglinAi.wasHurtRecently((net.minecraft.world.entity.LivingEntity)piglin) || net.minecraft.world.entity.monster.piglin.PiglinAi.wasHurtRecently((net.minecraft.world.entity.LivingEntity)mob) || mob instanceof net.minecraft.world.entity.monster.piglin.Piglin && mob.getVehicle() == null;
+    public static boolean wantsToStopRiding(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.Entity $$1) {
+        if ($$1 instanceof net.minecraft.world.entity.Mob) {
+            net.minecraft.world.entity.Mob $$2 = (net.minecraft.world.entity.Mob)$$1;
+            return !$$2.isBaby() || !$$2.isAlive() || net.minecraft.world.entity.monster.piglin.PiglinAi.wasHurtRecently((net.minecraft.world.entity.LivingEntity)$$0) || net.minecraft.world.entity.monster.piglin.PiglinAi.wasHurtRecently((net.minecraft.world.entity.LivingEntity)$$2) || $$2 instanceof net.minecraft.world.entity.monster.piglin.Piglin && $$2.getVehicle() == null;
         }
         return false;
     }
 
-    public static boolean isNearestValidAttackTarget(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.LivingEntity target) {
-        return net.minecraft.world.entity.monster.piglin.PiglinAi.findNearestValidAttackTarget((net.minecraft.world.entity.monster.piglin.Piglin)piglin).filter(entity -> entity == target).isPresent();
+    public static boolean isNearestValidAttackTarget(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.LivingEntity $$12) {
+        return net.minecraft.world.entity.monster.piglin.PiglinAi.findNearestValidAttackTarget((net.minecraft.world.entity.monster.piglin.Piglin)$$0).filter($$1 -> $$1 == $$12).isPresent();
     }
 
-    public static boolean isNearZombified(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        net.minecraft.world.entity.ai.Brain brain = piglin.getBrain();
-        if (brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED)) {
-            net.minecraft.world.entity.LivingEntity livingEntity = (net.minecraft.world.entity.LivingEntity)brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED).get();
-            return piglin.closerThan((net.minecraft.world.entity.Entity)livingEntity, 6.0);
+    public static boolean isNearZombified(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        net.minecraft.world.entity.ai.Brain $$1 = $$0.getBrain();
+        if ($$1.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED)) {
+            net.minecraft.world.entity.LivingEntity $$2 = (net.minecraft.world.entity.LivingEntity)$$1.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED).get();
+            return $$0.closerThan((net.minecraft.world.entity.Entity)$$2, 6.0);
         }
         return false;
     }
 
-    public static java.util.Optional<? extends net.minecraft.world.entity.LivingEntity> findNearestValidAttackTarget(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        java.util.Optional optional;
-        net.minecraft.world.entity.ai.Brain brain = piglin.getBrain();
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isNearZombified((net.minecraft.world.entity.monster.piglin.Piglin)piglin)) {
+    public static java.util.Optional<? extends net.minecraft.world.entity.LivingEntity> findNearestValidAttackTarget(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        java.util.Optional $$3;
+        net.minecraft.world.entity.ai.Brain $$1 = $$0.getBrain();
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isNearZombified((net.minecraft.world.entity.monster.piglin.Piglin)$$0)) {
             return java.util.Optional.empty();
         }
-        java.util.Optional optional2 = net.minecraft.world.entity.ai.behavior.BehaviorUtils.getLivingEntityFromUUIDMemory((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.ai.memory.MemoryModuleType)net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
-        if (optional2.isPresent() && net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackableIgnoringLineOfSight((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.LivingEntity)((net.minecraft.world.entity.LivingEntity)optional2.get()))) {
-            return optional2;
+        java.util.Optional $$2 = net.minecraft.world.entity.ai.behavior.BehaviorUtils.getLivingEntityFromUUIDMemory((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.ai.memory.MemoryModuleType)net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
+        if ($$2.isPresent() && net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackableIgnoringLineOfSight((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)((net.minecraft.world.entity.LivingEntity)$$2.get()))) {
+            return $$2;
         }
-        if (brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.UNIVERSAL_ANGER) && (optional = brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER)).isPresent()) {
-            return optional;
+        if ($$1.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.UNIVERSAL_ANGER) && ($$3 = $$1.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER)).isPresent()) {
+            return $$3;
         }
-        optional = brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_NEMESIS);
-        if (optional.isPresent()) {
-            return optional;
+        java.util.Optional $$4 = $$1.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_NEMESIS);
+        if ($$4.isPresent()) {
+            return $$4;
         }
-        java.util.Optional optional3 = brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD);
-        if (optional3.isPresent() && net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackable((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.LivingEntity)((net.minecraft.world.entity.LivingEntity)optional3.get()))) {
-            return optional3;
+        java.util.Optional $$5 = $$1.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD);
+        if ($$5.isPresent() && net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackable((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)((net.minecraft.world.entity.LivingEntity)$$5.get()))) {
+            return $$5;
         }
         return java.util.Optional.empty();
     }
 
-    public static void angerNearbyPiglins(net.minecraft.world.entity.player.Player player, boolean angerOnlyIfCanSee) {
-        java.util.List list = player.level.getEntitiesOfClass(net.minecraft.world.entity.monster.piglin.Piglin.class, player.getBoundingBox().inflate(16.0));
-        list.stream().filter(net.minecraft.world.entity.monster.piglin.PiglinAi::isIdle).filter(piglin -> !angerOnlyIfCanSee || net.minecraft.world.entity.ai.behavior.BehaviorUtils.canSee((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.LivingEntity)player)).forEach(piglin -> {
-            if (piglin.level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_UNIVERSAL_ANGER)) {
-                net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTargetToNearestTargetablePlayerIfFound((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)player);
+    public static void angerNearbyPiglins(net.minecraft.world.entity.player.Player $$0, boolean $$12) {
+        java.util.List $$22 = $$0.level.getEntitiesOfClass(net.minecraft.world.entity.monster.piglin.Piglin.class, $$0.getBoundingBox().inflate(16.0));
+        $$22.stream().filter(net.minecraft.world.entity.monster.piglin.PiglinAi::isIdle).filter($$2 -> !$$12 || net.minecraft.world.entity.ai.behavior.BehaviorUtils.canSee((net.minecraft.world.entity.LivingEntity)$$2, (net.minecraft.world.entity.LivingEntity)$$0)).forEach($$1 -> {
+            if ($$1.level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_UNIVERSAL_ANGER)) {
+                net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTargetToNearestTargetablePlayerIfFound((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$1, (net.minecraft.world.entity.LivingEntity)$$0);
             } else {
-                net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)player);
+                net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$1, (net.minecraft.world.entity.LivingEntity)$$0);
             }
         });
     }
 
-    public static net.minecraft.world.InteractionResult mobInteract(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand) {
-        net.minecraft.world.item.ItemStack itemStack = player.getItemInHand(hand);
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.canAdmire((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.item.ItemStack)itemStack)) {
-            net.minecraft.world.item.ItemStack itemStack2 = itemStack.split(1);
-            net.minecraft.world.entity.monster.piglin.PiglinAi.holdInOffhand((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.item.ItemStack)itemStack2);
-            net.minecraft.world.entity.monster.piglin.PiglinAi.admireGoldItem((net.minecraft.world.entity.LivingEntity)piglin);
-            net.minecraft.world.entity.monster.piglin.PiglinAi.stopWalking((net.minecraft.world.entity.monster.piglin.Piglin)piglin);
+    public static net.minecraft.world.InteractionResult mobInteract(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.player.Player $$1, net.minecraft.world.InteractionHand $$2) {
+        net.minecraft.world.item.ItemStack $$3 = $$1.getItemInHand($$2);
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.canAdmire((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.item.ItemStack)$$3)) {
+            net.minecraft.world.item.ItemStack $$4 = $$3.split(1);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.holdInOffhand((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.item.ItemStack)$$4);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.admireGoldItem((net.minecraft.world.entity.LivingEntity)$$0);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.stopWalking((net.minecraft.world.entity.monster.piglin.Piglin)$$0);
             return net.minecraft.world.InteractionResult.CONSUME;
         }
         return net.minecraft.world.InteractionResult.PASS;
     }
 
-    public static boolean canAdmire(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.item.ItemStack stack) {
-        return !net.minecraft.world.entity.monster.piglin.PiglinAi.isAdmiringDisabled((net.minecraft.world.entity.monster.piglin.Piglin)piglin) && !net.minecraft.world.entity.monster.piglin.PiglinAi.isAdmiringItem((net.minecraft.world.entity.monster.piglin.Piglin)piglin) && piglin.isAdult() && net.minecraft.world.entity.monster.piglin.PiglinAi.isBarterCurrency((net.minecraft.world.item.ItemStack)stack);
+    public static boolean canAdmire(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.item.ItemStack $$1) {
+        return !net.minecraft.world.entity.monster.piglin.PiglinAi.isAdmiringDisabled((net.minecraft.world.entity.monster.piglin.Piglin)$$0) && !net.minecraft.world.entity.monster.piglin.PiglinAi.isAdmiringItem((net.minecraft.world.entity.monster.piglin.Piglin)$$0) && $$0.isAdult() && net.minecraft.world.entity.monster.piglin.PiglinAi.isBarterCurrency((net.minecraft.world.item.ItemStack)$$1);
     }
 
-    public static void wasHurtBy(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.LivingEntity target) {
-        if (target instanceof net.minecraft.world.entity.monster.piglin.Piglin) {
+    public static void wasHurtBy(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        if ($$1 instanceof net.minecraft.world.entity.monster.piglin.Piglin) {
             return;
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isHoldingItemInOffHand((net.minecraft.world.entity.monster.piglin.Piglin)piglin)) {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.stopHoldingOffHandItem((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (boolean)false);
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isHoldingItemInOffHand((net.minecraft.world.entity.monster.piglin.Piglin)$$0)) {
+            net.minecraft.world.entity.monster.piglin.PiglinAi.stopHoldingOffHandItem((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (boolean)false);
         }
-        net.minecraft.world.entity.ai.Brain brain = piglin.getBrain();
-        brain.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION);
-        brain.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.DANCING);
-        brain.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM);
-        if (target instanceof net.minecraft.world.entity.player.Player) {
-            brain.setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_DISABLED, (java.lang.Object)true, 400L);
+        net.minecraft.world.entity.ai.Brain $$22 = $$0.getBrain();
+        $$22.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.CELEBRATE_LOCATION);
+        $$22.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.DANCING);
+        $$22.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM);
+        if ($$1 instanceof net.minecraft.world.entity.player.Player) {
+            $$22.setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_DISABLED, (java.lang.Object)true, 400L);
         }
-        net.minecraft.world.entity.monster.piglin.PiglinAi.getAvoidTarget((net.minecraft.world.entity.monster.piglin.Piglin)piglin).ifPresent(entity -> {
-            if (entity.getType() != target.getType()) {
-                brain.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.getAvoidTarget((net.minecraft.world.entity.monster.piglin.Piglin)$$0).ifPresent($$2 -> {
+            if ($$2.getType() != $$1.getType()) {
+                $$22.eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET);
             }
         });
-        if (piglin.isBaby()) {
-            brain.setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET, (java.lang.Object)target, 100L);
-            if (net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackableIgnoringLineOfSight((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.LivingEntity)target)) {
-                net.minecraft.world.entity.monster.piglin.PiglinAi.broadcastAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)target);
+        if ($$0.isBaby()) {
+            $$22.setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET, (java.lang.Object)$$1, 100L);
+            if (net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackableIgnoringLineOfSight((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)$$1)) {
+                net.minecraft.world.entity.monster.piglin.PiglinAi.broadcastAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
             }
             return;
         }
-        if (target.getType() == net.minecraft.world.entity.EntityType.HOGLIN && net.minecraft.world.entity.monster.piglin.PiglinAi.hoglinsOutnumberPiglins((net.minecraft.world.entity.monster.piglin.Piglin)piglin)) {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.setAvoidTargetAndDontHuntForAWhile((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.entity.LivingEntity)target);
-            net.minecraft.world.entity.monster.piglin.PiglinAi.broadcastRetreat((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.entity.LivingEntity)target);
+        if ($$1.getType() == net.minecraft.world.entity.EntityType.HOGLIN && net.minecraft.world.entity.monster.piglin.PiglinAi.hoglinsOutnumberPiglins((net.minecraft.world.entity.monster.piglin.Piglin)$$0)) {
+            net.minecraft.world.entity.monster.piglin.PiglinAi.setAvoidTargetAndDontHuntForAWhile((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.broadcastRetreat((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
             return;
         }
-        net.minecraft.world.entity.monster.piglin.PiglinAi.maybeRetaliate((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)target);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.maybeRetaliate((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
     }
 
-    public static void maybeRetaliate(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin, net.minecraft.world.entity.LivingEntity target) {
-        if (piglin.getBrain().isActive(net.minecraft.world.entity.schedule.Activity.AVOID)) {
+    public static void maybeRetaliate(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        if ($$0.getBrain().isActive(net.minecraft.world.entity.schedule.Activity.AVOID)) {
             return;
         }
-        if (!net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackableIgnoringLineOfSight((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.LivingEntity)target)) {
+        if (!net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackableIgnoringLineOfSight((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)$$1)) {
             return;
         }
-        if (net.minecraft.world.entity.ai.behavior.BehaviorUtils.isOtherTargetMuchFurtherAwayThanCurrentAttackTarget((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.LivingEntity)target, (double)4.0)) {
+        if (net.minecraft.world.entity.ai.behavior.BehaviorUtils.isOtherTargetMuchFurtherAwayThanCurrentAttackTarget((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)$$1, (double)4.0)) {
             return;
         }
-        if (target.getType() == net.minecraft.world.entity.EntityType.PLAYER && piglin.level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_UNIVERSAL_ANGER)) {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTargetToNearestTargetablePlayerIfFound((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)target);
-            net.minecraft.world.entity.monster.piglin.PiglinAi.broadcastUniversalAnger((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin);
+        if ($$1.getType() == net.minecraft.world.entity.EntityType.PLAYER && $$0.level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_UNIVERSAL_ANGER)) {
+            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTargetToNearestTargetablePlayerIfFound((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.broadcastUniversalAnger((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0);
         } else {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)target);
-            net.minecraft.world.entity.monster.piglin.PiglinAi.broadcastAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)target);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.broadcastAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
         }
     }
 
-    public static java.util.Optional<net.minecraft.sounds.SoundEvent> getSoundForCurrentActivity(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return piglin.getBrain().getActiveNonCoreActivity().map(activity -> net.minecraft.world.entity.monster.piglin.PiglinAi.getSoundForActivity((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.entity.schedule.Activity)activity));
+    public static java.util.Optional<net.minecraft.sounds.SoundEvent> getSoundForCurrentActivity(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return $$0.getBrain().getActiveNonCoreActivity().map($$1 -> net.minecraft.world.entity.monster.piglin.PiglinAi.getSoundForActivity((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.entity.schedule.Activity)$$1));
     }
 
-    public static net.minecraft.sounds.SoundEvent getSoundForActivity(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.schedule.Activity activity) {
-        if (activity == net.minecraft.world.entity.schedule.Activity.FIGHT) {
+    public static net.minecraft.sounds.SoundEvent getSoundForActivity(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.schedule.Activity $$1) {
+        if ($$1 == net.minecraft.world.entity.schedule.Activity.FIGHT) {
             return net.minecraft.sounds.SoundEvents.PIGLIN_ANGRY;
         }
-        if (piglin.isConverting()) {
+        if ($$0.isConverting()) {
             return net.minecraft.sounds.SoundEvents.PIGLIN_RETREAT;
         }
-        if (activity == net.minecraft.world.entity.schedule.Activity.AVOID && net.minecraft.world.entity.monster.piglin.PiglinAi.isNearAvoidTarget((net.minecraft.world.entity.monster.piglin.Piglin)piglin)) {
+        if ($$1 == net.minecraft.world.entity.schedule.Activity.AVOID && net.minecraft.world.entity.monster.piglin.PiglinAi.isNearAvoidTarget((net.minecraft.world.entity.monster.piglin.Piglin)$$0)) {
             return net.minecraft.sounds.SoundEvents.PIGLIN_RETREAT;
         }
-        if (activity == net.minecraft.world.entity.schedule.Activity.ADMIRE_ITEM) {
+        if ($$1 == net.minecraft.world.entity.schedule.Activity.ADMIRE_ITEM) {
             return net.minecraft.sounds.SoundEvents.PIGLIN_ADMIRING_ITEM;
         }
-        if (activity == net.minecraft.world.entity.schedule.Activity.CELEBRATE) {
+        if ($$1 == net.minecraft.world.entity.schedule.Activity.CELEBRATE) {
             return net.minecraft.sounds.SoundEvents.PIGLIN_CELEBRATE;
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.seesPlayerHoldingLovedItem((net.minecraft.world.entity.LivingEntity)piglin)) {
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.seesPlayerHoldingLovedItem((net.minecraft.world.entity.LivingEntity)$$0)) {
             return net.minecraft.sounds.SoundEvents.PIGLIN_JEALOUS;
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isNearRepellent((net.minecraft.world.entity.monster.piglin.Piglin)piglin)) {
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isNearRepellent((net.minecraft.world.entity.monster.piglin.Piglin)$$0)) {
             return net.minecraft.sounds.SoundEvents.PIGLIN_RETREAT;
         }
         return net.minecraft.sounds.SoundEvents.PIGLIN_AMBIENT;
     }
 
-    public static boolean isNearAvoidTarget(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        net.minecraft.world.entity.ai.Brain brain = piglin.getBrain();
-        if (!brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET)) {
+    public static boolean isNearAvoidTarget(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        net.minecraft.world.entity.ai.Brain $$1 = $$0.getBrain();
+        if (!$$1.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET)) {
             return false;
         }
-        return ((net.minecraft.world.entity.LivingEntity)brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET).get()).closerThan((net.minecraft.world.entity.Entity)piglin, 12.0);
+        return ((net.minecraft.world.entity.LivingEntity)$$1.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET).get()).closerThan((net.minecraft.world.entity.Entity)$$0, 12.0);
     }
 
-    public static boolean hasAnyoneNearbyHuntedRecently(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.HUNTED_RECENTLY) || net.minecraft.world.entity.monster.piglin.PiglinAi.getVisibleAdultPiglins((net.minecraft.world.entity.monster.piglin.Piglin)piglin).stream().anyMatch(adult -> adult.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.HUNTED_RECENTLY));
+    public static boolean hasAnyoneNearbyHuntedRecently(net.minecraft.world.entity.monster.piglin.Piglin $$02) {
+        return $$02.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.HUNTED_RECENTLY) || net.minecraft.world.entity.monster.piglin.PiglinAi.getVisibleAdultPiglins((net.minecraft.world.entity.monster.piglin.Piglin)$$02).stream().anyMatch($$0 -> $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.HUNTED_RECENTLY));
     }
 
-    public static java.util.List<net.minecraft.world.entity.monster.piglin.AbstractPiglin> getVisibleAdultPiglins(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return (java.util.List)piglin.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS).orElse((java.lang.Object)com.google.common.collect.ImmutableList.of());
+    public static java.util.List<net.minecraft.world.entity.monster.piglin.AbstractPiglin> getVisibleAdultPiglins(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return (java.util.List)$$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS).orElse((java.lang.Object)com.google.common.collect.ImmutableList.of());
     }
 
-    public static java.util.List<net.minecraft.world.entity.monster.piglin.AbstractPiglin> getAdultPiglins(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin) {
-        return (java.util.List)piglin.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEARBY_ADULT_PIGLINS).orElse((java.lang.Object)com.google.common.collect.ImmutableList.of());
+    public static java.util.List<net.minecraft.world.entity.monster.piglin.AbstractPiglin> getAdultPiglins(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0) {
+        return (java.util.List)$$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEARBY_ADULT_PIGLINS).orElse((java.lang.Object)com.google.common.collect.ImmutableList.of());
     }
 
-    public static boolean isWearingGold(net.minecraft.world.entity.LivingEntity livingEntity) {
-        java.lang.Iterable iterable = livingEntity.getArmorSlots();
-        for (net.minecraft.world.item.ItemStack itemStack : iterable) {
-            net.minecraft.world.item.Item item = itemStack.getItem();
-            if (!(item instanceof net.minecraft.world.item.ArmorItem) || ((net.minecraft.world.item.ArmorItem)item).getMaterial() != net.minecraft.world.item.ArmorMaterials.GOLD) continue;
+    public static boolean isWearingGold(net.minecraft.world.entity.LivingEntity $$0) {
+        java.lang.Iterable $$1 = $$0.getArmorSlots();
+        for (net.minecraft.world.item.ItemStack $$2 : $$1) {
+            net.minecraft.world.item.Item $$3 = $$2.getItem();
+            if (!($$3 instanceof net.minecraft.world.item.ArmorItem) || ((net.minecraft.world.item.ArmorItem)$$3).getMaterial() != net.minecraft.world.item.ArmorMaterials.GOLD) continue;
             return true;
         }
         return false;
     }
 
-    public static void stopWalking(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        piglin.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET);
-        piglin.getNavigation().stop();
+    public static void stopWalking(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        $$0.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET);
+        $$0.getNavigation().stop();
     }
 
     public static net.minecraft.world.entity.ai.behavior.RunSometimes<net.minecraft.world.entity.monster.piglin.Piglin> babySometimesRideBabyHoglin() {
         return new net.minecraft.world.entity.ai.behavior.RunSometimes((net.minecraft.world.entity.ai.behavior.Behavior)new net.minecraft.world.entity.ai.behavior.CopyMemoryWithExpiry(net.minecraft.world.entity.monster.piglin.Piglin::isBaby, net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, net.minecraft.world.entity.ai.memory.MemoryModuleType.RIDE_TARGET, RIDE_DURATION), RIDE_START_INTERVAL);
     }
 
-    public static void broadcastAngerTarget(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin, net.minecraft.world.entity.LivingEntity target) {
-        net.minecraft.world.entity.monster.piglin.PiglinAi.getAdultPiglins((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin).forEach(adult -> {
-            if (!(target.getType() != net.minecraft.world.entity.EntityType.HOGLIN || adult.canHunt() && ((net.minecraft.world.entity.monster.hoglin.Hoglin)target).canBeHunted())) {
+    public static void broadcastAngerTarget(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0, net.minecraft.world.entity.LivingEntity $$12) {
+        net.minecraft.world.entity.monster.piglin.PiglinAi.getAdultPiglins((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0).forEach($$1 -> {
+            if (!($$12.getType() != net.minecraft.world.entity.EntityType.HOGLIN || $$1.canHunt() && ((net.minecraft.world.entity.monster.hoglin.Hoglin)$$12).canBeHunted())) {
                 return;
             }
-            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTargetIfCloserThanCurrent((net.minecraft.world.entity.monster.piglin.AbstractPiglin)adult, (net.minecraft.world.entity.LivingEntity)target);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTargetIfCloserThanCurrent((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$1, (net.minecraft.world.entity.LivingEntity)$$12);
         });
     }
 
-    public static void broadcastUniversalAnger(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin) {
-        net.minecraft.world.entity.monster.piglin.PiglinAi.getAdultPiglins((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin).forEach(adult -> net.minecraft.world.entity.monster.piglin.PiglinAi.getNearestVisibleTargetablePlayer((net.minecraft.world.entity.monster.piglin.AbstractPiglin)adult).ifPresent($$1 -> net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)adult, (net.minecraft.world.entity.LivingEntity)$$1)));
+    public static void broadcastUniversalAnger(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$02) {
+        net.minecraft.world.entity.monster.piglin.PiglinAi.getAdultPiglins((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$02).forEach($$0 -> net.minecraft.world.entity.monster.piglin.PiglinAi.getNearestVisibleTargetablePlayer((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0).ifPresent($$1 -> net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1)));
     }
 
-    public static void broadcastDontKillAnyMoreHoglinsForAWhile(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        net.minecraft.world.entity.monster.piglin.PiglinAi.getVisibleAdultPiglins((net.minecraft.world.entity.monster.piglin.Piglin)piglin).forEach(net.minecraft.world.entity.monster.piglin.PiglinAi::dontKillAnyMoreHoglinsForAWhile);
+    public static void broadcastDontKillAnyMoreHoglinsForAWhile(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        net.minecraft.world.entity.monster.piglin.PiglinAi.getVisibleAdultPiglins((net.minecraft.world.entity.monster.piglin.Piglin)$$0).forEach(net.minecraft.world.entity.monster.piglin.PiglinAi::dontKillAnyMoreHoglinsForAWhile);
     }
 
-    public static void setAngerTarget(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin, net.minecraft.world.entity.LivingEntity target) {
-        if (!net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackableIgnoringLineOfSight((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.LivingEntity)target)) {
+    public static void setAngerTarget(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        if (!net.minecraft.world.entity.ai.sensing.Sensor.isEntityAttackableIgnoringLineOfSight((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.LivingEntity)$$1)) {
             return;
         }
-        piglin.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
-        piglin.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT, (java.lang.Object)target.getUUID(), 600L);
-        if (target.getType() == net.minecraft.world.entity.EntityType.HOGLIN && piglin.canHunt()) {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.dontKillAnyMoreHoglinsForAWhile((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin);
+        $$0.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
+        $$0.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT, (java.lang.Object)$$1.getUUID(), 600L);
+        if ($$1.getType() == net.minecraft.world.entity.EntityType.HOGLIN && $$0.canHunt()) {
+            net.minecraft.world.entity.monster.piglin.PiglinAi.dontKillAnyMoreHoglinsForAWhile((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0);
         }
-        if (target.getType() == net.minecraft.world.entity.EntityType.PLAYER && piglin.level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_UNIVERSAL_ANGER)) {
-            piglin.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.UNIVERSAL_ANGER, (java.lang.Object)true, 600L);
+        if ($$1.getType() == net.minecraft.world.entity.EntityType.PLAYER && $$0.level.getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_UNIVERSAL_ANGER)) {
+            $$0.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.UNIVERSAL_ANGER, (java.lang.Object)true, 600L);
         }
     }
 
-    public static void setAngerTargetToNearestTargetablePlayerIfFound(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin, net.minecraft.world.entity.LivingEntity currentTarget) {
-        java.util.Optional optional = net.minecraft.world.entity.monster.piglin.PiglinAi.getNearestVisibleTargetablePlayer((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin);
-        if (optional.isPresent()) {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)((net.minecraft.world.entity.LivingEntity)optional.get()));
+    public static void setAngerTargetToNearestTargetablePlayerIfFound(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        java.util.Optional $$2 = net.minecraft.world.entity.monster.piglin.PiglinAi.getNearestVisibleTargetablePlayer((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0);
+        if ($$2.isPresent()) {
+            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)((net.minecraft.world.entity.LivingEntity)$$2.get()));
         } else {
-            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)currentTarget);
+            net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)$$1);
         }
     }
 
-    public static void setAngerTargetIfCloserThanCurrent(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin, net.minecraft.world.entity.LivingEntity currentTarget) {
-        java.util.Optional optional = net.minecraft.world.entity.monster.piglin.PiglinAi.getAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin);
-        net.minecraft.world.entity.LivingEntity livingEntity = net.minecraft.world.entity.ai.behavior.BehaviorUtils.getNearestTarget((net.minecraft.world.entity.LivingEntity)piglin, (java.util.Optional)optional, (net.minecraft.world.entity.LivingEntity)currentTarget);
-        if (optional.isPresent() && optional.get() == livingEntity) {
+    public static void setAngerTargetIfCloserThanCurrent(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        java.util.Optional $$2 = net.minecraft.world.entity.monster.piglin.PiglinAi.getAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0);
+        net.minecraft.world.entity.LivingEntity $$3 = net.minecraft.world.entity.ai.behavior.BehaviorUtils.getNearestTarget((net.minecraft.world.entity.LivingEntity)$$0, (java.util.Optional)$$2, (net.minecraft.world.entity.LivingEntity)$$1);
+        if ($$2.isPresent() && $$2.get() == $$3) {
             return;
         }
-        net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin, (net.minecraft.world.entity.LivingEntity)livingEntity);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.setAngerTarget((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0, (net.minecraft.world.entity.LivingEntity)$$3);
     }
 
-    public static java.util.Optional<net.minecraft.world.entity.LivingEntity> getAngerTarget(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin) {
-        return net.minecraft.world.entity.ai.behavior.BehaviorUtils.getLivingEntityFromUUIDMemory((net.minecraft.world.entity.LivingEntity)piglin, (net.minecraft.world.entity.ai.memory.MemoryModuleType)net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
+    public static java.util.Optional<net.minecraft.world.entity.LivingEntity> getAngerTarget(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0) {
+        return net.minecraft.world.entity.ai.behavior.BehaviorUtils.getLivingEntityFromUUIDMemory((net.minecraft.world.entity.LivingEntity)$$0, (net.minecraft.world.entity.ai.memory.MemoryModuleType)net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
     }
 
-    public static java.util.Optional<net.minecraft.world.entity.LivingEntity> getAvoidTarget(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        if (piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET)) {
-            return piglin.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET);
+    public static java.util.Optional<net.minecraft.world.entity.LivingEntity> getAvoidTarget(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        if ($$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET)) {
+            return $$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET);
         }
         return java.util.Optional.empty();
     }
 
-    public static java.util.Optional<net.minecraft.world.entity.player.Player> getNearestVisibleTargetablePlayer(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin) {
-        if (piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER)) {
-            return piglin.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER);
+    public static java.util.Optional<net.minecraft.world.entity.player.Player> getNearestVisibleTargetablePlayer(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0) {
+        if ($$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER)) {
+            return $$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER);
         }
         return java.util.Optional.empty();
     }
 
-    public static void broadcastRetreat(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.LivingEntity target) {
-        net.minecraft.world.entity.monster.piglin.PiglinAi.getVisibleAdultPiglins((net.minecraft.world.entity.monster.piglin.Piglin)piglin).stream().filter(adult -> adult instanceof net.minecraft.world.entity.monster.piglin.Piglin).forEach(adult -> net.minecraft.world.entity.monster.piglin.PiglinAi.retreatFromNearestTarget((net.minecraft.world.entity.monster.piglin.Piglin)((net.minecraft.world.entity.monster.piglin.Piglin)adult), (net.minecraft.world.entity.LivingEntity)target));
+    public static void broadcastRetreat(net.minecraft.world.entity.monster.piglin.Piglin $$02, net.minecraft.world.entity.LivingEntity $$12) {
+        net.minecraft.world.entity.monster.piglin.PiglinAi.getVisibleAdultPiglins((net.minecraft.world.entity.monster.piglin.Piglin)$$02).stream().filter($$0 -> $$0 instanceof net.minecraft.world.entity.monster.piglin.Piglin).forEach($$1 -> net.minecraft.world.entity.monster.piglin.PiglinAi.retreatFromNearestTarget((net.minecraft.world.entity.monster.piglin.Piglin)((net.minecraft.world.entity.monster.piglin.Piglin)$$1), (net.minecraft.world.entity.LivingEntity)$$12));
     }
 
-    public static void retreatFromNearestTarget(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.LivingEntity target) {
-        net.minecraft.world.entity.ai.Brain brain = piglin.getBrain();
-        net.minecraft.world.entity.LivingEntity livingEntity = target;
-        livingEntity = net.minecraft.world.entity.ai.behavior.BehaviorUtils.getNearestTarget((net.minecraft.world.entity.LivingEntity)piglin, (java.util.Optional)brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET), (net.minecraft.world.entity.LivingEntity)livingEntity);
-        livingEntity = net.minecraft.world.entity.ai.behavior.BehaviorUtils.getNearestTarget((net.minecraft.world.entity.LivingEntity)piglin, (java.util.Optional)brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET), (net.minecraft.world.entity.LivingEntity)livingEntity);
-        net.minecraft.world.entity.monster.piglin.PiglinAi.setAvoidTargetAndDontHuntForAWhile((net.minecraft.world.entity.monster.piglin.Piglin)piglin, (net.minecraft.world.entity.LivingEntity)livingEntity);
+    public static void retreatFromNearestTarget(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        net.minecraft.world.entity.ai.Brain $$2 = $$0.getBrain();
+        net.minecraft.world.entity.LivingEntity $$3 = $$1;
+        $$3 = net.minecraft.world.entity.ai.behavior.BehaviorUtils.getNearestTarget((net.minecraft.world.entity.LivingEntity)$$0, (java.util.Optional)$$2.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET), (net.minecraft.world.entity.LivingEntity)$$3);
+        $$3 = net.minecraft.world.entity.ai.behavior.BehaviorUtils.getNearestTarget((net.minecraft.world.entity.LivingEntity)$$0, (java.util.Optional)$$2.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET), (net.minecraft.world.entity.LivingEntity)$$3);
+        net.minecraft.world.entity.monster.piglin.PiglinAi.setAvoidTargetAndDontHuntForAWhile((net.minecraft.world.entity.monster.piglin.Piglin)$$0, (net.minecraft.world.entity.LivingEntity)$$3);
     }
 
-    public static boolean wantsToStopFleeing(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        net.minecraft.world.entity.ai.Brain brain = piglin.getBrain();
-        if (!brain.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET)) {
+    public static boolean wantsToStopFleeing(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        net.minecraft.world.entity.ai.Brain $$1 = $$0.getBrain();
+        if (!$$1.hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET)) {
             return true;
         }
-        net.minecraft.world.entity.LivingEntity livingEntity = (net.minecraft.world.entity.LivingEntity)brain.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET).get();
-        net.minecraft.world.entity.EntityType entityType = livingEntity.getType();
-        if (entityType == net.minecraft.world.entity.EntityType.HOGLIN) {
-            return net.minecraft.world.entity.monster.piglin.PiglinAi.piglinsEqualOrOutnumberHoglins((net.minecraft.world.entity.monster.piglin.Piglin)piglin);
+        net.minecraft.world.entity.LivingEntity $$2 = (net.minecraft.world.entity.LivingEntity)$$1.getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET).get();
+        net.minecraft.world.entity.EntityType $$3 = $$2.getType();
+        if ($$3 == net.minecraft.world.entity.EntityType.HOGLIN) {
+            return net.minecraft.world.entity.monster.piglin.PiglinAi.piglinsEqualOrOutnumberHoglins((net.minecraft.world.entity.monster.piglin.Piglin)$$0);
         }
-        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isZombified((net.minecraft.world.entity.EntityType)entityType)) {
-            return !brain.isMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, (java.lang.Object)livingEntity);
+        if (net.minecraft.world.entity.monster.piglin.PiglinAi.isZombified((net.minecraft.world.entity.EntityType)$$3)) {
+            return !$$1.isMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, (java.lang.Object)$$2);
         }
         return false;
     }
 
-    public static boolean piglinsEqualOrOutnumberHoglins(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return !net.minecraft.world.entity.monster.piglin.PiglinAi.hoglinsOutnumberPiglins((net.minecraft.world.entity.monster.piglin.Piglin)piglin);
+    public static boolean piglinsEqualOrOutnumberHoglins(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return !net.minecraft.world.entity.monster.piglin.PiglinAi.hoglinsOutnumberPiglins((net.minecraft.world.entity.monster.piglin.Piglin)$$0);
     }
 
-    public static boolean hoglinsOutnumberPiglins(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        int n = (java.lang.Integer)piglin.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT).orElse((java.lang.Object)0) + 1;
-        int n2 = (java.lang.Integer)piglin.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT).orElse((java.lang.Object)0);
-        return n2 > n;
+    public static boolean hoglinsOutnumberPiglins(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        int $$1 = (java.lang.Integer)$$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT).orElse((java.lang.Object)0) + 1;
+        int $$2 = (java.lang.Integer)$$0.getBrain().getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT).orElse((java.lang.Object)0);
+        return $$2 > $$1;
     }
 
-    public static void setAvoidTargetAndDontHuntForAWhile(net.minecraft.world.entity.monster.piglin.Piglin piglin, net.minecraft.world.entity.LivingEntity target) {
-        piglin.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
-        piglin.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET);
-        piglin.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET);
-        piglin.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET, (java.lang.Object)target, (long)RETREAT_DURATION.sample(piglin.level.random));
-        net.minecraft.world.entity.monster.piglin.PiglinAi.dontKillAnyMoreHoglinsForAWhile((net.minecraft.world.entity.monster.piglin.AbstractPiglin)piglin);
+    public static void setAvoidTargetAndDontHuntForAWhile(net.minecraft.world.entity.monster.piglin.Piglin $$0, net.minecraft.world.entity.LivingEntity $$1) {
+        $$0.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ANGRY_AT);
+        $$0.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATTACK_TARGET);
+        $$0.getBrain().eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType.WALK_TARGET);
+        $$0.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.AVOID_TARGET, (java.lang.Object)$$1, (long)RETREAT_DURATION.sample($$0.level.random));
+        net.minecraft.world.entity.monster.piglin.PiglinAi.dontKillAnyMoreHoglinsForAWhile((net.minecraft.world.entity.monster.piglin.AbstractPiglin)$$0);
     }
 
-    public static void dontKillAnyMoreHoglinsForAWhile(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin) {
-        piglin.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.HUNTED_RECENTLY, (java.lang.Object)true, (long)TIME_BETWEEN_HUNTS.sample(piglin.level.random));
+    public static void dontKillAnyMoreHoglinsForAWhile(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0) {
+        $$0.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.HUNTED_RECENTLY, (java.lang.Object)true, (long)TIME_BETWEEN_HUNTS.sample($$0.level.random));
     }
 
     public static boolean seesPlayerHoldingWantedItem(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
         return $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM);
     }
 
-    public static void eat(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        piglin.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATE_RECENTLY, (java.lang.Object)true, 200L);
+    public static void eat(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        $$0.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATE_RECENTLY, (java.lang.Object)true, 200L);
     }
 
-    public static net.minecraft.world.phys.Vec3 getRandomNearbyPos(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        net.minecraft.world.phys.Vec3 vec3 = net.minecraft.world.entity.ai.util.LandRandomPos.getPos((net.minecraft.world.entity.PathfinderMob)piglin, (int)4, (int)2);
-        return vec3 == null ? piglin.position() : vec3;
+    public static net.minecraft.world.phys.Vec3 getRandomNearbyPos(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        net.minecraft.world.phys.Vec3 $$1 = net.minecraft.world.entity.ai.util.LandRandomPos.getPos((net.minecraft.world.entity.PathfinderMob)$$0, (int)4, (int)2);
+        return $$1 == null ? $$0.position() : $$1;
     }
 
-    public static boolean hasEatenRecently(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATE_RECENTLY);
+    public static boolean hasEatenRecently(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ATE_RECENTLY);
     }
 
-    public static boolean isIdle(net.minecraft.world.entity.monster.piglin.AbstractPiglin piglin) {
-        return piglin.getBrain().isActive(net.minecraft.world.entity.schedule.Activity.IDLE);
+    public static boolean isIdle(net.minecraft.world.entity.monster.piglin.AbstractPiglin $$0) {
+        return $$0.getBrain().isActive(net.minecraft.world.entity.schedule.Activity.IDLE);
     }
 
-    public static boolean hasCrossbow(net.minecraft.world.entity.LivingEntity piglin) {
-        return piglin.isHolding(net.minecraft.world.item.Items.CROSSBOW);
+    public static boolean hasCrossbow(net.minecraft.world.entity.LivingEntity $$0) {
+        return $$0.isHolding(net.minecraft.world.item.Items.CROSSBOW);
     }
 
-    public static void admireGoldItem(net.minecraft.world.entity.LivingEntity piglin) {
-        piglin.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM, (java.lang.Object)true, 120L);
+    public static void admireGoldItem(net.minecraft.world.entity.LivingEntity $$0) {
+        $$0.getBrain().setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM, (java.lang.Object)true, 120L);
     }
 
-    public static boolean isAdmiringItem(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM);
+    public static boolean isAdmiringItem(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_ITEM);
     }
 
     public static boolean isBarterCurrency(net.minecraft.world.item.ItemStack $$0) {
@@ -641,40 +641,40 @@
         return $$0.is(net.minecraft.tags.ItemTags.PIGLIN_FOOD);
     }
 
-    public static boolean isNearRepellent(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_REPELLENT);
+    public static boolean isNearRepellent(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_REPELLENT);
     }
 
-    public static boolean seesPlayerHoldingLovedItem(net.minecraft.world.entity.LivingEntity piglin) {
-        return piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM);
+    public static boolean seesPlayerHoldingLovedItem(net.minecraft.world.entity.LivingEntity $$0) {
+        return $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM);
     }
 
-    public static boolean doesntSeeAnyPlayerHoldingLovedItem(net.minecraft.world.entity.LivingEntity piglin) {
-        return !net.minecraft.world.entity.monster.piglin.PiglinAi.seesPlayerHoldingLovedItem((net.minecraft.world.entity.LivingEntity)piglin);
+    public static boolean doesntSeeAnyPlayerHoldingLovedItem(net.minecraft.world.entity.LivingEntity $$0) {
+        return !net.minecraft.world.entity.monster.piglin.PiglinAi.seesPlayerHoldingLovedItem((net.minecraft.world.entity.LivingEntity)$$0);
     }
 
-    public static boolean isPlayerHoldingLovedItem(net.minecraft.world.entity.LivingEntity player) {
-        return player.getType() == net.minecraft.world.entity.EntityType.PLAYER && player.isHolding(net.minecraft.world.entity.monster.piglin.PiglinAi::isLovedItem);
+    public static boolean isPlayerHoldingLovedItem(net.minecraft.world.entity.LivingEntity $$0) {
+        return $$0.getType() == net.minecraft.world.entity.EntityType.PLAYER && $$0.isHolding(net.minecraft.world.entity.monster.piglin.PiglinAi::isLovedItem);
     }
 
-    public static boolean isAdmiringDisabled(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_DISABLED);
+    public static boolean isAdmiringDisabled(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.ADMIRING_DISABLED);
     }
 
-    public static boolean wasHurtRecently(net.minecraft.world.entity.LivingEntity piglin) {
-        return piglin.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.HURT_BY);
+    public static boolean wasHurtRecently(net.minecraft.world.entity.LivingEntity $$0) {
+        return $$0.getBrain().hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType.HURT_BY);
     }
 
-    public static boolean isHoldingItemInOffHand(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return !piglin.getOffhandItem().isEmpty();
+    public static boolean isHoldingItemInOffHand(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return !$$0.getOffhandItem().isEmpty();
     }
 
-    public static boolean isNotHoldingLovedItemInOffHand(net.minecraft.world.entity.monster.piglin.Piglin piglin) {
-        return piglin.getOffhandItem().isEmpty() || !net.minecraft.world.entity.monster.piglin.PiglinAi.isLovedItem((net.minecraft.world.item.ItemStack)piglin.getOffhandItem());
+    public static boolean isNotHoldingLovedItemInOffHand(net.minecraft.world.entity.monster.piglin.Piglin $$0) {
+        return $$0.getOffhandItem().isEmpty() || !net.minecraft.world.entity.monster.piglin.PiglinAi.isLovedItem((net.minecraft.world.item.ItemStack)$$0.getOffhandItem());
     }
 
-    public static boolean isZombified(net.minecraft.world.entity.EntityType<?> entityType) {
-        return entityType == net.minecraft.world.entity.EntityType.ZOMBIFIED_PIGLIN || entityType == net.minecraft.world.entity.EntityType.ZOGLIN;
+    public static boolean isZombified(net.minecraft.world.entity.EntityType<?> $$0) {
+        return $$0 == net.minecraft.world.entity.EntityType.ZOMBIFIED_PIGLIN || $$0 == net.minecraft.world.entity.EntityType.ZOGLIN;
     }
 
     static {