--- net/minecraft/world/entity/monster/Pillager.java
+++ net/minecraft/world/entity/monster/Pillager.java
@@ -42,31 +42,31 @@
         this.entityData.define(IS_CHARGING_CROSSBOW, (java.lang.Object)false);
     }
 
-    public boolean canFireProjectileWeapon(net.minecraft.world.item.ProjectileWeaponItem projectileWeapon) {
-        return projectileWeapon == net.minecraft.world.item.Items.CROSSBOW;
+    public boolean canFireProjectileWeapon(net.minecraft.world.item.ProjectileWeaponItem $$0) {
+        return $$0 == net.minecraft.world.item.Items.CROSSBOW;
     }
 
     public boolean isChargingCrossbow() {
         return (java.lang.Boolean)this.entityData.get(IS_CHARGING_CROSSBOW);
     }
 
-    public void setChargingCrossbow(boolean isCharging) {
-        this.entityData.set(IS_CHARGING_CROSSBOW, (java.lang.Object)isCharging);
+    public void setChargingCrossbow(boolean $$0) {
+        this.entityData.set(IS_CHARGING_CROSSBOW, (java.lang.Object)$$0);
     }
 
     public void onCrossbowAttackPerformed() {
         this.noActionTime = 0;
     }
 
-    public void addAdditionalSaveData(net.minecraft.nbt.CompoundTag compound) {
-        super.addAdditionalSaveData(compound);
-        net.minecraft.nbt.ListTag listTag = new net.minecraft.nbt.ListTag();
-        for (int i = 0; i < this.inventory.getContainerSize(); ++i) {
-            net.minecraft.world.item.ItemStack itemStack = this.inventory.getItem(i);
-            if (itemStack.isEmpty()) continue;
-            listTag.add((java.lang.Object)itemStack.save(new net.minecraft.nbt.CompoundTag()));
+    public void addAdditionalSaveData(net.minecraft.nbt.CompoundTag $$0) {
+        super.addAdditionalSaveData($$0);
+        net.minecraft.nbt.ListTag $$1 = new net.minecraft.nbt.ListTag();
+        for (int $$2 = 0; $$2 < this.inventory.getContainerSize(); ++$$2) {
+            net.minecraft.world.item.ItemStack $$3 = this.inventory.getItem($$2);
+            if ($$3.isEmpty()) continue;
+            $$1.add((java.lang.Object)$$3.save(new net.minecraft.nbt.CompoundTag()));
         }
-        compound.put("Inventory", (net.minecraft.nbt.Tag)listTag);
+        $$0.put("Inventory", (net.minecraft.nbt.Tag)$$1);
     }
 
     public net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() {
@@ -82,18 +82,18 @@
         return net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose.NEUTRAL;
     }
 
-    public void readAdditionalSaveData(net.minecraft.nbt.CompoundTag compound) {
-        super.readAdditionalSaveData(compound);
-        net.minecraft.nbt.ListTag listTag = compound.getList("Inventory", 10);
-        for (int i = 0; i < listTag.size(); ++i) {
-            net.minecraft.world.item.ItemStack itemStack = net.minecraft.world.item.ItemStack.of((net.minecraft.nbt.CompoundTag)listTag.getCompound(i));
-            if (itemStack.isEmpty()) continue;
-            this.inventory.addItem(itemStack);
+    public void readAdditionalSaveData(net.minecraft.nbt.CompoundTag $$0) {
+        super.readAdditionalSaveData($$0);
+        net.minecraft.nbt.ListTag $$1 = $$0.getList("Inventory", 10);
+        for (int $$2 = 0; $$2 < $$1.size(); ++$$2) {
+            net.minecraft.world.item.ItemStack $$3 = net.minecraft.world.item.ItemStack.of((net.minecraft.nbt.CompoundTag)$$1.getCompound($$2));
+            if ($$3.isEmpty()) continue;
+            this.inventory.addItem($$3);
         }
         this.setCanPickUpLoot(true);
     }
 
-    public float getWalkTargetValue(net.minecraft.core.BlockPos pos, net.minecraft.world.level.LevelReader level) {
+    public float getWalkTargetValue(net.minecraft.core.BlockPos $$0, net.minecraft.world.level.LevelReader $$1) {
         return 0.0f;
     }
 
@@ -102,11 +102,11 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor level, net.minecraft.world.DifficultyInstance difficulty, net.minecraft.world.entity.MobSpawnType reason, @javax.annotation.Nullable net.minecraft.world.entity.SpawnGroupData spawnData, @javax.annotation.Nullable net.minecraft.nbt.CompoundTag dataTag) {
-        net.minecraft.util.RandomSource randomSource = level.getRandom();
-        this.populateDefaultEquipmentSlots(randomSource, difficulty);
-        this.populateDefaultEquipmentEnchantments(randomSource, difficulty);
-        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
+    public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor $$0, net.minecraft.world.DifficultyInstance $$1, net.minecraft.world.entity.MobSpawnType $$2, @javax.annotation.Nullable net.minecraft.world.entity.SpawnGroupData $$3, @javax.annotation.Nullable net.minecraft.nbt.CompoundTag $$4) {
+        net.minecraft.util.RandomSource $$5 = $$0.getRandom();
+        this.populateDefaultEquipmentSlots($$5, $$1);
+        this.populateDefaultEquipmentEnchantments($$5, $$1);
+        return super.finalizeSpawn($$0, $$1, $$2, $$3, $$4);
     }
 
     public void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource $$0, net.minecraft.world.DifficultyInstance $$1) {
@@ -124,12 +124,12 @@
         }
     }
 
-    public boolean isAlliedTo(net.minecraft.world.entity.Entity entity) {
-        if (super.isAlliedTo(entity)) {
+    public boolean isAlliedTo(net.minecraft.world.entity.Entity $$0) {
+        if (super.isAlliedTo($$0)) {
             return true;
         }
-        if (entity instanceof net.minecraft.world.entity.LivingEntity && ((net.minecraft.world.entity.LivingEntity)entity).getMobType() == net.minecraft.world.entity.MobType.ILLAGER) {
-            return this.getTeam() == null && entity.getTeam() == null;
+        if ($$0 instanceof net.minecraft.world.entity.LivingEntity && ((net.minecraft.world.entity.LivingEntity)$$0).getMobType() == net.minecraft.world.entity.MobType.ILLAGER) {
+            return this.getTeam() == null && $$0.getTeam() == null;
         }
         return false;
     }
@@ -142,33 +142,33 @@
         return net.minecraft.sounds.SoundEvents.PILLAGER_DEATH;
     }
 
-    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource damageSource) {
+    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource $$0) {
         return net.minecraft.sounds.SoundEvents.PILLAGER_HURT;
     }
 
-    public void performRangedAttack(net.minecraft.world.entity.LivingEntity target, float distanceFactor) {
+    public void performRangedAttack(net.minecraft.world.entity.LivingEntity $$0, float $$1) {
         this.performCrossbowAttack((net.minecraft.world.entity.LivingEntity)this, 1.6f);
     }
 
-    public void shootCrossbowProjectile(net.minecraft.world.entity.LivingEntity target, net.minecraft.world.item.ItemStack crossbowStack, net.minecraft.world.entity.projectile.Projectile projectile, float projectileAngle) {
-        this.shootCrossbowProjectile((net.minecraft.world.entity.LivingEntity)this, target, projectile, projectileAngle, 1.6f);
+    public void shootCrossbowProjectile(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.item.ItemStack $$1, net.minecraft.world.entity.projectile.Projectile $$2, float $$3) {
+        this.shootCrossbowProjectile((net.minecraft.world.entity.LivingEntity)this, $$0, $$2, $$3, 1.6f);
     }
 
     public net.minecraft.world.SimpleContainer getInventory() {
         return this.inventory;
     }
 
-    public void pickUpItem(net.minecraft.world.entity.item.ItemEntity itemEntity) {
-        net.minecraft.world.item.ItemStack itemStack = itemEntity.getItem();
-        if (itemStack.getItem() instanceof net.minecraft.world.item.BannerItem) {
-            super.pickUpItem(itemEntity);
-        } else if (this.wantsItem(itemStack)) {
-            this.onItemPickup(itemEntity);
-            net.minecraft.world.item.ItemStack itemStack2 = this.inventory.addItem(itemStack);
-            if (itemStack2.isEmpty()) {
-                itemEntity.discard();
+    public void pickUpItem(net.minecraft.world.entity.item.ItemEntity $$0) {
+        net.minecraft.world.item.ItemStack $$1 = $$0.getItem();
+        if ($$1.getItem() instanceof net.minecraft.world.item.BannerItem) {
+            super.pickUpItem($$0);
+        } else if (this.wantsItem($$1)) {
+            this.onItemPickup($$0);
+            net.minecraft.world.item.ItemStack $$2 = this.inventory.addItem($$1);
+            if ($$2.isEmpty()) {
+                $$0.discard();
             } else {
-                itemStack.setCount(itemStack2.getCount());
+                $$1.setCount($$2.getCount());
             }
         }
     }
@@ -185,21 +185,21 @@
         return super.getSlot($$0);
     }
 
-    public void applyRaidBuffs(int wave, boolean unusedFalse) {
-        boolean bl;
-        net.minecraft.world.entity.raid.Raid raid = this.getCurrentRaid();
-        boolean bl2 = bl = this.random.nextFloat() <= raid.getEnchantOdds();
-        if (bl) {
-            net.minecraft.world.item.ItemStack itemStack = new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.CROSSBOW);
-            java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-            if (wave > raid.getNumGroups(net.minecraft.world.Difficulty.NORMAL)) {
-                hashMap.put((java.lang.Object)net.minecraft.world.item.enchantment.Enchantments.QUICK_CHARGE, (java.lang.Object)2);
-            } else if (wave > raid.getNumGroups(net.minecraft.world.Difficulty.EASY)) {
-                hashMap.put((java.lang.Object)net.minecraft.world.item.enchantment.Enchantments.QUICK_CHARGE, (java.lang.Object)1);
+    public void applyRaidBuffs(int $$0, boolean $$1) {
+        boolean $$3;
+        net.minecraft.world.entity.raid.Raid $$2 = this.getCurrentRaid();
+        boolean bl = $$3 = this.random.nextFloat() <= $$2.getEnchantOdds();
+        if ($$3) {
+            net.minecraft.world.item.ItemStack $$4 = new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.CROSSBOW);
+            java.util.HashMap $$5 = com.google.common.collect.Maps.newHashMap();
+            if ($$0 > $$2.getNumGroups(net.minecraft.world.Difficulty.NORMAL)) {
+                $$5.put((java.lang.Object)net.minecraft.world.item.enchantment.Enchantments.QUICK_CHARGE, (java.lang.Object)2);
+            } else if ($$0 > $$2.getNumGroups(net.minecraft.world.Difficulty.EASY)) {
+                $$5.put((java.lang.Object)net.minecraft.world.item.enchantment.Enchantments.QUICK_CHARGE, (java.lang.Object)1);
             }
-            hashMap.put((java.lang.Object)net.minecraft.world.item.enchantment.Enchantments.MULTISHOT, (java.lang.Object)1);
-            net.minecraft.world.item.enchantment.EnchantmentHelper.setEnchantments((java.util.Map)hashMap, (net.minecraft.world.item.ItemStack)itemStack);
-            this.setItemSlot(net.minecraft.world.entity.EquipmentSlot.MAINHAND, itemStack);
+            $$5.put((java.lang.Object)net.minecraft.world.item.enchantment.Enchantments.MULTISHOT, (java.lang.Object)1);
+            net.minecraft.world.item.enchantment.EnchantmentHelper.setEnchantments((java.util.Map)$$5, (net.minecraft.world.item.ItemStack)$$4);
+            this.setItemSlot(net.minecraft.world.entity.EquipmentSlot.MAINHAND, $$4);
         }
     }
 