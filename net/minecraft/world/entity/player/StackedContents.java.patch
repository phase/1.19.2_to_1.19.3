--- net/minecraft/world/entity/player/StackedContents.java
+++ net/minecraft/world/entity/player/StackedContents.java
@@ -12,66 +12,66 @@
         this.contents = new it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap();
     }
 
-    public void accountSimpleStack(net.minecraft.world.item.ItemStack stack) {
-        if (!(stack.isDamaged() || stack.isEnchanted() || stack.hasCustomHoverName())) {
-            this.accountStack(stack);
+    public void accountSimpleStack(net.minecraft.world.item.ItemStack $$0) {
+        if (!($$0.isDamaged() || $$0.isEnchanted() || $$0.hasCustomHoverName())) {
+            this.accountStack($$0);
         }
     }
 
-    public void accountStack(net.minecraft.world.item.ItemStack stack) {
-        this.accountStack(stack, 64);
+    public void accountStack(net.minecraft.world.item.ItemStack $$0) {
+        this.accountStack($$0, 64);
     }
 
-    public void accountStack(net.minecraft.world.item.ItemStack stack, int amount) {
-        if (!stack.isEmpty()) {
-            int n = net.minecraft.world.entity.player.StackedContents.getStackingIndex((net.minecraft.world.item.ItemStack)stack);
-            int n2 = java.lang.Math.min((int)amount, (int)stack.getCount());
-            this.put(n, n2);
+    public void accountStack(net.minecraft.world.item.ItemStack $$0, int $$1) {
+        if (!$$0.isEmpty()) {
+            int $$2 = net.minecraft.world.entity.player.StackedContents.getStackingIndex((net.minecraft.world.item.ItemStack)$$0);
+            int $$3 = java.lang.Math.min((int)$$1, (int)$$0.getCount());
+            this.put($$2, $$3);
         }
     }
 
-    public static int getStackingIndex(net.minecraft.world.item.ItemStack stack) {
-        return net.minecraft.core.Registry.ITEM.getId((java.lang.Object)stack.getItem());
+    public static int getStackingIndex(net.minecraft.world.item.ItemStack $$0) {
+        return net.minecraft.core.Registry.ITEM.getId((java.lang.Object)$$0.getItem());
     }
 
-    public boolean has(int stackingIndex) {
-        return this.contents.get(stackingIndex) > 0;
+    public boolean has(int $$0) {
+        return this.contents.get($$0) > 0;
     }
 
-    public int take(int stackingIndex, int amount) {
-        int n = this.contents.get(stackingIndex);
-        if (n >= amount) {
-            this.contents.put(stackingIndex, n - amount);
-            return stackingIndex;
+    public int take(int $$0, int $$1) {
+        int $$2 = this.contents.get($$0);
+        if ($$2 >= $$1) {
+            this.contents.put($$0, $$2 - $$1);
+            return $$0;
         }
         return 0;
     }
 
-    public void put(int stackingIndex, int increment) {
-        this.contents.put(stackingIndex, this.contents.get(stackingIndex) + increment);
+    public void put(int $$0, int $$1) {
+        this.contents.put($$0, this.contents.get($$0) + $$1);
     }
 
-    public boolean canCraft(net.minecraft.world.item.crafting.Recipe<?> recipe, @javax.annotation.Nullable it.unimi.dsi.fastutil.ints.IntList stackingIndexList) {
-        return this.canCraft(recipe, stackingIndexList, 1);
+    public boolean canCraft(net.minecraft.world.item.crafting.Recipe<?> $$0, @javax.annotation.Nullable it.unimi.dsi.fastutil.ints.IntList $$1) {
+        return this.canCraft($$0, $$1, 1);
     }
 
-    public boolean canCraft(net.minecraft.world.item.crafting.Recipe<?> recipe, @javax.annotation.Nullable it.unimi.dsi.fastutil.ints.IntList stackingIndexList, int amount) {
-        return new net.minecraft.world.entity.player.StackedContents$RecipePicker(this, recipe).tryPick(amount, stackingIndexList);
+    public boolean canCraft(net.minecraft.world.item.crafting.Recipe<?> $$0, @javax.annotation.Nullable it.unimi.dsi.fastutil.ints.IntList $$1, int $$2) {
+        return new net.minecraft.world.entity.player.StackedContents$RecipePicker(this, $$0).tryPick($$2, $$1);
     }
 
-    public int getBiggestCraftableStack(net.minecraft.world.item.crafting.Recipe<?> recipe, @javax.annotation.Nullable it.unimi.dsi.fastutil.ints.IntList stackingIndexList) {
-        return this.getBiggestCraftableStack(recipe, java.lang.Integer.MAX_VALUE, stackingIndexList);
+    public int getBiggestCraftableStack(net.minecraft.world.item.crafting.Recipe<?> $$0, @javax.annotation.Nullable it.unimi.dsi.fastutil.ints.IntList $$1) {
+        return this.getBiggestCraftableStack($$0, java.lang.Integer.MAX_VALUE, $$1);
     }
 
-    public int getBiggestCraftableStack(net.minecraft.world.item.crafting.Recipe<?> recipe, int amount, @javax.annotation.Nullable it.unimi.dsi.fastutil.ints.IntList stackingIndexList) {
-        return new net.minecraft.world.entity.player.StackedContents$RecipePicker(this, recipe).tryPickAll(amount, stackingIndexList);
+    public int getBiggestCraftableStack(net.minecraft.world.item.crafting.Recipe<?> $$0, int $$1, @javax.annotation.Nullable it.unimi.dsi.fastutil.ints.IntList $$2) {
+        return new net.minecraft.world.entity.player.StackedContents$RecipePicker(this, $$0).tryPickAll($$1, $$2);
     }
 
-    public static net.minecraft.world.item.ItemStack fromStackingIndex(int stackingIndex) {
-        if (stackingIndex == 0) {
+    public static net.minecraft.world.item.ItemStack fromStackingIndex(int $$0) {
+        if ($$0 == 0) {
             return net.minecraft.world.item.ItemStack.EMPTY;
         }
-        return new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Item.byId((int)stackingIndex));
+        return new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Item.byId((int)$$0));
     }
 
     public void clear() {