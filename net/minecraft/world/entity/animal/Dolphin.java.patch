--- net/minecraft/world/entity/animal/Dolphin.java
+++ net/minecraft/world/entity/animal/Dolphin.java
@@ -22,21 +22,21 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor level, net.minecraft.world.DifficultyInstance difficulty, net.minecraft.world.entity.MobSpawnType reason, @javax.annotation.Nullable net.minecraft.world.entity.SpawnGroupData spawnData, @javax.annotation.Nullable net.minecraft.nbt.CompoundTag dataTag) {
+    public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor $$0, net.minecraft.world.DifficultyInstance $$1, net.minecraft.world.entity.MobSpawnType $$2, @javax.annotation.Nullable net.minecraft.world.entity.SpawnGroupData $$3, @javax.annotation.Nullable net.minecraft.nbt.CompoundTag $$4) {
         this.setAirSupply(this.getMaxAirSupply());
         this.setXRot(0.0f);
-        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
+        return super.finalizeSpawn($$0, $$1, $$2, $$3, $$4);
     }
 
     public boolean canBreatheUnderwater() {
         return false;
     }
 
-    public void handleAirSupply(int airSupply) {
+    public void handleAirSupply(int $$0) {
     }
 
-    public void setTreasurePos(net.minecraft.core.BlockPos pos) {
-        this.entityData.set(TREASURE_POS, (java.lang.Object)pos);
+    public void setTreasurePos(net.minecraft.core.BlockPos $$0) {
+        this.entityData.set(TREASURE_POS, (java.lang.Object)$$0);
     }
 
     public net.minecraft.core.BlockPos getTreasurePos() {
@@ -47,16 +47,16 @@
         return (java.lang.Boolean)this.entityData.get(GOT_FISH);
     }
 
-    public void setGotFish(boolean gotFish) {
-        this.entityData.set(GOT_FISH, (java.lang.Object)gotFish);
+    public void setGotFish(boolean $$0) {
+        this.entityData.set(GOT_FISH, (java.lang.Object)$$0);
     }
 
     public int getMoistnessLevel() {
         return (java.lang.Integer)this.entityData.get(MOISTNESS_LEVEL);
     }
 
-    public void setMoisntessLevel(int moistnessLevel) {
-        this.entityData.set(MOISTNESS_LEVEL, (java.lang.Object)moistnessLevel);
+    public void setMoisntessLevel(int $$0) {
+        this.entityData.set(MOISTNESS_LEVEL, (java.lang.Object)$$0);
     }
 
     public void defineSynchedData() {
@@ -66,23 +66,23 @@
         this.entityData.define(MOISTNESS_LEVEL, (java.lang.Object)2400);
     }
 
-    public void addAdditionalSaveData(net.minecraft.nbt.CompoundTag compound) {
-        super.addAdditionalSaveData(compound);
-        compound.putInt("TreasurePosX", this.getTreasurePos().getX());
-        compound.putInt("TreasurePosY", this.getTreasurePos().getY());
-        compound.putInt("TreasurePosZ", this.getTreasurePos().getZ());
-        compound.putBoolean("GotFish", this.gotFish());
-        compound.putInt("Moistness", this.getMoistnessLevel());
+    public void addAdditionalSaveData(net.minecraft.nbt.CompoundTag $$0) {
+        super.addAdditionalSaveData($$0);
+        $$0.putInt("TreasurePosX", this.getTreasurePos().getX());
+        $$0.putInt("TreasurePosY", this.getTreasurePos().getY());
+        $$0.putInt("TreasurePosZ", this.getTreasurePos().getZ());
+        $$0.putBoolean("GotFish", this.gotFish());
+        $$0.putInt("Moistness", this.getMoistnessLevel());
     }
 
-    public void readAdditionalSaveData(net.minecraft.nbt.CompoundTag compound) {
-        int n = compound.getInt("TreasurePosX");
-        int n2 = compound.getInt("TreasurePosY");
-        int n3 = compound.getInt("TreasurePosZ");
-        this.setTreasurePos(new net.minecraft.core.BlockPos(n, n2, n3));
-        super.readAdditionalSaveData(compound);
-        this.setGotFish(compound.getBoolean("GotFish"));
-        this.setMoisntessLevel(compound.getInt("Moistness"));
+    public void readAdditionalSaveData(net.minecraft.nbt.CompoundTag $$0) {
+        int $$1 = $$0.getInt("TreasurePosX");
+        int $$2 = $$0.getInt("TreasurePosY");
+        int $$3 = $$0.getInt("TreasurePosZ");
+        this.setTreasurePos(new net.minecraft.core.BlockPos($$1, $$2, $$3));
+        super.readAdditionalSaveData($$0);
+        this.setGotFish($$0.getBoolean("GotFish"));
+        this.setMoisntessLevel($$0.getInt("Moistness"));
     }
 
     public void registerGoals() {
@@ -105,28 +105,28 @@
         return net.minecraft.world.entity.Mob.createMobAttributes().add(net.minecraft.world.entity.ai.attributes.Attributes.MAX_HEALTH, 10.0).add(net.minecraft.world.entity.ai.attributes.Attributes.MOVEMENT_SPEED, (double)1.2f).add(net.minecraft.world.entity.ai.attributes.Attributes.ATTACK_DAMAGE, 3.0);
     }
 
-    public net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level level) {
-        return new net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation((net.minecraft.world.entity.Mob)this, level);
+    public net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level $$0) {
+        return new net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation((net.minecraft.world.entity.Mob)this, $$0);
     }
 
-    public boolean doHurtTarget(net.minecraft.world.entity.Entity entity) {
-        boolean bl = entity.hurt(net.minecraft.world.damagesource.DamageSource.mobAttack((net.minecraft.world.entity.LivingEntity)this), (float)((int)this.getAttributeValue(net.minecraft.world.entity.ai.attributes.Attributes.ATTACK_DAMAGE)));
-        if (bl) {
-            this.doEnchantDamageEffects((net.minecraft.world.entity.LivingEntity)this, entity);
+    public boolean doHurtTarget(net.minecraft.world.entity.Entity $$0) {
+        boolean $$1 = $$0.hurt(net.minecraft.world.damagesource.DamageSource.mobAttack((net.minecraft.world.entity.LivingEntity)this), (float)((int)this.getAttributeValue(net.minecraft.world.entity.ai.attributes.Attributes.ATTACK_DAMAGE)));
+        if ($$1) {
+            this.doEnchantDamageEffects((net.minecraft.world.entity.LivingEntity)this, $$0);
             this.playSound(net.minecraft.sounds.SoundEvents.DOLPHIN_ATTACK, 1.0f, 1.0f);
         }
-        return bl;
+        return $$1;
     }
 
     public int getMaxAirSupply() {
         return 4800;
     }
 
-    public int increaseAirSupply(int currentAir) {
+    public int increaseAirSupply(int $$0) {
         return this.getMaxAirSupply();
     }
 
-    public float getStandingEyeHeight(net.minecraft.world.entity.Pose pose, net.minecraft.world.entity.EntityDimensions size) {
+    public float getStandingEyeHeight(net.minecraft.world.entity.Pose $$0, net.minecraft.world.entity.EntityDimensions $$1) {
         return 0.3f;
     }
 
@@ -138,26 +138,26 @@
         return 1;
     }
 
-    public boolean canRide(net.minecraft.world.entity.Entity entity) {
+    public boolean canRide(net.minecraft.world.entity.Entity $$0) {
         return true;
     }
 
-    public boolean canTakeItem(net.minecraft.world.item.ItemStack itemstack) {
-        net.minecraft.world.entity.EquipmentSlot equipmentSlot = net.minecraft.world.entity.Mob.getEquipmentSlotForItem((net.minecraft.world.item.ItemStack)itemstack);
-        if (!this.getItemBySlot(equipmentSlot).isEmpty()) {
+    public boolean canTakeItem(net.minecraft.world.item.ItemStack $$0) {
+        net.minecraft.world.entity.EquipmentSlot $$1 = net.minecraft.world.entity.Mob.getEquipmentSlotForItem((net.minecraft.world.item.ItemStack)$$0);
+        if (!this.getItemBySlot($$1).isEmpty()) {
             return false;
         }
-        return equipmentSlot == net.minecraft.world.entity.EquipmentSlot.MAINHAND && super.canTakeItem(itemstack);
+        return $$1 == net.minecraft.world.entity.EquipmentSlot.MAINHAND && super.canTakeItem($$0);
     }
 
-    public void pickUpItem(net.minecraft.world.entity.item.ItemEntity itemEntity) {
-        net.minecraft.world.item.ItemStack itemStack;
-        if (this.getItemBySlot(net.minecraft.world.entity.EquipmentSlot.MAINHAND).isEmpty() && this.canHoldItem(itemStack = itemEntity.getItem())) {
-            this.onItemPickup(itemEntity);
-            this.setItemSlot(net.minecraft.world.entity.EquipmentSlot.MAINHAND, itemStack);
+    public void pickUpItem(net.minecraft.world.entity.item.ItemEntity $$0) {
+        net.minecraft.world.item.ItemStack $$1;
+        if (this.getItemBySlot(net.minecraft.world.entity.EquipmentSlot.MAINHAND).isEmpty() && this.canHoldItem($$1 = $$0.getItem())) {
+            this.onItemPickup($$0);
+            this.setItemSlot(net.minecraft.world.entity.EquipmentSlot.MAINHAND, $$1);
             this.setGuaranteedDrop(net.minecraft.world.entity.EquipmentSlot.MAINHAND);
-            this.take((net.minecraft.world.entity.Entity)itemEntity, itemStack.getCount());
-            itemEntity.discard();
+            this.take((net.minecraft.world.entity.Entity)$$0, $$1.getCount());
+            $$0.discard();
         }
     }
 
@@ -193,39 +193,39 @@
         }
     }
 
-    public void handleEntityEvent(byte id) {
-        if (id == 38) {
+    public void handleEntityEvent(byte $$0) {
+        if ($$0 == 38) {
             this.addParticlesAroundSelf((net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.HAPPY_VILLAGER);
         } else {
-            super.handleEntityEvent(id);
+            super.handleEntityEvent($$0);
         }
     }
 
-    public void addParticlesAroundSelf(net.minecraft.core.particles.ParticleOptions particleOption) {
-        for (int i = 0; i < 7; ++i) {
-            double d = this.random.nextGaussian() * 0.01;
-            double d2 = this.random.nextGaussian() * 0.01;
-            double d3 = this.random.nextGaussian() * 0.01;
-            this.level.addParticle(particleOption, this.getRandomX(1.0), this.getRandomY() + 0.2, this.getRandomZ(1.0), d, d2, d3);
+    public void addParticlesAroundSelf(net.minecraft.core.particles.ParticleOptions $$0) {
+        for (int $$1 = 0; $$1 < 7; ++$$1) {
+            double $$2 = this.random.nextGaussian() * 0.01;
+            double $$3 = this.random.nextGaussian() * 0.01;
+            double $$4 = this.random.nextGaussian() * 0.01;
+            this.level.addParticle($$0, this.getRandomX(1.0), this.getRandomY() + 0.2, this.getRandomZ(1.0), $$2, $$3, $$4);
         }
     }
 
-    public net.minecraft.world.InteractionResult mobInteract(net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand) {
-        net.minecraft.world.item.ItemStack itemStack = player.getItemInHand(hand);
-        if (!itemStack.isEmpty() && itemStack.is(net.minecraft.tags.ItemTags.FISHES)) {
+    public net.minecraft.world.InteractionResult mobInteract(net.minecraft.world.entity.player.Player $$0, net.minecraft.world.InteractionHand $$1) {
+        net.minecraft.world.item.ItemStack $$2 = $$0.getItemInHand($$1);
+        if (!$$2.isEmpty() && $$2.is(net.minecraft.tags.ItemTags.FISHES)) {
             if (!this.level.isClientSide) {
                 this.playSound(net.minecraft.sounds.SoundEvents.DOLPHIN_EAT, 1.0f, 1.0f);
             }
             this.setGotFish(true);
-            if (!player.getAbilities().instabuild) {
-                itemStack.shrink(1);
+            if (!$$0.getAbilities().instabuild) {
+                $$2.shrink(1);
             }
             return net.minecraft.world.InteractionResult.sidedSuccess((boolean)this.level.isClientSide);
         }
-        return super.mobInteract(player, hand);
+        return super.mobInteract($$0, $$1);
     }
 
-    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource damageSource) {
+    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource $$0) {
         return net.minecraft.sounds.SoundEvents.DOLPHIN_HURT;
     }
 
@@ -255,25 +255,25 @@
         return false;
     }
 
-    public void travel(net.minecraft.world.phys.Vec3 travelVector) {
+    public void travel(net.minecraft.world.phys.Vec3 $$0) {
         if (this.isEffectiveAi() && this.isInWater()) {
-            this.moveRelative(this.getSpeed(), travelVector);
+            this.moveRelative(this.getSpeed(), $$0);
             this.move(net.minecraft.world.entity.MoverType.SELF, this.getDeltaMovement());
             this.setDeltaMovement(this.getDeltaMovement().scale(0.9));
             if (this.getTarget() == null) {
                 this.setDeltaMovement(this.getDeltaMovement().add(0.0, -0.005, 0.0));
             }
         } else {
-            super.travel(travelVector);
+            super.travel($$0);
         }
     }
 
-    public boolean canBeLeashed(net.minecraft.world.entity.player.Player player) {
+    public boolean canBeLeashed(net.minecraft.world.entity.player.Player $$0) {
         return true;
     }
 
-    public static /* synthetic */ boolean lambda$static$0(net.minecraft.world.entity.item.ItemEntity itemEntity) {
-        return !itemEntity.hasPickUpDelay() && itemEntity.isAlive() && itemEntity.isInWater();
+    public static /* synthetic */ boolean lambda$static$0(net.minecraft.world.entity.item.ItemEntity $$0) {
+        return !$$0.hasPickUpDelay() && $$0.isAlive() && $$0.isInWater();
     }
 
     public static /* synthetic */ net.minecraft.util.RandomSource access$000(net.minecraft.world.entity.animal.Dolphin $$0) {
@@ -293,7 +293,7 @@
         GOT_FISH = net.minecraft.network.syncher.SynchedEntityData.defineId(net.minecraft.world.entity.animal.Dolphin.class, (net.minecraft.network.syncher.EntityDataSerializer)net.minecraft.network.syncher.EntityDataSerializers.BOOLEAN);
         MOISTNESS_LEVEL = net.minecraft.network.syncher.SynchedEntityData.defineId(net.minecraft.world.entity.animal.Dolphin.class, (net.minecraft.network.syncher.EntityDataSerializer)net.minecraft.network.syncher.EntityDataSerializers.INT);
         SWIM_WITH_PLAYER_TARGETING = net.minecraft.world.entity.ai.targeting.TargetingConditions.forNonCombat().range(10.0).ignoreLineOfSight();
-        ALLOWED_ITEMS = itemEntity -> !itemEntity.hasPickUpDelay() && itemEntity.isAlive() && itemEntity.isInWater();
+        ALLOWED_ITEMS = $$0 -> !$$0.hasPickUpDelay() && $$0.isAlive() && $$0.isInWater();
     }
 }
 