--- net/minecraft/world/entity/animal/Ocelot.java
+++ net/minecraft/world/entity/animal/Ocelot.java
@@ -25,19 +25,19 @@
         return (java.lang.Boolean)this.entityData.get(DATA_TRUSTING);
     }
 
-    public void setTrusting(boolean trusting) {
-        this.entityData.set(DATA_TRUSTING, (java.lang.Object)trusting);
+    public void setTrusting(boolean $$0) {
+        this.entityData.set(DATA_TRUSTING, (java.lang.Object)$$0);
         this.reassessTrustingGoals();
     }
 
-    public void addAdditionalSaveData(net.minecraft.nbt.CompoundTag compound) {
-        super.addAdditionalSaveData(compound);
-        compound.putBoolean("Trusting", this.isTrusting());
+    public void addAdditionalSaveData(net.minecraft.nbt.CompoundTag $$0) {
+        super.addAdditionalSaveData($$0);
+        $$0.putBoolean("Trusting", this.isTrusting());
     }
 
-    public void readAdditionalSaveData(net.minecraft.nbt.CompoundTag compound) {
-        super.readAdditionalSaveData(compound);
-        this.setTrusting(compound.getBoolean("Trusting"));
+    public void readAdditionalSaveData(net.minecraft.nbt.CompoundTag $$0) {
+        super.readAdditionalSaveData($$0);
+        this.setTrusting($$0.getBoolean("Trusting"));
     }
 
     public void defineSynchedData() {
@@ -77,7 +77,7 @@
         }
     }
 
-    public boolean removeWhenFarAway(double distanceToClosestPlayer) {
+    public boolean removeWhenFarAway(double $$0) {
         return !this.isTrusting() && this.tickCount > 2400;
     }
 
@@ -98,7 +98,7 @@
         return 900;
     }
 
-    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource damageSource) {
+    public net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource $$0) {
         return net.minecraft.sounds.SoundEvents.OCELOT_HURT;
     }
 
@@ -110,14 +110,14 @@
         return (float)this.getAttributeValue(net.minecraft.world.entity.ai.attributes.Attributes.ATTACK_DAMAGE);
     }
 
-    public boolean doHurtTarget(net.minecraft.world.entity.Entity entity) {
-        return entity.hurt(net.minecraft.world.damagesource.DamageSource.mobAttack((net.minecraft.world.entity.LivingEntity)this), this.getAttackDamage());
+    public boolean doHurtTarget(net.minecraft.world.entity.Entity $$0) {
+        return $$0.hurt(net.minecraft.world.damagesource.DamageSource.mobAttack((net.minecraft.world.entity.LivingEntity)this), this.getAttackDamage());
     }
 
-    public net.minecraft.world.InteractionResult mobInteract(net.minecraft.world.entity.player.Player player, net.minecraft.world.InteractionHand hand) {
-        net.minecraft.world.item.ItemStack itemStack = player.getItemInHand(hand);
-        if ((this.temptGoal == null || this.temptGoal.isRunning()) && !this.isTrusting() && this.isFood(itemStack) && player.distanceToSqr((net.minecraft.world.entity.Entity)this) < 9.0) {
-            this.usePlayerItem(player, hand, itemStack);
+    public net.minecraft.world.InteractionResult mobInteract(net.minecraft.world.entity.player.Player $$0, net.minecraft.world.InteractionHand $$1) {
+        net.minecraft.world.item.ItemStack $$2 = $$0.getItemInHand($$1);
+        if ((this.temptGoal == null || this.temptGoal.isRunning()) && !this.isTrusting() && this.isFood($$2) && $$0.distanceToSqr((net.minecraft.world.entity.Entity)this) < 9.0) {
+            this.usePlayerItem($$0, $$1, $$2);
             if (!this.level.isClientSide) {
                 if (this.random.nextInt(3) == 0) {
                     this.setTrusting(true);
@@ -130,29 +130,29 @@
             }
             return net.minecraft.world.InteractionResult.sidedSuccess((boolean)this.level.isClientSide);
         }
-        return super.mobInteract(player, hand);
+        return super.mobInteract($$0, $$1);
     }
 
-    public void handleEntityEvent(byte id) {
-        if (id == 41) {
+    public void handleEntityEvent(byte $$0) {
+        if ($$0 == 41) {
             this.spawnTrustingParticles(true);
-        } else if (id == 40) {
+        } else if ($$0 == 40) {
             this.spawnTrustingParticles(false);
         } else {
-            super.handleEntityEvent(id);
+            super.handleEntityEvent($$0);
         }
     }
 
-    public void spawnTrustingParticles(boolean trusting) {
-        net.minecraft.core.particles.SimpleParticleType simpleParticleType = net.minecraft.core.particles.ParticleTypes.HEART;
-        if (!trusting) {
-            simpleParticleType = net.minecraft.core.particles.ParticleTypes.SMOKE;
+    public void spawnTrustingParticles(boolean $$0) {
+        net.minecraft.core.particles.SimpleParticleType $$1 = net.minecraft.core.particles.ParticleTypes.HEART;
+        if (!$$0) {
+            $$1 = net.minecraft.core.particles.ParticleTypes.SMOKE;
         }
-        for (int i = 0; i < 7; ++i) {
-            double d = this.random.nextGaussian() * 0.02;
-            double d2 = this.random.nextGaussian() * 0.02;
-            double d3 = this.random.nextGaussian() * 0.02;
-            this.level.addParticle((net.minecraft.core.particles.ParticleOptions)simpleParticleType, this.getRandomX(1.0), this.getRandomY() + 0.5, this.getRandomZ(1.0), d, d2, d3);
+        for (int $$2 = 0; $$2 < 7; ++$$2) {
+            double $$3 = this.random.nextGaussian() * 0.02;
+            double $$4 = this.random.nextGaussian() * 0.02;
+            double $$5 = this.random.nextGaussian() * 0.02;
+            this.level.addParticle((net.minecraft.core.particles.ParticleOptions)$$1, this.getRandomX(1.0), this.getRandomY() + 0.5, this.getRandomZ(1.0), $$3, $$4, $$5);
         }
     }
 
@@ -166,26 +166,27 @@
         }
     }
 
+    @javax.annotation.Nullable
     public net.minecraft.world.entity.animal.Ocelot getBreedOffspring(net.minecraft.server.level.ServerLevel $$0, net.minecraft.world.entity.AgeableMob $$1) {
         return (net.minecraft.world.entity.animal.Ocelot)net.minecraft.world.entity.EntityType.OCELOT.create((net.minecraft.world.level.Level)$$0);
     }
 
-    public boolean isFood(net.minecraft.world.item.ItemStack stack) {
-        return TEMPT_INGREDIENT.test(stack);
+    public boolean isFood(net.minecraft.world.item.ItemStack $$0) {
+        return TEMPT_INGREDIENT.test($$0);
     }
 
     public static boolean checkOcelotSpawnRules(net.minecraft.world.entity.EntityType<net.minecraft.world.entity.animal.Ocelot> $$0, net.minecraft.world.level.LevelAccessor $$1, net.minecraft.world.entity.MobSpawnType $$2, net.minecraft.core.BlockPos $$3, net.minecraft.util.RandomSource $$4) {
         return $$4.nextInt(3) != 0;
     }
 
-    public boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader level) {
-        if (level.isUnobstructed((net.minecraft.world.entity.Entity)this) && !level.containsAnyLiquid(this.getBoundingBox())) {
-            net.minecraft.core.BlockPos blockPos = this.blockPosition();
-            if (blockPos.getY() < level.getSeaLevel()) {
+    public boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader $$0) {
+        if ($$0.isUnobstructed((net.minecraft.world.entity.Entity)this) && !$$0.containsAnyLiquid(this.getBoundingBox())) {
+            net.minecraft.core.BlockPos $$1 = this.blockPosition();
+            if ($$1.getY() < $$0.getSeaLevel()) {
                 return false;
             }
-            net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(blockPos.below());
-            if (blockState.is(net.minecraft.world.level.block.Blocks.GRASS_BLOCK) || blockState.is(net.minecraft.tags.BlockTags.LEAVES)) {
+            net.minecraft.world.level.block.state.BlockState $$2 = $$0.getBlockState($$1.below());
+            if ($$2.is(net.minecraft.world.level.block.Blocks.GRASS_BLOCK) || $$2.is(net.minecraft.tags.BlockTags.LEAVES)) {
                 return true;
             }
         }
@@ -193,11 +194,11 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor level, net.minecraft.world.DifficultyInstance difficulty, net.minecraft.world.entity.MobSpawnType reason, @javax.annotation.Nullable net.minecraft.world.entity.SpawnGroupData spawnData, @javax.annotation.Nullable net.minecraft.nbt.CompoundTag dataTag) {
-        if (spawnData == null) {
-            spawnData = new net.minecraft.world.entity.AgeableMob$AgeableMobGroupData(1.0f);
+    public net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.ServerLevelAccessor $$0, net.minecraft.world.DifficultyInstance $$1, net.minecraft.world.entity.MobSpawnType $$2, @javax.annotation.Nullable net.minecraft.world.entity.SpawnGroupData $$3, @javax.annotation.Nullable net.minecraft.nbt.CompoundTag $$4) {
+        if ($$3 == null) {
+            $$3 = new net.minecraft.world.entity.AgeableMob$AgeableMobGroupData(1.0f);
         }
-        return super.finalizeSpawn(level, difficulty, reason, spawnData, dataTag);
+        return super.finalizeSpawn($$0, $$1, $$2, $$3, $$4);
     }
 
     public net.minecraft.world.phys.Vec3 getLeashOffset() {
@@ -208,6 +209,7 @@
         return this.isCrouching() || super.isSteppingCarefully();
     }
 
+    @javax.annotation.Nullable
     public /* synthetic */ net.minecraft.world.entity.AgeableMob getBreedOffspring(net.minecraft.server.level.ServerLevel serverLevel, net.minecraft.world.entity.AgeableMob ageableMob) {
         return this.getBreedOffspring(serverLevel, ageableMob);
     }