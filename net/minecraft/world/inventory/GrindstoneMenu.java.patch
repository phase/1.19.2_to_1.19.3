--- net/minecraft/world/inventory/GrindstoneMenu.java
+++ net/minecraft/world/inventory/GrindstoneMenu.java
@@ -18,34 +18,31 @@
     public net.minecraft.world.Container repairSlots;
     public net.minecraft.world.inventory.ContainerLevelAccess access;
 
-    public net.minecraft.world.inventory.GrindstoneMenu(int containerId, net.minecraft.world.entity.player.Inventory playerInventory) {
-        this(containerId, playerInventory, net.minecraft.world.inventory.ContainerLevelAccess.NULL);
+    public net.minecraft.world.inventory.GrindstoneMenu(int $$0, net.minecraft.world.entity.player.Inventory $$1) {
+        this($$0, $$1, net.minecraft.world.inventory.ContainerLevelAccess.NULL);
     }
 
-    public net.minecraft.world.inventory.GrindstoneMenu(int containerId, net.minecraft.world.entity.player.Inventory playerInventory, net.minecraft.world.inventory.ContainerLevelAccess access) {
-        super(net.minecraft.world.inventory.MenuType.GRINDSTONE, containerId);
-        int n;
+    public net.minecraft.world.inventory.GrindstoneMenu(int $$0, net.minecraft.world.entity.player.Inventory $$1, net.minecraft.world.inventory.ContainerLevelAccess $$2) {
+        super(net.minecraft.world.inventory.MenuType.GRINDSTONE, $$0);
         this.resultSlots = new net.minecraft.world.inventory.ResultContainer();
         this.repairSlots = new /* Unavailable Anonymous Inner Class!! */;
-        this.access = access;
+        this.access = $$2;
         this.addSlot((net.minecraft.world.inventory.Slot)new /* Unavailable Anonymous Inner Class!! */);
         this.addSlot((net.minecraft.world.inventory.Slot)new /* Unavailable Anonymous Inner Class!! */);
         this.addSlot((net.minecraft.world.inventory.Slot)new /* Unavailable Anonymous Inner Class!! */);
-        for (n = 0;
- n < 3; ++n) {
-            for (int i = 0; i < 9; ++i) {
-                this.addSlot(new net.minecraft.world.inventory.Slot((net.minecraft.world.Container)playerInventory, i + n * 9 + 9, 8 + i * 18, 84 + n * 18));
+        for (int $$3 = 0; $$3 < 3; ++$$3) {
+            for (int $$4 = 0; $$4 < 9; ++$$4) {
+                this.addSlot(new net.minecraft.world.inventory.Slot((net.minecraft.world.Container)$$1, $$4 + $$3 * 9 + 9, 8 + $$4 * 18, 84 + $$3 * 18));
             }
         }
-        for (n = 0;
- n < 9; ++n) {
-            this.addSlot(new net.minecraft.world.inventory.Slot((net.minecraft.world.Container)playerInventory, n, 8 + n * 18, 142));
+        for (int $$5 = 0; $$5 < 9; ++$$5) {
+            this.addSlot(new net.minecraft.world.inventory.Slot((net.minecraft.world.Container)$$1, $$5, 8 + $$5 * 18, 142));
         }
     }
 
-    public void slotsChanged(net.minecraft.world.Container inventory) {
-        super.slotsChanged(inventory);
-        if (inventory == this.repairSlots) {
+    public void slotsChanged(net.minecraft.world.Container $$0) {
+        super.slotsChanged($$0);
+        if ($$0 == this.repairSlots) {
             this.createResult();
         }
     }
@@ -109,78 +106,78 @@
         this.broadcastChanges();
     }
 
-    public net.minecraft.world.item.ItemStack mergeEnchants(net.minecraft.world.item.ItemStack copyTo, net.minecraft.world.item.ItemStack copyFrom) {
-        net.minecraft.world.item.ItemStack itemStack = copyTo.copy();
-        java.util.Map map = net.minecraft.world.item.enchantment.EnchantmentHelper.getEnchantments((net.minecraft.world.item.ItemStack)copyFrom);
-        for (java.util.Map$Entry entry : map.entrySet()) {
-            net.minecraft.world.item.enchantment.Enchantment enchantment = (net.minecraft.world.item.enchantment.Enchantment)entry.getKey();
-            if (enchantment.isCurse() && net.minecraft.world.item.enchantment.EnchantmentHelper.getItemEnchantmentLevel((net.minecraft.world.item.enchantment.Enchantment)enchantment, (net.minecraft.world.item.ItemStack)itemStack) != 0) continue;
-            itemStack.enchant(enchantment, ((java.lang.Integer)entry.getValue()).intValue());
+    public net.minecraft.world.item.ItemStack mergeEnchants(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1) {
+        net.minecraft.world.item.ItemStack $$2 = $$0.copy();
+        java.util.Map $$3 = net.minecraft.world.item.enchantment.EnchantmentHelper.getEnchantments((net.minecraft.world.item.ItemStack)$$1);
+        for (java.util.Map$Entry $$4 : $$3.entrySet()) {
+            net.minecraft.world.item.enchantment.Enchantment $$5 = (net.minecraft.world.item.enchantment.Enchantment)$$4.getKey();
+            if ($$5.isCurse() && net.minecraft.world.item.enchantment.EnchantmentHelper.getItemEnchantmentLevel((net.minecraft.world.item.enchantment.Enchantment)$$5, (net.minecraft.world.item.ItemStack)$$2) != 0) continue;
+            $$2.enchant($$5, ((java.lang.Integer)$$4.getValue()).intValue());
         }
-        return itemStack;
+        return $$2;
     }
 
-    public net.minecraft.world.item.ItemStack removeNonCurses(net.minecraft.world.item.ItemStack stack, int damage, int count) {
-        net.minecraft.world.item.ItemStack itemStack = stack.copy();
-        itemStack.removeTagKey("Enchantments");
-        itemStack.removeTagKey("StoredEnchantments");
-        if (damage > 0) {
-            itemStack.setDamageValue(damage);
+    public net.minecraft.world.item.ItemStack removeNonCurses(net.minecraft.world.item.ItemStack $$02, int $$1, int $$2) {
+        net.minecraft.world.item.ItemStack $$3 = $$02.copy();
+        $$3.removeTagKey("Enchantments");
+        $$3.removeTagKey("StoredEnchantments");
+        if ($$1 > 0) {
+            $$3.setDamageValue($$1);
         } else {
-            itemStack.removeTagKey("Damage");
+            $$3.removeTagKey("Damage");
         }
-        itemStack.setCount(count);
-        java.util.Map map = (java.util.Map)net.minecraft.world.item.enchantment.EnchantmentHelper.getEnchantments((net.minecraft.world.item.ItemStack)stack).entrySet().stream().filter(enchantment -> ((net.minecraft.world.item.enchantment.Enchantment)enchantment.getKey()).isCurse()).collect(java.util.stream.Collectors.toMap(java.util.Map$Entry::getKey, java.util.Map$Entry::getValue));
-        net.minecraft.world.item.enchantment.EnchantmentHelper.setEnchantments((java.util.Map)map, (net.minecraft.world.item.ItemStack)itemStack);
-        itemStack.setRepairCost(0);
-        if (itemStack.is(net.minecraft.world.item.Items.ENCHANTED_BOOK) && map.size() == 0) {
-            itemStack = new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.BOOK);
-            if (stack.hasCustomHoverName()) {
-                itemStack.setHoverName(stack.getHoverName());
+        $$3.setCount($$2);
+        java.util.Map $$4 = (java.util.Map)net.minecraft.world.item.enchantment.EnchantmentHelper.getEnchantments((net.minecraft.world.item.ItemStack)$$02).entrySet().stream().filter($$0 -> ((net.minecraft.world.item.enchantment.Enchantment)$$0.getKey()).isCurse()).collect(java.util.stream.Collectors.toMap(java.util.Map$Entry::getKey, java.util.Map$Entry::getValue));
+        net.minecraft.world.item.enchantment.EnchantmentHelper.setEnchantments((java.util.Map)$$4, (net.minecraft.world.item.ItemStack)$$3);
+        $$3.setRepairCost(0);
+        if ($$3.is(net.minecraft.world.item.Items.ENCHANTED_BOOK) && $$4.size() == 0) {
+            $$3 = new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.BOOK);
+            if ($$02.hasCustomHoverName()) {
+                $$3.setHoverName($$02.getHoverName());
             }
         }
-        for (int i = 0; i < map.size(); ++i) {
-            itemStack.setRepairCost(net.minecraft.world.inventory.AnvilMenu.calculateIncreasedRepairCost((int)itemStack.getBaseRepairCost()));
+        for (int $$5 = 0; $$5 < $$4.size(); ++$$5) {
+            $$3.setRepairCost(net.minecraft.world.inventory.AnvilMenu.calculateIncreasedRepairCost((int)$$3.getBaseRepairCost()));
         }
-        return itemStack;
+        return $$3;
     }
 
-    public void removed(net.minecraft.world.entity.player.Player player) {
-        super.removed(player);
-        this.access.execute((level, blockPos) -> this.clearContainer(player, this.repairSlots));
+    public void removed(net.minecraft.world.entity.player.Player $$0) {
+        super.removed($$0);
+        this.access.execute(($$1, $$2) -> this.clearContainer($$0, this.repairSlots));
     }
 
-    public boolean stillValid(net.minecraft.world.entity.player.Player player) {
-        return net.minecraft.world.inventory.GrindstoneMenu.stillValid((net.minecraft.world.inventory.ContainerLevelAccess)this.access, (net.minecraft.world.entity.player.Player)player, (net.minecraft.world.level.block.Block)net.minecraft.world.level.block.Blocks.GRINDSTONE);
+    public boolean stillValid(net.minecraft.world.entity.player.Player $$0) {
+        return net.minecraft.world.inventory.GrindstoneMenu.stillValid((net.minecraft.world.inventory.ContainerLevelAccess)this.access, (net.minecraft.world.entity.player.Player)$$0, (net.minecraft.world.level.block.Block)net.minecraft.world.level.block.Blocks.GRINDSTONE);
     }
 
-    public net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int index) {
-        net.minecraft.world.item.ItemStack itemStack = net.minecraft.world.item.ItemStack.EMPTY;
-        net.minecraft.world.inventory.Slot slot = (net.minecraft.world.inventory.Slot)this.slots.get(index);
-        if (slot != null && slot.hasItem()) {
-            net.minecraft.world.item.ItemStack itemStack2 = slot.getItem();
-            itemStack = itemStack2.copy();
-            net.minecraft.world.item.ItemStack itemStack3 = this.repairSlots.getItem(0);
-            net.minecraft.world.item.ItemStack itemStack4 = this.repairSlots.getItem(1);
-            if (index == 2) {
-                if (!this.moveItemStackTo(itemStack2, 3, 39, true)) {
+    public net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player $$0, int $$1) {
+        net.minecraft.world.item.ItemStack $$2 = net.minecraft.world.item.ItemStack.EMPTY;
+        net.minecraft.world.inventory.Slot $$3 = (net.minecraft.world.inventory.Slot)this.slots.get($$1);
+        if ($$3 != null && $$3.hasItem()) {
+            net.minecraft.world.item.ItemStack $$4 = $$3.getItem();
+            $$2 = $$4.copy();
+            net.minecraft.world.item.ItemStack $$5 = this.repairSlots.getItem(0);
+            net.minecraft.world.item.ItemStack $$6 = this.repairSlots.getItem(1);
+            if ($$1 == 2) {
+                if (!this.moveItemStackTo($$4, 3, 39, true)) {
                     return net.minecraft.world.item.ItemStack.EMPTY;
                 }
-                slot.onQuickCraft(itemStack2, itemStack);
-            } else if (index == 0 || index == 1 ? !this.moveItemStackTo(itemStack2, 3, 39, false) : (itemStack3.isEmpty() || itemStack4.isEmpty() ? !this.moveItemStackTo(itemStack2, 0, 2, false) : (index >= 3 && index < 30 ? !this.moveItemStackTo(itemStack2, 30, 39, false) : index >= 30 && index < 39 && !this.moveItemStackTo(itemStack2, 3, 30, false)))) {
+                $$3.onQuickCraft($$4, $$2);
+            } else if ($$1 == 0 || $$1 == 1 ? !this.moveItemStackTo($$4, 3, 39, false) : ($$5.isEmpty() || $$6.isEmpty() ? !this.moveItemStackTo($$4, 0, 2, false) : ($$1 >= 3 && $$1 < 30 ? !this.moveItemStackTo($$4, 30, 39, false) : $$1 >= 30 && $$1 < 39 && !this.moveItemStackTo($$4, 3, 30, false)))) {
                 return net.minecraft.world.item.ItemStack.EMPTY;
             }
-            if (itemStack2.isEmpty()) {
-                slot.set(net.minecraft.world.item.ItemStack.EMPTY);
+            if ($$4.isEmpty()) {
+                $$3.set(net.minecraft.world.item.ItemStack.EMPTY);
             } else {
-                slot.setChanged();
+                $$3.setChanged();
             }
-            if (itemStack2.getCount() == itemStack.getCount()) {
+            if ($$4.getCount() == $$2.getCount()) {
                 return net.minecraft.world.item.ItemStack.EMPTY;
             }
-            slot.onTake(player, itemStack2);
+            $$3.onTake($$0, $$4);
         }
-        return itemStack;
+        return $$2;
     }
 }
 