--- net/minecraft/world/inventory/CartographyTableMenu.java
+++ net/minecraft/world/inventory/CartographyTableMenu.java
@@ -18,115 +18,112 @@
     public net.minecraft.world.Container container;
     public net.minecraft.world.inventory.ResultContainer resultContainer;
 
-    public net.minecraft.world.inventory.CartographyTableMenu(int containerId, net.minecraft.world.entity.player.Inventory playerInventory) {
-        this(containerId, playerInventory, net.minecraft.world.inventory.ContainerLevelAccess.NULL);
+    public net.minecraft.world.inventory.CartographyTableMenu(int $$0, net.minecraft.world.entity.player.Inventory $$1) {
+        this($$0, $$1, net.minecraft.world.inventory.ContainerLevelAccess.NULL);
     }
 
-    public net.minecraft.world.inventory.CartographyTableMenu(int containerId, net.minecraft.world.entity.player.Inventory playerInventory, net.minecraft.world.inventory.ContainerLevelAccess access) {
-        super(net.minecraft.world.inventory.MenuType.CARTOGRAPHY_TABLE, containerId);
-        int n;
+    public net.minecraft.world.inventory.CartographyTableMenu(int $$0, net.minecraft.world.entity.player.Inventory $$1, net.minecraft.world.inventory.ContainerLevelAccess $$2) {
+        super(net.minecraft.world.inventory.MenuType.CARTOGRAPHY_TABLE, $$0);
         this.container = new /* Unavailable Anonymous Inner Class!! */;
         this.resultContainer = new /* Unavailable Anonymous Inner Class!! */;
-        this.access = access;
+        this.access = $$2;
         this.addSlot((net.minecraft.world.inventory.Slot)new /* Unavailable Anonymous Inner Class!! */);
         this.addSlot((net.minecraft.world.inventory.Slot)new /* Unavailable Anonymous Inner Class!! */);
         this.addSlot((net.minecraft.world.inventory.Slot)new /* Unavailable Anonymous Inner Class!! */);
-        for (n = 0;
- n < 3; ++n) {
-            for (int i = 0; i < 9; ++i) {
-                this.addSlot(new net.minecraft.world.inventory.Slot((net.minecraft.world.Container)playerInventory, i + n * 9 + 9, 8 + i * 18, 84 + n * 18));
+        for (int $$3 = 0; $$3 < 3; ++$$3) {
+            for (int $$4 = 0; $$4 < 9; ++$$4) {
+                this.addSlot(new net.minecraft.world.inventory.Slot((net.minecraft.world.Container)$$1, $$4 + $$3 * 9 + 9, 8 + $$4 * 18, 84 + $$3 * 18));
             }
         }
-        for (n = 0;
- n < 9; ++n) {
-            this.addSlot(new net.minecraft.world.inventory.Slot((net.minecraft.world.Container)playerInventory, n, 8 + n * 18, 142));
+        for (int $$5 = 0; $$5 < 9; ++$$5) {
+            this.addSlot(new net.minecraft.world.inventory.Slot((net.minecraft.world.Container)$$1, $$5, 8 + $$5 * 18, 142));
         }
     }
 
-    public boolean stillValid(net.minecraft.world.entity.player.Player player) {
-        return net.minecraft.world.inventory.CartographyTableMenu.stillValid((net.minecraft.world.inventory.ContainerLevelAccess)this.access, (net.minecraft.world.entity.player.Player)player, (net.minecraft.world.level.block.Block)net.minecraft.world.level.block.Blocks.CARTOGRAPHY_TABLE);
+    public boolean stillValid(net.minecraft.world.entity.player.Player $$0) {
+        return net.minecraft.world.inventory.CartographyTableMenu.stillValid((net.minecraft.world.inventory.ContainerLevelAccess)this.access, (net.minecraft.world.entity.player.Player)$$0, (net.minecraft.world.level.block.Block)net.minecraft.world.level.block.Blocks.CARTOGRAPHY_TABLE);
     }
 
-    public void slotsChanged(net.minecraft.world.Container inventory) {
-        net.minecraft.world.item.ItemStack itemStack = this.container.getItem(0);
-        net.minecraft.world.item.ItemStack itemStack2 = this.container.getItem(1);
-        net.minecraft.world.item.ItemStack itemStack3 = this.resultContainer.getItem(2);
-        if (!itemStack3.isEmpty() && (itemStack.isEmpty() || itemStack2.isEmpty())) {
+    public void slotsChanged(net.minecraft.world.Container $$0) {
+        net.minecraft.world.item.ItemStack $$1 = this.container.getItem(0);
+        net.minecraft.world.item.ItemStack $$2 = this.container.getItem(1);
+        net.minecraft.world.item.ItemStack $$3 = this.resultContainer.getItem(2);
+        if (!$$3.isEmpty() && ($$1.isEmpty() || $$2.isEmpty())) {
             this.resultContainer.removeItemNoUpdate(2);
-        } else if (!itemStack.isEmpty() && !itemStack2.isEmpty()) {
-            this.setupResultSlot(itemStack, itemStack2, itemStack3);
+        } else if (!$$1.isEmpty() && !$$2.isEmpty()) {
+            this.setupResultSlot($$1, $$2, $$3);
         }
     }
 
     public void setupResultSlot(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1, net.minecraft.world.item.ItemStack $$2) {
-        this.access.execute((level, blockPos) -> {
-            net.minecraft.world.item.ItemStack itemStack4;
-            net.minecraft.world.level.saveddata.maps.MapItemSavedData mapItemSavedData = net.minecraft.world.item.MapItem.getSavedData((net.minecraft.world.item.ItemStack)$$0, (net.minecraft.world.level.Level)level);
-            if (mapItemSavedData == null) {
+        this.access.execute(($$3, $$4) -> {
+            void $$9;
+            net.minecraft.world.level.saveddata.maps.MapItemSavedData $$5 = net.minecraft.world.item.MapItem.getSavedData((net.minecraft.world.item.ItemStack)$$0, (net.minecraft.world.level.Level)$$3);
+            if ($$5 == null) {
                 return;
             }
-            if ($$1.is(net.minecraft.world.item.Items.PAPER) && !mapItemSavedData.locked && mapItemSavedData.scale < 4) {
-                itemStack4 = $$0.copy();
-                itemStack4.setCount(1);
-                itemStack4.getOrCreateTag().putInt("map_scale_direction", 1);
+            if ($$1.is(net.minecraft.world.item.Items.PAPER) && !$$5.locked && $$5.scale < 4) {
+                net.minecraft.world.item.ItemStack $$6 = $$0.copy();
+                $$6.setCount(1);
+                $$6.getOrCreateTag().putInt("map_scale_direction", 1);
                 this.broadcastChanges();
-            } else if ($$1.is(net.minecraft.world.item.Items.GLASS_PANE) && !mapItemSavedData.locked) {
-                itemStack4 = $$0.copy();
-                itemStack4.setCount(1);
-                itemStack4.getOrCreateTag().putBoolean("map_to_lock", true);
+            } else if ($$1.is(net.minecraft.world.item.Items.GLASS_PANE) && !$$5.locked) {
+                net.minecraft.world.item.ItemStack $$7 = $$0.copy();
+                $$7.setCount(1);
+                $$7.getOrCreateTag().putBoolean("map_to_lock", true);
                 this.broadcastChanges();
             } else if ($$1.is(net.minecraft.world.item.Items.MAP)) {
-                itemStack4 = $$0.copy();
-                itemStack4.setCount(2);
+                net.minecraft.world.item.ItemStack $$8 = $$0.copy();
+                $$8.setCount(2);
                 this.broadcastChanges();
             } else {
                 this.resultContainer.removeItemNoUpdate(2);
                 this.broadcastChanges();
                 return;
             }
-            if (!net.minecraft.world.item.ItemStack.matches((net.minecraft.world.item.ItemStack)itemStack4, (net.minecraft.world.item.ItemStack)$$2)) {
-                this.resultContainer.setItem(2, itemStack4);
+            if (!net.minecraft.world.item.ItemStack.matches((net.minecraft.world.item.ItemStack)$$9, (net.minecraft.world.item.ItemStack)$$2)) {
+                this.resultContainer.setItem(2, (net.minecraft.world.item.ItemStack)$$9);
                 this.broadcastChanges();
             }
         });
     }
 
-    public boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack stack, net.minecraft.world.inventory.Slot slot) {
-        return slot.container != this.resultContainer && super.canTakeItemForPickAll(stack, slot);
+    public boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.inventory.Slot $$1) {
+        return $$1.container != this.resultContainer && super.canTakeItemForPickAll($$0, $$1);
     }
 
-    public net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int index) {
-        net.minecraft.world.item.ItemStack itemStack = net.minecraft.world.item.ItemStack.EMPTY;
-        net.minecraft.world.inventory.Slot slot = (net.minecraft.world.inventory.Slot)this.slots.get(index);
-        if (slot != null && slot.hasItem()) {
-            net.minecraft.world.item.ItemStack itemStack2 = slot.getItem();
-            itemStack = itemStack2.copy();
-            if (index == 2) {
-                itemStack2.getItem().onCraftedBy(itemStack2, player.level, player);
-                if (!this.moveItemStackTo(itemStack2, 3, 39, true)) {
+    public net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player $$0, int $$1) {
+        net.minecraft.world.item.ItemStack $$2 = net.minecraft.world.item.ItemStack.EMPTY;
+        net.minecraft.world.inventory.Slot $$3 = (net.minecraft.world.inventory.Slot)this.slots.get($$1);
+        if ($$3 != null && $$3.hasItem()) {
+            net.minecraft.world.item.ItemStack $$4 = $$3.getItem();
+            $$2 = $$4.copy();
+            if ($$1 == 2) {
+                $$4.getItem().onCraftedBy($$4, $$0.level, $$0);
+                if (!this.moveItemStackTo($$4, 3, 39, true)) {
                     return net.minecraft.world.item.ItemStack.EMPTY;
                 }
-                slot.onQuickCraft(itemStack2, itemStack);
-            } else if (index == 1 || index == 0 ? !this.moveItemStackTo(itemStack2, 3, 39, false) : (itemStack2.is(net.minecraft.world.item.Items.FILLED_MAP) ? !this.moveItemStackTo(itemStack2, 0, 1, false) : (itemStack2.is(net.minecraft.world.item.Items.PAPER) || itemStack2.is(net.minecraft.world.item.Items.MAP) || itemStack2.is(net.minecraft.world.item.Items.GLASS_PANE) ? !this.moveItemStackTo(itemStack2, 1, 2, false) : (index >= 3 && index < 30 ? !this.moveItemStackTo(itemStack2, 30, 39, false) : index >= 30 && index < 39 && !this.moveItemStackTo(itemStack2, 3, 30, false))))) {
+                $$3.onQuickCraft($$4, $$2);
+            } else if ($$1 == 1 || $$1 == 0 ? !this.moveItemStackTo($$4, 3, 39, false) : ($$4.is(net.minecraft.world.item.Items.FILLED_MAP) ? !this.moveItemStackTo($$4, 0, 1, false) : ($$4.is(net.minecraft.world.item.Items.PAPER) || $$4.is(net.minecraft.world.item.Items.MAP) || $$4.is(net.minecraft.world.item.Items.GLASS_PANE) ? !this.moveItemStackTo($$4, 1, 2, false) : ($$1 >= 3 && $$1 < 30 ? !this.moveItemStackTo($$4, 30, 39, false) : $$1 >= 30 && $$1 < 39 && !this.moveItemStackTo($$4, 3, 30, false))))) {
                 return net.minecraft.world.item.ItemStack.EMPTY;
             }
-            if (itemStack2.isEmpty()) {
-                slot.set(net.minecraft.world.item.ItemStack.EMPTY);
+            if ($$4.isEmpty()) {
+                $$3.set(net.minecraft.world.item.ItemStack.EMPTY);
             }
-            slot.setChanged();
-            if (itemStack2.getCount() == itemStack.getCount()) {
+            $$3.setChanged();
+            if ($$4.getCount() == $$2.getCount()) {
                 return net.minecraft.world.item.ItemStack.EMPTY;
             }
-            slot.onTake(player, itemStack2);
+            $$3.onTake($$0, $$4);
             this.broadcastChanges();
         }
-        return itemStack;
+        return $$2;
     }
 
-    public void removed(net.minecraft.world.entity.player.Player player) {
-        super.removed(player);
+    public void removed(net.minecraft.world.entity.player.Player $$0) {
+        super.removed($$0);
         this.resultContainer.removeItemNoUpdate(2);
-        this.access.execute((level, blockPos) -> this.clearContainer(player, this.container));
+        this.access.execute(($$1, $$2) -> this.clearContainer($$0, this.container));
     }
 }
 