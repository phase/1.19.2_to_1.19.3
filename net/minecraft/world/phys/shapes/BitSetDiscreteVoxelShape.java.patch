--- net/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape.java
+++ net/minecraft/world/phys/shapes/BitSetDiscreteVoxelShape.java
@@ -40,35 +40,35 @@
         return $$9;
     }
 
-    public net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape(net.minecraft.world.phys.shapes.DiscreteVoxelShape shape) {
-        super(shape.xSize, shape.ySize, shape.zSize);
-        if (shape instanceof net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape) {
-            this.storage = (java.util.BitSet)((net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape)shape).storage.clone();
+    public net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape(net.minecraft.world.phys.shapes.DiscreteVoxelShape $$0) {
+        super($$0.xSize, $$0.ySize, $$0.zSize);
+        if ($$0 instanceof net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape) {
+            this.storage = (java.util.BitSet)((net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape)$$0).storage.clone();
         } else {
             this.storage = new java.util.BitSet(this.xSize * this.ySize * this.zSize);
-            for (int i = 0; i < this.xSize; ++i) {
-                for (int j = 0; j < this.ySize; ++j) {
-                    for (int k = 0; k < this.zSize; ++k) {
-                        if (!shape.isFull(i, j, k)) continue;
-                        this.storage.set(this.getIndex(i, j, k));
+            for (int $$1 = 0; $$1 < this.xSize; ++$$1) {
+                for (int $$2 = 0; $$2 < this.ySize; ++$$2) {
+                    for (int $$3 = 0; $$3 < this.zSize; ++$$3) {
+                        if (!$$0.isFull($$1, $$2, $$3)) continue;
+                        this.storage.set(this.getIndex($$1, $$2, $$3));
                     }
                 }
             }
         }
-        this.xMin = shape.firstFull(net.minecraft.core.Direction$Axis.X);
-        this.yMin = shape.firstFull(net.minecraft.core.Direction$Axis.Y);
-        this.zMin = shape.firstFull(net.minecraft.core.Direction$Axis.Z);
-        this.xMax = shape.lastFull(net.minecraft.core.Direction$Axis.X);
-        this.yMax = shape.lastFull(net.minecraft.core.Direction$Axis.Y);
-        this.zMax = shape.lastFull(net.minecraft.core.Direction$Axis.Z);
+        this.xMin = $$0.firstFull(net.minecraft.core.Direction$Axis.X);
+        this.yMin = $$0.firstFull(net.minecraft.core.Direction$Axis.Y);
+        this.zMin = $$0.firstFull(net.minecraft.core.Direction$Axis.Z);
+        this.xMax = $$0.lastFull(net.minecraft.core.Direction$Axis.X);
+        this.yMax = $$0.lastFull(net.minecraft.core.Direction$Axis.Y);
+        this.zMax = $$0.lastFull(net.minecraft.core.Direction$Axis.Z);
     }
 
-    public int getIndex(int x, int y, int z) {
-        return (x * this.ySize + y) * this.zSize + z;
+    public int getIndex(int $$0, int $$1, int $$2) {
+        return ($$0 * this.ySize + $$1) * this.zSize + $$2;
     }
 
-    public boolean isFull(int x, int y, int z) {
-        return this.storage.get(this.getIndex(x, y, z));
+    public boolean isFull(int $$0, int $$1, int $$2) {
+        return this.storage.get(this.getIndex($$0, $$1, $$2));
     }
 
     public void fillUpdateBounds(int $$0, int $$1, int $$2, boolean $$3) {
@@ -91,50 +91,50 @@
         return this.storage.isEmpty();
     }
 
-    public int firstFull(net.minecraft.core.Direction$Axis axis) {
-        return axis.choose(this.xMin, this.yMin, this.zMin);
+    public int firstFull(net.minecraft.core.Direction$Axis $$0) {
+        return $$0.choose(this.xMin, this.yMin, this.zMin);
     }
 
-    public int lastFull(net.minecraft.core.Direction$Axis axis) {
-        return axis.choose(this.xMax, this.yMax, this.zMax);
+    public int lastFull(net.minecraft.core.Direction$Axis $$0) {
+        return $$0.choose(this.xMax, this.yMax, this.zMax);
     }
 
-    public static net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape join(net.minecraft.world.phys.shapes.DiscreteVoxelShape mainShape, net.minecraft.world.phys.shapes.DiscreteVoxelShape secondaryShape, net.minecraft.world.phys.shapes.IndexMerger mergerX, net.minecraft.world.phys.shapes.IndexMerger mergerY, net.minecraft.world.phys.shapes.IndexMerger mergerZ, net.minecraft.world.phys.shapes.BooleanOp operator) {
-        net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape bitSetDiscreteVoxelShape = new net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape(mergerX.size() - 1, mergerY.size() - 1, mergerZ.size() - 1);
-        int[] nArray = new int[]{java.lang.Integer.MAX_VALUE, java.lang.Integer.MAX_VALUE, java.lang.Integer.MAX_VALUE, java.lang.Integer.MIN_VALUE, java.lang.Integer.MIN_VALUE, java.lang.Integer.MIN_VALUE};
-        mergerX.forMergedIndexes((x1, x2, x3) -> {
-            boolean[] blArray = new boolean[]{false};
-            mergerY.forMergedIndexes(($$10, $$11, $$122) -> {
+    public static net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape join(net.minecraft.world.phys.shapes.DiscreteVoxelShape $$0, net.minecraft.world.phys.shapes.DiscreteVoxelShape $$1, net.minecraft.world.phys.shapes.IndexMerger $$2, net.minecraft.world.phys.shapes.IndexMerger $$3, net.minecraft.world.phys.shapes.IndexMerger $$4, net.minecraft.world.phys.shapes.BooleanOp $$5) {
+        net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape $$6 = new net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape($$2.size() - 1, $$3.size() - 1, $$4.size() - 1);
+        int[] $$72 = new int[]{java.lang.Integer.MAX_VALUE, java.lang.Integer.MAX_VALUE, java.lang.Integer.MAX_VALUE, java.lang.Integer.MIN_VALUE, java.lang.Integer.MIN_VALUE, java.lang.Integer.MIN_VALUE};
+        $$2.forMergedIndexes(($$7, $$8, $$9) -> {
+            boolean[] $$102 = new boolean[]{false};
+            $$3.forMergedIndexes(($$10, $$11, $$122) -> {
                 boolean[] $$132 = new boolean[]{false};
-                mergerZ.forMergedIndexes(($$12, $$13, $$14) -> {
-                    if (operator.apply(mainShape.isFullWide(x1, $$10, $$12), secondaryShape.isFullWide(x2, $$11, $$13))) {
-                        $$7.storage.set(bitSetDiscreteVoxelShape.getIndex(x3, $$122, $$14));
-                        $$10[2] = java.lang.Math.min((int)nArray[2], (int)$$14);
-                        $$10[5] = java.lang.Math.max((int)nArray[5], (int)$$14);
+                $$4.forMergedIndexes(($$12, $$13, $$14) -> {
+                    if ($$5.apply($$0.isFullWide($$7, $$10, $$12), $$1.isFullWide($$8, $$11, $$13))) {
+                        $$7.storage.set($$6.getIndex($$9, $$122, $$14));
+                        $$10[2] = java.lang.Math.min((int)$$72[2], (int)$$14);
+                        $$10[5] = java.lang.Math.max((int)$$72[5], (int)$$14);
                         $$11[0] = true;
                     }
                     return true;
                 });
                 if ($$132[0]) {
-                    $$8[1] = java.lang.Math.min((int)nArray[1], (int)$$122);
-                    $$8[4] = java.lang.Math.max((int)nArray[4], (int)$$122);
+                    $$8[1] = java.lang.Math.min((int)$$72[1], (int)$$122);
+                    $$8[4] = java.lang.Math.max((int)$$72[4], (int)$$122);
                     $$9[0] = true;
                 }
                 return true;
             });
-            if (blArray[0]) {
-                nArray[0] = java.lang.Math.min((int)nArray[0], (int)x3);
-                nArray[3] = java.lang.Math.max((int)nArray[3], (int)x3);
+            if ($$102[0]) {
+                $$6[0] = java.lang.Math.min((int)$$72[0], (int)$$9);
+                $$6[3] = java.lang.Math.max((int)$$72[3], (int)$$9);
             }
             return true;
         });
-        bitSetDiscreteVoxelShape.xMin = nArray[0];
-        bitSetDiscreteVoxelShape.yMin = nArray[1];
-        bitSetDiscreteVoxelShape.zMin = nArray[2];
-        bitSetDiscreteVoxelShape.xMax = nArray[3] + 1;
-        bitSetDiscreteVoxelShape.yMax = nArray[4] + 1;
-        bitSetDiscreteVoxelShape.zMax = nArray[5] + 1;
-        return bitSetDiscreteVoxelShape;
+        $$6.xMin = $$72[0];
+        $$6.yMin = $$72[1];
+        $$6.zMin = $$72[2];
+        $$6.xMax = $$72[3] + 1;
+        $$6.yMax = $$72[4] + 1;
+        $$6.zMax = $$72[5] + 1;
+        return $$6;
     }
 
     public static void forAllBoxes(net.minecraft.world.phys.shapes.DiscreteVoxelShape $$0, net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer $$1, boolean $$2) {