--- net/minecraft/world/phys/shapes/IndirectMerger.java
+++ net/minecraft/world/phys/shapes/IndirectMerger.java
@@ -12,57 +12,57 @@
     public int[] secondIndices;
     public int resultLength;
 
-    public net.minecraft.world.phys.shapes.IndirectMerger(it.unimi.dsi.fastutil.doubles.DoubleList lower, it.unimi.dsi.fastutil.doubles.DoubleList upper, boolean bl, boolean bl2) {
-        double d = java.lang.Double.NaN;
-        int n = lower.size();
-        int n2 = upper.size();
-        int n3 = n + n2;
-        this.result = new double[n3];
-        this.firstIndices = new int[n3];
-        this.secondIndices = new int[n3];
-        boolean bl3 = !bl;
-        boolean bl4 = !bl2;
-        int n4 = 0;
-        int n5 = 0;
-        int n6 = 0;
+    public net.minecraft.world.phys.shapes.IndirectMerger(it.unimi.dsi.fastutil.doubles.DoubleList $$0, it.unimi.dsi.fastutil.doubles.DoubleList $$1, boolean $$2, boolean $$3) {
+        double $$4 = java.lang.Double.NaN;
+        int $$5 = $$0.size();
+        int $$6 = $$1.size();
+        int $$7 = $$5 + $$6;
+        this.result = new double[$$7];
+        this.firstIndices = new int[$$7];
+        this.secondIndices = new int[$$7];
+        boolean $$8 = !$$2;
+        boolean $$9 = !$$3;
+        int $$10 = 0;
+        int $$11 = 0;
+        int $$12 = 0;
         while (true) {
-            double d2;
-            boolean bl5;
-            boolean bl6;
-            boolean bl7 = n5 >= n;
-            boolean bl8 = bl6 = n6 >= n2;
-            if (bl7 && bl6) break;
-            boolean bl9 = bl5 = !bl7 && (bl6 || lower.getDouble(n5) < upper.getDouble(n6) + 1.0E-7);
-            if (bl5) {
-                ++n5;
-                if (bl3 && (n6 == 0 || bl6)) {
+            double $$18;
+            boolean $$15;
+            boolean $$14;
+            boolean $$13 = $$11 >= $$5;
+            boolean bl = $$14 = $$12 >= $$6;
+            if ($$13 && $$14) break;
+            boolean bl2 = $$15 = !$$13 && ($$14 || $$0.getDouble($$11) < $$1.getDouble($$12) + 1.0E-7);
+            if ($$15) {
+                ++$$11;
+                if ($$8 && ($$12 == 0 || $$14)) {
                     continue;
                 }
             } else {
-                ++n6;
-                if (bl4 && (n5 == 0 || bl7)) continue;
+                ++$$12;
+                if ($$9 && ($$11 == 0 || $$13)) continue;
             }
-            int n7 = n5 - 1;
-            int n8 = n6 - 1;
-            double d3 = d2 = bl5 ? lower.getDouble(n7) : upper.getDouble(n8);
-            if (!(d >= d2 - 1.0E-7)) {
-                this.firstIndices[n4] = n7;
-                this.secondIndices[n4] = n8;
-                this.result[n4] = d2;
-                ++n4;
-                d = d2;
+            int $$16 = $$11 - 1;
+            int $$17 = $$12 - 1;
+            double d = $$18 = $$15 ? $$0.getDouble($$16) : $$1.getDouble($$17);
+            if (!($$4 >= $$18 - 1.0E-7)) {
+                this.firstIndices[$$10] = $$16;
+                this.secondIndices[$$10] = $$17;
+                this.result[$$10] = $$18;
+                ++$$10;
+                $$4 = $$18;
                 continue;
             }
-            this.firstIndices[n4 - 1] = n7;
-            this.secondIndices[n4 - 1] = n8;
+            this.firstIndices[$$10 - 1] = $$16;
+            this.secondIndices[$$10 - 1] = $$17;
         }
-        this.resultLength = java.lang.Math.max((int)1, (int)n4);
+        this.resultLength = java.lang.Math.max((int)1, (int)$$10);
     }
 
-    public boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer consumer) {
-        int n = this.resultLength - 1;
-        for (int i = 0; i < n; ++i) {
-            if (consumer.merge(this.firstIndices[i], this.secondIndices[i], i)) continue;
+    public boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer $$0) {
+        int $$1 = this.resultLength - 1;
+        for (int $$2 = 0; $$2 < $$1; ++$$2) {
+            if ($$0.merge(this.firstIndices[$$2], this.secondIndices[$$2], $$2)) continue;
             return false;
         }
         return true;