--- net/minecraft/world/phys/shapes/Shapes.java
+++ net/minecraft/world/phys/shapes/Shapes.java
@@ -22,11 +22,11 @@
         return BLOCK;
     }
 
-    public static net.minecraft.world.phys.shapes.VoxelShape box(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
-        if (minX > maxX || minY > maxY || minZ > maxZ) {
+    public static net.minecraft.world.phys.shapes.VoxelShape box(double $$0, double $$1, double $$2, double $$3, double $$4, double $$5) {
+        if ($$0 > $$3 || $$1 > $$4 || $$2 > $$5) {
             throw new java.lang.IllegalArgumentException("The min values need to be smaller or equals to the max values");
         }
-        return net.minecraft.world.phys.shapes.Shapes.create((double)minX, (double)minY, (double)minZ, (double)maxX, (double)maxY, (double)maxZ);
+        return net.minecraft.world.phys.shapes.Shapes.create((double)$$0, (double)$$1, (double)$$2, (double)$$3, (double)$$4, (double)$$5);
     }
 
     public static net.minecraft.world.phys.shapes.VoxelShape create(double $$0, double $$1, double $$2, double $$3, double $$4, double $$5) {
@@ -49,98 +49,98 @@
         return new net.minecraft.world.phys.shapes.CubeVoxelShape((net.minecraft.world.phys.shapes.DiscreteVoxelShape)$$12);
     }
 
-    public static net.minecraft.world.phys.shapes.VoxelShape create(net.minecraft.world.phys.AABB aabb) {
-        return net.minecraft.world.phys.shapes.Shapes.create((double)aabb.minX, (double)aabb.minY, (double)aabb.minZ, (double)aabb.maxX, (double)aabb.maxY, (double)aabb.maxZ);
+    public static net.minecraft.world.phys.shapes.VoxelShape create(net.minecraft.world.phys.AABB $$0) {
+        return net.minecraft.world.phys.shapes.Shapes.create((double)$$0.minX, (double)$$0.minY, (double)$$0.minZ, (double)$$0.maxX, (double)$$0.maxY, (double)$$0.maxZ);
     }
 
     @com.google.common.annotations.VisibleForTesting
-    public static int findBits(double minBits, double maxBits) {
-        if (minBits < -1.0E-7 || maxBits > 1.0000001) {
+    public static int findBits(double $$0, double $$1) {
+        if ($$0 < -1.0E-7 || $$1 > 1.0000001) {
             return -1;
         }
-        for (int i = 0; i <= 3; ++i) {
-            boolean bl;
-            int n = 1 << i;
-            double d = minBits * (double)n;
-            double d2 = maxBits * (double)n;
-            boolean bl2 = java.lang.Math.abs((double)(d - (double)java.lang.Math.round((double)d))) < 1.0E-7 * (double)n;
-            boolean bl3 = bl = java.lang.Math.abs((double)(d2 - (double)java.lang.Math.round((double)d2))) < 1.0E-7 * (double)n;
-            if (!bl2 || !bl) continue;
-            return i;
+        for (int $$2 = 0; $$2 <= 3; ++$$2) {
+            boolean $$7;
+            int $$3 = 1 << $$2;
+            double $$4 = $$0 * (double)$$3;
+            double $$5 = $$1 * (double)$$3;
+            boolean $$6 = java.lang.Math.abs((double)($$4 - (double)java.lang.Math.round((double)$$4))) < 1.0E-7 * (double)$$3;
+            boolean bl = $$7 = java.lang.Math.abs((double)($$5 - (double)java.lang.Math.round((double)$$5))) < 1.0E-7 * (double)$$3;
+            if (!$$6 || !$$7) continue;
+            return $$2;
         }
         return -1;
     }
 
-    public static long lcm(int aa, int bb) {
-        return (long)aa * (long)(bb / com.google.common.math.IntMath.gcd((int)aa, (int)bb));
+    public static long lcm(int $$0, int $$1) {
+        return (long)$$0 * (long)($$1 / com.google.common.math.IntMath.gcd((int)$$0, (int)$$1));
     }
 
-    public static net.minecraft.world.phys.shapes.VoxelShape or(net.minecraft.world.phys.shapes.VoxelShape shape1, net.minecraft.world.phys.shapes.VoxelShape shape2) {
-        return net.minecraft.world.phys.shapes.Shapes.join((net.minecraft.world.phys.shapes.VoxelShape)shape1, (net.minecraft.world.phys.shapes.VoxelShape)shape2, (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.OR);
+    public static net.minecraft.world.phys.shapes.VoxelShape or(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.world.phys.shapes.VoxelShape $$1) {
+        return net.minecraft.world.phys.shapes.Shapes.join((net.minecraft.world.phys.shapes.VoxelShape)$$0, (net.minecraft.world.phys.shapes.VoxelShape)$$1, (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.OR);
     }
 
     public static net.minecraft.world.phys.shapes.VoxelShape or(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.world.phys.shapes.VoxelShape ... $$1) {
         return (net.minecraft.world.phys.shapes.VoxelShape)java.util.Arrays.stream((java.lang.Object[])$$1).reduce((java.lang.Object)$$0, net.minecraft.world.phys.shapes.Shapes::or);
     }
 
-    public static net.minecraft.world.phys.shapes.VoxelShape join(net.minecraft.world.phys.shapes.VoxelShape shape1, net.minecraft.world.phys.shapes.VoxelShape shape2, net.minecraft.world.phys.shapes.BooleanOp function) {
-        return net.minecraft.world.phys.shapes.Shapes.joinUnoptimized((net.minecraft.world.phys.shapes.VoxelShape)shape1, (net.minecraft.world.phys.shapes.VoxelShape)shape2, (net.minecraft.world.phys.shapes.BooleanOp)function).optimize();
+    public static net.minecraft.world.phys.shapes.VoxelShape join(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.world.phys.shapes.VoxelShape $$1, net.minecraft.world.phys.shapes.BooleanOp $$2) {
+        return net.minecraft.world.phys.shapes.Shapes.joinUnoptimized((net.minecraft.world.phys.shapes.VoxelShape)$$0, (net.minecraft.world.phys.shapes.VoxelShape)$$1, (net.minecraft.world.phys.shapes.BooleanOp)$$2).optimize();
     }
 
-    public static net.minecraft.world.phys.shapes.VoxelShape joinUnoptimized(net.minecraft.world.phys.shapes.VoxelShape shape1, net.minecraft.world.phys.shapes.VoxelShape shape2, net.minecraft.world.phys.shapes.BooleanOp function) {
-        if (function.apply(false, false)) {
+    public static net.minecraft.world.phys.shapes.VoxelShape joinUnoptimized(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.world.phys.shapes.VoxelShape $$1, net.minecraft.world.phys.shapes.BooleanOp $$2) {
+        if ($$2.apply(false, false)) {
             throw (java.lang.IllegalArgumentException)net.minecraft.Util.pauseInIde((java.lang.Throwable)new java.lang.IllegalArgumentException());
         }
-        if (shape1 == shape2) {
-            return function.apply(true, true) ? shape1 : net.minecraft.world.phys.shapes.Shapes.empty();
+        if ($$0 == $$1) {
+            return $$2.apply(true, true) ? $$0 : net.minecraft.world.phys.shapes.Shapes.empty();
         }
-        boolean bl = function.apply(true, false);
-        boolean bl2 = function.apply(false, true);
-        if (shape1.isEmpty()) {
-            return bl2 ? shape2 : net.minecraft.world.phys.shapes.Shapes.empty();
+        boolean $$3 = $$2.apply(true, false);
+        boolean $$4 = $$2.apply(false, true);
+        if ($$0.isEmpty()) {
+            return $$4 ? $$1 : net.minecraft.world.phys.shapes.Shapes.empty();
         }
-        if (shape2.isEmpty()) {
-            return bl ? shape1 : net.minecraft.world.phys.shapes.Shapes.empty();
+        if ($$1.isEmpty()) {
+            return $$3 ? $$0 : net.minecraft.world.phys.shapes.Shapes.empty();
         }
-        net.minecraft.world.phys.shapes.IndexMerger indexMerger = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)1, (it.unimi.dsi.fastutil.doubles.DoubleList)shape1.getCoords(net.minecraft.core.Direction$Axis.X), (it.unimi.dsi.fastutil.doubles.DoubleList)shape2.getCoords(net.minecraft.core.Direction$Axis.X), (boolean)bl, (boolean)bl2);
-        net.minecraft.world.phys.shapes.IndexMerger indexMerger2 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)(indexMerger.size() - 1), (it.unimi.dsi.fastutil.doubles.DoubleList)shape1.getCoords(net.minecraft.core.Direction$Axis.Y), (it.unimi.dsi.fastutil.doubles.DoubleList)shape2.getCoords(net.minecraft.core.Direction$Axis.Y), (boolean)bl, (boolean)bl2);
-        net.minecraft.world.phys.shapes.IndexMerger indexMerger3 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)((indexMerger.size() - 1) * (indexMerger2.size() - 1)), (it.unimi.dsi.fastutil.doubles.DoubleList)shape1.getCoords(net.minecraft.core.Direction$Axis.Z), (it.unimi.dsi.fastutil.doubles.DoubleList)shape2.getCoords(net.minecraft.core.Direction$Axis.Z), (boolean)bl, (boolean)bl2);
-        net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape bitSetDiscreteVoxelShape = net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape.join((net.minecraft.world.phys.shapes.DiscreteVoxelShape)shape1.shape, (net.minecraft.world.phys.shapes.DiscreteVoxelShape)shape2.shape, (net.minecraft.world.phys.shapes.IndexMerger)indexMerger, (net.minecraft.world.phys.shapes.IndexMerger)indexMerger2, (net.minecraft.world.phys.shapes.IndexMerger)indexMerger3, (net.minecraft.world.phys.shapes.BooleanOp)function);
-        if (indexMerger instanceof net.minecraft.world.phys.shapes.DiscreteCubeMerger && indexMerger2 instanceof net.minecraft.world.phys.shapes.DiscreteCubeMerger && indexMerger3 instanceof net.minecraft.world.phys.shapes.DiscreteCubeMerger) {
-            return new net.minecraft.world.phys.shapes.CubeVoxelShape((net.minecraft.world.phys.shapes.DiscreteVoxelShape)bitSetDiscreteVoxelShape);
+        net.minecraft.world.phys.shapes.IndexMerger $$5 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)1, (it.unimi.dsi.fastutil.doubles.DoubleList)$$0.getCoords(net.minecraft.core.Direction$Axis.X), (it.unimi.dsi.fastutil.doubles.DoubleList)$$1.getCoords(net.minecraft.core.Direction$Axis.X), (boolean)$$3, (boolean)$$4);
+        net.minecraft.world.phys.shapes.IndexMerger $$6 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)($$5.size() - 1), (it.unimi.dsi.fastutil.doubles.DoubleList)$$0.getCoords(net.minecraft.core.Direction$Axis.Y), (it.unimi.dsi.fastutil.doubles.DoubleList)$$1.getCoords(net.minecraft.core.Direction$Axis.Y), (boolean)$$3, (boolean)$$4);
+        net.minecraft.world.phys.shapes.IndexMerger $$7 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)(($$5.size() - 1) * ($$6.size() - 1)), (it.unimi.dsi.fastutil.doubles.DoubleList)$$0.getCoords(net.minecraft.core.Direction$Axis.Z), (it.unimi.dsi.fastutil.doubles.DoubleList)$$1.getCoords(net.minecraft.core.Direction$Axis.Z), (boolean)$$3, (boolean)$$4);
+        net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape $$8 = net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape.join((net.minecraft.world.phys.shapes.DiscreteVoxelShape)$$0.shape, (net.minecraft.world.phys.shapes.DiscreteVoxelShape)$$1.shape, (net.minecraft.world.phys.shapes.IndexMerger)$$5, (net.minecraft.world.phys.shapes.IndexMerger)$$6, (net.minecraft.world.phys.shapes.IndexMerger)$$7, (net.minecraft.world.phys.shapes.BooleanOp)$$2);
+        if ($$5 instanceof net.minecraft.world.phys.shapes.DiscreteCubeMerger && $$6 instanceof net.minecraft.world.phys.shapes.DiscreteCubeMerger && $$7 instanceof net.minecraft.world.phys.shapes.DiscreteCubeMerger) {
+            return new net.minecraft.world.phys.shapes.CubeVoxelShape((net.minecraft.world.phys.shapes.DiscreteVoxelShape)$$8);
         }
-        return new net.minecraft.world.phys.shapes.ArrayVoxelShape((net.minecraft.world.phys.shapes.DiscreteVoxelShape)bitSetDiscreteVoxelShape, indexMerger.getList(), indexMerger2.getList(), indexMerger3.getList());
+        return new net.minecraft.world.phys.shapes.ArrayVoxelShape((net.minecraft.world.phys.shapes.DiscreteVoxelShape)$$8, $$5.getList(), $$6.getList(), $$7.getList());
     }
 
-    public static boolean joinIsNotEmpty(net.minecraft.world.phys.shapes.VoxelShape shape1, net.minecraft.world.phys.shapes.VoxelShape shape2, net.minecraft.world.phys.shapes.BooleanOp resultOperator) {
-        if (resultOperator.apply(false, false)) {
+    public static boolean joinIsNotEmpty(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.world.phys.shapes.VoxelShape $$1, net.minecraft.world.phys.shapes.BooleanOp $$2) {
+        if ($$2.apply(false, false)) {
             throw (java.lang.IllegalArgumentException)net.minecraft.Util.pauseInIde((java.lang.Throwable)new java.lang.IllegalArgumentException());
         }
-        boolean bl = shape1.isEmpty();
-        boolean bl2 = shape2.isEmpty();
-        if (bl || bl2) {
-            return resultOperator.apply(!bl, !bl2);
+        boolean $$3 = $$0.isEmpty();
+        boolean $$4 = $$1.isEmpty();
+        if ($$3 || $$4) {
+            return $$2.apply(!$$3, !$$4);
         }
-        if (shape1 == shape2) {
-            return resultOperator.apply(true, true);
+        if ($$0 == $$1) {
+            return $$2.apply(true, true);
         }
-        boolean bl3 = resultOperator.apply(true, false);
-        boolean bl4 = resultOperator.apply(false, true);
-        for (net.minecraft.core.Direction$Axis axis : net.minecraft.core.AxisCycle.AXIS_VALUES) {
-            if (shape1.max(axis) < shape2.min(axis) - 1.0E-7) {
-                return bl3 || bl4;
+        boolean $$5 = $$2.apply(true, false);
+        boolean $$6 = $$2.apply(false, true);
+        for (net.minecraft.core.Direction$Axis $$7 : net.minecraft.core.AxisCycle.AXIS_VALUES) {
+            if ($$0.max($$7) < $$1.min($$7) - 1.0E-7) {
+                return $$5 || $$6;
             }
-            if (!(shape2.max(axis) < shape1.min(axis) - 1.0E-7)) continue;
-            return bl3 || bl4;
+            if (!($$1.max($$7) < $$0.min($$7) - 1.0E-7)) continue;
+            return $$5 || $$6;
         }
-        net.minecraft.world.phys.shapes.IndexMerger indexMerger = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)1, (it.unimi.dsi.fastutil.doubles.DoubleList)shape1.getCoords(net.minecraft.core.Direction$Axis.X), (it.unimi.dsi.fastutil.doubles.DoubleList)shape2.getCoords(net.minecraft.core.Direction$Axis.X), (boolean)bl3, (boolean)bl4);
-        net.minecraft.world.phys.shapes.IndexMerger indexMerger2 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)(indexMerger.size() - 1), (it.unimi.dsi.fastutil.doubles.DoubleList)shape1.getCoords(net.minecraft.core.Direction$Axis.Y), (it.unimi.dsi.fastutil.doubles.DoubleList)shape2.getCoords(net.minecraft.core.Direction$Axis.Y), (boolean)bl3, (boolean)bl4);
-        net.minecraft.world.phys.shapes.IndexMerger indexMerger3 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)((indexMerger.size() - 1) * (indexMerger2.size() - 1)), (it.unimi.dsi.fastutil.doubles.DoubleList)shape1.getCoords(net.minecraft.core.Direction$Axis.Z), (it.unimi.dsi.fastutil.doubles.DoubleList)shape2.getCoords(net.minecraft.core.Direction$Axis.Z), (boolean)bl3, (boolean)bl4);
-        return net.minecraft.world.phys.shapes.Shapes.joinIsNotEmpty((net.minecraft.world.phys.shapes.IndexMerger)indexMerger, (net.minecraft.world.phys.shapes.IndexMerger)indexMerger2, (net.minecraft.world.phys.shapes.IndexMerger)indexMerger3, (net.minecraft.world.phys.shapes.DiscreteVoxelShape)shape1.shape, (net.minecraft.world.phys.shapes.DiscreteVoxelShape)shape2.shape, (net.minecraft.world.phys.shapes.BooleanOp)resultOperator);
+        net.minecraft.world.phys.shapes.IndexMerger $$8 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)1, (it.unimi.dsi.fastutil.doubles.DoubleList)$$0.getCoords(net.minecraft.core.Direction$Axis.X), (it.unimi.dsi.fastutil.doubles.DoubleList)$$1.getCoords(net.minecraft.core.Direction$Axis.X), (boolean)$$5, (boolean)$$6);
+        net.minecraft.world.phys.shapes.IndexMerger $$9 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)($$8.size() - 1), (it.unimi.dsi.fastutil.doubles.DoubleList)$$0.getCoords(net.minecraft.core.Direction$Axis.Y), (it.unimi.dsi.fastutil.doubles.DoubleList)$$1.getCoords(net.minecraft.core.Direction$Axis.Y), (boolean)$$5, (boolean)$$6);
+        net.minecraft.world.phys.shapes.IndexMerger $$10 = net.minecraft.world.phys.shapes.Shapes.createIndexMerger((int)(($$8.size() - 1) * ($$9.size() - 1)), (it.unimi.dsi.fastutil.doubles.DoubleList)$$0.getCoords(net.minecraft.core.Direction$Axis.Z), (it.unimi.dsi.fastutil.doubles.DoubleList)$$1.getCoords(net.minecraft.core.Direction$Axis.Z), (boolean)$$5, (boolean)$$6);
+        return net.minecraft.world.phys.shapes.Shapes.joinIsNotEmpty((net.minecraft.world.phys.shapes.IndexMerger)$$8, (net.minecraft.world.phys.shapes.IndexMerger)$$9, (net.minecraft.world.phys.shapes.IndexMerger)$$10, (net.minecraft.world.phys.shapes.DiscreteVoxelShape)$$0.shape, (net.minecraft.world.phys.shapes.DiscreteVoxelShape)$$1.shape, (net.minecraft.world.phys.shapes.BooleanOp)$$2);
     }
 
-    public static boolean joinIsNotEmpty(net.minecraft.world.phys.shapes.IndexMerger mergerX, net.minecraft.world.phys.shapes.IndexMerger mergerY, net.minecraft.world.phys.shapes.IndexMerger mergerZ, net.minecraft.world.phys.shapes.DiscreteVoxelShape primaryShape, net.minecraft.world.phys.shapes.DiscreteVoxelShape secondaryShape, net.minecraft.world.phys.shapes.BooleanOp resultOperator) {
-        return !mergerX.forMergedIndexes((x1, y1, z1) -> mergerY.forMergedIndexes(($$6, $$72, $$82) -> mergerZ.forMergedIndexes(($$7, $$8, $$9) -> !resultOperator.apply(primaryShape.isFullWide(x1, $$6, $$7), secondaryShape.isFullWide(y1, $$72, $$8)))));
+    public static boolean joinIsNotEmpty(net.minecraft.world.phys.shapes.IndexMerger $$0, net.minecraft.world.phys.shapes.IndexMerger $$1, net.minecraft.world.phys.shapes.IndexMerger $$2, net.minecraft.world.phys.shapes.DiscreteVoxelShape $$3, net.minecraft.world.phys.shapes.DiscreteVoxelShape $$4, net.minecraft.world.phys.shapes.BooleanOp $$52) {
+        return !$$0.forMergedIndexes(($$5, $$62, $$7) -> $$1.forMergedIndexes(($$6, $$72, $$82) -> $$2.forMergedIndexes(($$7, $$8, $$9) -> !$$52.apply($$3.isFullWide($$5, $$6, $$7), $$4.isFullWide($$62, $$72, $$8)))));
     }
 
     public static double collide(net.minecraft.core.Direction$Axis $$0, net.minecraft.world.phys.AABB $$1, java.lang.Iterable<net.minecraft.world.phys.shapes.VoxelShape> $$2, double $$3) {
@@ -153,87 +153,87 @@
         return $$3;
     }
 
-    public static boolean blockOccudes(net.minecraft.world.phys.shapes.VoxelShape shape, net.minecraft.world.phys.shapes.VoxelShape adjacentShape, net.minecraft.core.Direction side) {
-        if (shape == net.minecraft.world.phys.shapes.Shapes.block() && adjacentShape == net.minecraft.world.phys.shapes.Shapes.block()) {
+    public static boolean blockOccudes(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.world.phys.shapes.VoxelShape $$1, net.minecraft.core.Direction $$2) {
+        if ($$0 == net.minecraft.world.phys.shapes.Shapes.block() && $$1 == net.minecraft.world.phys.shapes.Shapes.block()) {
             return true;
         }
-        if (adjacentShape.isEmpty()) {
+        if ($$1.isEmpty()) {
             return false;
         }
-        net.minecraft.core.Direction$Axis axis = side.getAxis();
-        net.minecraft.core.Direction$AxisDirection axisDirection = side.getAxisDirection();
-        net.minecraft.world.phys.shapes.VoxelShape voxelShape = axisDirection == net.minecraft.core.Direction$AxisDirection.POSITIVE ? shape : adjacentShape;
-        net.minecraft.world.phys.shapes.VoxelShape voxelShape2 = axisDirection == net.minecraft.core.Direction$AxisDirection.POSITIVE ? adjacentShape : shape;
-        net.minecraft.world.phys.shapes.BooleanOp booleanOp = axisDirection == net.minecraft.core.Direction$AxisDirection.POSITIVE ? net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST : net.minecraft.world.phys.shapes.BooleanOp.ONLY_SECOND;
-        return com.google.common.math.DoubleMath.fuzzyEquals((double)voxelShape.max(axis), (double)1.0, (double)1.0E-7) && com.google.common.math.DoubleMath.fuzzyEquals((double)voxelShape2.min(axis), (double)0.0, (double)1.0E-7) && !net.minecraft.world.phys.shapes.Shapes.joinIsNotEmpty((net.minecraft.world.phys.shapes.VoxelShape)new net.minecraft.world.phys.shapes.SliceShape(voxelShape, axis, voxelShape.shape.getSize(axis) - 1), (net.minecraft.world.phys.shapes.VoxelShape)new net.minecraft.world.phys.shapes.SliceShape(voxelShape2, axis, 0), (net.minecraft.world.phys.shapes.BooleanOp)booleanOp);
+        net.minecraft.core.Direction$Axis $$3 = $$2.getAxis();
+        net.minecraft.core.Direction$AxisDirection $$4 = $$2.getAxisDirection();
+        net.minecraft.world.phys.shapes.VoxelShape $$5 = $$4 == net.minecraft.core.Direction$AxisDirection.POSITIVE ? $$0 : $$1;
+        net.minecraft.world.phys.shapes.VoxelShape $$6 = $$4 == net.minecraft.core.Direction$AxisDirection.POSITIVE ? $$1 : $$0;
+        net.minecraft.world.phys.shapes.BooleanOp $$7 = $$4 == net.minecraft.core.Direction$AxisDirection.POSITIVE ? net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST : net.minecraft.world.phys.shapes.BooleanOp.ONLY_SECOND;
+        return com.google.common.math.DoubleMath.fuzzyEquals((double)$$5.max($$3), (double)1.0, (double)1.0E-7) && com.google.common.math.DoubleMath.fuzzyEquals((double)$$6.min($$3), (double)0.0, (double)1.0E-7) && !net.minecraft.world.phys.shapes.Shapes.joinIsNotEmpty((net.minecraft.world.phys.shapes.VoxelShape)new net.minecraft.world.phys.shapes.SliceShape($$5, $$3, $$5.shape.getSize($$3) - 1), (net.minecraft.world.phys.shapes.VoxelShape)new net.minecraft.world.phys.shapes.SliceShape($$6, $$3, 0), (net.minecraft.world.phys.shapes.BooleanOp)$$7);
     }
 
-    public static net.minecraft.world.phys.shapes.VoxelShape getFaceShape(net.minecraft.world.phys.shapes.VoxelShape voxelShape, net.minecraft.core.Direction direction) {
-        int n;
-        boolean bl;
-        if (voxelShape == net.minecraft.world.phys.shapes.Shapes.block()) {
+    public static net.minecraft.world.phys.shapes.VoxelShape getFaceShape(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.core.Direction $$1) {
+        int $$6;
+        boolean $$5;
+        if ($$0 == net.minecraft.world.phys.shapes.Shapes.block()) {
             return net.minecraft.world.phys.shapes.Shapes.block();
         }
-        net.minecraft.core.Direction$Axis axis = direction.getAxis();
-        if (direction.getAxisDirection() == net.minecraft.core.Direction$AxisDirection.POSITIVE) {
-            bl = com.google.common.math.DoubleMath.fuzzyEquals((double)voxelShape.max(axis), (double)1.0, (double)1.0E-7);
-            n = voxelShape.shape.getSize(axis) - 1;
+        net.minecraft.core.Direction$Axis $$2 = $$1.getAxis();
+        if ($$1.getAxisDirection() == net.minecraft.core.Direction$AxisDirection.POSITIVE) {
+            boolean $$3 = com.google.common.math.DoubleMath.fuzzyEquals((double)$$0.max($$2), (double)1.0, (double)1.0E-7);
+            int $$4 = $$0.shape.getSize($$2) - 1;
         } else {
-            bl = com.google.common.math.DoubleMath.fuzzyEquals((double)voxelShape.min(axis), (double)0.0, (double)1.0E-7);
-            n = 0;
+            $$5 = com.google.common.math.DoubleMath.fuzzyEquals((double)$$0.min($$2), (double)0.0, (double)1.0E-7);
+            $$6 = 0;
         }
-        if (!bl) {
+        if (!$$5) {
             return net.minecraft.world.phys.shapes.Shapes.empty();
         }
-        return new net.minecraft.world.phys.shapes.SliceShape(voxelShape, axis, n);
+        return new net.minecraft.world.phys.shapes.SliceShape($$0, $$2, $$6);
     }
 
-    public static boolean mergedFaceOccludes(net.minecraft.world.phys.shapes.VoxelShape shape, net.minecraft.world.phys.shapes.VoxelShape adjacentShape, net.minecraft.core.Direction side) {
-        net.minecraft.world.phys.shapes.VoxelShape voxelShape;
-        if (shape == net.minecraft.world.phys.shapes.Shapes.block() || adjacentShape == net.minecraft.world.phys.shapes.Shapes.block()) {
+    public static boolean mergedFaceOccludes(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.world.phys.shapes.VoxelShape $$1, net.minecraft.core.Direction $$2) {
+        net.minecraft.world.phys.shapes.VoxelShape $$6;
+        if ($$0 == net.minecraft.world.phys.shapes.Shapes.block() || $$1 == net.minecraft.world.phys.shapes.Shapes.block()) {
             return true;
         }
-        net.minecraft.core.Direction$Axis axis = side.getAxis();
-        net.minecraft.core.Direction$AxisDirection axisDirection = side.getAxisDirection();
-        net.minecraft.world.phys.shapes.VoxelShape voxelShape2 = axisDirection == net.minecraft.core.Direction$AxisDirection.POSITIVE ? shape : adjacentShape;
-        net.minecraft.world.phys.shapes.VoxelShape voxelShape3 = voxelShape = axisDirection == net.minecraft.core.Direction$AxisDirection.POSITIVE ? adjacentShape : shape;
-        if (!com.google.common.math.DoubleMath.fuzzyEquals((double)voxelShape2.max(axis), (double)1.0, (double)1.0E-7)) {
-            voxelShape2 = net.minecraft.world.phys.shapes.Shapes.empty();
+        net.minecraft.core.Direction$Axis $$3 = $$2.getAxis();
+        net.minecraft.core.Direction$AxisDirection $$4 = $$2.getAxisDirection();
+        net.minecraft.world.phys.shapes.VoxelShape $$5 = $$4 == net.minecraft.core.Direction$AxisDirection.POSITIVE ? $$0 : $$1;
+        net.minecraft.world.phys.shapes.VoxelShape voxelShape = $$6 = $$4 == net.minecraft.core.Direction$AxisDirection.POSITIVE ? $$1 : $$0;
+        if (!com.google.common.math.DoubleMath.fuzzyEquals((double)$$5.max($$3), (double)1.0, (double)1.0E-7)) {
+            $$5 = net.minecraft.world.phys.shapes.Shapes.empty();
         }
-        if (!com.google.common.math.DoubleMath.fuzzyEquals((double)voxelShape.min(axis), (double)0.0, (double)1.0E-7)) {
-            voxelShape = net.minecraft.world.phys.shapes.Shapes.empty();
+        if (!com.google.common.math.DoubleMath.fuzzyEquals((double)$$6.min($$3), (double)0.0, (double)1.0E-7)) {
+            $$6 = net.minecraft.world.phys.shapes.Shapes.empty();
         }
-        return !net.minecraft.world.phys.shapes.Shapes.joinIsNotEmpty((net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.phys.shapes.Shapes.block(), (net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.phys.shapes.Shapes.joinUnoptimized((net.minecraft.world.phys.shapes.VoxelShape)new net.minecraft.world.phys.shapes.SliceShape(voxelShape2, axis, voxelShape2.shape.getSize(axis) - 1), (net.minecraft.world.phys.shapes.VoxelShape)new net.minecraft.world.phys.shapes.SliceShape(voxelShape, axis, 0), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.OR), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST);
+        return !net.minecraft.world.phys.shapes.Shapes.joinIsNotEmpty((net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.phys.shapes.Shapes.block(), (net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.phys.shapes.Shapes.joinUnoptimized((net.minecraft.world.phys.shapes.VoxelShape)new net.minecraft.world.phys.shapes.SliceShape($$5, $$3, $$5.shape.getSize($$3) - 1), (net.minecraft.world.phys.shapes.VoxelShape)new net.minecraft.world.phys.shapes.SliceShape($$6, $$3, 0), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.OR), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST);
     }
 
-    public static boolean faceShapeOccludes(net.minecraft.world.phys.shapes.VoxelShape voxelShape1, net.minecraft.world.phys.shapes.VoxelShape voxelShape2) {
-        if (voxelShape1 == net.minecraft.world.phys.shapes.Shapes.block() || voxelShape2 == net.minecraft.world.phys.shapes.Shapes.block()) {
+    public static boolean faceShapeOccludes(net.minecraft.world.phys.shapes.VoxelShape $$0, net.minecraft.world.phys.shapes.VoxelShape $$1) {
+        if ($$0 == net.minecraft.world.phys.shapes.Shapes.block() || $$1 == net.minecraft.world.phys.shapes.Shapes.block()) {
             return true;
         }
-        if (voxelShape1.isEmpty() && voxelShape2.isEmpty()) {
+        if ($$0.isEmpty() && $$1.isEmpty()) {
             return false;
         }
-        return !net.minecraft.world.phys.shapes.Shapes.joinIsNotEmpty((net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.phys.shapes.Shapes.block(), (net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.phys.shapes.Shapes.joinUnoptimized((net.minecraft.world.phys.shapes.VoxelShape)voxelShape1, (net.minecraft.world.phys.shapes.VoxelShape)voxelShape2, (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.OR), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST);
+        return !net.minecraft.world.phys.shapes.Shapes.joinIsNotEmpty((net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.phys.shapes.Shapes.block(), (net.minecraft.world.phys.shapes.VoxelShape)net.minecraft.world.phys.shapes.Shapes.joinUnoptimized((net.minecraft.world.phys.shapes.VoxelShape)$$0, (net.minecraft.world.phys.shapes.VoxelShape)$$1, (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.OR), (net.minecraft.world.phys.shapes.BooleanOp)net.minecraft.world.phys.shapes.BooleanOp.ONLY_FIRST);
     }
 
     @com.google.common.annotations.VisibleForTesting
-    public static net.minecraft.world.phys.shapes.IndexMerger createIndexMerger(int size, it.unimi.dsi.fastutil.doubles.DoubleList list1, it.unimi.dsi.fastutil.doubles.DoubleList list2, boolean bl, boolean bl2) {
-        long l;
-        int n = list1.size() - 1;
-        int n2 = list2.size() - 1;
-        if (list1 instanceof net.minecraft.world.phys.shapes.CubePointRange && list2 instanceof net.minecraft.world.phys.shapes.CubePointRange && (long)size * (l = net.minecraft.world.phys.shapes.Shapes.lcm((int)n, (int)n2)) <= 256L) {
-            return new net.minecraft.world.phys.shapes.DiscreteCubeMerger(n, n2);
+    public static net.minecraft.world.phys.shapes.IndexMerger createIndexMerger(int $$0, it.unimi.dsi.fastutil.doubles.DoubleList $$1, it.unimi.dsi.fastutil.doubles.DoubleList $$2, boolean $$3, boolean $$4) {
+        long $$7;
+        int $$5 = $$1.size() - 1;
+        int $$6 = $$2.size() - 1;
+        if ($$1 instanceof net.minecraft.world.phys.shapes.CubePointRange && $$2 instanceof net.minecraft.world.phys.shapes.CubePointRange && (long)$$0 * ($$7 = net.minecraft.world.phys.shapes.Shapes.lcm((int)$$5, (int)$$6)) <= 256L) {
+            return new net.minecraft.world.phys.shapes.DiscreteCubeMerger($$5, $$6);
         }
-        if (list1.getDouble(n) < list2.getDouble(0) - 1.0E-7) {
-            return new net.minecraft.world.phys.shapes.NonOverlappingMerger(list1, list2, false);
+        if ($$1.getDouble($$5) < $$2.getDouble(0) - 1.0E-7) {
+            return new net.minecraft.world.phys.shapes.NonOverlappingMerger($$1, $$2, false);
         }
-        if (list2.getDouble(n2) < list1.getDouble(0) - 1.0E-7) {
-            return new net.minecraft.world.phys.shapes.NonOverlappingMerger(list2, list1, true);
+        if ($$2.getDouble($$6) < $$1.getDouble(0) - 1.0E-7) {
+            return new net.minecraft.world.phys.shapes.NonOverlappingMerger($$2, $$1, true);
         }
-        if (n == n2 && java.util.Objects.equals((java.lang.Object)list1, (java.lang.Object)list2)) {
-            return new net.minecraft.world.phys.shapes.IdenticalMerger(list1);
+        if ($$5 == $$6 && java.util.Objects.equals((java.lang.Object)$$1, (java.lang.Object)$$2)) {
+            return new net.minecraft.world.phys.shapes.IdenticalMerger($$1);
         }
-        return new net.minecraft.world.phys.shapes.IndirectMerger(list1, list2, bl, bl2);
+        return new net.minecraft.world.phys.shapes.IndirectMerger($$1, $$2, $$3, $$4);
     }
 
     public static /* synthetic */ net.minecraft.world.phys.shapes.CubeVoxelShape lambda$static$0() {