--- net/minecraft/world/phys/shapes/NonOverlappingMerger.java
+++ net/minecraft/world/phys/shapes/NonOverlappingMerger.java
@@ -11,44 +11,42 @@
     public it.unimi.dsi.fastutil.doubles.DoubleList upper;
     public boolean swap;
 
-    public net.minecraft.world.phys.shapes.NonOverlappingMerger(it.unimi.dsi.fastutil.doubles.DoubleList lower, it.unimi.dsi.fastutil.doubles.DoubleList upper, boolean swap) {
-        this.lower = lower;
-        this.upper = upper;
-        this.swap = swap;
+    public net.minecraft.world.phys.shapes.NonOverlappingMerger(it.unimi.dsi.fastutil.doubles.DoubleList $$0, it.unimi.dsi.fastutil.doubles.DoubleList $$1, boolean $$2) {
+        this.lower = $$0;
+        this.upper = $$1;
+        this.swap = $$2;
     }
 
     public int size() {
         return this.lower.size() + this.upper.size();
     }
 
-    public boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer consumer) {
+    public boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer $$0) {
         if (this.swap) {
-            return this.forNonSwappedIndexes((x, y, z) -> consumer.merge(y, x, z));
+            return this.forNonSwappedIndexes(($$1, $$2, $$3) -> $$0.merge($$2, $$1, $$3));
         }
-        return this.forNonSwappedIndexes(consumer);
+        return this.forNonSwappedIndexes($$0);
     }
 
-    public boolean forNonSwappedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer consumer) {
-        int n;
-        int n2 = this.lower.size();
-        for (n = 0;
- n < n2; ++n) {
-            if (consumer.merge(n, -1, n)) continue;
+    public boolean forNonSwappedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer $$0) {
+        int $$1 = this.lower.size();
+        for (int $$2 = 0; $$2 < $$1; ++$$2) {
+            if ($$0.merge($$2, -1, $$2)) continue;
             return false;
         }
-        n = this.upper.size() - 1;
-        for (int i = 0; i < n; ++i) {
-            if (consumer.merge(n2 - 1, i, n2 + i)) continue;
+        int $$3 = this.upper.size() - 1;
+        for (int $$4 = 0; $$4 < $$3; ++$$4) {
+            if ($$0.merge($$1 - 1, $$4, $$1 + $$4)) continue;
             return false;
         }
         return true;
     }
 
-    public double getDouble(int index) {
-        if (index < this.lower.size()) {
-            return this.lower.getDouble(index);
+    public double getDouble(int $$0) {
+        if ($$0 < this.lower.size()) {
+            return this.lower.getDouble($$0);
         }
-        return this.upper.getDouble(index - this.lower.size());
+        return this.upper.getDouble($$0 - this.lower.size());
     }
 
     public it.unimi.dsi.fastutil.doubles.DoubleList getList() {