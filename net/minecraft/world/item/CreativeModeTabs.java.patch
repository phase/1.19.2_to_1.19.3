--- net/minecraft/world/item/CreativeModeTabs.java
+++ net/minecraft/world/item/CreativeModeTabs.java
@@ -1,0 +1,87 @@
+/*
+ * Decompiled with CFR 0.151.
+ */
+package net.minecraft.world.item;
+
+public class net.minecraft.world.item.CreativeModeTabs
+ {
+    public static net.minecraft.world.item.CreativeModeTab TAB_BUILDING_BLOCKS;
+    public static net.minecraft.world.item.CreativeModeTab TAB_NATURE;
+    public static net.minecraft.world.item.CreativeModeTab TAB_FUNCTIONAL;
+    public static net.minecraft.world.item.CreativeModeTab TAB_REDSTONE;
+    public static net.minecraft.world.item.CreativeModeTab TAB_HOTBAR;
+    public static net.minecraft.world.item.CreativeModeTab TAB_SEARCH;
+    public static net.minecraft.world.item.CreativeModeTab TAB_TOOLS;
+    public static net.minecraft.world.item.CreativeModeTab TAB_COMBAT;
+    public static net.minecraft.world.item.CreativeModeTab TAB_CONSUMABLES;
+    public static net.minecraft.world.item.CreativeModeTab TAB_CRAFTING;
+    public static net.minecraft.world.item.CreativeModeTab TAB_SPAWN_EGGS;
+    public static net.minecraft.world.item.CreativeModeTab TAB_INVENTORY;
+    public static net.minecraft.world.item.CreativeModeTab[] TABS;
+
+    public net.minecraft.world.item.CreativeModeTabs() {
+    }
+
+    public static net.minecraft.world.item.CreativeModeTab[] createTabList(net.minecraft.world.item.CreativeModeTab ... $$0) {
+        net.minecraft.world.item.CreativeModeTab[] $$1 = new net.minecraft.world.item.CreativeModeTab[$$0.length];
+        for (net.minecraft.world.item.CreativeModeTab $$2 : $$0) {
+            int $$3 = $$2.getId();
+            net.minecraft.world.item.CreativeModeTab $$4 = $$1[$$3];
+            if ($$4 != null) {
+                throw new java.lang.IllegalStateException("Duplicate tab on id " + $$3 + ": " + $$4.getDisplayName().getString() + " vs. " + $$2.getDisplayName().getString());
+            }
+            $$1[$$3] = $$2;
+        }
+        for (int $$5 = 0; $$5 < $$1.length; ++$$5) {
+            if ($$1[$$5] != null) continue;
+            throw new java.lang.IllegalStateException("Missing tab id " + $$5);
+        }
+        return $$1;
+    }
+
+    public static void generatePotionEffectTypes(net.minecraft.world.item.CreativeModeTab$Output $$0, net.minecraft.world.item.Item $$1, net.minecraft.world.item.CreativeModeTab$TabVisibility $$2) {
+        for (net.minecraft.world.item.alchemy.Potion $$3 : net.minecraft.core.Registry.POTION) {
+            if ($$3.getEffects().isEmpty()) continue;
+            $$0.accept(net.minecraft.world.item.alchemy.PotionUtils.setPotion((net.minecraft.world.item.ItemStack)new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)$$1), (net.minecraft.world.item.alchemy.Potion)$$3), $$2);
+        }
+    }
+
+    public static void generateEnchantmentBookTypesOnlyMaxLevel(net.minecraft.world.item.CreativeModeTab$Output $$0, java.util.Set<net.minecraft.world.item.enchantment.EnchantmentCategory> $$1, net.minecraft.world.item.CreativeModeTab$TabVisibility $$2) {
+        for (net.minecraft.world.item.enchantment.Enchantment $$3 : net.minecraft.core.Registry.ENCHANTMENT) {
+            if (!$$1.contains((java.lang.Object)$$3.category)) continue;
+            $$0.accept(net.minecraft.world.item.EnchantedBookItem.createForEnchantment((net.minecraft.world.item.enchantment.EnchantmentInstance)new net.minecraft.world.item.enchantment.EnchantmentInstance($$3, $$3.getMaxLevel())), $$2);
+        }
+    }
+
+    public static void generateEnchantmentBookTypesAllLevels(net.minecraft.world.item.CreativeModeTab$Output $$0, java.util.Set<net.minecraft.world.item.enchantment.EnchantmentCategory> $$1, net.minecraft.world.item.CreativeModeTab$TabVisibility $$2) {
+        for (net.minecraft.world.item.enchantment.Enchantment $$3 : net.minecraft.core.Registry.ENCHANTMENT) {
+            if (!$$1.contains((java.lang.Object)$$3.category)) continue;
+            for (int $$4 = $$3.getMinLevel(); $$4 <= $$3.getMaxLevel(); ++$$4) {
+                $$0.accept(net.minecraft.world.item.EnchantedBookItem.createForEnchantment((net.minecraft.world.item.enchantment.EnchantmentInstance)new net.minecraft.world.item.enchantment.EnchantmentInstance($$3, $$4)), $$2);
+            }
+        }
+    }
+
+    public static void generateInstrumentTypes(net.minecraft.world.item.CreativeModeTab$Output $$0, net.minecraft.world.item.Item $$1, net.minecraft.tags.TagKey<net.minecraft.world.item.Instrument> $$2, net.minecraft.world.item.CreativeModeTab$TabVisibility $$3) {
+        for (net.minecraft.core.Holder $$4 : net.minecraft.core.Registry.INSTRUMENT.getTagOrEmpty($$2)) {
+            $$0.accept(net.minecraft.world.item.InstrumentItem.create((net.minecraft.world.item.Item)$$1, (net.minecraft.core.Holder)$$4), $$3);
+        }
+    }
+
+    static {
+        TAB_BUILDING_BLOCKS = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_NATURE = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_FUNCTIONAL = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_REDSTONE = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_HOTBAR = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_SEARCH = new /* Unavailable Anonymous Inner Class!! */.setBackgroundSuffix("item_search.png");
+        TAB_TOOLS = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_COMBAT = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_CONSUMABLES = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_CRAFTING = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_SPAWN_EGGS = new /* Unavailable Anonymous Inner Class!! */;
+        TAB_INVENTORY = new /* Unavailable Anonymous Inner Class!! */.setBackgroundSuffix("inventory.png").hideScroll().hideTitle();
+        TABS = net.minecraft.world.item.CreativeModeTabs.createTabList((net.minecraft.world.item.CreativeModeTab[])new net.minecraft.world.item.CreativeModeTab[]{TAB_BUILDING_BLOCKS, TAB_NATURE, TAB_FUNCTIONAL, TAB_REDSTONE, TAB_HOTBAR, TAB_SEARCH, TAB_TOOLS, TAB_COMBAT, TAB_CONSUMABLES, TAB_CRAFTING, TAB_SPAWN_EGGS, TAB_INVENTORY});
+    }
+}
+