--- net/minecraft/world/item/DebugStickItem.java
+++ net/minecraft/world/item/DebugStickItem.java
@@ -10,25 +10,25 @@
         super($$0);
     }
 
-    public boolean isFoil(net.minecraft.world.item.ItemStack stack) {
+    public boolean isFoil(net.minecraft.world.item.ItemStack $$0) {
         return true;
     }
 
-    public boolean canAttackBlock(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, net.minecraft.world.entity.player.Player player) {
-        if (!level.isClientSide) {
-            this.handleInteraction(player, state, (net.minecraft.world.level.LevelAccessor)level, pos, false, player.getItemInHand(net.minecraft.world.InteractionHand.MAIN_HAND));
+    public boolean canAttackBlock(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, net.minecraft.world.entity.player.Player $$3) {
+        if (!$$1.isClientSide) {
+            this.handleInteraction($$3, $$0, (net.minecraft.world.level.LevelAccessor)$$1, $$2, false, $$3.getItemInHand(net.minecraft.world.InteractionHand.MAIN_HAND));
         }
         return false;
     }
 
-    public net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.context.UseOnContext context) {
-        net.minecraft.core.BlockPos blockPos;
-        net.minecraft.world.entity.player.Player player = context.getPlayer();
-        net.minecraft.world.level.Level level = context.getLevel();
-        if (!level.isClientSide && player != null && !this.handleInteraction(player, level.getBlockState(blockPos = context.getClickedPos()), (net.minecraft.world.level.LevelAccessor)level, blockPos, true, context.getItemInHand())) {
+    public net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.context.UseOnContext $$0) {
+        net.minecraft.core.BlockPos $$3;
+        net.minecraft.world.entity.player.Player $$1 = $$0.getPlayer();
+        net.minecraft.world.level.Level $$2 = $$0.getLevel();
+        if (!$$2.isClientSide && $$1 != null && !this.handleInteraction($$1, $$2.getBlockState($$3 = $$0.getClickedPos()), (net.minecraft.world.level.LevelAccessor)$$2, $$3, true, $$0.getItemInHand())) {
             return net.minecraft.world.InteractionResult.FAIL;
         }
-        return net.minecraft.world.InteractionResult.sidedSuccess((boolean)level.isClientSide);
+        return net.minecraft.world.InteractionResult.sidedSuccess((boolean)$$2.isClientSide);
     }
 
     public boolean handleInteraction(net.minecraft.world.entity.player.Player $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.world.level.LevelAccessor $$2, net.minecraft.core.BlockPos $$3, boolean $$4, net.minecraft.world.item.ItemStack $$5) {
@@ -62,20 +62,20 @@
         return true;
     }
 
-    public static <T extends java.lang.Comparable<T>> net.minecraft.world.level.block.state.BlockState cycleState(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.state.properties.Property<T> property, boolean backwards) {
-        return (net.minecraft.world.level.block.state.BlockState)state.setValue(property, (java.lang.Comparable)net.minecraft.world.item.DebugStickItem.getRelative((java.lang.Iterable)property.getPossibleValues(), (java.lang.Object)state.getValue(property), (boolean)backwards));
+    public static <T extends java.lang.Comparable<T>> net.minecraft.world.level.block.state.BlockState cycleState(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.state.properties.Property<T> $$1, boolean $$2) {
+        return (net.minecraft.world.level.block.state.BlockState)$$0.setValue($$1, (java.lang.Comparable)net.minecraft.world.item.DebugStickItem.getRelative((java.lang.Iterable)$$1.getPossibleValues(), (java.lang.Object)$$0.getValue($$1), (boolean)$$2));
     }
 
-    public static <T> T getRelative(java.lang.Iterable<T> allowedValues, @javax.annotation.Nullable T currentValue, boolean backwards) {
-        return (T)(backwards ? net.minecraft.Util.findPreviousInIterable(allowedValues, currentValue) : net.minecraft.Util.findNextInIterable(allowedValues, currentValue));
+    public static <T> T getRelative(java.lang.Iterable<T> $$0, @javax.annotation.Nullable T $$1, boolean $$2) {
+        return (T)($$2 ? net.minecraft.Util.findPreviousInIterable($$0, $$1) : net.minecraft.Util.findNextInIterable($$0, $$1));
     }
 
-    public static void message(net.minecraft.world.entity.player.Player player, net.minecraft.network.chat.Component messageComponent) {
-        ((net.minecraft.server.level.ServerPlayer)player).sendSystemMessage(messageComponent, true);
+    public static void message(net.minecraft.world.entity.player.Player $$0, net.minecraft.network.chat.Component $$1) {
+        ((net.minecraft.server.level.ServerPlayer)$$0).sendSystemMessage($$1, true);
     }
 
-    public static <T extends java.lang.Comparable<T>> java.lang.String getNameHelper(net.minecraft.world.level.block.state.BlockState state, net.minecraft.world.level.block.state.properties.Property<T> property) {
-        return property.getName(state.getValue(property));
+    public static <T extends java.lang.Comparable<T>> java.lang.String getNameHelper(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.world.level.block.state.properties.Property<T> $$1) {
+        return $$1.getName($$0.getValue($$1));
     }
 }
 