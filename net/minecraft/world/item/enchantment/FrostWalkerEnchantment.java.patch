--- net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java
+++ net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java
@@ -6,16 +6,16 @@
 public class net.minecraft.world.item.enchantment.FrostWalkerEnchantment
 extends net.minecraft.world.item.enchantment.Enchantment
  {
-    public net.minecraft.world.item.enchantment.FrostWalkerEnchantment(net.minecraft.world.item.enchantment.Enchantment$Rarity rarity, net.minecraft.world.entity.EquipmentSlot ... applicableSlots) {
-        super(rarity, net.minecraft.world.item.enchantment.EnchantmentCategory.ARMOR_FEET, applicableSlots);
+    public net.minecraft.world.item.enchantment.FrostWalkerEnchantment(net.minecraft.world.item.enchantment.Enchantment$Rarity $$0, net.minecraft.world.entity.EquipmentSlot ... $$1) {
+        super($$0, net.minecraft.world.item.enchantment.EnchantmentCategory.ARMOR_FEET, $$1);
     }
 
-    public int getMinCost(int enchantmentLevel) {
-        return enchantmentLevel * 10;
+    public int getMinCost(int $$0) {
+        return $$0 * 10;
     }
 
-    public int getMaxCost(int enchantmentLevel) {
-        return this.getMinCost(enchantmentLevel) + 15;
+    public int getMaxCost(int $$0) {
+        return this.getMinCost($$0) + 15;
     }
 
     public boolean isTreasureOnly() {
@@ -26,26 +26,26 @@
         return 2;
     }
 
-    public static void onEntityMoved(net.minecraft.world.entity.LivingEntity living, net.minecraft.world.level.Level level, net.minecraft.core.BlockPos pos, int levelConflicting) {
-        if (!living.isOnGround()) {
+    public static void onEntityMoved(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.level.Level $$1, net.minecraft.core.BlockPos $$2, int $$3) {
+        if (!$$0.isOnGround()) {
             return;
         }
-        net.minecraft.world.level.block.state.BlockState blockState = net.minecraft.world.level.block.Blocks.FROSTED_ICE.defaultBlockState();
-        float f = java.lang.Math.min((int)16, (int)(2 + levelConflicting));
-        net.minecraft.core.BlockPos$MutableBlockPos mutableBlockPos = new net.minecraft.core.BlockPos$MutableBlockPos();
-        for (net.minecraft.core.BlockPos blockPos : net.minecraft.core.BlockPos.betweenClosed((net.minecraft.core.BlockPos)pos.offset((double)(-f), -1.0, (double)(-f)), (net.minecraft.core.BlockPos)pos.offset((double)f, -1.0, (double)f))) {
-            net.minecraft.world.level.block.state.BlockState blockState2;
-            if (!blockPos.closerToCenterThan((net.minecraft.core.Position)living.position(), (double)f)) continue;
-            mutableBlockPos.set(blockPos.getX(), blockPos.getY() + 1, blockPos.getZ());
-            net.minecraft.world.level.block.state.BlockState blockState3 = level.getBlockState((net.minecraft.core.BlockPos)mutableBlockPos);
-            if (!blockState3.isAir() || (blockState2 = level.getBlockState(blockPos)).getMaterial() != net.minecraft.world.level.material.Material.WATER || (java.lang.Integer)blockState2.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.LiquidBlock.LEVEL) != 0 || !blockState.canSurvive((net.minecraft.world.level.LevelReader)level, blockPos) || !level.isUnobstructed(blockState, blockPos, net.minecraft.world.phys.shapes.CollisionContext.empty())) continue;
-            level.setBlockAndUpdate(blockPos, blockState);
-            level.scheduleTick(blockPos, net.minecraft.world.level.block.Blocks.FROSTED_ICE, net.minecraft.util.Mth.nextInt((net.minecraft.util.RandomSource)living.getRandom(), (int)60, (int)120));
+        net.minecraft.world.level.block.state.BlockState $$4 = net.minecraft.world.level.block.Blocks.FROSTED_ICE.defaultBlockState();
+        float $$5 = java.lang.Math.min((int)16, (int)(2 + $$3));
+        net.minecraft.core.BlockPos$MutableBlockPos $$6 = new net.minecraft.core.BlockPos$MutableBlockPos();
+        for (net.minecraft.core.BlockPos $$7 : net.minecraft.core.BlockPos.betweenClosed((net.minecraft.core.BlockPos)$$2.offset((double)(-$$5), -1.0, (double)(-$$5)), (net.minecraft.core.BlockPos)$$2.offset((double)$$5, -1.0, (double)$$5))) {
+            net.minecraft.world.level.block.state.BlockState $$9;
+            if (!$$7.closerToCenterThan((net.minecraft.core.Position)$$0.position(), (double)$$5)) continue;
+            $$6.set($$7.getX(), $$7.getY() + 1, $$7.getZ());
+            net.minecraft.world.level.block.state.BlockState $$8 = $$1.getBlockState((net.minecraft.core.BlockPos)$$6);
+            if (!$$8.isAir() || ($$9 = $$1.getBlockState($$7)).getMaterial() != net.minecraft.world.level.material.Material.WATER || (java.lang.Integer)$$9.getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.LiquidBlock.LEVEL) != 0 || !$$4.canSurvive((net.minecraft.world.level.LevelReader)$$1, $$7) || !$$1.isUnobstructed($$4, $$7, net.minecraft.world.phys.shapes.CollisionContext.empty())) continue;
+            $$1.setBlockAndUpdate($$7, $$4);
+            $$1.scheduleTick($$7, net.minecraft.world.level.block.Blocks.FROSTED_ICE, net.minecraft.util.Mth.nextInt((net.minecraft.util.RandomSource)$$0.getRandom(), (int)60, (int)120));
         }
     }
 
-    public boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment ench) {
-        return super.checkCompatibility(ench) && ench != net.minecraft.world.item.enchantment.Enchantments.DEPTH_STRIDER;
+    public boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment $$0) {
+        return super.checkCompatibility($$0) && $$0 != net.minecraft.world.item.enchantment.Enchantments.DEPTH_STRIDER;
     }
 }
 