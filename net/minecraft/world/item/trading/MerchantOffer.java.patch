--- net/minecraft/world/item/trading/MerchantOffer.java
+++ net/minecraft/world/item/trading/MerchantOffer.java
@@ -16,50 +16,50 @@
     public float priceMultiplier;
     public int xp;
 
-    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.nbt.CompoundTag compoundTag) {
+    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.nbt.CompoundTag $$0) {
         this.rewardExp = true;
         this.xp = 1;
-        this.baseCostA = net.minecraft.world.item.ItemStack.of((net.minecraft.nbt.CompoundTag)compoundTag.getCompound("buy"));
-        this.costB = net.minecraft.world.item.ItemStack.of((net.minecraft.nbt.CompoundTag)compoundTag.getCompound("buyB"));
-        this.result = net.minecraft.world.item.ItemStack.of((net.minecraft.nbt.CompoundTag)compoundTag.getCompound("sell"));
-        this.uses = compoundTag.getInt("uses");
-        this.maxUses = compoundTag.contains("maxUses", 99) ? compoundTag.getInt("maxUses") : 4;
-        if (compoundTag.contains("rewardExp", 1)) {
-            this.rewardExp = compoundTag.getBoolean("rewardExp");
+        this.baseCostA = net.minecraft.world.item.ItemStack.of((net.minecraft.nbt.CompoundTag)$$0.getCompound("buy"));
+        this.costB = net.minecraft.world.item.ItemStack.of((net.minecraft.nbt.CompoundTag)$$0.getCompound("buyB"));
+        this.result = net.minecraft.world.item.ItemStack.of((net.minecraft.nbt.CompoundTag)$$0.getCompound("sell"));
+        this.uses = $$0.getInt("uses");
+        this.maxUses = $$0.contains("maxUses", 99) ? $$0.getInt("maxUses") : 4;
+        if ($$0.contains("rewardExp", 1)) {
+            this.rewardExp = $$0.getBoolean("rewardExp");
         }
-        if (compoundTag.contains("xp", 3)) {
-            this.xp = compoundTag.getInt("xp");
+        if ($$0.contains("xp", 3)) {
+            this.xp = $$0.getInt("xp");
         }
-        if (compoundTag.contains("priceMultiplier", 5)) {
-            this.priceMultiplier = compoundTag.getFloat("priceMultiplier");
+        if ($$0.contains("priceMultiplier", 5)) {
+            this.priceMultiplier = $$0.getFloat("priceMultiplier");
         }
-        this.specialPriceDiff = compoundTag.getInt("specialPrice");
-        this.demand = compoundTag.getInt("demand");
+        this.specialPriceDiff = $$0.getInt("specialPrice");
+        this.demand = $$0.getInt("demand");
     }
 
-    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.world.item.ItemStack baseCostA, net.minecraft.world.item.ItemStack result, int maxUses, int xp, float priceMultiplier) {
-        this(baseCostA, net.minecraft.world.item.ItemStack.EMPTY, result, maxUses, xp, priceMultiplier);
+    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1, int $$2, int $$3, float $$4) {
+        this($$0, net.minecraft.world.item.ItemStack.EMPTY, $$1, $$2, $$3, $$4);
     }
 
-    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.world.item.ItemStack baseCostA, net.minecraft.world.item.ItemStack costB, net.minecraft.world.item.ItemStack result, int maxUses, int xp, float priceMultiplier) {
-        this(baseCostA, costB, result, 0, maxUses, xp, priceMultiplier);
+    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1, net.minecraft.world.item.ItemStack $$2, int $$3, int $$4, float $$5) {
+        this($$0, $$1, $$2, 0, $$3, $$4, $$5);
     }
 
-    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.world.item.ItemStack baseCostA, net.minecraft.world.item.ItemStack costB, net.minecraft.world.item.ItemStack result, int uses, int maxUses, int xp, float priceMultiplier) {
-        this(baseCostA, costB, result, uses, maxUses, xp, priceMultiplier, 0);
+    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1, net.minecraft.world.item.ItemStack $$2, int $$3, int $$4, int $$5, float $$6) {
+        this($$0, $$1, $$2, $$3, $$4, $$5, $$6, 0);
     }
 
-    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.world.item.ItemStack baseCostA, net.minecraft.world.item.ItemStack costB, net.minecraft.world.item.ItemStack result, int uses, int maxUses, int xp, float priceMultiplier, int demand) {
+    public net.minecraft.world.item.trading.MerchantOffer(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1, net.minecraft.world.item.ItemStack $$2, int $$3, int $$4, int $$5, float $$6, int $$7) {
         this.rewardExp = true;
         this.xp = 1;
-        this.baseCostA = baseCostA;
-        this.costB = costB;
-        this.result = result;
-        this.uses = uses;
-        this.maxUses = maxUses;
-        this.xp = xp;
-        this.priceMultiplier = priceMultiplier;
-        this.demand = demand;
+        this.baseCostA = $$0;
+        this.costB = $$1;
+        this.result = $$2;
+        this.uses = $$3;
+        this.maxUses = $$4;
+        this.xp = $$5;
+        this.priceMultiplier = $$6;
+        this.demand = $$7;
     }
 
     public net.minecraft.world.item.ItemStack getBaseCostA() {
@@ -110,8 +110,8 @@
         return this.demand;
     }
 
-    public void addToSpecialPriceDiff(int add) {
-        this.specialPriceDiff += add;
+    public void addToSpecialPriceDiff(int $$0) {
+        this.specialPriceDiff += $$0;
     }
 
     public void resetSpecialPriceDiff() {
@@ -122,8 +122,8 @@
         return this.specialPriceDiff;
     }
 
-    public void setSpecialPriceDiff(int price) {
-        this.specialPriceDiff = price;
+    public void setSpecialPriceDiff(int $$0) {
+        this.specialPriceDiff = $$0;
     }
 
     public float getPriceMultiplier() {
@@ -165,28 +165,28 @@
         return $$0;
     }
 
-    public boolean satisfiedBy(net.minecraft.world.item.ItemStack playerOfferA, net.minecraft.world.item.ItemStack playerOfferB) {
-        return this.isRequiredItem(playerOfferA, this.getCostA()) && playerOfferA.getCount() >= this.getCostA().getCount() && this.isRequiredItem(playerOfferB, this.costB) && playerOfferB.getCount() >= this.costB.getCount();
+    public boolean satisfiedBy(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1) {
+        return this.isRequiredItem($$0, this.getCostA()) && $$0.getCount() >= this.getCostA().getCount() && this.isRequiredItem($$1, this.costB) && $$1.getCount() >= this.costB.getCount();
     }
 
-    public boolean isRequiredItem(net.minecraft.world.item.ItemStack offer, net.minecraft.world.item.ItemStack cost) {
-        if (cost.isEmpty() && offer.isEmpty()) {
+    public boolean isRequiredItem(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1) {
+        if ($$1.isEmpty() && $$0.isEmpty()) {
             return true;
         }
-        net.minecraft.world.item.ItemStack itemStack = offer.copy();
-        if (itemStack.getItem().canBeDepleted()) {
-            itemStack.setDamageValue(itemStack.getDamageValue());
+        net.minecraft.world.item.ItemStack $$2 = $$0.copy();
+        if ($$2.getItem().canBeDepleted()) {
+            $$2.setDamageValue($$2.getDamageValue());
         }
-        return net.minecraft.world.item.ItemStack.isSame((net.minecraft.world.item.ItemStack)itemStack, (net.minecraft.world.item.ItemStack)cost) && (!cost.hasTag() || itemStack.hasTag() && net.minecraft.nbt.NbtUtils.compareNbt((net.minecraft.nbt.Tag)cost.getTag(), (net.minecraft.nbt.Tag)itemStack.getTag(), (boolean)false));
+        return net.minecraft.world.item.ItemStack.isSame((net.minecraft.world.item.ItemStack)$$2, (net.minecraft.world.item.ItemStack)$$1) && (!$$1.hasTag() || $$2.hasTag() && net.minecraft.nbt.NbtUtils.compareNbt((net.minecraft.nbt.Tag)$$1.getTag(), (net.minecraft.nbt.Tag)$$2.getTag(), (boolean)false));
     }
 
-    public boolean take(net.minecraft.world.item.ItemStack playerOfferA, net.minecraft.world.item.ItemStack playerOfferB) {
-        if (!this.satisfiedBy(playerOfferA, playerOfferB)) {
+    public boolean take(net.minecraft.world.item.ItemStack $$0, net.minecraft.world.item.ItemStack $$1) {
+        if (!this.satisfiedBy($$0, $$1)) {
             return false;
         }
-        playerOfferA.shrink(this.getCostA().getCount());
+        $$0.shrink(this.getCostA().getCount());
         if (!this.getCostB().isEmpty()) {
-            playerOfferB.shrink(this.getCostB().getCount());
+            $$1.shrink(this.getCostB().getCount());
         }
         return true;
     }