--- net/minecraft/world/item/crafting/Ingredient.java
+++ net/minecraft/world/item/crafting/Ingredient.java
@@ -13,8 +13,8 @@
     @javax.annotation.Nullable
     public it.unimi.dsi.fastutil.ints.IntList stackingIds;
 
-    public net.minecraft.world.item.crafting.Ingredient(java.util.stream.Stream<? extends net.minecraft.world.item.crafting.Ingredient$Value> values) {
-        this.values = (net.minecraft.world.item.crafting.Ingredient$Value[])values.toArray(net.minecraft.world.item.crafting.Ingredient$Value[]::new);
+    public net.minecraft.world.item.crafting.Ingredient(java.util.stream.Stream<? extends net.minecraft.world.item.crafting.Ingredient$Value> $$0) {
+        this.values = (net.minecraft.world.item.crafting.Ingredient$Value[])$$0.toArray(net.minecraft.world.item.crafting.Ingredient$Value[]::new);
     }
 
     public net.minecraft.world.item.ItemStack[] getItems() {
@@ -24,7 +24,7 @@
 
     public void dissolve() {
         if (this.itemStacks == null) {
-            this.itemStacks = (net.minecraft.world.item.ItemStack[])java.util.Arrays.stream((java.lang.Object[])this.values).flatMap(value -> value.getItems().stream()).distinct().toArray(net.minecraft.world.item.ItemStack[]::new);
+            this.itemStacks = (net.minecraft.world.item.ItemStack[])java.util.Arrays.stream((java.lang.Object[])this.values).flatMap($$0 -> $$0.getItems().stream()).distinct().toArray(net.minecraft.world.item.ItemStack[]::new);
         }
     }
 
@@ -55,9 +55,9 @@
         return this.stackingIds;
     }
 
-    public void toNetwork(net.minecraft.network.FriendlyByteBuf buffer) {
+    public void toNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
         this.dissolve();
-        buffer.writeCollection((java.util.Collection)java.util.Arrays.asList((java.lang.Object[])this.itemStacks), net.minecraft.network.FriendlyByteBuf::writeItem);
+        $$0.writeCollection((java.util.Collection)java.util.Arrays.asList((java.lang.Object[])this.itemStacks), net.minecraft.network.FriendlyByteBuf::writeItem);
     }
 
     public com.google.gson.JsonElement toJson() {
@@ -75,64 +75,64 @@
         return !(this.values.length != 0 || this.itemStacks != null && this.itemStacks.length != 0 || this.stackingIds != null && !this.stackingIds.isEmpty());
     }
 
-    public static net.minecraft.world.item.crafting.Ingredient fromValues(java.util.stream.Stream<? extends net.minecraft.world.item.crafting.Ingredient$Value> stream) {
-        net.minecraft.world.item.crafting.Ingredient ingredient = new net.minecraft.world.item.crafting.Ingredient(stream);
-        return ingredient.values.length == 0 ? EMPTY : ingredient;
+    public static net.minecraft.world.item.crafting.Ingredient fromValues(java.util.stream.Stream<? extends net.minecraft.world.item.crafting.Ingredient$Value> $$0) {
+        net.minecraft.world.item.crafting.Ingredient $$1 = new net.minecraft.world.item.crafting.Ingredient($$0);
+        return $$1.values.length == 0 ? EMPTY : $$1;
     }
 
     public static net.minecraft.world.item.crafting.Ingredient of() {
         return EMPTY;
     }
 
-    public static net.minecraft.world.item.crafting.Ingredient of(net.minecraft.world.level.ItemLike ... items) {
-        return net.minecraft.world.item.crafting.Ingredient.of((java.util.stream.Stream)java.util.Arrays.stream((java.lang.Object[])items).map(net.minecraft.world.item.ItemStack::new));
+    public static net.minecraft.world.item.crafting.Ingredient of(net.minecraft.world.level.ItemLike ... $$0) {
+        return net.minecraft.world.item.crafting.Ingredient.of((java.util.stream.Stream)java.util.Arrays.stream((java.lang.Object[])$$0).map(net.minecraft.world.item.ItemStack::new));
     }
 
-    public static net.minecraft.world.item.crafting.Ingredient of(net.minecraft.world.item.ItemStack ... stacks) {
-        return net.minecraft.world.item.crafting.Ingredient.of((java.util.stream.Stream)java.util.Arrays.stream((java.lang.Object[])stacks));
+    public static net.minecraft.world.item.crafting.Ingredient of(net.minecraft.world.item.ItemStack ... $$0) {
+        return net.minecraft.world.item.crafting.Ingredient.of((java.util.stream.Stream)java.util.Arrays.stream((java.lang.Object[])$$0));
     }
 
-    public static net.minecraft.world.item.crafting.Ingredient of(java.util.stream.Stream<net.minecraft.world.item.ItemStack> stacks) {
-        return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)stacks.filter(stack -> !stack.isEmpty()).map(net.minecraft.world.item.crafting.Ingredient$ItemValue::new));
+    public static net.minecraft.world.item.crafting.Ingredient of(java.util.stream.Stream<net.minecraft.world.item.ItemStack> $$02) {
+        return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)$$02.filter($$0 -> !$$0.isEmpty()).map(net.minecraft.world.item.crafting.Ingredient$ItemValue::new));
     }
 
     public static net.minecraft.world.item.crafting.Ingredient of(net.minecraft.tags.TagKey<net.minecraft.world.item.Item> $$0) {
         return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)java.util.stream.Stream.of((java.lang.Object)new net.minecraft.world.item.crafting.Ingredient$TagValue($$0)));
     }
 
-    public static net.minecraft.world.item.crafting.Ingredient fromNetwork(net.minecraft.network.FriendlyByteBuf buffer) {
-        return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)buffer.readList(net.minecraft.network.FriendlyByteBuf::readItem).stream().map(net.minecraft.world.item.crafting.Ingredient$ItemValue::new));
+    public static net.minecraft.world.item.crafting.Ingredient fromNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
+        return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)$$0.readList(net.minecraft.network.FriendlyByteBuf::readItem).stream().map(net.minecraft.world.item.crafting.Ingredient$ItemValue::new));
     }
 
-    public static net.minecraft.world.item.crafting.Ingredient fromJson(@javax.annotation.Nullable com.google.gson.JsonElement json) {
-        if (json == null || json.isJsonNull()) {
+    public static net.minecraft.world.item.crafting.Ingredient fromJson(@javax.annotation.Nullable com.google.gson.JsonElement $$02) {
+        if ($$02 == null || $$02.isJsonNull()) {
             throw new com.google.gson.JsonSyntaxException("Item cannot be null");
         }
-        if (json.isJsonObject()) {
-            return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)java.util.stream.Stream.of((java.lang.Object)net.minecraft.world.item.crafting.Ingredient.valueFromJson((com.google.gson.JsonObject)json.getAsJsonObject())));
+        if ($$02.isJsonObject()) {
+            return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)java.util.stream.Stream.of((java.lang.Object)net.minecraft.world.item.crafting.Ingredient.valueFromJson((com.google.gson.JsonObject)$$02.getAsJsonObject())));
         }
-        if (json.isJsonArray()) {
-            com.google.gson.JsonArray jsonArray = json.getAsJsonArray();
-            if (jsonArray.size() == 0) {
+        if ($$02.isJsonArray()) {
+            com.google.gson.JsonArray $$1 = $$02.getAsJsonArray();
+            if ($$1.size() == 0) {
                 throw new com.google.gson.JsonSyntaxException("Item array cannot be empty, at least one item must be defined");
             }
-            return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)java.util.stream.StreamSupport.stream((java.util.Spliterator)jsonArray.spliterator(), (boolean)false).map($$0 -> net.minecraft.world.item.crafting.Ingredient.valueFromJson((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.convertToJsonObject((com.google.gson.JsonElement)$$0, (java.lang.String)"item"))));
+            return net.minecraft.world.item.crafting.Ingredient.fromValues((java.util.stream.Stream)java.util.stream.StreamSupport.stream((java.util.Spliterator)$$1.spliterator(), (boolean)false).map($$0 -> net.minecraft.world.item.crafting.Ingredient.valueFromJson((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.convertToJsonObject((com.google.gson.JsonElement)$$0, (java.lang.String)"item"))));
         }
         throw new com.google.gson.JsonSyntaxException("Expected item to be object or array of objects");
     }
 
-    public static net.minecraft.world.item.crafting.Ingredient$Value valueFromJson(com.google.gson.JsonObject json) {
-        if (json.has("item") && json.has("tag")) {
+    public static net.minecraft.world.item.crafting.Ingredient$Value valueFromJson(com.google.gson.JsonObject $$0) {
+        if ($$0.has("item") && $$0.has("tag")) {
             throw new com.google.gson.JsonParseException("An ingredient entry is either a tag or an item, not both");
         }
-        if (json.has("item")) {
-            net.minecraft.world.item.Item item = net.minecraft.world.item.crafting.ShapedRecipe.itemFromJson((com.google.gson.JsonObject)json);
-            return new net.minecraft.world.item.crafting.Ingredient$ItemValue(new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)item));
+        if ($$0.has("item")) {
+            net.minecraft.world.item.Item $$1 = net.minecraft.world.item.crafting.ShapedRecipe.itemFromJson((com.google.gson.JsonObject)$$0);
+            return new net.minecraft.world.item.crafting.Ingredient$ItemValue(new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)$$1));
         }
-        if (json.has("tag")) {
-            net.minecraft.resources.ResourceLocation resourceLocation = new net.minecraft.resources.ResourceLocation(net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)json, (java.lang.String)"tag"));
-            net.minecraft.tags.TagKey tagKey = net.minecraft.tags.TagKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.ITEM_REGISTRY, (net.minecraft.resources.ResourceLocation)resourceLocation);
-            return new net.minecraft.world.item.crafting.Ingredient$TagValue(tagKey);
+        if ($$0.has("tag")) {
+            net.minecraft.resources.ResourceLocation $$2 = new net.minecraft.resources.ResourceLocation(net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"tag"));
+            net.minecraft.tags.TagKey $$3 = net.minecraft.tags.TagKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.ITEM_REGISTRY, (net.minecraft.resources.ResourceLocation)$$2);
+            return new net.minecraft.world.item.crafting.Ingredient$TagValue($$3);
         }
         throw new com.google.gson.JsonParseException("An ingredient entry needs either a tag or an item");
     }