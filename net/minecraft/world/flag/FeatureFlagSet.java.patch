--- net/minecraft/world/flag/FeatureFlagSet.java
+++ net/minecraft/world/flag/FeatureFlagSet.java
@@ -1,0 +1,107 @@
+/*
+ * Decompiled with CFR 0.151.
+ */
+package net.minecraft.world.flag;
+
+public class net.minecraft.world.flag.FeatureFlagSet
+ {
+    public static net.minecraft.world.flag.FeatureFlagSet EMPTY;
+    public static int MAX_CONTAINER_SIZE = 64;
+    @javax.annotation.Nullable
+    public net.minecraft.world.flag.FeatureFlagUniverse universe;
+    public long mask;
+
+    public net.minecraft.world.flag.FeatureFlagSet(@javax.annotation.Nullable net.minecraft.world.flag.FeatureFlagUniverse $$0, long $$1) {
+        this.universe = $$0;
+        this.mask = $$1;
+    }
+
+    public static net.minecraft.world.flag.FeatureFlagSet create(net.minecraft.world.flag.FeatureFlagUniverse $$0, java.util.Collection<net.minecraft.world.flag.FeatureFlag> $$1) {
+        if ($$1.isEmpty()) {
+            return EMPTY;
+        }
+        long $$2 = net.minecraft.world.flag.FeatureFlagSet.computeMask((net.minecraft.world.flag.FeatureFlagUniverse)$$0, (long)0L, $$1);
+        return new net.minecraft.world.flag.FeatureFlagSet($$0, $$2);
+    }
+
+    public static net.minecraft.world.flag.FeatureFlagSet of() {
+        return EMPTY;
+    }
+
+    public static net.minecraft.world.flag.FeatureFlagSet of(net.minecraft.world.flag.FeatureFlag $$0) {
+        return new net.minecraft.world.flag.FeatureFlagSet($$0.universe, $$0.mask);
+    }
+
+    public static net.minecraft.world.flag.FeatureFlagSet of(net.minecraft.world.flag.FeatureFlag $$0, net.minecraft.world.flag.FeatureFlag ... $$1) {
+        long $$2 = $$1.length == 0 ? $$0.mask : net.minecraft.world.flag.FeatureFlagSet.computeMask((net.minecraft.world.flag.FeatureFlagUniverse)$$0.universe, (long)$$0.mask, (java.lang.Iterable)java.util.Arrays.asList((java.lang.Object[])$$1));
+        return new net.minecraft.world.flag.FeatureFlagSet($$0.universe, $$2);
+    }
+
+    public static long computeMask(net.minecraft.world.flag.FeatureFlagUniverse $$0, long $$1, java.lang.Iterable<net.minecraft.world.flag.FeatureFlag> $$2) {
+        for (net.minecraft.world.flag.FeatureFlag $$3 : $$2) {
+            if ($$0 != $$3.universe) {
+                throw new java.lang.IllegalStateException("Mismatched feature universe, expected '" + $$0 + "', but got '" + $$3.universe + "'");
+            }
+            $$1 |= $$3.mask;
+        }
+        return $$1;
+    }
+
+    public boolean contains(net.minecraft.world.flag.FeatureFlag $$0) {
+        if (this.universe != $$0.universe) {
+            return false;
+        }
+        return (this.mask & $$0.mask) != 0L;
+    }
+
+    public boolean isSubsetOf(net.minecraft.world.flag.FeatureFlagSet $$0) {
+        if (this.universe == null) {
+            return true;
+        }
+        if (this.universe != $$0.universe) {
+            return false;
+        }
+        return (this.mask & ($$0.mask ^ 0xFFFFFFFFFFFFFFFFL)) == 0L;
+    }
+
+    public net.minecraft.world.flag.FeatureFlagSet join(net.minecraft.world.flag.FeatureFlagSet $$0) {
+        if (this.universe == null) {
+            return $$0;
+        }
+        if ($$0.universe == null) {
+            return this;
+        }
+        if (this.universe != $$0.universe) {
+            throw new java.lang.IllegalArgumentException("Mismatched set elements: '" + this.universe + "' != '" + $$0.universe + "'");
+        }
+        return new net.minecraft.world.flag.FeatureFlagSet(this.universe, this.mask | $$0.mask);
+    }
+
+    /*
+     * Unable to fully structure code
+     */
+    public boolean equals(java.lang.Object $$0) {
+        if (this == $$0) {
+            return true;
+        }
+        if (!($$0 instanceof net.minecraft.world.flag.FeatureFlagSet)) ** GOTO lbl-1000
+        $$1 = (net.minecraft.world.flag.FeatureFlagSet)$$0;
+        if (this.universe == $$1.universe && this.mask == $$1.mask) {
+            v0 = true;
+        } else lbl-1000:// 2 sources
+
+        {
+            v0 = false;
+        }
+        return v0;
+    }
+
+    public int hashCode() {
+        return (int)it.unimi.dsi.fastutil.HashCommon.mix((long)this.mask);
+    }
+
+    static {
+        EMPTY = new net.minecraft.world.flag.FeatureFlagSet(null, 0L);
+    }
+}
+