--- net/minecraft/util/datafix/fixes/AddNewChoices.java
+++ net/minecraft/util/datafix/fixes/AddNewChoices.java
@@ -21,13 +21,13 @@
         return this.cap(this.name, $$0, $$1);
     }
 
-    public <K> com.mojang.datafixers.TypeRewriteRule cap(java.lang.String name, com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType<K> taggedChoiceType, com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType<?> taggedChoiceType2) {
-        if (taggedChoiceType.getKeyType() != taggedChoiceType2.getKeyType()) {
+    public <K> com.mojang.datafixers.TypeRewriteRule cap(java.lang.String $$0, com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType<K> $$1, com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType<?> $$2) {
+        if ($$1.getKeyType() != $$2.getKeyType()) {
             throw new java.lang.IllegalStateException("Could not inject: key type is not the same");
         }
-        com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType<?> taggedChoiceType3 = taggedChoiceType2;
-        return this.fixTypeEverywhere(name, taggedChoiceType, taggedChoiceType3, $$12 -> $$1 -> {
-            if (!taggedChoiceType3.hasType($$1.getFirst())) {
+        com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType<?> $$3 = $$2;
+        return this.fixTypeEverywhere($$0, $$1, $$3, $$12 -> $$1 -> {
+            if (!$$3.hasType($$1.getFirst())) {
                 throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Unknown type %s in %s ", (java.lang.Object[])new java.lang.Object[]{$$1.getFirst(), this.type}));
             }
             return $$1;