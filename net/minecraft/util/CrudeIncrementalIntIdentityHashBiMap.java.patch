--- net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
+++ net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
@@ -33,23 +33,23 @@
         return new net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap((int)((float)$$0 / 0.8f));
     }
 
-    public int getId(@javax.annotation.Nullable K value) {
-        return this.getValue(this.indexOf(value, this.hash(value)));
+    public int getId(@javax.annotation.Nullable K $$0) {
+        return this.getValue(this.indexOf($$0, this.hash($$0)));
     }
 
     @javax.annotation.Nullable
-    public K byId(int value) {
-        if (value < 0 || value >= this.byId.length) {
+    public K byId(int $$0) {
+        if ($$0 < 0 || $$0 >= this.byId.length) {
             return null;
         }
-        return (K)this.byId[value];
+        return (K)this.byId[$$0];
     }
 
-    public int getValue(int key) {
-        if (key == -1) {
+    public int getValue(int $$0) {
+        if ($$0 == -1) {
             return -1;
         }
-        return this.values[key];
+        return this.values[$$0];
     }
 
     public boolean contains(K $$0) {
@@ -60,10 +60,10 @@
         return this.byId($$0) != null;
     }
 
-    public int add(K object) {
-        int n = this.nextId();
-        this.addMapping(object, n);
-        return n;
+    public int add(K $$0) {
+        int $$1 = this.nextId();
+        this.addMapping($$0, $$1);
+        return $$1;
     }
 
     public int nextId() {
@@ -73,76 +73,70 @@
         return this.nextId;
     }
 
-    public void grow(int capacity) {
-        java.lang.Object[] objectArray = this.keys;
-        int[] nArray = this.values;
-        net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap crudeIncrementalIntIdentityHashBiMap = new net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap(capacity);
-        for (int i = 0; i < objectArray.length; ++i) {
-            if (objectArray[i] == null) continue;
-            crudeIncrementalIntIdentityHashBiMap.addMapping(objectArray[i], nArray[i]);
+    public void grow(int $$0) {
+        java.lang.Object[] $$1 = this.keys;
+        int[] $$2 = this.values;
+        net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap $$3 = new net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap($$0);
+        for (int $$4 = 0; $$4 < $$1.length; ++$$4) {
+            if ($$1[$$4] == null) continue;
+            $$3.addMapping($$1[$$4], $$2[$$4]);
         }
-        this.keys = crudeIncrementalIntIdentityHashBiMap.keys;
-        this.values = crudeIncrementalIntIdentityHashBiMap.values;
-        this.byId = crudeIncrementalIntIdentityHashBiMap.byId;
-        this.nextId = crudeIncrementalIntIdentityHashBiMap.nextId;
-        this.size = crudeIncrementalIntIdentityHashBiMap.size;
+        this.keys = $$3.keys;
+        this.values = $$3.values;
+        this.byId = $$3.byId;
+        this.nextId = $$3.nextId;
+        this.size = $$3.size;
     }
 
-    public void addMapping(K object, int intKey) {
-        int n;
-        int n2 = java.lang.Math.max((int)intKey, (int)(this.size + 1));
-        if ((float)n2 >= (float)this.keys.length * 0.8f) {
-            for (n = this.keys.length << 1;
- n < intKey; n <<= 1) {
+    public void addMapping(K $$0, int $$1) {
+        int $$2 = java.lang.Math.max((int)$$1, (int)(this.size + 1));
+        if ((float)$$2 >= (float)this.keys.length * 0.8f) {
+            int $$3;
+            for ($$3 = this.keys.length << 1;
+ $$3 < $$1; $$3 <<= 1) {
             }
-            this.grow(n);
+            this.grow($$3);
         }
-        n = this.findEmpty(this.hash(object));
-        this.keys[n] = object;
-        this.values[n] = intKey;
-        this.byId[intKey] = object;
+        int $$4 = this.findEmpty(this.hash($$0));
+        this.keys[$$4] = $$0;
+        this.values[$$4] = $$1;
+        this.byId[$$1] = $$0;
         ++this.size;
-        if (intKey == this.nextId) {
+        if ($$1 == this.nextId) {
             ++this.nextId;
         }
     }
 
-    public int hash(@javax.annotation.Nullable K obect) {
-        return (net.minecraft.util.Mth.murmurHash3Mixer((int)java.lang.System.identityHashCode(obect)) & java.lang.Integer.MAX_VALUE) % this.keys.length;
+    public int hash(@javax.annotation.Nullable K $$0) {
+        return (net.minecraft.util.Mth.murmurHash3Mixer((int)java.lang.System.identityHashCode($$0)) & java.lang.Integer.MAX_VALUE) % this.keys.length;
     }
 
-    public int indexOf(@javax.annotation.Nullable K object, int startIndex) {
-        int n;
-        for (n = startIndex;
- n < this.keys.length; ++n) {
-            if (this.keys[n] == object) {
-                return n;
+    public int indexOf(@javax.annotation.Nullable K $$0, int $$1) {
+        for (int $$2 = $$1; $$2 < this.keys.length; ++$$2) {
+            if (this.keys[$$2] == $$0) {
+                return $$2;
             }
-            if (this.keys[n] != EMPTY_SLOT) continue;
+            if (this.keys[$$2] != EMPTY_SLOT) continue;
             return -1;
         }
-        for (n = 0;
- n < startIndex; ++n) {
-            if (this.keys[n] == object) {
-                return n;
+        for (int $$3 = 0; $$3 < $$1; ++$$3) {
+            if (this.keys[$$3] == $$0) {
+                return $$3;
             }
-            if (this.keys[n] != EMPTY_SLOT) continue;
+            if (this.keys[$$3] != EMPTY_SLOT) continue;
             return -1;
         }
         return -1;
     }
 
-    public int findEmpty(int startIndex) {
-        int n;
-        for (n = startIndex;
- n < this.keys.length; ++n) {
-            if (this.keys[n] != EMPTY_SLOT) continue;
-            return n;
+    public int findEmpty(int $$0) {
+        for (int $$1 = $$0; $$1 < this.keys.length; ++$$1) {
+            if (this.keys[$$1] != EMPTY_SLOT) continue;
+            return $$1;
         }
-        for (n = 0;
- n < startIndex; ++n) {
-            if (this.keys[n] != EMPTY_SLOT) continue;
-            return n;
+        for (int $$2 = 0; $$2 < $$0; ++$$2) {
+            if (this.keys[$$2] != EMPTY_SLOT) continue;
+            return $$2;
         }
         throw new java.lang.RuntimeException("Overflowed :(");
     }