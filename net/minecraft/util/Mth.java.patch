--- net/minecraft/util/Mth.java
+++ net/minecraft/util/Mth.java
@@ -32,57 +32,62 @@
     public net.minecraft.util.Mth() {
     }
 
-    public static float sin(float value) {
-        return SIN[(int)(value * 10430.378f) & 0xFFFF];
+    public static float truncate(float $$0, float $$1) {
+        float $$2 = (float)java.lang.Math.pow((double)10.0, (double)$$1);
+        return (float)((int)($$0 * $$2)) / $$2;
     }
 
-    public static float cos(float value) {
-        return SIN[(int)(value * 10430.378f + 16384.0f) & 0xFFFF];
+    public static float sin(float $$0) {
+        return SIN[(int)($$0 * 10430.378f) & 0xFFFF];
     }
 
-    public static float sqrt(float value) {
-        return (float)java.lang.Math.sqrt((double)value);
+    public static float cos(float $$0) {
+        return SIN[(int)($$0 * 10430.378f + 16384.0f) & 0xFFFF];
     }
 
-    public static int floor(float value) {
-        int n = (int)value;
-        return value < (float)n ? n - 1 : n;
+    public static float sqrt(float $$0) {
+        return (float)java.lang.Math.sqrt((double)$$0);
     }
 
-    public static int fastFloor(double value) {
-        return (int)(value + 1024.0) - 1024;
+    public static int floor(float $$0) {
+        int $$1 = (int)$$0;
+        return $$0 < (float)$$1 ? $$1 - 1 : $$1;
     }
 
-    public static int floor(double value) {
-        int n = (int)value;
-        return value < (double)n ? n - 1 : n;
+    public static int fastFloor(double $$0) {
+        return (int)($$0 + 1024.0) - 1024;
     }
 
-    public static long lfloor(double value) {
-        long l = (long)value;
-        return value < (double)l ? l - 1L : l;
+    public static int floor(double $$0) {
+        int $$1 = (int)$$0;
+        return $$0 < (double)$$1 ? $$1 - 1 : $$1;
     }
 
+    public static long lfloor(double $$0) {
+        long $$1 = (long)$$0;
+        return $$0 < (double)$$1 ? $$1 - 1L : $$1;
+    }
+
     public static int absFloor(double $$0) {
         return (int)($$0 >= 0.0 ? $$0 : -$$0 + 1.0);
     }
 
-    public static float abs(float value) {
-        return java.lang.Math.abs((float)value);
+    public static float abs(float $$0) {
+        return java.lang.Math.abs((float)$$0);
     }
 
-    public static int abs(int value) {
-        return java.lang.Math.abs((int)value);
+    public static int abs(int $$0) {
+        return java.lang.Math.abs((int)$$0);
     }
 
-    public static int ceil(float value) {
-        int n = (int)value;
-        return value > (float)n ? n + 1 : n;
+    public static int ceil(float $$0) {
+        int $$1 = (int)$$0;
+        return $$0 > (float)$$1 ? $$1 + 1 : $$1;
     }
 
-    public static int ceil(double value) {
-        int n = (int)value;
-        return value > (double)n ? n + 1 : n;
+    public static int ceil(double $$0) {
+        int $$1 = (int)$$0;
+        return $$0 > (double)$$1 ? $$1 + 1 : $$1;
     }
 
     public static byte clamp(byte $$0, byte $$1, byte $$2) {
@@ -95,54 +100,54 @@
         return $$0;
     }
 
-    public static int clamp(int value, int min, int max) {
-        if (value < min) {
-            return min;
+    public static int clamp(int $$0, int $$1, int $$2) {
+        if ($$0 < $$1) {
+            return $$1;
         }
-        if (value > max) {
-            return max;
+        if ($$0 > $$2) {
+            return $$2;
         }
-        return value;
+        return $$0;
     }
 
-    public static long clamp(long value, long min, long max) {
-        if (value < min) {
-            return min;
+    public static long clamp(long $$0, long $$1, long $$2) {
+        if ($$0 < $$1) {
+            return $$1;
         }
-        if (value > max) {
-            return max;
+        if ($$0 > $$2) {
+            return $$2;
         }
-        return value;
+        return $$0;
     }
 
-    public static float clamp(float value, float min, float max) {
-        if (value < min) {
-            return min;
+    public static float clamp(float $$0, float $$1, float $$2) {
+        if ($$0 < $$1) {
+            return $$1;
         }
-        if (value > max) {
-            return max;
+        if ($$0 > $$2) {
+            return $$2;
         }
-        return value;
+        return $$0;
     }
 
-    public static double clamp(double value, double min, double max) {
-        if (value < min) {
-            return min;
+    public static double clamp(double $$0, double $$1, double $$2) {
+        if ($$0 < $$1) {
+            return $$1;
         }
-        if (value > max) {
-            return max;
+        if ($$0 > $$2) {
+            return $$2;
         }
-        return value;
+        return $$0;
     }
 
-    public static double clampedLerp(double start, double end, double delta) {
-        if (delta < 0.0) {
-            return start;
+    public static double clampedLerp(double $$0, double $$1, double $$2) {
+        if ($$2 < 0.0) {
+            return $$0;
         }
-        if (delta > 1.0) {
-            return end;
+        if ($$2 > 1.0) {
+            return $$1;
         }
-        return net.minecraft.util.Mth.lerp((double)delta, (double)start, (double)end);
+        return net.minecraft.util.Mth.lerp((double)$$2, (double)$$0, (double)$$1);
     }
 
     public static float clampedLerp(float $$0, float $$1, float $$2) {
@@ -155,18 +160,18 @@
         return net.minecraft.util.Mth.lerp((float)$$2, (float)$$0, (float)$$1);
     }
 
-    public static double absMax(double x, double y) {
-        if (x < 0.0) {
-            x = -x;
+    public static double absMax(double $$0, double $$1) {
+        if ($$0 < 0.0) {
+            $$0 = -$$0;
         }
-        if (y < 0.0) {
-            y = -y;
+        if ($$1 < 0.0) {
+            $$1 = -$$1;
         }
-        return x > y ? x : y;
+        return $$0 > $$1 ? $$0 : $$1;
     }
 
-    public static int intFloorDiv(int x, int y) {
-        return java.lang.Math.floorDiv((int)x, (int)y);
+    public static int intFloorDiv(int $$0, int $$1) {
+        return java.lang.Math.floorDiv((int)$$0, (int)$$1);
     }
 
     public static int nextInt(net.minecraft.util.RandomSource $$0, int $$1, int $$2) {
@@ -190,65 +195,69 @@
         return $$0.nextDouble() * ($$2 - $$1) + $$1;
     }
 
-    public static double average(long[] values) {
-        long l = 0L;
-        for (long l2 : values) {
-            l += l2;
+    public static double average(long[] $$0) {
+        long $$1 = 0L;
+        for (long $$2 : $$0) {
+            $$1 += $$2;
         }
-        return (double)l / (double)values.length;
+        return (double)$$1 / (double)$$0.length;
     }
 
-    public static boolean equal(float x, float y) {
-        return java.lang.Math.abs((float)(y - x)) < 1.0E-5f;
+    public static boolean equal(float $$0, float $$1) {
+        return java.lang.Math.abs((float)($$1 - $$0)) < 1.0E-5f;
     }
 
-    public static boolean equal(double x, double y) {
-        return java.lang.Math.abs((double)(y - x)) < (double)1.0E-5f;
+    public static boolean equal(double $$0, double $$1) {
+        return java.lang.Math.abs((double)($$1 - $$0)) < (double)1.0E-5f;
     }
 
-    public static int positiveModulo(int x, int y) {
-        return java.lang.Math.floorMod((int)x, (int)y);
+    public static int positiveModulo(int $$0, int $$1) {
+        return java.lang.Math.floorMod((int)$$0, (int)$$1);
     }
 
-    public static float positiveModulo(float numerator, float denominator) {
-        return (numerator % denominator + denominator) % denominator;
+    public static float positiveModulo(float $$0, float $$1) {
+        return ($$0 % $$1 + $$1) % $$1;
     }
 
-    public static double positiveModulo(double numerator, double denominator) {
-        return (numerator % denominator + denominator) % denominator;
+    public static double positiveModulo(double $$0, double $$1) {
+        return ($$0 % $$1 + $$1) % $$1;
     }
 
-    public static int wrapDegrees(int angle) {
-        int n = angle % 360;
-        if (n >= 180) {
-            n -= 360;
+    public static boolean isDivisionInteger(int $$0, int $$1) {
+        return $$0 / $$1 * $$1 == $$0;
+    }
+
+    public static int wrapDegrees(int $$0) {
+        int $$1 = $$0 % 360;
+        if ($$1 >= 180) {
+            $$1 -= 360;
         }
-        if (n < -180) {
-            n += 360;
+        if ($$1 < -180) {
+            $$1 += 360;
         }
-        return n;
+        return $$1;
     }
 
-    public static float wrapDegrees(float value) {
-        float f = value % 360.0f;
-        if (f >= 180.0f) {
-            f -= 360.0f;
+    public static float wrapDegrees(float $$0) {
+        float $$1 = $$0 % 360.0f;
+        if ($$1 >= 180.0f) {
+            $$1 -= 360.0f;
         }
-        if (f < -180.0f) {
-            f += 360.0f;
+        if ($$1 < -180.0f) {
+            $$1 += 360.0f;
         }
-        return f;
+        return $$1;
     }
 
-    public static double wrapDegrees(double value) {
-        double d = value % 360.0;
-        if (d >= 180.0) {
-            d -= 360.0;
+    public static double wrapDegrees(double $$0) {
+        double $$1 = $$0 % 360.0;
+        if ($$1 >= 180.0) {
+            $$1 -= 360.0;
         }
-        if (d < -180.0) {
-            d += 360.0;
+        if ($$1 < -180.0) {
+            $$1 += 360.0;
         }
-        return d;
+        return $$1;
     }
 
     public static float degreesDifference(float $$0, float $$1) {
@@ -278,8 +287,8 @@
         return net.minecraft.util.Mth.approach((float)$$0, (float)($$0 + $$3), (float)$$2);
     }
 
-    public static int getInt(java.lang.String value, int defaultValue) {
-        return org.apache.commons.lang3.math.NumberUtils.toInt((java.lang.String)value, (int)defaultValue);
+    public static int getInt(java.lang.String $$0, int $$1) {
+        return org.apache.commons.lang3.math.NumberUtils.toInt((java.lang.String)$$0, (int)$$1);
     }
 
     public static int getInt(java.lang.String $$0, int $$1, int $$2) {
@@ -299,38 +308,38 @@
         return java.lang.Math.max((double)$$2, (double)net.minecraft.util.Mth.getDouble((java.lang.String)$$0, (double)$$1));
     }
 
-    public static int smallestEncompassingPowerOfTwo(int value) {
-        int n = value - 1;
-        n |= n >> 1;
-        n |= n >> 2;
-        n |= n >> 4;
-        n |= n >> 8;
-        n |= n >> 16;
-        return n + 1;
+    public static int smallestEncompassingPowerOfTwo(int $$0) {
+        int $$1 = $$0 - 1;
+        $$1 |= $$1 >> 1;
+        $$1 |= $$1 >> 2;
+        $$1 |= $$1 >> 4;
+        $$1 |= $$1 >> 8;
+        $$1 |= $$1 >> 16;
+        return $$1 + 1;
     }
 
-    public static boolean isPowerOfTwo(int value) {
-        return value != 0 && (value & value - 1) == 0;
+    public static boolean isPowerOfTwo(int $$0) {
+        return $$0 != 0 && ($$0 & $$0 - 1) == 0;
     }
 
-    public static int ceillog2(int value) {
-        value = net.minecraft.util.Mth.isPowerOfTwo((int)value) ? value : net.minecraft.util.Mth.smallestEncompassingPowerOfTwo((int)value);
-        return MULTIPLY_DE_BRUIJN_BIT_POSITION[(int)((long)value * 125613361L >> 27) & 0x1F];
+    public static int ceillog2(int $$0) {
+        $$0 = net.minecraft.util.Mth.isPowerOfTwo((int)$$0) ? $$0 : net.minecraft.util.Mth.smallestEncompassingPowerOfTwo((int)$$0);
+        return MULTIPLY_DE_BRUIJN_BIT_POSITION[(int)((long)$$0 * 125613361L >> 27) & 0x1F];
     }
 
-    public static int log2(int value) {
-        return net.minecraft.util.Mth.ceillog2((int)value) - (net.minecraft.util.Mth.isPowerOfTwo((int)value) ? 0 : 1);
+    public static int log2(int $$0) {
+        return net.minecraft.util.Mth.ceillog2((int)$$0) - (net.minecraft.util.Mth.isPowerOfTwo((int)$$0) ? 0 : 1);
     }
 
-    public static int color(float r, float g, float b) {
-        return net.minecraft.util.Mth.color((int)net.minecraft.util.Mth.floor((float)(r * 255.0f)), (int)net.minecraft.util.Mth.floor((float)(g * 255.0f)), (int)net.minecraft.util.Mth.floor((float)(b * 255.0f)));
+    public static int color(float $$0, float $$1, float $$2) {
+        return net.minecraft.util.Mth.color((int)net.minecraft.util.Mth.floor((float)($$0 * 255.0f)), (int)net.minecraft.util.Mth.floor((float)($$1 * 255.0f)), (int)net.minecraft.util.Mth.floor((float)($$2 * 255.0f)));
     }
 
-    public static int color(int r, int g, int b) {
-        int n = r;
-        n = (n << 8) + g;
-        n = (n << 8) + b;
-        return n;
+    public static int color(int $$0, int $$1, int $$2) {
+        int $$3 = $$0;
+        $$3 = ($$3 << 8) + $$1;
+        $$3 = ($$3 << 8) + $$2;
+        return $$3;
     }
 
     public static int colorMultiply(int $$0, int $$1) {
@@ -356,12 +365,12 @@
         return $$0 & 0xFF000000 | $$7 << 16 | $$8 << 8 | $$9;
     }
 
-    public static float frac(float number) {
-        return number - (float)net.minecraft.util.Mth.floor((float)number);
+    public static float frac(float $$0) {
+        return $$0 - (float)net.minecraft.util.Mth.floor((float)$$0);
     }
 
-    public static double frac(double number) {
-        return number - (double)net.minecraft.util.Mth.lfloor((double)number);
+    public static double frac(double $$0) {
+        return $$0 - (double)net.minecraft.util.Mth.lfloor((double)$$0);
     }
 
     public static net.minecraft.world.phys.Vec3 catmullRomSplinePos(net.minecraft.world.phys.Vec3 $$0, net.minecraft.world.phys.Vec3 $$1, net.minecraft.world.phys.Vec3 $$2, net.minecraft.world.phys.Vec3 $$3, double $$4) {
@@ -372,14 +381,14 @@
         return new net.minecraft.world.phys.Vec3($$0.x * $$5 + $$1.x * $$6 + $$2.x * $$7 + $$3.x * $$8, $$0.y * $$5 + $$1.y * $$6 + $$2.y * $$7 + $$3.y * $$8, $$0.z * $$5 + $$1.z * $$6 + $$2.z * $$7 + $$3.z * $$8);
     }
 
-    public static long getSeed(net.minecraft.core.Vec3i pos) {
-        return net.minecraft.util.Mth.getSeed((int)pos.getX(), (int)pos.getY(), (int)pos.getZ());
+    public static long getSeed(net.minecraft.core.Vec3i $$0) {
+        return net.minecraft.util.Mth.getSeed((int)$$0.getX(), (int)$$0.getY(), (int)$$0.getZ());
     }
 
-    public static long getSeed(int x, int y, int z) {
-        long l = (long)(x * 3129871) ^ (long)z * 116129781L ^ (long)y;
-        l = l * l * 42317861L + l * 11L;
-        return l >> 16;
+    public static long getSeed(int $$0, int $$1, int $$2) {
+        long $$3 = (long)($$0 * 3129871) ^ (long)$$2 * 116129781L ^ (long)$$1;
+        $$3 = $$3 * $$3 * 42317861L + $$3 * 11L;
+        return $$3 >> 16;
     }
 
     public static java.util.UUID createInsecureUUID(net.minecraft.util.RandomSource $$0) {
@@ -477,78 +486,90 @@
         return $$15;
     }
 
-    public static float fastInvSqrt(float number) {
-        float f = 0.5f * number;
-        int n = java.lang.Float.floatToIntBits((float)number);
-        n = 1597463007 - (n >> 1);
-        number = java.lang.Float.intBitsToFloat((int)n);
-        number *= 1.5f - f * number * number;
-        return number;
+    public static float fastInvSqrt(float $$0) {
+        float $$1 = 0.5f * $$0;
+        int $$2 = java.lang.Float.floatToIntBits((float)$$0);
+        $$2 = 1597463007 - ($$2 >> 1);
+        $$0 = java.lang.Float.intBitsToFloat((int)$$2);
+        $$0 *= 1.5f - $$1 * $$0 * $$0;
+        return $$0;
     }
 
-    public static double fastInvSqrt(double number) {
-        double d = 0.5 * number;
-        long l = java.lang.Double.doubleToRawLongBits((double)number);
-        l = 6910469410427058090L - (l >> 1);
-        number = java.lang.Double.longBitsToDouble((long)l);
-        number *= 1.5 - d * number * number;
-        return number;
+    public static double fastInvSqrt(double $$0) {
+        double $$1 = 0.5 * $$0;
+        long $$2 = java.lang.Double.doubleToRawLongBits((double)$$0);
+        $$2 = 6910469410427058090L - ($$2 >> 1);
+        $$0 = java.lang.Double.longBitsToDouble((long)$$2);
+        $$0 *= 1.5 - $$1 * $$0 * $$0;
+        return $$0;
     }
 
-    public static float fastInvCubeRoot(float number) {
-        int n = java.lang.Float.floatToIntBits((float)number);
-        n = 1419967116 - n / 3;
-        float f = java.lang.Float.intBitsToFloat((int)n);
-        f = 0.6666667f * f + 1.0f / (3.0f * f * f * number);
-        f = 0.6666667f * f + 1.0f / (3.0f * f * f * number);
-        return f;
+    public static float fastInvCubeRoot(float $$0) {
+        int $$1 = java.lang.Float.floatToIntBits((float)$$0);
+        $$1 = 1419967116 - $$1 / 3;
+        float $$2 = java.lang.Float.intBitsToFloat((int)$$1);
+        $$2 = 0.6666667f * $$2 + 1.0f / (3.0f * $$2 * $$2 * $$0);
+        $$2 = 0.6666667f * $$2 + 1.0f / (3.0f * $$2 * $$2 * $$0);
+        return $$2;
     }
 
-    public static int hsvToRgb(float hue, float saturation, float value) {
-        float f;
-        float f2;
-        int n = (int)(hue * 6.0f) % 6;
-        float f3 = hue * 6.0f - (float)n;
-        float f4 = value * (1.0f - saturation);
-        float f5 = value * (1.0f - f3 * saturation);
-        float f6 = value * (1.0f - (1.0f - f3) * saturation);
-        float f7 = switch (n) {
-            case 0 -> {
-                f2 = value;
-                f = f6;
-                yield f4;
+    /*
+     * WARNING - void declaration
+     */
+    public static int hsvToRgb(float $$0, float $$1, float $$2) {
+        void $$28;
+        void $$27;
+        void $$26;
+        int $$3 = (int)($$0 * 6.0f) % 6;
+        float $$4 = $$0 * 6.0f - (float)$$3;
+        float $$5 = $$2 * (1.0f - $$1);
+        float $$6 = $$2 * (1.0f - $$4 * $$1);
+        float $$7 = $$2 * (1.0f - (1.0f - $$4) * $$1);
+        switch ($$3) {
+            case 0: {
+                float $$8 = $$2;
+                float $$9 = $$7;
+                float $$10 = $$5;
+                break;
             }
-            case 1 -> {
-                f2 = f5;
-                f = value;
-                yield f4;
+            case 1: {
+                float $$11 = $$6;
+                float $$12 = $$2;
+                float $$13 = $$5;
+                break;
             }
-            case 2 -> {
-                f2 = f4;
-                f = value;
-                yield f6;
+            case 2: {
+                float $$14 = $$5;
+                float $$15 = $$2;
+                float $$16 = $$7;
+                break;
             }
-            case 3 -> {
-                f2 = f4;
-                f = f5;
-                yield value;
+            case 3: {
+                float $$17 = $$5;
+                float $$18 = $$6;
+                float $$19 = $$2;
+                break;
             }
-            case 4 -> {
-                f2 = f6;
-                f = f4;
-                yield value;
+            case 4: {
+                float $$20 = $$7;
+                float $$21 = $$5;
+                float $$22 = $$2;
+                break;
             }
-            case 5 -> {
-                f2 = value;
-                f = f4;
-                yield f5;
+            case 5: {
+                float $$23 = $$2;
+                float $$24 = $$5;
+                float $$25 = $$6;
+                break;
             }
-            default -> throw new java.lang.RuntimeException("Something went wrong when converting from HSV to RGB. Input was " + hue + ", " + saturation + ", " + value);
-        };
-        int n2 = net.minecraft.util.Mth.clamp((int)((int)(f2 * 255.0f)), (int)0, (int)255);
-        int n3 = net.minecraft.util.Mth.clamp((int)((int)(f * 255.0f)), (int)0, (int)255);
-        int n4 = net.minecraft.util.Mth.clamp((int)((int)(f7 * 255.0f)), (int)0, (int)255);
-        return n2 << 16 | n3 << 8 | n4;
+            default: {
+                throw new java.lang.RuntimeException("Something went wrong when converting from HSV to RGB. Input was " + $$0 + ", " + $$1 + ", " + $$2);
+            }
+        }
+        int $$29 = net.minecraft.util.Mth.clamp((int)((int)($$26 * 255.0f)), (int)0, (int)255);
+        int $$30 = net.minecraft.util.Mth.clamp((int)((int)($$27 * 255.0f)), (int)0, (int)255);
+        int $$31 = net.minecraft.util.Mth.clamp((int)((int)($$28 * 255.0f)), (int)0, (int)255);
+        return $$29 << 16 | $$30 << 8 | $$31;
     }
 
     public static int murmurHash3Mixer(int $$0) {
@@ -624,27 +645,27 @@
         return $$4;
     }
 
-    public static int binarySearch(int min, int max, java.util.function.IntPredicate isTargetBeforeOrAt) {
-        int n = max - min;
-        while (n > 0) {
-            int n2 = n / 2;
-            int n3 = min + n2;
-            if (isTargetBeforeOrAt.test(n3)) {
-                n = n2;
+    public static int binarySearch(int $$0, int $$1, java.util.function.IntPredicate $$2) {
+        int $$3 = $$1 - $$0;
+        while ($$3 > 0) {
+            int $$4 = $$3 / 2;
+            int $$5 = $$0 + $$4;
+            if ($$2.test($$5)) {
+                $$3 = $$4;
                 continue;
             }
-            min = n3 + 1;
-            n -= n2 + 1;
+            $$0 = $$5 + 1;
+            $$3 -= $$4 + 1;
         }
-        return min;
+        return $$0;
     }
 
-    public static float lerp(float delta, float start, float end) {
-        return start + delta * (end - start);
+    public static float lerp(float $$0, float $$1, float $$2) {
+        return $$1 + $$0 * ($$2 - $$1);
     }
 
-    public static double lerp(double delta, double start, double end) {
-        return start + delta * (end - start);
+    public static double lerp(double $$0, double $$1, double $$2) {
+        return $$1 + $$0 * ($$2 - $$1);
     }
 
     public static double lerp2(double $$0, double $$1, double $$2, double $$3, double $$4, double $$5) {
@@ -667,11 +688,11 @@
         return 30.0 * $$0 * $$0 * ($$0 - 1.0) * ($$0 - 1.0);
     }
 
-    public static int sign(double x) {
-        if (x == 0.0) {
+    public static int sign(double $$0) {
+        if ($$0 == 0.0) {
             return 0;
         }
-        return x > 0.0 ? 1 : -1;
+        return $$0 > 0.0 ? 1 : -1;
     }
 
     public static float rotLerp(float $$0, float $$1, float $$2) {
@@ -709,8 +730,8 @@
         return (java.lang.Math.abs((float)($$0 % $$1 - $$1 * 0.5f)) - $$1 * 0.25f) / ($$1 * 0.25f);
     }
 
-    public static float square(float value) {
-        return value * value;
+    public static float square(float $$0) {
+        return $$0 * $$0;
     }
 
     public static double square(double $$0) {