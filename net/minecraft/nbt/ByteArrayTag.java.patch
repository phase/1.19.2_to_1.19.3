--- net/minecraft/nbt/ByteArrayTag.java
+++ net/minecraft/nbt/ByteArrayTag.java
@@ -10,26 +10,26 @@
     public static net.minecraft.nbt.TagType<net.minecraft.nbt.ByteArrayTag> TYPE;
     public byte[] data;
 
-    public net.minecraft.nbt.ByteArrayTag(byte[] data) {
-        this.data = data;
+    public net.minecraft.nbt.ByteArrayTag(byte[] $$0) {
+        this.data = $$0;
     }
 
-    public net.minecraft.nbt.ByteArrayTag(java.util.List<java.lang.Byte> dataList) {
-        this(net.minecraft.nbt.ByteArrayTag.toArray(dataList));
+    public net.minecraft.nbt.ByteArrayTag(java.util.List<java.lang.Byte> $$0) {
+        this(net.minecraft.nbt.ByteArrayTag.toArray($$0));
     }
 
-    public static byte[] toArray(java.util.List<java.lang.Byte> dataList) {
-        byte[] byArray = new byte[dataList.size()];
-        for (int i = 0; i < dataList.size(); ++i) {
-            java.lang.Byte by = (java.lang.Byte)dataList.get(i);
-            byArray[i] = by == null ? (byte)0 : by;
+    public static byte[] toArray(java.util.List<java.lang.Byte> $$0) {
+        byte[] $$1 = new byte[$$0.size()];
+        for (int $$2 = 0; $$2 < $$0.size(); ++$$2) {
+            java.lang.Byte $$3 = (java.lang.Byte)$$0.get($$2);
+            $$1[$$2] = $$3 == null ? (byte)0 : $$3;
         }
-        return byArray;
+        return $$1;
     }
 
-    public void write(java.io.DataOutput output) throws java.io.IOException {
-        output.writeInt(this.data.length);
-        output.write(this.data);
+    public void write(java.io.DataOutput $$0) throws java.io.IOException {
+        $$0.writeInt(this.data.length);
+        $$0.write(this.data);
     }
 
     public byte getId() {
@@ -50,11 +50,11 @@
         return new net.minecraft.nbt.ByteArrayTag($$0);
     }
 
-    public boolean equals(java.lang.Object other) {
-        if (this == other) {
+    public boolean equals(java.lang.Object $$0) {
+        if (this == $$0) {
             return true;
         }
-        return other instanceof net.minecraft.nbt.ByteArrayTag && java.util.Arrays.equals((byte[])this.data, (byte[])((net.minecraft.nbt.ByteArrayTag)other).data);
+        return $$0 instanceof net.minecraft.nbt.ByteArrayTag && java.util.Arrays.equals((byte[])this.data, (byte[])((net.minecraft.nbt.ByteArrayTag)$$0).data);
     }
 
     public int hashCode() {
@@ -87,17 +87,17 @@
         this.data = org.apache.commons.lang3.ArrayUtils.add((byte[])this.data, (int)$$0, (byte)$$1.getAsByte());
     }
 
-    public boolean setTag(int index, net.minecraft.nbt.Tag nbt) {
-        if (nbt instanceof net.minecraft.nbt.NumericTag) {
-            this.data[index] = ((net.minecraft.nbt.NumericTag)nbt).getAsByte();
+    public boolean setTag(int $$0, net.minecraft.nbt.Tag $$1) {
+        if ($$1 instanceof net.minecraft.nbt.NumericTag) {
+            this.data[$$0] = ((net.minecraft.nbt.NumericTag)$$1).getAsByte();
             return true;
         }
         return false;
     }
 
-    public boolean addTag(int index, net.minecraft.nbt.Tag nbt) {
-        if (nbt instanceof net.minecraft.nbt.NumericTag) {
-            this.data = org.apache.commons.lang3.ArrayUtils.add((byte[])this.data, (int)index, (byte)((net.minecraft.nbt.NumericTag)nbt).getAsByte());
+    public boolean addTag(int $$0, net.minecraft.nbt.Tag $$1) {
+        if ($$1 instanceof net.minecraft.nbt.NumericTag) {
+            this.data = org.apache.commons.lang3.ArrayUtils.add((byte[])this.data, (int)$$0, (byte)((net.minecraft.nbt.NumericTag)$$1).getAsByte());
             return true;
         }
         return false;