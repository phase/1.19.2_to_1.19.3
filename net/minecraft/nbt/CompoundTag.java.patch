--- net/minecraft/nbt/CompoundTag.java
+++ net/minecraft/nbt/CompoundTag.java
@@ -12,20 +12,20 @@
     public static net.minecraft.nbt.TagType<net.minecraft.nbt.CompoundTag> TYPE;
     public java.util.Map<java.lang.String, net.minecraft.nbt.Tag> tags;
 
-    public net.minecraft.nbt.CompoundTag(java.util.Map<java.lang.String, net.minecraft.nbt.Tag> tags) {
-        this.tags = tags;
+    public net.minecraft.nbt.CompoundTag(java.util.Map<java.lang.String, net.minecraft.nbt.Tag> $$0) {
+        this.tags = $$0;
     }
 
     public net.minecraft.nbt.CompoundTag() {
         this((java.util.Map)com.google.common.collect.Maps.newHashMap());
     }
 
-    public void write(java.io.DataOutput output) throws java.io.IOException {
-        for (java.lang.String string : this.tags.keySet()) {
-            net.minecraft.nbt.Tag tag = (net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)string);
-            net.minecraft.nbt.CompoundTag.writeNamedTag((java.lang.String)string, (net.minecraft.nbt.Tag)tag, (java.io.DataOutput)output);
+    public void write(java.io.DataOutput $$0) throws java.io.IOException {
+        for (java.lang.String $$1 : this.tags.keySet()) {
+            net.minecraft.nbt.Tag $$2 = (net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)$$1);
+            net.minecraft.nbt.CompoundTag.writeNamedTag((java.lang.String)$$1, (net.minecraft.nbt.Tag)$$2, (java.io.DataOutput)$$0);
         }
-        output.writeByte(0);
+        $$0.writeByte(0);
     }
 
     public java.util.Set<java.lang.String> getAllKeys() {
@@ -45,111 +45,111 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.nbt.Tag put(java.lang.String key, net.minecraft.nbt.Tag value) {
-        return (net.minecraft.nbt.Tag)this.tags.put((java.lang.Object)key, (java.lang.Object)value);
+    public net.minecraft.nbt.Tag put(java.lang.String $$0, net.minecraft.nbt.Tag $$1) {
+        return (net.minecraft.nbt.Tag)this.tags.put((java.lang.Object)$$0, (java.lang.Object)$$1);
     }
 
-    public void putByte(java.lang.String key, byte value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.ByteTag.valueOf((byte)value));
+    public void putByte(java.lang.String $$0, byte $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.ByteTag.valueOf((byte)$$1));
     }
 
-    public void putShort(java.lang.String key, short value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.ShortTag.valueOf((short)value));
+    public void putShort(java.lang.String $$0, short $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.ShortTag.valueOf((short)$$1));
     }
 
-    public void putInt(java.lang.String key, int value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.IntTag.valueOf((int)value));
+    public void putInt(java.lang.String $$0, int $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.IntTag.valueOf((int)$$1));
     }
 
-    public void putLong(java.lang.String key, long value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.LongTag.valueOf((long)value));
+    public void putLong(java.lang.String $$0, long $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.LongTag.valueOf((long)$$1));
     }
 
-    public void putUUID(java.lang.String key, java.util.UUID value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.NbtUtils.createUUID((java.util.UUID)value));
+    public void putUUID(java.lang.String $$0, java.util.UUID $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.NbtUtils.createUUID((java.util.UUID)$$1));
     }
 
-    public java.util.UUID getUUID(java.lang.String key) {
-        return net.minecraft.nbt.NbtUtils.loadUUID((net.minecraft.nbt.Tag)this.get(key));
+    public java.util.UUID getUUID(java.lang.String $$0) {
+        return net.minecraft.nbt.NbtUtils.loadUUID((net.minecraft.nbt.Tag)this.get($$0));
     }
 
-    public boolean hasUUID(java.lang.String key) {
-        net.minecraft.nbt.Tag tag = this.get(key);
-        return tag != null && tag.getType() == net.minecraft.nbt.IntArrayTag.TYPE && ((net.minecraft.nbt.IntArrayTag)tag).getAsIntArray().length == 4;
+    public boolean hasUUID(java.lang.String $$0) {
+        net.minecraft.nbt.Tag $$1 = this.get($$0);
+        return $$1 != null && $$1.getType() == net.minecraft.nbt.IntArrayTag.TYPE && ((net.minecraft.nbt.IntArrayTag)$$1).getAsIntArray().length == 4;
     }
 
-    public void putFloat(java.lang.String key, float value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.FloatTag.valueOf((float)value));
+    public void putFloat(java.lang.String $$0, float $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.FloatTag.valueOf((float)$$1));
     }
 
-    public void putDouble(java.lang.String key, double value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.DoubleTag.valueOf((double)value));
+    public void putDouble(java.lang.String $$0, double $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.DoubleTag.valueOf((double)$$1));
     }
 
-    public void putString(java.lang.String key, java.lang.String value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.StringTag.valueOf((java.lang.String)value));
+    public void putString(java.lang.String $$0, java.lang.String $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.StringTag.valueOf((java.lang.String)$$1));
     }
 
-    public void putByteArray(java.lang.String key, byte[] value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)new net.minecraft.nbt.ByteArrayTag(value));
+    public void putByteArray(java.lang.String $$0, byte[] $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)new net.minecraft.nbt.ByteArrayTag($$1));
     }
 
     public void putByteArray(java.lang.String $$0, java.util.List<java.lang.Byte> $$1) {
         this.tags.put((java.lang.Object)$$0, (java.lang.Object)new net.minecraft.nbt.ByteArrayTag($$1));
     }
 
-    public void putIntArray(java.lang.String key, int[] value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)new net.minecraft.nbt.IntArrayTag(value));
+    public void putIntArray(java.lang.String $$0, int[] $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)new net.minecraft.nbt.IntArrayTag($$1));
     }
 
-    public void putIntArray(java.lang.String key, java.util.List<java.lang.Integer> value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)new net.minecraft.nbt.IntArrayTag(value));
+    public void putIntArray(java.lang.String $$0, java.util.List<java.lang.Integer> $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)new net.minecraft.nbt.IntArrayTag($$1));
     }
 
-    public void putLongArray(java.lang.String key, long[] value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)new net.minecraft.nbt.LongArrayTag(value));
+    public void putLongArray(java.lang.String $$0, long[] $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)new net.minecraft.nbt.LongArrayTag($$1));
     }
 
-    public void putLongArray(java.lang.String key, java.util.List<java.lang.Long> value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)new net.minecraft.nbt.LongArrayTag(value));
+    public void putLongArray(java.lang.String $$0, java.util.List<java.lang.Long> $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)new net.minecraft.nbt.LongArrayTag($$1));
     }
 
-    public void putBoolean(java.lang.String key, boolean value) {
-        this.tags.put((java.lang.Object)key, (java.lang.Object)net.minecraft.nbt.ByteTag.valueOf((boolean)value));
+    public void putBoolean(java.lang.String $$0, boolean $$1) {
+        this.tags.put((java.lang.Object)$$0, (java.lang.Object)net.minecraft.nbt.ByteTag.valueOf((boolean)$$1));
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.nbt.Tag get(java.lang.String key) {
-        return (net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)key);
+    public net.minecraft.nbt.Tag get(java.lang.String $$0) {
+        return (net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)$$0);
     }
 
-    public byte getTagType(java.lang.String key) {
-        net.minecraft.nbt.Tag tag = (net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)key);
-        if (tag == null) {
+    public byte getTagType(java.lang.String $$0) {
+        net.minecraft.nbt.Tag $$1 = (net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)$$0);
+        if ($$1 == null) {
             return 0;
         }
-        return tag.getId();
+        return $$1.getId();
     }
 
-    public boolean contains(java.lang.String key) {
-        return this.tags.containsKey((java.lang.Object)key);
+    public boolean contains(java.lang.String $$0) {
+        return this.tags.containsKey((java.lang.Object)$$0);
     }
 
-    public boolean contains(java.lang.String key, int tagType) {
-        byte by = this.getTagType(key);
-        if (by == tagType) {
+    public boolean contains(java.lang.String $$0, int $$1) {
+        byte $$2 = this.getTagType($$0);
+        if ($$2 == $$1) {
             return true;
         }
-        if (tagType == 99) {
-            return by == 1 || by == 2 || by == 3 || by == 4 || by == 5 || by == 6;
+        if ($$1 == 99) {
+            return $$2 == 1 || $$2 == 2 || $$2 == 3 || $$2 == 4 || $$2 == 5 || $$2 == 6;
         }
         return false;
     }
 
-    public byte getByte(java.lang.String key) {
+    public byte getByte(java.lang.String $$0) {
         try {
-            if (this.contains(key, 99)) {
-                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)key)).getAsByte();
+            if (this.contains($$0, 99)) {
+                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)$$0)).getAsByte();
             }
         }
         catch (java.lang.ClassCastException classCastException) {
@@ -158,10 +158,10 @@
         return 0;
     }
 
-    public short getShort(java.lang.String key) {
+    public short getShort(java.lang.String $$0) {
         try {
-            if (this.contains(key, 99)) {
-                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)key)).getAsShort();
+            if (this.contains($$0, 99)) {
+                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)$$0)).getAsShort();
             }
         }
         catch (java.lang.ClassCastException classCastException) {
@@ -170,10 +170,10 @@
         return 0;
     }
 
-    public int getInt(java.lang.String key) {
+    public int getInt(java.lang.String $$0) {
         try {
-            if (this.contains(key, 99)) {
-                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)key)).getAsInt();
+            if (this.contains($$0, 99)) {
+                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)$$0)).getAsInt();
             }
         }
         catch (java.lang.ClassCastException classCastException) {
@@ -182,10 +182,10 @@
         return 0;
     }
 
-    public long getLong(java.lang.String key) {
+    public long getLong(java.lang.String $$0) {
         try {
-            if (this.contains(key, 99)) {
-                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)key)).getAsLong();
+            if (this.contains($$0, 99)) {
+                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)$$0)).getAsLong();
             }
         }
         catch (java.lang.ClassCastException classCastException) {
@@ -194,10 +194,10 @@
         return 0L;
     }
 
-    public float getFloat(java.lang.String key) {
+    public float getFloat(java.lang.String $$0) {
         try {
-            if (this.contains(key, 99)) {
-                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)key)).getAsFloat();
+            if (this.contains($$0, 99)) {
+                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)$$0)).getAsFloat();
             }
         }
         catch (java.lang.ClassCastException classCastException) {
@@ -206,10 +206,10 @@
         return 0.0f;
     }
 
-    public double getDouble(java.lang.String key) {
+    public double getDouble(java.lang.String $$0) {
         try {
-            if (this.contains(key, 99)) {
-                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)key)).getAsDouble();
+            if (this.contains($$0, 99)) {
+                return ((net.minecraft.nbt.NumericTag)this.tags.get((java.lang.Object)$$0)).getAsDouble();
             }
         }
         catch (java.lang.ClassCastException classCastException) {
@@ -218,10 +218,10 @@
         return 0.0;
     }
 
-    public java.lang.String getString(java.lang.String key) {
+    public java.lang.String getString(java.lang.String $$0) {
         try {
-            if (this.contains(key, 8)) {
-                return ((net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)key)).getAsString();
+            if (this.contains($$0, 8)) {
+                return ((net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)$$0)).getAsString();
             }
         }
         catch (java.lang.ClassCastException classCastException) {
@@ -230,76 +230,76 @@
         return "";
     }
 
-    public byte[] getByteArray(java.lang.String key) {
+    public byte[] getByteArray(java.lang.String $$0) {
         try {
-            if (this.contains(key, 7)) {
-                return ((net.minecraft.nbt.ByteArrayTag)this.tags.get((java.lang.Object)key)).getAsByteArray();
+            if (this.contains($$0, 7)) {
+                return ((net.minecraft.nbt.ByteArrayTag)this.tags.get((java.lang.Object)$$0)).getAsByteArray();
             }
         }
-        catch (java.lang.ClassCastException classCastException) {
-            throw new net.minecraft.ReportedException(this.createReport(key, net.minecraft.nbt.ByteArrayTag.TYPE, classCastException));
+        catch (java.lang.ClassCastException $$1) {
+            throw new net.minecraft.ReportedException(this.createReport($$0, net.minecraft.nbt.ByteArrayTag.TYPE, $$1));
         }
         return new byte[0];
     }
 
-    public int[] getIntArray(java.lang.String key) {
+    public int[] getIntArray(java.lang.String $$0) {
         try {
-            if (this.contains(key, 11)) {
-                return ((net.minecraft.nbt.IntArrayTag)this.tags.get((java.lang.Object)key)).getAsIntArray();
+            if (this.contains($$0, 11)) {
+                return ((net.minecraft.nbt.IntArrayTag)this.tags.get((java.lang.Object)$$0)).getAsIntArray();
             }
         }
-        catch (java.lang.ClassCastException classCastException) {
-            throw new net.minecraft.ReportedException(this.createReport(key, net.minecraft.nbt.IntArrayTag.TYPE, classCastException));
+        catch (java.lang.ClassCastException $$1) {
+            throw new net.minecraft.ReportedException(this.createReport($$0, net.minecraft.nbt.IntArrayTag.TYPE, $$1));
         }
         return new int[0];
     }
 
-    public long[] getLongArray(java.lang.String key) {
+    public long[] getLongArray(java.lang.String $$0) {
         try {
-            if (this.contains(key, 12)) {
-                return ((net.minecraft.nbt.LongArrayTag)this.tags.get((java.lang.Object)key)).getAsLongArray();
+            if (this.contains($$0, 12)) {
+                return ((net.minecraft.nbt.LongArrayTag)this.tags.get((java.lang.Object)$$0)).getAsLongArray();
             }
         }
-        catch (java.lang.ClassCastException classCastException) {
-            throw new net.minecraft.ReportedException(this.createReport(key, net.minecraft.nbt.LongArrayTag.TYPE, classCastException));
+        catch (java.lang.ClassCastException $$1) {
+            throw new net.minecraft.ReportedException(this.createReport($$0, net.minecraft.nbt.LongArrayTag.TYPE, $$1));
         }
         return new long[0];
     }
 
-    public net.minecraft.nbt.CompoundTag getCompound(java.lang.String key) {
+    public net.minecraft.nbt.CompoundTag getCompound(java.lang.String $$0) {
         try {
-            if (this.contains(key, 10)) {
-                return (net.minecraft.nbt.CompoundTag)this.tags.get((java.lang.Object)key);
+            if (this.contains($$0, 10)) {
+                return (net.minecraft.nbt.CompoundTag)this.tags.get((java.lang.Object)$$0);
             }
         }
-        catch (java.lang.ClassCastException classCastException) {
-            throw new net.minecraft.ReportedException(this.createReport(key, TYPE, classCastException));
+        catch (java.lang.ClassCastException $$1) {
+            throw new net.minecraft.ReportedException(this.createReport($$0, TYPE, $$1));
         }
         return new net.minecraft.nbt.CompoundTag();
     }
 
-    public net.minecraft.nbt.ListTag getList(java.lang.String key, int tagType) {
+    public net.minecraft.nbt.ListTag getList(java.lang.String $$0, int $$1) {
         try {
-            if (this.getTagType(key) == 9) {
-                net.minecraft.nbt.ListTag listTag = (net.minecraft.nbt.ListTag)this.tags.get((java.lang.Object)key);
-                if (listTag.isEmpty() || listTag.getElementType() == tagType) {
-                    return listTag;
+            if (this.getTagType($$0) == 9) {
+                net.minecraft.nbt.ListTag $$2 = (net.minecraft.nbt.ListTag)this.tags.get((java.lang.Object)$$0);
+                if ($$2.isEmpty() || $$2.getElementType() == $$1) {
+                    return $$2;
                 }
                 return new net.minecraft.nbt.ListTag();
             }
         }
-        catch (java.lang.ClassCastException classCastException) {
-            throw new net.minecraft.ReportedException(this.createReport(key, net.minecraft.nbt.ListTag.TYPE, classCastException));
+        catch (java.lang.ClassCastException $$3) {
+            throw new net.minecraft.ReportedException(this.createReport($$0, net.minecraft.nbt.ListTag.TYPE, $$3));
         }
         return new net.minecraft.nbt.ListTag();
     }
 
-    public boolean getBoolean(java.lang.String key) {
-        return this.getByte(key) != 0;
+    public boolean getBoolean(java.lang.String $$0) {
+        return this.getByte($$0) != 0;
     }
 
-    public void remove(java.lang.String key) {
-        this.tags.remove((java.lang.Object)key);
+    public void remove(java.lang.String $$0) {
+        this.tags.remove((java.lang.Object)$$0);
     }
 
     public java.lang.String toString() {
@@ -310,13 +310,13 @@
         return this.tags.isEmpty();
     }
 
-    public net.minecraft.CrashReport createReport(java.lang.String tagName, net.minecraft.nbt.TagType<?> type, java.lang.ClassCastException exception) {
-        net.minecraft.CrashReport crashReport = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)exception, (java.lang.String)"Reading NBT data");
-        net.minecraft.CrashReportCategory crashReportCategory = crashReport.addCategory("Corrupt NBT tag", 1);
-        crashReportCategory.setDetail("Tag type found", () -> ((net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)tagName)).getType().getName());
-        crashReportCategory.setDetail("Tag type expected", () -> type.getName());
-        crashReportCategory.setDetail("Tag name", (java.lang.Object)tagName);
-        return crashReport;
+    public net.minecraft.CrashReport createReport(java.lang.String $$0, net.minecraft.nbt.TagType<?> $$1, java.lang.ClassCastException $$2) {
+        net.minecraft.CrashReport $$3 = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)$$2, (java.lang.String)"Reading NBT data");
+        net.minecraft.CrashReportCategory $$4 = $$3.addCategory("Corrupt NBT tag", 1);
+        $$4.setDetail("Tag type found", () -> ((net.minecraft.nbt.Tag)this.tags.get((java.lang.Object)$$0)).getType().getName());
+        $$4.setDetail("Tag type expected", () -> $$1.getName());
+        $$4.setDetail("Tag name", (java.lang.Object)$$0);
+        return $$3;
     }
 
     public net.minecraft.nbt.CompoundTag copy() {
@@ -324,60 +324,60 @@
         return new net.minecraft.nbt.CompoundTag((java.util.Map)$$0);
     }
 
-    public boolean equals(java.lang.Object other) {
-        if (this == other) {
+    public boolean equals(java.lang.Object $$0) {
+        if (this == $$0) {
             return true;
         }
-        return other instanceof net.minecraft.nbt.CompoundTag && java.util.Objects.equals((java.lang.Object)this.tags, (java.lang.Object)((net.minecraft.nbt.CompoundTag)other).tags);
+        return $$0 instanceof net.minecraft.nbt.CompoundTag && java.util.Objects.equals((java.lang.Object)this.tags, (java.lang.Object)((net.minecraft.nbt.CompoundTag)$$0).tags);
     }
 
     public int hashCode() {
         return this.tags.hashCode();
     }
 
-    public static void writeNamedTag(java.lang.String name, net.minecraft.nbt.Tag tag, java.io.DataOutput output) throws java.io.IOException {
-        output.writeByte((int)tag.getId());
-        if (tag.getId() == 0) {
+    public static void writeNamedTag(java.lang.String $$0, net.minecraft.nbt.Tag $$1, java.io.DataOutput $$2) throws java.io.IOException {
+        $$2.writeByte((int)$$1.getId());
+        if ($$1.getId() == 0) {
             return;
         }
-        output.writeUTF(name);
-        tag.write(output);
+        $$2.writeUTF($$0);
+        $$1.write($$2);
     }
 
-    public static byte readNamedTagType(java.io.DataInput input, net.minecraft.nbt.NbtAccounter accounter) throws java.io.IOException {
-        return input.readByte();
+    public static byte readNamedTagType(java.io.DataInput $$0, net.minecraft.nbt.NbtAccounter $$1) throws java.io.IOException {
+        return $$0.readByte();
     }
 
-    public static java.lang.String readNamedTagName(java.io.DataInput input, net.minecraft.nbt.NbtAccounter accounter) throws java.io.IOException {
-        return input.readUTF();
+    public static java.lang.String readNamedTagName(java.io.DataInput $$0, net.minecraft.nbt.NbtAccounter $$1) throws java.io.IOException {
+        return $$0.readUTF();
     }
 
-    public static net.minecraft.nbt.Tag readNamedTagData(net.minecraft.nbt.TagType<?> type, java.lang.String name, java.io.DataInput input, int depth, net.minecraft.nbt.NbtAccounter accounter) {
+    public static net.minecraft.nbt.Tag readNamedTagData(net.minecraft.nbt.TagType<?> $$0, java.lang.String $$1, java.io.DataInput $$2, int $$3, net.minecraft.nbt.NbtAccounter $$4) {
         try {
-            return type.load(input, depth, accounter);
+            return $$0.load($$2, $$3, $$4);
         }
-        catch (java.io.IOException iOException) {
-            net.minecraft.CrashReport crashReport = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)iOException, (java.lang.String)"Loading NBT data");
-            net.minecraft.CrashReportCategory crashReportCategory = crashReport.addCategory("NBT Tag");
-            crashReportCategory.setDetail("Tag name", (java.lang.Object)name);
-            crashReportCategory.setDetail("Tag type", (java.lang.Object)type.getName());
-            throw new net.minecraft.ReportedException(crashReport);
+        catch (java.io.IOException $$5) {
+            net.minecraft.CrashReport $$6 = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)$$5, (java.lang.String)"Loading NBT data");
+            net.minecraft.CrashReportCategory $$7 = $$6.addCategory("NBT Tag");
+            $$7.setDetail("Tag name", (java.lang.Object)$$1);
+            $$7.setDetail("Tag type", (java.lang.Object)$$0.getName());
+            throw new net.minecraft.ReportedException($$6);
         }
     }
 
-    public net.minecraft.nbt.CompoundTag merge(net.minecraft.nbt.CompoundTag other) {
-        for (java.lang.String string : other.tags.keySet()) {
-            net.minecraft.nbt.Tag tag = (net.minecraft.nbt.Tag)other.tags.get((java.lang.Object)string);
-            if (tag.getId() == 10) {
-                if (this.contains(string, 10)) {
-                    net.minecraft.nbt.CompoundTag compoundTag = this.getCompound(string);
-                    compoundTag.merge((net.minecraft.nbt.CompoundTag)tag);
+    public net.minecraft.nbt.CompoundTag merge(net.minecraft.nbt.CompoundTag $$0) {
+        for (java.lang.String $$1 : $$0.tags.keySet()) {
+            net.minecraft.nbt.Tag $$2 = (net.minecraft.nbt.Tag)$$0.tags.get((java.lang.Object)$$1);
+            if ($$2.getId() == 10) {
+                if (this.contains($$1, 10)) {
+                    net.minecraft.nbt.CompoundTag $$3 = this.getCompound($$1);
+                    $$3.merge((net.minecraft.nbt.CompoundTag)$$2);
                     continue;
                 }
-                this.put(string, tag.copy());
+                this.put($$1, $$2.copy());
                 continue;
             }
-            this.put(string, tag.copy());
+            this.put($$1, $$2.copy());
         }
         return this;
     }
@@ -435,26 +435,26 @@
         return this.copy();
     }
 
-    public static /* synthetic */ com.mojang.serialization.Dynamic lambda$static$1(net.minecraft.nbt.CompoundTag compoundTag) {
-        return new com.mojang.serialization.Dynamic((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE, (java.lang.Object)compoundTag);
+    public static /* synthetic */ com.mojang.serialization.Dynamic lambda$static$1(net.minecraft.nbt.CompoundTag $$0) {
+        return new com.mojang.serialization.Dynamic((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE, (java.lang.Object)$$0);
     }
 
-    public static /* synthetic */ com.mojang.serialization.DataResult lambda$static$0(com.mojang.serialization.Dynamic dynamic) {
-        net.minecraft.nbt.Tag tag = (net.minecraft.nbt.Tag)dynamic.convert((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE).getValue();
-        if (tag instanceof net.minecraft.nbt.CompoundTag) {
-            return com.mojang.serialization.DataResult.success((java.lang.Object)((net.minecraft.nbt.CompoundTag)tag));
+    public static /* synthetic */ com.mojang.serialization.DataResult lambda$static$0(com.mojang.serialization.Dynamic $$0) {
+        net.minecraft.nbt.Tag $$1 = (net.minecraft.nbt.Tag)$$0.convert((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE).getValue();
+        if ($$1 instanceof net.minecraft.nbt.CompoundTag) {
+            return com.mojang.serialization.DataResult.success((java.lang.Object)((net.minecraft.nbt.CompoundTag)$$1));
         }
-        return com.mojang.serialization.DataResult.error((java.lang.String)("Not a compound tag: " + tag));
+        return com.mojang.serialization.DataResult.error((java.lang.String)("Not a compound tag: " + $$1));
     }
 
     static {
-        CODEC = com.mojang.serialization.Codec.PASSTHROUGH.comapFlatMap(dynamic -> {
-            net.minecraft.nbt.Tag tag = (net.minecraft.nbt.Tag)dynamic.convert((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE).getValue();
-            if (tag instanceof net.minecraft.nbt.CompoundTag) {
-                return com.mojang.serialization.DataResult.success((java.lang.Object)((net.minecraft.nbt.CompoundTag)tag));
+        CODEC = com.mojang.serialization.Codec.PASSTHROUGH.comapFlatMap($$0 -> {
+            net.minecraft.nbt.Tag $$1 = (net.minecraft.nbt.Tag)$$0.convert((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE).getValue();
+            if ($$1 instanceof net.minecraft.nbt.CompoundTag) {
+                return com.mojang.serialization.DataResult.success((java.lang.Object)((net.minecraft.nbt.CompoundTag)$$1));
             }
-            return com.mojang.serialization.DataResult.error((java.lang.String)("Not a compound tag: " + tag));
-        }, compoundTag -> new com.mojang.serialization.Dynamic((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE, compoundTag));
+            return com.mojang.serialization.DataResult.error((java.lang.String)("Not a compound tag: " + $$1));
+        }, $$0 -> new com.mojang.serialization.Dynamic((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE, $$0));
         TYPE = new /* Unavailable Anonymous Inner Class!! */;
     }
 }