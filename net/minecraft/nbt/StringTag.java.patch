--- net/minecraft/nbt/StringTag.java
+++ net/minecraft/nbt/StringTag.java
@@ -19,25 +19,25 @@
         $$0.skipBytes($$0.readUnsignedShort());
     }
 
-    public net.minecraft.nbt.StringTag(java.lang.String data) {
-        java.util.Objects.requireNonNull((java.lang.Object)data, (java.lang.String)"Null string not allowed");
-        this.data = data;
+    public net.minecraft.nbt.StringTag(java.lang.String $$0) {
+        java.util.Objects.requireNonNull((java.lang.Object)$$0, (java.lang.String)"Null string not allowed");
+        this.data = $$0;
     }
 
-    public static net.minecraft.nbt.StringTag valueOf(java.lang.String data) {
-        if (data.isEmpty()) {
+    public static net.minecraft.nbt.StringTag valueOf(java.lang.String $$0) {
+        if ($$0.isEmpty()) {
             return EMPTY;
         }
-        return new net.minecraft.nbt.StringTag(data);
+        return new net.minecraft.nbt.StringTag($$0);
     }
 
-    public void write(java.io.DataOutput output) throws java.io.IOException {
+    public void write(java.io.DataOutput $$0) throws java.io.IOException {
         try {
-            output.writeUTF(this.data);
+            $$0.writeUTF(this.data);
         }
-        catch (java.io.UTFDataFormatException uTFDataFormatException) {
-            net.minecraft.Util.logAndPauseIfInIde((java.lang.String)"Failed to write NBT String", (java.lang.Throwable)uTFDataFormatException);
-            output.writeUTF("");
+        catch (java.io.UTFDataFormatException $$1) {
+            net.minecraft.Util.logAndPauseIfInIde((java.lang.String)"Failed to write NBT String", (java.lang.Throwable)$$1);
+            $$0.writeUTF("");
         }
     }
 
@@ -57,11 +57,11 @@
         return this;
     }
 
-    public boolean equals(java.lang.Object other) {
-        if (this == other) {
+    public boolean equals(java.lang.Object $$0) {
+        if (this == $$0) {
             return true;
         }
-        return other instanceof net.minecraft.nbt.StringTag && java.util.Objects.equals((java.lang.Object)this.data, (java.lang.Object)((net.minecraft.nbt.StringTag)other).data);
+        return $$0 instanceof net.minecraft.nbt.StringTag && java.util.Objects.equals((java.lang.Object)this.data, (java.lang.Object)((net.minecraft.nbt.StringTag)$$0).data);
     }
 
     public int hashCode() {
@@ -76,29 +76,29 @@
         $$0.visitString(this);
     }
 
-    public static java.lang.String quoteAndEscape(java.lang.String text) {
-        java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(" ");
-        int n = 0;
-        for (int i = 0; i < text.length(); ++i) {
-            int n2 = text.charAt(i);
-            if (n2 == 92) {
-                stringBuilder.append('\\');
-            } else if (n2 == 34 || n2 == 39) {
-                if (n == 0) {
-                    int n3 = n = n2 == 34 ? 39 : 34;
+    public static java.lang.String quoteAndEscape(java.lang.String $$0) {
+        java.lang.StringBuilder $$1 = new java.lang.StringBuilder(" ");
+        int $$2 = 0;
+        for (int $$3 = 0; $$3 < $$0.length(); ++$$3) {
+            int $$4 = $$0.charAt($$3);
+            if ($$4 == 92) {
+                $$1.append('\\');
+            } else if ($$4 == 34 || $$4 == 39) {
+                if ($$2 == 0) {
+                    int n = $$2 = $$4 == 34 ? 39 : 34;
                 }
-                if (n == n2) {
-                    stringBuilder.append('\\');
+                if ($$2 == $$4) {
+                    $$1.append('\\');
                 }
             }
-            stringBuilder.append((char)n2);
+            $$1.append((char)$$4);
         }
-        if (n == 0) {
-            n = 34;
+        if ($$2 == 0) {
+            $$2 = 34;
         }
-        stringBuilder.setCharAt(0, (char)n);
-        stringBuilder.append((char)n);
-        return stringBuilder.toString();
+        $$1.setCharAt(0, (char)$$2);
+        $$1.append((char)$$2);
+        return $$1.toString();
     }
 
     public net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor $$0) {