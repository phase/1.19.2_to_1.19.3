--- net/minecraft/client/renderer/entity/ItemRenderer.java
+++ net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -13,6 +13,10 @@
     public static int ITEM_COUNT_BLIT_OFFSET = 200;
     public static float COMPASS_FOIL_UI_SCALE = 0.5f;
     public static float COMPASS_FOIL_FIRST_PERSON_SCALE = 0.75f;
+    public static net.minecraft.client.resources.model.ModelResourceLocation TRIDENT_MODEL;
+    public static net.minecraft.client.resources.model.ModelResourceLocation TRIDENT_IN_HAND_MODEL;
+    public static net.minecraft.client.resources.model.ModelResourceLocation SPYGLASS_MODEL;
+    public static net.minecraft.client.resources.model.ModelResourceLocation SPYGLASS_IN_HAND_MODEL;
     public float blitOffset;
     public net.minecraft.client.renderer.ItemModelShaper itemModelShaper;
     public net.minecraft.client.renderer.texture.TextureManager textureManager;
@@ -34,111 +38,122 @@
         return this.itemModelShaper;
     }
 
-    public void renderModelLists(net.minecraft.client.resources.model.BakedModel model, net.minecraft.world.item.ItemStack stack, int combinedLight, int combinedOverlay, com.mojang.blaze3d.vertex.PoseStack matrixStack, com.mojang.blaze3d.vertex.VertexConsumer buffer) {
-        net.minecraft.util.RandomSource randomSource = net.minecraft.util.RandomSource.create();
-        long l = 42L;
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction.values()) {
-            randomSource.setSeed(42L);
-            this.renderQuadList(matrixStack, buffer, model.getQuads(null, direction, randomSource), stack, combinedLight, combinedOverlay);
+    public void renderModelLists(net.minecraft.client.resources.model.BakedModel $$0, net.minecraft.world.item.ItemStack $$1, int $$2, int $$3, com.mojang.blaze3d.vertex.PoseStack $$4, com.mojang.blaze3d.vertex.VertexConsumer $$5) {
+        net.minecraft.util.RandomSource $$6 = net.minecraft.util.RandomSource.create();
+        long $$7 = 42L;
+        for (net.minecraft.core.Direction $$8 : net.minecraft.core.Direction.values()) {
+            $$6.setSeed(42L);
+            this.renderQuadList($$4, $$5, $$0.getQuads(null, $$8, $$6), $$1, $$2, $$3);
         }
-        randomSource.setSeed(42L);
-        this.renderQuadList(matrixStack, buffer, model.getQuads(null, null, randomSource), stack, combinedLight, combinedOverlay);
+        $$6.setSeed(42L);
+        this.renderQuadList($$4, $$5, $$0.getQuads(null, null, $$6), $$1, $$2, $$3);
     }
 
-    public void render(net.minecraft.world.item.ItemStack itemStack, net.minecraft.client.renderer.block.model.ItemTransforms$TransformType transformType, boolean leftHand, com.mojang.blaze3d.vertex.PoseStack matrixStack, net.minecraft.client.renderer.MultiBufferSource buffer, int combinedLight, int combinedOverlay, net.minecraft.client.resources.model.BakedModel model) {
-        boolean bl;
-        if (itemStack.isEmpty()) {
+    public void render(net.minecraft.world.item.ItemStack $$0, net.minecraft.client.renderer.block.model.ItemTransforms$TransformType $$1, boolean $$2, com.mojang.blaze3d.vertex.PoseStack $$3, net.minecraft.client.renderer.MultiBufferSource $$4, int $$5, int $$6, net.minecraft.client.resources.model.BakedModel $$7) {
+        boolean $$8;
+        if ($$0.isEmpty()) {
             return;
         }
-        matrixStack.pushPose();
-        boolean bl2 = bl = transformType == net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GUI || transformType == net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GROUND || transformType == net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.FIXED;
-        if (bl) {
-            if (itemStack.is(net.minecraft.world.item.Items.TRIDENT)) {
-                model = this.itemModelShaper.getModelManager().getModel(new net.minecraft.client.resources.model.ModelResourceLocation("minecraft:trident#inventory"));
-            } else if (itemStack.is(net.minecraft.world.item.Items.SPYGLASS)) {
-                model = this.itemModelShaper.getModelManager().getModel(new net.minecraft.client.resources.model.ModelResourceLocation("minecraft:spyglass#inventory"));
+        $$3.pushPose();
+        boolean bl = $$8 = $$1 == net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GUI || $$1 == net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GROUND || $$1 == net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.FIXED;
+        if ($$8) {
+            if ($$0.is(net.minecraft.world.item.Items.TRIDENT)) {
+                $$7 = this.itemModelShaper.getModelManager().getModel(TRIDENT_MODEL);
+            } else if ($$0.is(net.minecraft.world.item.Items.SPYGLASS)) {
+                $$7 = this.itemModelShaper.getModelManager().getModel(SPYGLASS_MODEL);
             }
         }
-        model.getTransforms().getTransform(transformType).apply(leftHand, matrixStack);
-        matrixStack.translate(-0.5, -0.5, -0.5);
-        if (model.isCustomRenderer() || itemStack.is(net.minecraft.world.item.Items.TRIDENT) && !bl) {
-            this.blockEntityRenderer.renderByItem(itemStack, transformType, matrixStack, buffer, combinedLight, combinedOverlay);
+        $$7.getTransforms().getTransform($$1).apply($$2, $$3);
+        $$3.translate(-0.5, -0.5, -0.5);
+        if ($$7.isCustomRenderer() || $$0.is(net.minecraft.world.item.Items.TRIDENT) && !$$8) {
+            this.blockEntityRenderer.renderByItem($$0, $$1, $$3, $$4, $$5, $$6);
         } else {
-            com.mojang.blaze3d.vertex.VertexConsumer vertexConsumer;
-            net.minecraft.client.renderer.RenderType renderType;
-            boolean bl3 = transformType != net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GUI && !transformType.firstPerson() && itemStack.getItem() instanceof net.minecraft.world.item.BlockItem ? !((renderType = ((net.minecraft.world.item.BlockItem)itemStack.getItem()).getBlock()) instanceof net.minecraft.world.level.block.HalfTransparentBlock) && !(renderType instanceof net.minecraft.world.level.block.StainedGlassPaneBlock) : true;
-            renderType = net.minecraft.client.renderer.ItemBlockRenderTypes.getRenderType((net.minecraft.world.item.ItemStack)itemStack, (boolean)bl3);
-            if (itemStack.is(net.minecraft.tags.ItemTags.COMPASSES) && itemStack.hasFoil()) {
-                matrixStack.pushPose();
-                com.mojang.blaze3d.vertex.PoseStack$Pose pose = matrixStack.last();
-                if (transformType == net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GUI) {
-                    pose.pose().multiply(0.5f);
-                } else if (transformType.firstPerson()) {
-                    pose.pose().multiply(0.75f);
+            com.mojang.blaze3d.vertex.VertexConsumer $$17;
+            boolean $$11;
+            if ($$1 != net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GUI && !$$1.firstPerson() && $$0.getItem() instanceof net.minecraft.world.item.BlockItem) {
+                net.minecraft.world.level.block.Block $$9 = ((net.minecraft.world.item.BlockItem)$$0.getItem()).getBlock();
+                boolean $$10 = !($$9 instanceof net.minecraft.world.level.block.HalfTransparentBlock) && !($$9 instanceof net.minecraft.world.level.block.StainedGlassPaneBlock);
+            } else {
+                $$11 = true;
+            }
+            net.minecraft.client.renderer.RenderType $$12 = net.minecraft.client.renderer.ItemBlockRenderTypes.getRenderType((net.minecraft.world.item.ItemStack)$$0, (boolean)$$11);
+            if ($$0.is(net.minecraft.tags.ItemTags.COMPASSES) && $$0.hasFoil()) {
+                $$3.pushPose();
+                com.mojang.blaze3d.vertex.PoseStack$Pose $$13 = $$3.last();
+                if ($$1 == net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GUI) {
+                    $$13.pose().multiply(0.5f);
+                } else if ($$1.firstPerson()) {
+                    $$13.pose().multiply(0.75f);
                 }
-                vertexConsumer = bl3 ? net.minecraft.client.renderer.entity.ItemRenderer.getCompassFoilBufferDirect((net.minecraft.client.renderer.MultiBufferSource)buffer, (net.minecraft.client.renderer.RenderType)renderType, (com.mojang.blaze3d.vertex.PoseStack$Pose)pose) : net.minecraft.client.renderer.entity.ItemRenderer.getCompassFoilBuffer((net.minecraft.client.renderer.MultiBufferSource)buffer, (net.minecraft.client.renderer.RenderType)renderType, (com.mojang.blaze3d.vertex.PoseStack$Pose)pose);
-                matrixStack.popPose();
+                if ($$11) {
+                    com.mojang.blaze3d.vertex.VertexConsumer $$14 = net.minecraft.client.renderer.entity.ItemRenderer.getCompassFoilBufferDirect((net.minecraft.client.renderer.MultiBufferSource)$$4, (net.minecraft.client.renderer.RenderType)$$12, (com.mojang.blaze3d.vertex.PoseStack$Pose)$$13);
+                } else {
+                    com.mojang.blaze3d.vertex.VertexConsumer $$15 = net.minecraft.client.renderer.entity.ItemRenderer.getCompassFoilBuffer((net.minecraft.client.renderer.MultiBufferSource)$$4, (net.minecraft.client.renderer.RenderType)$$12, (com.mojang.blaze3d.vertex.PoseStack$Pose)$$13);
+                }
+                $$3.popPose();
+            } else if ($$11) {
+                com.mojang.blaze3d.vertex.VertexConsumer $$16 = net.minecraft.client.renderer.entity.ItemRenderer.getFoilBufferDirect((net.minecraft.client.renderer.MultiBufferSource)$$4, (net.minecraft.client.renderer.RenderType)$$12, (boolean)true, (boolean)$$0.hasFoil());
             } else {
-                vertexConsumer = bl3 ? net.minecraft.client.renderer.entity.ItemRenderer.getFoilBufferDirect((net.minecraft.client.renderer.MultiBufferSource)buffer, (net.minecraft.client.renderer.RenderType)renderType, (boolean)true, (boolean)itemStack.hasFoil()) : net.minecraft.client.renderer.entity.ItemRenderer.getFoilBuffer((net.minecraft.client.renderer.MultiBufferSource)buffer, (net.minecraft.client.renderer.RenderType)renderType, (boolean)true, (boolean)itemStack.hasFoil());
+                $$17 = net.minecraft.client.renderer.entity.ItemRenderer.getFoilBuffer((net.minecraft.client.renderer.MultiBufferSource)$$4, (net.minecraft.client.renderer.RenderType)$$12, (boolean)true, (boolean)$$0.hasFoil());
             }
-            this.renderModelLists(model, itemStack, combinedLight, combinedOverlay, matrixStack, vertexConsumer);
+            this.renderModelLists($$7, $$0, $$5, $$6, $$3, $$17);
         }
-        matrixStack.popPose();
+        $$3.popPose();
     }
 
-    public static com.mojang.blaze3d.vertex.VertexConsumer getArmorFoilBuffer(net.minecraft.client.renderer.MultiBufferSource buffer, net.minecraft.client.renderer.RenderType renderType, boolean noEntity, boolean withGlint) {
-        if (withGlint) {
-            return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(noEntity ? net.minecraft.client.renderer.RenderType.armorGlint() : net.minecraft.client.renderer.RenderType.armorEntityGlint()), (com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(renderType));
+    public static com.mojang.blaze3d.vertex.VertexConsumer getArmorFoilBuffer(net.minecraft.client.renderer.MultiBufferSource $$0, net.minecraft.client.renderer.RenderType $$1, boolean $$2, boolean $$3) {
+        if ($$3) {
+            return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$2 ? net.minecraft.client.renderer.RenderType.armorGlint() : net.minecraft.client.renderer.RenderType.armorEntityGlint()), (com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$1));
         }
-        return buffer.getBuffer(renderType);
+        return $$0.getBuffer($$1);
     }
 
-    public static com.mojang.blaze3d.vertex.VertexConsumer getCompassFoilBuffer(net.minecraft.client.renderer.MultiBufferSource buffer, net.minecraft.client.renderer.RenderType renderType, com.mojang.blaze3d.vertex.PoseStack$Pose matrixEntry) {
-        return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)new com.mojang.blaze3d.vertex.SheetedDecalTextureGenerator(buffer.getBuffer(net.minecraft.client.renderer.RenderType.glint()), matrixEntry.pose(), matrixEntry.normal()), (com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(renderType));
+    public static com.mojang.blaze3d.vertex.VertexConsumer getCompassFoilBuffer(net.minecraft.client.renderer.MultiBufferSource $$0, net.minecraft.client.renderer.RenderType $$1, com.mojang.blaze3d.vertex.PoseStack$Pose $$2) {
+        return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)new com.mojang.blaze3d.vertex.SheetedDecalTextureGenerator($$0.getBuffer(net.minecraft.client.renderer.RenderType.glint()), $$2.pose(), $$2.normal()), (com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$1));
     }
 
-    public static com.mojang.blaze3d.vertex.VertexConsumer getCompassFoilBufferDirect(net.minecraft.client.renderer.MultiBufferSource buffer, net.minecraft.client.renderer.RenderType renderType, com.mojang.blaze3d.vertex.PoseStack$Pose matrixEntry) {
-        return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)new com.mojang.blaze3d.vertex.SheetedDecalTextureGenerator(buffer.getBuffer(net.minecraft.client.renderer.RenderType.glintDirect()), matrixEntry.pose(), matrixEntry.normal()), (com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(renderType));
+    public static com.mojang.blaze3d.vertex.VertexConsumer getCompassFoilBufferDirect(net.minecraft.client.renderer.MultiBufferSource $$0, net.minecraft.client.renderer.RenderType $$1, com.mojang.blaze3d.vertex.PoseStack$Pose $$2) {
+        return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)new com.mojang.blaze3d.vertex.SheetedDecalTextureGenerator($$0.getBuffer(net.minecraft.client.renderer.RenderType.glintDirect()), $$2.pose(), $$2.normal()), (com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$1));
     }
 
-    public static com.mojang.blaze3d.vertex.VertexConsumer getFoilBuffer(net.minecraft.client.renderer.MultiBufferSource buffer, net.minecraft.client.renderer.RenderType renderType, boolean isItem, boolean glint) {
-        if (glint) {
-            if (net.minecraft.client.Minecraft.useShaderTransparency() && renderType == net.minecraft.client.renderer.Sheets.translucentItemSheet()) {
-                return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(net.minecraft.client.renderer.RenderType.glintTranslucent()), (com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(renderType));
+    public static com.mojang.blaze3d.vertex.VertexConsumer getFoilBuffer(net.minecraft.client.renderer.MultiBufferSource $$0, net.minecraft.client.renderer.RenderType $$1, boolean $$2, boolean $$3) {
+        if ($$3) {
+            if (net.minecraft.client.Minecraft.useShaderTransparency() && $$1 == net.minecraft.client.renderer.Sheets.translucentItemSheet()) {
+                return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer(net.minecraft.client.renderer.RenderType.glintTranslucent()), (com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$1));
             }
-            return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(isItem ? net.minecraft.client.renderer.RenderType.glint() : net.minecraft.client.renderer.RenderType.entityGlint()), (com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(renderType));
+            return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$2 ? net.minecraft.client.renderer.RenderType.glint() : net.minecraft.client.renderer.RenderType.entityGlint()), (com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$1));
         }
-        return buffer.getBuffer(renderType);
+        return $$0.getBuffer($$1);
     }
 
-    public static com.mojang.blaze3d.vertex.VertexConsumer getFoilBufferDirect(net.minecraft.client.renderer.MultiBufferSource buffer, net.minecraft.client.renderer.RenderType renderType, boolean noEntity, boolean withGlint) {
-        if (withGlint) {
-            return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(noEntity ? net.minecraft.client.renderer.RenderType.glintDirect() : net.minecraft.client.renderer.RenderType.entityGlintDirect()), (com.mojang.blaze3d.vertex.VertexConsumer)buffer.getBuffer(renderType));
+    public static com.mojang.blaze3d.vertex.VertexConsumer getFoilBufferDirect(net.minecraft.client.renderer.MultiBufferSource $$0, net.minecraft.client.renderer.RenderType $$1, boolean $$2, boolean $$3) {
+        if ($$3) {
+            return com.mojang.blaze3d.vertex.VertexMultiConsumer.create((com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$2 ? net.minecraft.client.renderer.RenderType.glintDirect() : net.minecraft.client.renderer.RenderType.entityGlintDirect()), (com.mojang.blaze3d.vertex.VertexConsumer)$$0.getBuffer($$1));
         }
-        return buffer.getBuffer(renderType);
+        return $$0.getBuffer($$1);
     }
 
-    public void renderQuadList(com.mojang.blaze3d.vertex.PoseStack matrixStack, com.mojang.blaze3d.vertex.VertexConsumer buffer, java.util.List<net.minecraft.client.renderer.block.model.BakedQuad> quads, net.minecraft.world.item.ItemStack itemStack, int combinedLight, int combinedOverlay) {
-        boolean bl = !itemStack.isEmpty();
-        com.mojang.blaze3d.vertex.PoseStack$Pose pose = matrixStack.last();
-        for (net.minecraft.client.renderer.block.model.BakedQuad bakedQuad : quads) {
-            int n = -1;
-            if (bl && bakedQuad.isTinted()) {
-                n = this.itemColors.getColor(itemStack, bakedQuad.getTintIndex());
+    public void renderQuadList(com.mojang.blaze3d.vertex.PoseStack $$0, com.mojang.blaze3d.vertex.VertexConsumer $$1, java.util.List<net.minecraft.client.renderer.block.model.BakedQuad> $$2, net.minecraft.world.item.ItemStack $$3, int $$4, int $$5) {
+        boolean $$6 = !$$3.isEmpty();
+        com.mojang.blaze3d.vertex.PoseStack$Pose $$7 = $$0.last();
+        for (net.minecraft.client.renderer.block.model.BakedQuad $$8 : $$2) {
+            int $$9 = -1;
+            if ($$6 && $$8.isTinted()) {
+                $$9 = this.itemColors.getColor($$3, $$8.getTintIndex());
             }
-            float f = (float)(n >> 16 & 0xFF) / 255.0f;
-            float f2 = (float)(n >> 8 & 0xFF) / 255.0f;
-            float f3 = (float)(n & 0xFF) / 255.0f;
-            buffer.putBulkData(pose, bakedQuad, f, f2, f3, combinedLight, combinedOverlay);
+            float $$10 = (float)($$9 >> 16 & 0xFF) / 255.0f;
+            float $$11 = (float)($$9 >> 8 & 0xFF) / 255.0f;
+            float $$12 = (float)($$9 & 0xFF) / 255.0f;
+            $$1.putBulkData($$7, $$8, $$10, $$11, $$12, $$4, $$5);
         }
     }
 
     public net.minecraft.client.resources.model.BakedModel getModel(net.minecraft.world.item.ItemStack $$0, @javax.annotation.Nullable net.minecraft.world.level.Level $$1, @javax.annotation.Nullable net.minecraft.world.entity.LivingEntity $$2, int $$3) {
         net.minecraft.client.resources.model.BakedModel $$6;
         if ($$0.is(net.minecraft.world.item.Items.TRIDENT)) {
-            net.minecraft.client.resources.model.BakedModel $$4 = this.itemModelShaper.getModelManager().getModel(new net.minecraft.client.resources.model.ModelResourceLocation("minecraft:trident_in_hand#inventory"));
+            net.minecraft.client.resources.model.BakedModel $$4 = this.itemModelShaper.getModelManager().getModel(TRIDENT_IN_HAND_MODEL);
         } else if ($$0.is(net.minecraft.world.item.Items.SPYGLASS)) {
-            net.minecraft.client.resources.model.BakedModel $$5 = this.itemModelShaper.getModelManager().getModel(new net.minecraft.client.resources.model.ModelResourceLocation("minecraft:spyglass_in_hand#inventory"));
+            net.minecraft.client.resources.model.BakedModel $$5 = this.itemModelShaper.getModelManager().getModel(SPYGLASS_IN_HAND_MODEL);
         } else {
             $$6 = this.itemModelShaper.getItemModel($$0);
         }
@@ -159,42 +174,42 @@
         this.render($$1, $$2, $$3, $$4, $$5, $$7, $$8, $$10);
     }
 
-    public void renderGuiItem(net.minecraft.world.item.ItemStack stack, int x, int y) {
-        this.renderGuiItem(stack, x, y, this.getModel(stack, null, null, 0));
+    public void renderGuiItem(net.minecraft.world.item.ItemStack $$0, int $$1, int $$2) {
+        this.renderGuiItem($$0, $$1, $$2, this.getModel($$0, null, null, 0));
     }
 
-    public void renderGuiItem(net.minecraft.world.item.ItemStack stack, int x, int y, net.minecraft.client.resources.model.BakedModel bakedmodel) {
-        boolean bl;
+    public void renderGuiItem(net.minecraft.world.item.ItemStack $$0, int $$1, int $$2, net.minecraft.client.resources.model.BakedModel $$3) {
+        boolean $$7;
         this.textureManager.getTexture(net.minecraft.client.renderer.texture.TextureAtlas.LOCATION_BLOCKS).setFilter(false, false);
         com.mojang.blaze3d.systems.RenderSystem.setShaderTexture((int)0, (net.minecraft.resources.ResourceLocation)net.minecraft.client.renderer.texture.TextureAtlas.LOCATION_BLOCKS);
         com.mojang.blaze3d.systems.RenderSystem.enableBlend();
         com.mojang.blaze3d.systems.RenderSystem.blendFunc((com.mojang.blaze3d.platform.GlStateManager$SourceFactor)com.mojang.blaze3d.platform.GlStateManager$SourceFactor.SRC_ALPHA, (com.mojang.blaze3d.platform.GlStateManager$DestFactor)com.mojang.blaze3d.platform.GlStateManager$DestFactor.ONE_MINUS_SRC_ALPHA);
         com.mojang.blaze3d.systems.RenderSystem.setShaderColor((float)1.0f, (float)1.0f, (float)1.0f, (float)1.0f);
-        com.mojang.blaze3d.vertex.PoseStack poseStack = com.mojang.blaze3d.systems.RenderSystem.getModelViewStack();
-        poseStack.pushPose();
-        poseStack.translate((double)x, (double)y, (double)(100.0f + this.blitOffset));
-        poseStack.translate(8.0, 8.0, 0.0);
-        poseStack.scale(1.0f, -1.0f, 1.0f);
-        poseStack.scale(16.0f, 16.0f, 16.0f);
+        com.mojang.blaze3d.vertex.PoseStack $$4 = com.mojang.blaze3d.systems.RenderSystem.getModelViewStack();
+        $$4.pushPose();
+        $$4.translate((double)$$1, (double)$$2, (double)(100.0f + this.blitOffset));
+        $$4.translate(8.0, 8.0, 0.0);
+        $$4.scale(1.0f, -1.0f, 1.0f);
+        $$4.scale(16.0f, 16.0f, 16.0f);
         com.mojang.blaze3d.systems.RenderSystem.applyModelViewMatrix();
-        com.mojang.blaze3d.vertex.PoseStack poseStack2 = new com.mojang.blaze3d.vertex.PoseStack();
-        net.minecraft.client.renderer.MultiBufferSource$BufferSource bufferSource = net.minecraft.client.Minecraft.getInstance().renderBuffers().bufferSource();
-        boolean bl2 = bl = !bakedmodel.usesBlockLight();
-        if (bl) {
+        com.mojang.blaze3d.vertex.PoseStack $$5 = new com.mojang.blaze3d.vertex.PoseStack();
+        net.minecraft.client.renderer.MultiBufferSource$BufferSource $$6 = net.minecraft.client.Minecraft.getInstance().renderBuffers().bufferSource();
+        boolean bl = $$7 = !$$3.usesBlockLight();
+        if ($$7) {
             com.mojang.blaze3d.platform.Lighting.setupForFlatItems();
         }
-        this.render(stack, net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GUI, false, poseStack2, (net.minecraft.client.renderer.MultiBufferSource)bufferSource, 0xF000F0, net.minecraft.client.renderer.texture.OverlayTexture.NO_OVERLAY, bakedmodel);
-        bufferSource.endBatch();
+        this.render($$0, net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.GUI, false, $$5, (net.minecraft.client.renderer.MultiBufferSource)$$6, 0xF000F0, net.minecraft.client.renderer.texture.OverlayTexture.NO_OVERLAY, $$3);
+        $$6.endBatch();
         com.mojang.blaze3d.systems.RenderSystem.enableDepthTest();
-        if (bl) {
+        if ($$7) {
             com.mojang.blaze3d.platform.Lighting.setupFor3DItems();
         }
-        poseStack.popPose();
+        $$4.popPose();
         com.mojang.blaze3d.systems.RenderSystem.applyModelViewMatrix();
     }
 
-    public void renderAndDecorateItem(net.minecraft.world.item.ItemStack stack, int xPosition, int yPosition) {
-        this.tryRenderGuiItem((net.minecraft.world.entity.LivingEntity)net.minecraft.client.Minecraft.getInstance().player, stack, xPosition, yPosition, 0);
+    public void renderAndDecorateItem(net.minecraft.world.item.ItemStack $$0, int $$1, int $$2) {
+        this.tryRenderGuiItem((net.minecraft.world.entity.LivingEntity)net.minecraft.client.Minecraft.getInstance().player, $$0, $$1, $$2, 0);
     }
 
     public void renderAndDecorateItem(net.minecraft.world.item.ItemStack $$0, int $$1, int $$2, int $$3) {
@@ -205,8 +220,8 @@
         this.tryRenderGuiItem((net.minecraft.world.entity.LivingEntity)net.minecraft.client.Minecraft.getInstance().player, $$0, $$1, $$2, $$3, $$4);
     }
 
-    public void renderAndDecorateFakeItem(net.minecraft.world.item.ItemStack stack, int x, int y) {
-        this.tryRenderGuiItem(null, stack, x, y, 0);
+    public void renderAndDecorateFakeItem(net.minecraft.world.item.ItemStack $$0, int $$1, int $$2) {
+        this.tryRenderGuiItem(null, $$0, $$1, $$2, 0);
     }
 
     public void renderAndDecorateItem(net.minecraft.world.entity.LivingEntity $$0, net.minecraft.world.item.ItemStack $$1, int $$2, int $$3, int $$4) {
@@ -238,70 +253,73 @@
         this.blitOffset = $$6.isGui3d() ? this.blitOffset - 50.0f - (float)$$5 : this.blitOffset - 50.0f;
     }
 
-    public void renderGuiItemDecorations(net.minecraft.client.gui.Font fr, net.minecraft.world.item.ItemStack stack, int xPosition, int yPosition) {
-        this.renderGuiItemDecorations(fr, stack, xPosition, yPosition, null);
+    public void renderGuiItemDecorations(net.minecraft.client.gui.Font $$0, net.minecraft.world.item.ItemStack $$1, int $$2, int $$3) {
+        this.renderGuiItemDecorations($$0, $$1, $$2, $$3, null);
     }
 
-    public void renderGuiItemDecorations(net.minecraft.client.gui.Font fr, net.minecraft.world.item.ItemStack stack, int xPosition, int yPosition, @javax.annotation.Nullable java.lang.String text) {
-        float f;
-        com.mojang.blaze3d.vertex.BufferBuilder bufferBuilder;
-        java.lang.String string;
-        if (stack.isEmpty()) {
+    public void renderGuiItemDecorations(net.minecraft.client.gui.Font $$0, net.minecraft.world.item.ItemStack $$1, int $$2, int $$3, @javax.annotation.Nullable java.lang.String $$4) {
+        net.minecraft.client.player.LocalPlayer $$12;
+        float $$13;
+        if ($$1.isEmpty()) {
             return;
         }
-        com.mojang.blaze3d.vertex.PoseStack poseStack = new com.mojang.blaze3d.vertex.PoseStack();
-        if (stack.getCount() != 1 || text != null) {
-            string = text == null ? java.lang.String.valueOf((int)stack.getCount()) : text;
-            poseStack.translate(0.0, 0.0, (double)(this.blitOffset + 200.0f));
-            bufferBuilder = net.minecraft.client.renderer.MultiBufferSource.immediate((com.mojang.blaze3d.vertex.BufferBuilder)com.mojang.blaze3d.vertex.Tesselator.getInstance().getBuilder());
-            fr.drawInBatch(string, (float)(xPosition + 19 - 2 - fr.width(string)), (float)(yPosition + 6 + 3), 0xFFFFFF, true, poseStack.last().pose(), (net.minecraft.client.renderer.MultiBufferSource)bufferBuilder, false, 0, 0xF000F0);
-            bufferBuilder.endBatch();
+        com.mojang.blaze3d.vertex.PoseStack $$5 = new com.mojang.blaze3d.vertex.PoseStack();
+        if ($$1.getCount() != 1 || $$4 != null) {
+            java.lang.String $$6 = $$4 == null ? java.lang.String.valueOf((int)$$1.getCount()) : $$4;
+            $$5.translate(0.0, 0.0, (double)(this.blitOffset + 200.0f));
+            net.minecraft.client.renderer.MultiBufferSource$BufferSource $$7 = net.minecraft.client.renderer.MultiBufferSource.immediate((com.mojang.blaze3d.vertex.BufferBuilder)com.mojang.blaze3d.vertex.Tesselator.getInstance().getBuilder());
+            $$0.drawInBatch($$6, (float)($$2 + 19 - 2 - $$0.width($$6)), (float)($$3 + 6 + 3), 0xFFFFFF, true, $$5.last().pose(), (net.minecraft.client.renderer.MultiBufferSource)$$7, false, 0, 0xF000F0);
+            $$7.endBatch();
         }
-        if (stack.isBarVisible()) {
+        if ($$1.isBarVisible()) {
             com.mojang.blaze3d.systems.RenderSystem.disableDepthTest();
             com.mojang.blaze3d.systems.RenderSystem.disableTexture();
             com.mojang.blaze3d.systems.RenderSystem.disableBlend();
-            string = com.mojang.blaze3d.vertex.Tesselator.getInstance();
-            bufferBuilder = string.getBuilder();
-            int n = stack.getBarWidth();
-            int n2 = stack.getBarColor();
-            this.fillRect(bufferBuilder, xPosition + 2, yPosition + 13, 13, 2, 0, 0, 0, 255);
-            this.fillRect(bufferBuilder, xPosition + 2, yPosition + 13, n, 1, n2 >> 16 & 0xFF, n2 >> 8 & 0xFF, n2 & 0xFF, 255);
+            com.mojang.blaze3d.vertex.Tesselator $$8 = com.mojang.blaze3d.vertex.Tesselator.getInstance();
+            com.mojang.blaze3d.vertex.BufferBuilder $$9 = $$8.getBuilder();
+            int $$10 = $$1.getBarWidth();
+            int $$11 = $$1.getBarColor();
+            this.fillRect($$9, $$2 + 2, $$3 + 13, 13, 2, 0, 0, 0, 255);
+            this.fillRect($$9, $$2 + 2, $$3 + 13, $$10, 1, $$11 >> 16 & 0xFF, $$11 >> 8 & 0xFF, $$11 & 0xFF, 255);
             com.mojang.blaze3d.systems.RenderSystem.enableBlend();
             com.mojang.blaze3d.systems.RenderSystem.enableTexture();
             com.mojang.blaze3d.systems.RenderSystem.enableDepthTest();
         }
-        float f2 = f = (string = net.minecraft.client.Minecraft.getInstance().player) == null ? 0.0f : string.getCooldowns().getCooldownPercent(stack.getItem(), net.minecraft.client.Minecraft.getInstance().getFrameTime());
-        if (f > 0.0f) {
+        float f = $$13 = ($$12 = net.minecraft.client.Minecraft.getInstance().player) == null ? 0.0f : $$12.getCooldowns().getCooldownPercent($$1.getItem(), net.minecraft.client.Minecraft.getInstance().getFrameTime());
+        if ($$13 > 0.0f) {
             com.mojang.blaze3d.systems.RenderSystem.disableDepthTest();
             com.mojang.blaze3d.systems.RenderSystem.disableTexture();
             com.mojang.blaze3d.systems.RenderSystem.enableBlend();
             com.mojang.blaze3d.systems.RenderSystem.defaultBlendFunc();
-            com.mojang.blaze3d.vertex.Tesselator tesselator = com.mojang.blaze3d.vertex.Tesselator.getInstance();
-            com.mojang.blaze3d.vertex.BufferBuilder bufferBuilder2 = tesselator.getBuilder();
-            this.fillRect(bufferBuilder2, xPosition, yPosition + net.minecraft.util.Mth.floor((float)(16.0f * (1.0f - f))), 16, net.minecraft.util.Mth.ceil((float)(16.0f * f)), 255, 255, 255, 127);
+            com.mojang.blaze3d.vertex.Tesselator $$14 = com.mojang.blaze3d.vertex.Tesselator.getInstance();
+            com.mojang.blaze3d.vertex.BufferBuilder $$15 = $$14.getBuilder();
+            this.fillRect($$15, $$2, $$3 + net.minecraft.util.Mth.floor((float)(16.0f * (1.0f - $$13))), 16, net.minecraft.util.Mth.ceil((float)(16.0f * $$13)), 255, 255, 255, 127);
             com.mojang.blaze3d.systems.RenderSystem.enableTexture();
             com.mojang.blaze3d.systems.RenderSystem.enableDepthTest();
         }
     }
 
-    public void fillRect(com.mojang.blaze3d.vertex.BufferBuilder renderer, int x, int y, int width, int height, int red, int green, int blue, int alpha) {
+    public void fillRect(com.mojang.blaze3d.vertex.BufferBuilder $$0, int $$1, int $$2, int $$3, int $$4, int $$5, int $$6, int $$7, int $$8) {
         com.mojang.blaze3d.systems.RenderSystem.setShader(net.minecraft.client.renderer.GameRenderer::getPositionColorShader);
-        renderer.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.QUADS, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR);
-        renderer.vertex((double)(x + 0), (double)(y + 0), 0.0).color(red, green, blue, alpha).endVertex();
-        renderer.vertex((double)(x + 0), (double)(y + height), 0.0).color(red, green, blue, alpha).endVertex();
-        renderer.vertex((double)(x + width), (double)(y + height), 0.0).color(red, green, blue, alpha).endVertex();
-        renderer.vertex((double)(x + width), (double)(y + 0), 0.0).color(red, green, blue, alpha).endVertex();
-        com.mojang.blaze3d.vertex.BufferUploader.drawWithShader((com.mojang.blaze3d.vertex.BufferBuilder$RenderedBuffer)renderer.end());
+        $$0.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.QUADS, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR);
+        $$0.vertex((double)($$1 + 0), (double)($$2 + 0), 0.0).color($$5, $$6, $$7, $$8).endVertex();
+        $$0.vertex((double)($$1 + 0), (double)($$2 + $$4), 0.0).color($$5, $$6, $$7, $$8).endVertex();
+        $$0.vertex((double)($$1 + $$3), (double)($$2 + $$4), 0.0).color($$5, $$6, $$7, $$8).endVertex();
+        $$0.vertex((double)($$1 + $$3), (double)($$2 + 0), 0.0).color($$5, $$6, $$7, $$8).endVertex();
+        com.mojang.blaze3d.vertex.BufferUploader.drawWithShader((com.mojang.blaze3d.vertex.BufferBuilder$RenderedBuffer)$$0.end());
     }
 
-    public void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager resourceManager) {
+    public void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager $$0) {
         this.itemModelShaper.rebuildCache();
     }
 
     static {
         ENCHANT_GLINT_LOCATION = new net.minecraft.resources.ResourceLocation("textures/misc/enchanted_item_glint.png");
         IGNORED = com.google.common.collect.Sets.newHashSet((java.lang.Object[])new net.minecraft.world.item.Item[]{net.minecraft.world.item.Items.AIR});
+        TRIDENT_MODEL = net.minecraft.client.resources.model.ModelResourceLocation.vanilla((java.lang.String)"trident", (java.lang.String)"inventory");
+        TRIDENT_IN_HAND_MODEL = net.minecraft.client.resources.model.ModelResourceLocation.vanilla((java.lang.String)"trident_in_hand", (java.lang.String)"inventory");
+        SPYGLASS_MODEL = net.minecraft.client.resources.model.ModelResourceLocation.vanilla((java.lang.String)"spyglass", (java.lang.String)"inventory");
+        SPYGLASS_IN_HAND_MODEL = net.minecraft.client.resources.model.ModelResourceLocation.vanilla((java.lang.String)"spyglass_in_hand", (java.lang.String)"inventory");
     }
 }
 