--- net/minecraft/client/renderer/RunningTrimmedMean.java
+++ net/minecraft/client/renderer/RunningTrimmedMean.java
@@ -13,26 +13,26 @@
         this.values = new long[$$0];
     }
 
-    public long registerValueAndGetMean(long value) {
+    public long registerValueAndGetMean(long $$0) {
         if (this.count < this.values.length) {
             ++this.count;
         }
-        this.values[this.cursor] = value;
+        this.values[this.cursor] = $$0;
         this.cursor = (this.cursor + 1) % this.values.length;
-        long l = java.lang.Long.MAX_VALUE;
-        long l2 = java.lang.Long.MIN_VALUE;
-        long l3 = 0L;
-        for (int i = 0; i < this.count; ++i) {
-            long l4 = this.values[i];
-            l3 += l4;
-            l = java.lang.Math.min((long)l, (long)l4);
-            l2 = java.lang.Math.max((long)l2, (long)l4);
+        long $$1 = java.lang.Long.MAX_VALUE;
+        long $$2 = java.lang.Long.MIN_VALUE;
+        long $$3 = 0L;
+        for (int $$4 = 0; $$4 < this.count; ++$$4) {
+            long $$5 = this.values[$$4];
+            $$3 += $$5;
+            $$1 = java.lang.Math.min((long)$$1, (long)$$5);
+            $$2 = java.lang.Math.max((long)$$2, (long)$$5);
         }
         if (this.count > 2) {
-            return (l3 -= l + l2) / (long)(this.count - 2);
+            return ($$3 -= $$1 + $$2) / (long)(this.count - 2);
         }
-        if (l3 > 0L) {
-            return (long)this.count / l3;
+        if ($$3 > 0L) {
+            return (long)this.count / $$3;
         }
         return 0L;
     }