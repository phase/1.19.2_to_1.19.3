--- net/minecraft/client/renderer/debug/ChunkBorderRenderer.java
+++ net/minecraft/client/renderer/debug/ChunkBorderRenderer.java
@@ -14,93 +14,84 @@
         this.minecraft = $$0;
     }
 
-    public void render(com.mojang.blaze3d.vertex.PoseStack matrixStack, net.minecraft.client.renderer.MultiBufferSource buffer, double camX, double camY, double camZ) {
-        int n;
-        int n2;
+    public void render(com.mojang.blaze3d.vertex.PoseStack $$0, net.minecraft.client.renderer.MultiBufferSource $$1, double $$2, double $$3, double $$4) {
         com.mojang.blaze3d.systems.RenderSystem.enableDepthTest();
         com.mojang.blaze3d.systems.RenderSystem.setShader(net.minecraft.client.renderer.GameRenderer::getPositionColorShader);
-        net.minecraft.world.entity.Entity entity = this.minecraft.gameRenderer.getMainCamera().getEntity();
-        com.mojang.blaze3d.vertex.Tesselator tesselator = com.mojang.blaze3d.vertex.Tesselator.getInstance();
-        com.mojang.blaze3d.vertex.BufferBuilder bufferBuilder = tesselator.getBuilder();
-        double d = (double)this.minecraft.level.getMinBuildHeight() - camY;
-        double d2 = (double)this.minecraft.level.getMaxBuildHeight() - camY;
+        net.minecraft.world.entity.Entity $$5 = this.minecraft.gameRenderer.getMainCamera().getEntity();
+        com.mojang.blaze3d.vertex.Tesselator $$6 = com.mojang.blaze3d.vertex.Tesselator.getInstance();
+        com.mojang.blaze3d.vertex.BufferBuilder $$7 = $$6.getBuilder();
+        double $$8 = (double)this.minecraft.level.getMinBuildHeight() - $$3;
+        double $$9 = (double)this.minecraft.level.getMaxBuildHeight() - $$3;
         com.mojang.blaze3d.systems.RenderSystem.disableTexture();
         com.mojang.blaze3d.systems.RenderSystem.disableBlend();
-        net.minecraft.world.level.ChunkPos chunkPos = entity.chunkPosition();
-        double d3 = (double)chunkPos.getMinBlockX() - camX;
-        double d4 = (double)chunkPos.getMinBlockZ() - camZ;
+        net.minecraft.world.level.ChunkPos $$10 = $$5.chunkPosition();
+        double $$11 = (double)$$10.getMinBlockX() - $$2;
+        double $$12 = (double)$$10.getMinBlockZ() - $$4;
         com.mojang.blaze3d.systems.RenderSystem.lineWidth((float)1.0f);
-        bufferBuilder.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.DEBUG_LINE_STRIP, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR);
-        for (n2 = -16;
- n2 <= 32; n2 += 16) {
-            for (n = -16;
- n <= 32; n += 16) {
-                bufferBuilder.vertex(d3 + (double)n2, d, d4 + (double)n).color(1.0f, 0.0f, 0.0f, 0.0f).endVertex();
-                bufferBuilder.vertex(d3 + (double)n2, d, d4 + (double)n).color(1.0f, 0.0f, 0.0f, 0.5f).endVertex();
-                bufferBuilder.vertex(d3 + (double)n2, d2, d4 + (double)n).color(1.0f, 0.0f, 0.0f, 0.5f).endVertex();
-                bufferBuilder.vertex(d3 + (double)n2, d2, d4 + (double)n).color(1.0f, 0.0f, 0.0f, 0.0f).endVertex();
+        $$7.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.DEBUG_LINE_STRIP, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR);
+        for (int $$13 = -16; $$13 <= 32; $$13 += 16) {
+            for (int $$14 = -16; $$14 <= 32; $$14 += 16) {
+                $$7.vertex($$11 + (double)$$13, $$8, $$12 + (double)$$14).color(1.0f, 0.0f, 0.0f, 0.0f).endVertex();
+                $$7.vertex($$11 + (double)$$13, $$8, $$12 + (double)$$14).color(1.0f, 0.0f, 0.0f, 0.5f).endVertex();
+                $$7.vertex($$11 + (double)$$13, $$9, $$12 + (double)$$14).color(1.0f, 0.0f, 0.0f, 0.5f).endVertex();
+                $$7.vertex($$11 + (double)$$13, $$9, $$12 + (double)$$14).color(1.0f, 0.0f, 0.0f, 0.0f).endVertex();
             }
         }
-        for (n2 = 2;
- n2 < 16; n2 += 2) {
-            n = n2 % 4 == 0 ? CELL_BORDER : YELLOW;
-            bufferBuilder.vertex(d3 + (double)n2, d, d4).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
-            bufferBuilder.vertex(d3 + (double)n2, d, d4).color(n).endVertex();
-            bufferBuilder.vertex(d3 + (double)n2, d2, d4).color(n).endVertex();
-            bufferBuilder.vertex(d3 + (double)n2, d2, d4).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
-            bufferBuilder.vertex(d3 + (double)n2, d, d4 + 16.0).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
-            bufferBuilder.vertex(d3 + (double)n2, d, d4 + 16.0).color(n).endVertex();
-            bufferBuilder.vertex(d3 + (double)n2, d2, d4 + 16.0).color(n).endVertex();
-            bufferBuilder.vertex(d3 + (double)n2, d2, d4 + 16.0).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+        for (int $$15 = 2; $$15 < 16; $$15 += 2) {
+            int $$16 = $$15 % 4 == 0 ? CELL_BORDER : YELLOW;
+            $$7.vertex($$11 + (double)$$15, $$8, $$12).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+            $$7.vertex($$11 + (double)$$15, $$8, $$12).color($$16).endVertex();
+            $$7.vertex($$11 + (double)$$15, $$9, $$12).color($$16).endVertex();
+            $$7.vertex($$11 + (double)$$15, $$9, $$12).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+            $$7.vertex($$11 + (double)$$15, $$8, $$12 + 16.0).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+            $$7.vertex($$11 + (double)$$15, $$8, $$12 + 16.0).color($$16).endVertex();
+            $$7.vertex($$11 + (double)$$15, $$9, $$12 + 16.0).color($$16).endVertex();
+            $$7.vertex($$11 + (double)$$15, $$9, $$12 + 16.0).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
         }
-        for (n2 = 2;
- n2 < 16; n2 += 2) {
-            n = n2 % 4 == 0 ? CELL_BORDER : YELLOW;
-            bufferBuilder.vertex(d3, d, d4 + (double)n2).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
-            bufferBuilder.vertex(d3, d, d4 + (double)n2).color(n).endVertex();
-            bufferBuilder.vertex(d3, d2, d4 + (double)n2).color(n).endVertex();
-            bufferBuilder.vertex(d3, d2, d4 + (double)n2).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
-            bufferBuilder.vertex(d3 + 16.0, d, d4 + (double)n2).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
-            bufferBuilder.vertex(d3 + 16.0, d, d4 + (double)n2).color(n).endVertex();
-            bufferBuilder.vertex(d3 + 16.0, d2, d4 + (double)n2).color(n).endVertex();
-            bufferBuilder.vertex(d3 + 16.0, d2, d4 + (double)n2).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+        for (int $$17 = 2; $$17 < 16; $$17 += 2) {
+            int $$18 = $$17 % 4 == 0 ? CELL_BORDER : YELLOW;
+            $$7.vertex($$11, $$8, $$12 + (double)$$17).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+            $$7.vertex($$11, $$8, $$12 + (double)$$17).color($$18).endVertex();
+            $$7.vertex($$11, $$9, $$12 + (double)$$17).color($$18).endVertex();
+            $$7.vertex($$11, $$9, $$12 + (double)$$17).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+            $$7.vertex($$11 + 16.0, $$8, $$12 + (double)$$17).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+            $$7.vertex($$11 + 16.0, $$8, $$12 + (double)$$17).color($$18).endVertex();
+            $$7.vertex($$11 + 16.0, $$9, $$12 + (double)$$17).color($$18).endVertex();
+            $$7.vertex($$11 + 16.0, $$9, $$12 + (double)$$17).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
         }
-        for (n2 = this.minecraft.level.getMinBuildHeight();
- n2 <= this.minecraft.level.getMaxBuildHeight(); n2 += 2) {
-            double d5 = (double)n2 - camY;
-            int n3 = n2 % 8 == 0 ? CELL_BORDER : YELLOW;
-            bufferBuilder.vertex(d3, d5, d4).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
-            bufferBuilder.vertex(d3, d5, d4).color(n3).endVertex();
-            bufferBuilder.vertex(d3, d5, d4 + 16.0).color(n3).endVertex();
-            bufferBuilder.vertex(d3 + 16.0, d5, d4 + 16.0).color(n3).endVertex();
-            bufferBuilder.vertex(d3 + 16.0, d5, d4).color(n3).endVertex();
-            bufferBuilder.vertex(d3, d5, d4).color(n3).endVertex();
-            bufferBuilder.vertex(d3, d5, d4).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+        for (int $$19 = this.minecraft.level.getMinBuildHeight(); $$19 <= this.minecraft.level.getMaxBuildHeight(); $$19 += 2) {
+            double $$20 = (double)$$19 - $$3;
+            int $$21 = $$19 % 8 == 0 ? CELL_BORDER : YELLOW;
+            $$7.vertex($$11, $$20, $$12).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
+            $$7.vertex($$11, $$20, $$12).color($$21).endVertex();
+            $$7.vertex($$11, $$20, $$12 + 16.0).color($$21).endVertex();
+            $$7.vertex($$11 + 16.0, $$20, $$12 + 16.0).color($$21).endVertex();
+            $$7.vertex($$11 + 16.0, $$20, $$12).color($$21).endVertex();
+            $$7.vertex($$11, $$20, $$12).color($$21).endVertex();
+            $$7.vertex($$11, $$20, $$12).color(1.0f, 1.0f, 0.0f, 0.0f).endVertex();
         }
-        tesselator.end();
+        $$6.end();
         com.mojang.blaze3d.systems.RenderSystem.lineWidth((float)2.0f);
-        bufferBuilder.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.DEBUG_LINE_STRIP, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR);
-        for (n2 = 0;
- n2 <= 16; n2 += 16) {
-            for (int i = 0; i <= 16; i += 16) {
-                bufferBuilder.vertex(d3 + (double)n2, d, d4 + (double)i).color(0.25f, 0.25f, 1.0f, 0.0f).endVertex();
-                bufferBuilder.vertex(d3 + (double)n2, d, d4 + (double)i).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
-                bufferBuilder.vertex(d3 + (double)n2, d2, d4 + (double)i).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
-                bufferBuilder.vertex(d3 + (double)n2, d2, d4 + (double)i).color(0.25f, 0.25f, 1.0f, 0.0f).endVertex();
+        $$7.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.DEBUG_LINE_STRIP, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR);
+        for (int $$22 = 0; $$22 <= 16; $$22 += 16) {
+            for (int $$23 = 0; $$23 <= 16; $$23 += 16) {
+                $$7.vertex($$11 + (double)$$22, $$8, $$12 + (double)$$23).color(0.25f, 0.25f, 1.0f, 0.0f).endVertex();
+                $$7.vertex($$11 + (double)$$22, $$8, $$12 + (double)$$23).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
+                $$7.vertex($$11 + (double)$$22, $$9, $$12 + (double)$$23).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
+                $$7.vertex($$11 + (double)$$22, $$9, $$12 + (double)$$23).color(0.25f, 0.25f, 1.0f, 0.0f).endVertex();
             }
         }
-        for (n2 = this.minecraft.level.getMinBuildHeight();
- n2 <= this.minecraft.level.getMaxBuildHeight(); n2 += 16) {
-            double d6 = (double)n2 - camY;
-            bufferBuilder.vertex(d3, d6, d4).color(0.25f, 0.25f, 1.0f, 0.0f).endVertex();
-            bufferBuilder.vertex(d3, d6, d4).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
-            bufferBuilder.vertex(d3, d6, d4 + 16.0).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
-            bufferBuilder.vertex(d3 + 16.0, d6, d4 + 16.0).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
-            bufferBuilder.vertex(d3 + 16.0, d6, d4).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
-            bufferBuilder.vertex(d3, d6, d4).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
-            bufferBuilder.vertex(d3, d6, d4).color(0.25f, 0.25f, 1.0f, 0.0f).endVertex();
+        for (int $$24 = this.minecraft.level.getMinBuildHeight(); $$24 <= this.minecraft.level.getMaxBuildHeight(); $$24 += 16) {
+            double $$25 = (double)$$24 - $$3;
+            $$7.vertex($$11, $$25, $$12).color(0.25f, 0.25f, 1.0f, 0.0f).endVertex();
+            $$7.vertex($$11, $$25, $$12).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
+            $$7.vertex($$11, $$25, $$12 + 16.0).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
+            $$7.vertex($$11 + 16.0, $$25, $$12 + 16.0).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
+            $$7.vertex($$11 + 16.0, $$25, $$12).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
+            $$7.vertex($$11, $$25, $$12).color(0.25f, 0.25f, 1.0f, 1.0f).endVertex();
+            $$7.vertex($$11, $$25, $$12).color(0.25f, 0.25f, 1.0f, 0.0f).endVertex();
         }
-        tesselator.end();
+        $$6.end();
         com.mojang.blaze3d.systems.RenderSystem.lineWidth((float)1.0f);
         com.mojang.blaze3d.systems.RenderSystem.enableBlend();
         com.mojang.blaze3d.systems.RenderSystem.enableTexture();