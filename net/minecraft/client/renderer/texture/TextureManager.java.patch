--- net/minecraft/client/renderer/texture/TextureManager.java
+++ net/minecraft/client/renderer/texture/TextureManager.java
@@ -15,11 +15,11 @@
     public java.util.Map<java.lang.String, java.lang.Integer> prefixRegister;
     public net.minecraft.server.packs.resources.ResourceManager resourceManager;
 
-    public net.minecraft.client.renderer.texture.TextureManager(net.minecraft.server.packs.resources.ResourceManager resourceManager) {
+    public net.minecraft.client.renderer.texture.TextureManager(net.minecraft.server.packs.resources.ResourceManager $$0) {
         this.byPath = com.google.common.collect.Maps.newHashMap();
         this.tickableTextures = com.google.common.collect.Sets.newHashSet();
         this.prefixRegister = com.google.common.collect.Maps.newHashMap();
-        this.resourceManager = resourceManager;
+        this.resourceManager = $$0;
     }
 
     public void bindForSetup(net.minecraft.resources.ResourceLocation $$0) {
@@ -30,24 +30,24 @@
         }
     }
 
-    public void _bind(net.minecraft.resources.ResourceLocation resource) {
-        net.minecraft.client.renderer.texture.AbstractTexture abstractTexture = (net.minecraft.client.renderer.texture.AbstractTexture)this.byPath.get((java.lang.Object)resource);
-        if (abstractTexture == null) {
-            abstractTexture = new net.minecraft.client.renderer.texture.SimpleTexture(resource);
-            this.register(resource, abstractTexture);
+    public void _bind(net.minecraft.resources.ResourceLocation $$0) {
+        net.minecraft.client.renderer.texture.AbstractTexture $$1 = (net.minecraft.client.renderer.texture.AbstractTexture)this.byPath.get((java.lang.Object)$$0);
+        if ($$1 == null) {
+            $$1 = new net.minecraft.client.renderer.texture.SimpleTexture($$0);
+            this.register($$0, $$1);
         }
-        abstractTexture.bind();
+        $$1.bind();
     }
 
-    public void register(net.minecraft.resources.ResourceLocation textureLocation, net.minecraft.client.renderer.texture.AbstractTexture textureObj) {
-        net.minecraft.client.renderer.texture.AbstractTexture abstractTexture = (net.minecraft.client.renderer.texture.AbstractTexture)this.byPath.put((java.lang.Object)textureLocation, (java.lang.Object)(textureObj = this.loadTexture(textureLocation, textureObj)));
-        if (abstractTexture != textureObj) {
-            if (abstractTexture != null && abstractTexture != net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture()) {
-                this.tickableTextures.remove((java.lang.Object)abstractTexture);
-                this.safeClose(textureLocation, abstractTexture);
+    public void register(net.minecraft.resources.ResourceLocation $$0, net.minecraft.client.renderer.texture.AbstractTexture $$1) {
+        net.minecraft.client.renderer.texture.AbstractTexture $$2 = (net.minecraft.client.renderer.texture.AbstractTexture)this.byPath.put((java.lang.Object)$$0, (java.lang.Object)($$1 = this.loadTexture($$0, $$1)));
+        if ($$2 != $$1) {
+            if ($$2 != null && $$2 != net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture()) {
+                this.tickableTextures.remove((java.lang.Object)$$2);
+                this.safeClose($$0, $$2);
             }
-            if (textureObj instanceof net.minecraft.client.renderer.texture.Tickable) {
-                this.tickableTextures.add((java.lang.Object)((net.minecraft.client.renderer.texture.Tickable)textureObj));
+            if ($$1 instanceof net.minecraft.client.renderer.texture.Tickable) {
+                this.tickableTextures.add((java.lang.Object)((net.minecraft.client.renderer.texture.Tickable)$$1));
             }
         }
     }
@@ -84,45 +84,44 @@
         }
     }
 
-    public net.minecraft.client.renderer.texture.AbstractTexture getTexture(net.minecraft.resources.ResourceLocation textureLocation) {
-        net.minecraft.client.renderer.texture.AbstractTexture abstractTexture = (net.minecraft.client.renderer.texture.AbstractTexture)this.byPath.get((java.lang.Object)textureLocation);
-        if (abstractTexture == null) {
-            abstractTexture = new net.minecraft.client.renderer.texture.SimpleTexture(textureLocation);
-            this.register(textureLocation, abstractTexture);
+    public net.minecraft.client.renderer.texture.AbstractTexture getTexture(net.minecraft.resources.ResourceLocation $$0) {
+        net.minecraft.client.renderer.texture.AbstractTexture $$1 = (net.minecraft.client.renderer.texture.AbstractTexture)this.byPath.get((java.lang.Object)$$0);
+        if ($$1 == null) {
+            $$1 = new net.minecraft.client.renderer.texture.SimpleTexture($$0);
+            this.register($$0, $$1);
         }
-        return abstractTexture;
+        return $$1;
     }
 
     public net.minecraft.client.renderer.texture.AbstractTexture getTexture(net.minecraft.resources.ResourceLocation $$0, net.minecraft.client.renderer.texture.AbstractTexture $$1) {
         return (net.minecraft.client.renderer.texture.AbstractTexture)this.byPath.getOrDefault((java.lang.Object)$$0, (java.lang.Object)$$1);
     }
 
-    public net.minecraft.resources.ResourceLocation register(java.lang.String name, net.minecraft.client.renderer.texture.DynamicTexture texture) {
-        java.lang.Integer n;
-        java.lang.Integer n2 = (java.lang.Integer)this.prefixRegister.get((java.lang.Object)name);
-        if (n2 == null) {
-            n2 = 1;
+    public net.minecraft.resources.ResourceLocation register(java.lang.String $$0, net.minecraft.client.renderer.texture.DynamicTexture $$1) {
+        java.lang.Integer $$2 = (java.lang.Integer)this.prefixRegister.get((java.lang.Object)$$0);
+        if ($$2 == null) {
+            $$2 = 1;
         } else {
-            n = n2;
-            n2 = n2 + 1;
+            java.lang.Integer n = $$2;
+            $$2 = $$2 + 1;
         }
-        this.prefixRegister.put((java.lang.Object)name, (java.lang.Object)n2);
-        n = new net.minecraft.resources.ResourceLocation(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"dynamic/%s_%d", (java.lang.Object[])new java.lang.Object[]{name, n2}));
-        this.register((net.minecraft.resources.ResourceLocation)n, (net.minecraft.client.renderer.texture.AbstractTexture)texture);
-        return n;
+        this.prefixRegister.put((java.lang.Object)$$0, (java.lang.Object)$$2);
+        net.minecraft.resources.ResourceLocation $$3 = new net.minecraft.resources.ResourceLocation(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"dynamic/%s_%d", (java.lang.Object[])new java.lang.Object[]{$$0, $$2}));
+        this.register($$3, (net.minecraft.client.renderer.texture.AbstractTexture)$$1);
+        return $$3;
     }
 
-    public java.util.concurrent.CompletableFuture<java.lang.Void> preload(net.minecraft.resources.ResourceLocation textureLocation, java.util.concurrent.Executor executor) {
-        if (!this.byPath.containsKey((java.lang.Object)textureLocation)) {
-            net.minecraft.client.renderer.texture.PreloadedTexture preloadedTexture = new net.minecraft.client.renderer.texture.PreloadedTexture(this.resourceManager, textureLocation, executor);
-            this.byPath.put((java.lang.Object)textureLocation, (java.lang.Object)preloadedTexture);
-            return preloadedTexture.getFuture().thenRunAsync(() -> this.register(textureLocation, (net.minecraft.client.renderer.texture.AbstractTexture)preloadedTexture), net.minecraft.client.renderer.texture.TextureManager::execute);
+    public java.util.concurrent.CompletableFuture<java.lang.Void> preload(net.minecraft.resources.ResourceLocation $$0, java.util.concurrent.Executor $$1) {
+        if (!this.byPath.containsKey((java.lang.Object)$$0)) {
+            net.minecraft.client.renderer.texture.PreloadedTexture $$2 = new net.minecraft.client.renderer.texture.PreloadedTexture(this.resourceManager, $$0, $$1);
+            this.byPath.put((java.lang.Object)$$0, (java.lang.Object)$$2);
+            return $$2.getFuture().thenRunAsync(() -> this.register($$0, (net.minecraft.client.renderer.texture.AbstractTexture)$$2), net.minecraft.client.renderer.texture.TextureManager::execute);
         }
         return java.util.concurrent.CompletableFuture.completedFuture(null);
     }
 
-    public static void execute(java.lang.Runnable runnable) {
-        net.minecraft.client.Minecraft.getInstance().execute(() -> com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> ((java.lang.Runnable)runnable).run()));
+    public static void execute(java.lang.Runnable $$0) {
+        net.minecraft.client.Minecraft.getInstance().execute(() -> com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> ((java.lang.Runnable)$$0).run()));
     }
 
     public void tick() {
@@ -131,10 +130,10 @@
         }
     }
 
-    public void release(net.minecraft.resources.ResourceLocation textureLocation) {
-        net.minecraft.client.renderer.texture.AbstractTexture abstractTexture = this.getTexture(textureLocation, (net.minecraft.client.renderer.texture.AbstractTexture)net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture());
-        if (abstractTexture != net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture()) {
-            com.mojang.blaze3d.platform.TextureUtil.releaseTextureId((int)abstractTexture.getId());
+    public void release(net.minecraft.resources.ResourceLocation $$0) {
+        net.minecraft.client.renderer.texture.AbstractTexture $$1 = this.getTexture($$0, (net.minecraft.client.renderer.texture.AbstractTexture)net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture());
+        if ($$1 != net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture()) {
+            com.mojang.blaze3d.platform.TextureUtil.releaseTextureId((int)$$1.getId());
         }
     }
 
@@ -145,22 +144,25 @@
         this.prefixRegister.clear();
     }
 
-    public java.util.concurrent.CompletableFuture<java.lang.Void> reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier stage, net.minecraft.server.packs.resources.ResourceManager resourceManager, net.minecraft.util.profiling.ProfilerFiller preparationsProfiler, net.minecraft.util.profiling.ProfilerFiller reloadProfiler, java.util.concurrent.Executor backgroundExecutor, java.util.concurrent.Executor gameExecutor) {
-        return java.util.concurrent.CompletableFuture.allOf((java.util.concurrent.CompletableFuture[])new java.util.concurrent.CompletableFuture[]{net.minecraft.client.gui.screens.TitleScreen.preloadResources((net.minecraft.client.renderer.texture.TextureManager)this, (java.util.concurrent.Executor)backgroundExecutor), this.preload(net.minecraft.client.gui.components.AbstractWidget.WIDGETS_LOCATION, backgroundExecutor)}).thenCompose(arg_0 -> ((net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier)stage).wait(arg_0)).thenAcceptAsync($$2 -> {
+    public java.util.concurrent.CompletableFuture<java.lang.Void> reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier $$02, net.minecraft.server.packs.resources.ResourceManager $$1, net.minecraft.util.profiling.ProfilerFiller $$2, net.minecraft.util.profiling.ProfilerFiller $$32, java.util.concurrent.Executor $$4, java.util.concurrent.Executor $$5) {
+        java.util.concurrent.CompletableFuture $$6 = new java.util.concurrent.CompletableFuture();
+        java.util.concurrent.CompletableFuture.allOf((java.util.concurrent.CompletableFuture[])new java.util.concurrent.CompletableFuture[]{net.minecraft.client.gui.screens.TitleScreen.preloadResources((net.minecraft.client.renderer.texture.TextureManager)this, (java.util.concurrent.Executor)$$4), this.preload(net.minecraft.client.gui.components.AbstractWidget.WIDGETS_LOCATION, $$4)}).thenCompose(arg_0 -> ((net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier)$$02).wait(arg_0)).thenAcceptAsync($$3 -> {
             net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture();
             com.mojang.realmsclient.RealmsMainScreen.updateTeaserImages((net.minecraft.server.packs.resources.ResourceManager)this.resourceManager);
-            java.util.Iterator $$3 = this.byPath.entrySet().iterator();
-            while ($$3.hasNext()) {
-                java.util.Map$Entry $$4 = (java.util.Map$Entry)$$3.next();
-                net.minecraft.resources.ResourceLocation $$5 = (net.minecraft.resources.ResourceLocation)$$4.getKey();
-                net.minecraft.client.renderer.texture.AbstractTexture $$6 = (net.minecraft.client.renderer.texture.AbstractTexture)$$4.getValue();
-                if ($$6 == net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture() && !$$5.equals((java.lang.Object)net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getLocation())) {
-                    $$3.remove();
+            java.util.Iterator $$4 = this.byPath.entrySet().iterator();
+            while ($$4.hasNext()) {
+                java.util.Map$Entry $$5 = (java.util.Map$Entry)$$4.next();
+                net.minecraft.resources.ResourceLocation $$6 = (net.minecraft.resources.ResourceLocation)$$5.getKey();
+                net.minecraft.client.renderer.texture.AbstractTexture $$7 = (net.minecraft.client.renderer.texture.AbstractTexture)$$5.getValue();
+                if ($$7 == net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getTexture() && !$$6.equals((java.lang.Object)net.minecraft.client.renderer.texture.MissingTextureAtlasSprite.getLocation())) {
+                    $$4.remove();
                     continue;
                 }
-                $$6.reset(this, resourceManager, $$5, gameExecutor);
+                $$7.reset(this, $$1, $$6, $$5);
             }
+            net.minecraft.client.Minecraft.getInstance().tell(() -> $$6.complete(null));
         }, $$0 -> com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> ((java.lang.Runnable)$$0).run()));
+        return $$6;
     }
 
     static {