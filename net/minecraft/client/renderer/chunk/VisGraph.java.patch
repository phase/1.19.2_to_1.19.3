--- net/minecraft/client/renderer/chunk/VisGraph.java
+++ net/minecraft/client/renderer/chunk/VisGraph.java
@@ -26,17 +26,17 @@
         this.empty = 4096;
     }
 
-    public void setOpaque(net.minecraft.core.BlockPos pos) {
-        this.bitSet.set(net.minecraft.client.renderer.chunk.VisGraph.getIndex((net.minecraft.core.BlockPos)pos), true);
+    public void setOpaque(net.minecraft.core.BlockPos $$0) {
+        this.bitSet.set(net.minecraft.client.renderer.chunk.VisGraph.getIndex((net.minecraft.core.BlockPos)$$0), true);
         --this.empty;
     }
 
-    public static int getIndex(net.minecraft.core.BlockPos pos) {
-        return net.minecraft.client.renderer.chunk.VisGraph.getIndex((int)(pos.getX() & 0xF), (int)(pos.getY() & 0xF), (int)(pos.getZ() & 0xF));
+    public static int getIndex(net.minecraft.core.BlockPos $$0) {
+        return net.minecraft.client.renderer.chunk.VisGraph.getIndex((int)($$0.getX() & 0xF), (int)($$0.getY() & 0xF), (int)($$0.getZ() & 0xF));
     }
 
-    public static int getIndex(int x, int y, int z) {
-        return x << 0 | y << 8 | z << 4;
+    public static int getIndex(int $$0, int $$1, int $$2) {
+        return $$0 << 0 | $$1 << 8 | $$2 << 4;
     }
 
     public net.minecraft.client.renderer.chunk.VisibilitySet resolve() {
@@ -54,82 +54,82 @@
         return $$0;
     }
 
-    public java.util.Set<net.minecraft.core.Direction> floodFill(int pos) {
-        java.util.EnumSet enumSet = java.util.EnumSet.noneOf(net.minecraft.core.Direction.class);
-        it.unimi.dsi.fastutil.ints.IntArrayFIFOQueue intArrayFIFOQueue = new it.unimi.dsi.fastutil.ints.IntArrayFIFOQueue();
-        intArrayFIFOQueue.enqueue(pos);
-        this.bitSet.set(pos, true);
-        while (!intArrayFIFOQueue.isEmpty()) {
-            int n = intArrayFIFOQueue.dequeueInt();
-            this.addEdges(n, (java.util.Set)enumSet);
-            for (net.minecraft.core.Direction direction : DIRECTIONS) {
-                int n2 = this.getNeighborIndexAtFace(n, direction);
-                if (n2 < 0 || this.bitSet.get(n2)) continue;
-                this.bitSet.set(n2, true);
-                intArrayFIFOQueue.enqueue(n2);
+    public java.util.Set<net.minecraft.core.Direction> floodFill(int $$0) {
+        java.util.EnumSet $$1 = java.util.EnumSet.noneOf(net.minecraft.core.Direction.class);
+        it.unimi.dsi.fastutil.ints.IntArrayFIFOQueue $$2 = new it.unimi.dsi.fastutil.ints.IntArrayFIFOQueue();
+        $$2.enqueue($$0);
+        this.bitSet.set($$0, true);
+        while (!$$2.isEmpty()) {
+            int $$3 = $$2.dequeueInt();
+            this.addEdges($$3, (java.util.Set)$$1);
+            for (net.minecraft.core.Direction $$4 : DIRECTIONS) {
+                int $$5 = this.getNeighborIndexAtFace($$3, $$4);
+                if ($$5 < 0 || this.bitSet.get($$5)) continue;
+                this.bitSet.set($$5, true);
+                $$2.enqueue($$5);
             }
         }
-        return enumSet;
+        return $$1;
     }
 
-    public void addEdges(int pos, java.util.Set<net.minecraft.core.Direction> setFacings) {
-        int n = pos >> 0 & 0xF;
-        if (n == 0) {
-            setFacings.add((java.lang.Object)net.minecraft.core.Direction.WEST);
-        } else if (n == 15) {
-            setFacings.add((java.lang.Object)net.minecraft.core.Direction.EAST);
+    public void addEdges(int $$0, java.util.Set<net.minecraft.core.Direction> $$1) {
+        int $$2 = $$0 >> 0 & 0xF;
+        if ($$2 == 0) {
+            $$1.add((java.lang.Object)net.minecraft.core.Direction.WEST);
+        } else if ($$2 == 15) {
+            $$1.add((java.lang.Object)net.minecraft.core.Direction.EAST);
         }
-        int n2 = pos >> 8 & 0xF;
-        if (n2 == 0) {
-            setFacings.add((java.lang.Object)net.minecraft.core.Direction.DOWN);
-        } else if (n2 == 15) {
-            setFacings.add((java.lang.Object)net.minecraft.core.Direction.UP);
+        int $$3 = $$0 >> 8 & 0xF;
+        if ($$3 == 0) {
+            $$1.add((java.lang.Object)net.minecraft.core.Direction.DOWN);
+        } else if ($$3 == 15) {
+            $$1.add((java.lang.Object)net.minecraft.core.Direction.UP);
         }
-        int n3 = pos >> 4 & 0xF;
-        if (n3 == 0) {
-            setFacings.add((java.lang.Object)net.minecraft.core.Direction.NORTH);
-        } else if (n3 == 15) {
-            setFacings.add((java.lang.Object)net.minecraft.core.Direction.SOUTH);
+        int $$4 = $$0 >> 4 & 0xF;
+        if ($$4 == 0) {
+            $$1.add((java.lang.Object)net.minecraft.core.Direction.NORTH);
+        } else if ($$4 == 15) {
+            $$1.add((java.lang.Object)net.minecraft.core.Direction.SOUTH);
         }
     }
 
-    public int getNeighborIndexAtFace(int pos, net.minecraft.core.Direction facing) {
-        switch (net.minecraft.client.renderer.chunk.VisGraph$1.$SwitchMap$net$minecraft$core$Direction[facing.ordinal()]) {
+    public int getNeighborIndexAtFace(int $$0, net.minecraft.core.Direction $$1) {
+        switch (net.minecraft.client.renderer.chunk.VisGraph$1.$SwitchMap$net$minecraft$core$Direction[$$1.ordinal()]) {
             case 1: {
-                if ((pos >> 8 & 0xF) == 0) {
+                if (($$0 >> 8 & 0xF) == 0) {
                     return -1;
                 }
-                return pos - DY;
+                return $$0 - DY;
             }
             case 2: {
-                if ((pos >> 8 & 0xF) == 15) {
+                if (($$0 >> 8 & 0xF) == 15) {
                     return -1;
                 }
-                return pos + DY;
+                return $$0 + DY;
             }
             case 3: {
-                if ((pos >> 4 & 0xF) == 0) {
+                if (($$0 >> 4 & 0xF) == 0) {
                     return -1;
                 }
-                return pos - DZ;
+                return $$0 - DZ;
             }
             case 4: {
-                if ((pos >> 4 & 0xF) == 15) {
+                if (($$0 >> 4 & 0xF) == 15) {
                     return -1;
                 }
-                return pos + DZ;
+                return $$0 + DZ;
             }
             case 5: {
-                if ((pos >> 0 & 0xF) == 0) {
+                if (($$0 >> 0 & 0xF) == 0) {
                     return -1;
                 }
-                return pos - DX;
+                return $$0 - DX;
             }
             case 6: {
-                if ((pos >> 0 & 0xF) == 15) {
+                if (($$0 >> 0 & 0xF) == 15) {
                     return -1;
                 }
-                return pos + DX;
+                return $$0 + DX;
             }
         }
         return -1;