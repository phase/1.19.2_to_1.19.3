--- net/minecraft/client/renderer/chunk/ChunkRenderDispatcher$RenderChunk.java
+++ net/minecraft/client/renderer/chunk/ChunkRenderDispatcher$RenderChunk.java
@@ -39,8 +39,8 @@
         this.setOrigin($$2, $$3, $$4);
     }
 
-    public boolean doesChunkExistAt(net.minecraft.core.BlockPos blockPos) {
-        return this.this$0.level.getChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)blockPos.getX()), net.minecraft.core.SectionPos.blockToSectionCoord((int)blockPos.getZ()), net.minecraft.world.level.chunk.ChunkStatus.FULL, false) != null;
+    public boolean doesChunkExistAt(net.minecraft.core.BlockPos $$0) {
+        return this.this$0.level.getChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getX()), net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getZ()), net.minecraft.world.level.chunk.ChunkStatus.FULL, false) != null;
     }
 
     public boolean hasAllNeighbors() {
@@ -55,16 +55,16 @@
         return this.bb;
     }
 
-    public com.mojang.blaze3d.vertex.VertexBuffer getBuffer(net.minecraft.client.renderer.RenderType renderType) {
-        return (com.mojang.blaze3d.vertex.VertexBuffer)this.buffers.get((java.lang.Object)renderType);
+    public com.mojang.blaze3d.vertex.VertexBuffer getBuffer(net.minecraft.client.renderer.RenderType $$0) {
+        return (com.mojang.blaze3d.vertex.VertexBuffer)this.buffers.get((java.lang.Object)$$0);
     }
 
-    public void setOrigin(int x, int y, int z) {
+    public void setOrigin(int $$0, int $$1, int $$2) {
         this.reset();
-        this.origin.set(x, y, z);
-        this.bb = new net.minecraft.world.phys.AABB((double)x, (double)y, (double)z, (double)(x + 16), (double)(y + 16), (double)(z + 16));
-        for (net.minecraft.core.Direction direction : net.minecraft.core.Direction.values()) {
-            this.relativeOrigins[direction.ordinal()].set((net.minecraft.core.Vec3i)this.origin).move(direction, 16);
+        this.origin.set($$0, $$1, $$2);
+        this.bb = new net.minecraft.world.phys.AABB((double)$$0, (double)$$1, (double)$$2, (double)($$0 + 16), (double)($$1 + 16), (double)($$2 + 16));
+        for (net.minecraft.core.Direction $$3 : net.minecraft.core.Direction.values()) {
+            this.relativeOrigins[$$3.ordinal()].set((net.minecraft.core.Vec3i)this.origin).move($$3, 16);
         }
     }
 
@@ -76,8 +76,8 @@
         return $$1 * $$1 + $$2 * $$2 + $$3 * $$3;
     }
 
-    public void beginLayer(com.mojang.blaze3d.vertex.BufferBuilder bufferBuilder) {
-        bufferBuilder.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.QUADS, com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK);
+    public void beginLayer(com.mojang.blaze3d.vertex.BufferBuilder $$0) {
+        $$0.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.QUADS, com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK);
     }
 
     public net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$CompiledChunk getCompiledChunk() {
@@ -99,10 +99,10 @@
         return this.origin;
     }
 
-    public void setDirty(boolean immediate) {
-        boolean bl = this.dirty;
+    public void setDirty(boolean $$0) {
+        boolean $$1 = this.dirty;
         this.dirty = true;
-        this.playerChanged = immediate | (bl && this.playerChanged);
+        this.playerChanged = $$0 | ($$1 && this.playerChanged);
     }
 
     public void setNotDirty() {
@@ -118,20 +118,20 @@
         return this.dirty && this.playerChanged;
     }
 
-    public net.minecraft.core.BlockPos getRelativeOrigin(net.minecraft.core.Direction facing) {
-        return this.relativeOrigins[facing.ordinal()];
+    public net.minecraft.core.BlockPos getRelativeOrigin(net.minecraft.core.Direction $$0) {
+        return this.relativeOrigins[$$0.ordinal()];
     }
 
-    public boolean resortTransparency(net.minecraft.client.renderer.RenderType renderType, net.minecraft.client.renderer.chunk.ChunkRenderDispatcher renderDispatcher) {
-        net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$CompiledChunk compiledChunk = this.getCompiledChunk();
+    public boolean resortTransparency(net.minecraft.client.renderer.RenderType $$0, net.minecraft.client.renderer.chunk.ChunkRenderDispatcher $$1) {
+        net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$CompiledChunk $$2 = this.getCompiledChunk();
         if (this.lastResortTransparencyTask != null) {
             this.lastResortTransparencyTask.cancel();
         }
-        if (!compiledChunk.hasBlocks.contains((java.lang.Object)renderType)) {
+        if (!$$2.hasBlocks.contains((java.lang.Object)$$0)) {
             return false;
         }
-        this.lastResortTransparencyTask = new net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk$ResortTransparencyTask(this, this.getDistToPlayerSqr(), compiledChunk);
-        renderDispatcher.schedule((net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk$ChunkCompileTask)this.lastResortTransparencyTask);
+        this.lastResortTransparencyTask = new net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk$ResortTransparencyTask(this, this.getDistToPlayerSqr(), $$2);
+        $$1.schedule((net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk$ChunkCompileTask)this.lastResortTransparencyTask);
         return true;
     }
 