--- net/minecraft/client/renderer/GameRenderer.java
+++ net/minecraft/client/renderer/GameRenderer.java
@@ -4,8 +4,7 @@
 package net.minecraft.client.renderer;
 
 public class net.minecraft.client.renderer.GameRenderer
-implements net.minecraft.server.packs.resources.ResourceManagerReloadListener,
-java.lang.AutoCloseable
+implements java.lang.AutoCloseable
  {
     public static net.minecraft.resources.ResourceLocation NAUSEA_LOCATION;
     public static org.slf4j.Logger LOGGER;
@@ -218,16 +217,16 @@
         this.effectActive = !this.effectActive;
     }
 
-    public void checkEntityPostEffect(@javax.annotation.Nullable net.minecraft.world.entity.Entity entity) {
+    public void checkEntityPostEffect(@javax.annotation.Nullable net.minecraft.world.entity.Entity $$0) {
         if (this.postEffect != null) {
             this.postEffect.close();
         }
         this.postEffect = null;
-        if (entity instanceof net.minecraft.world.entity.monster.Creeper) {
+        if ($$0 instanceof net.minecraft.world.entity.monster.Creeper) {
             this.loadEffect(new net.minecraft.resources.ResourceLocation("shaders/post/creeper.json"));
-        } else if (entity instanceof net.minecraft.world.entity.monster.Spider) {
+        } else if ($$0 instanceof net.minecraft.world.entity.monster.Spider) {
             this.loadEffect(new net.minecraft.resources.ResourceLocation("shaders/post/spider.json"));
-        } else if (entity instanceof net.minecraft.world.entity.monster.EnderMan) {
+        } else if ($$0 instanceof net.minecraft.world.entity.monster.EnderMan) {
             this.loadEffect(new net.minecraft.resources.ResourceLocation("shaders/post/invert.json"));
         }
     }
@@ -247,38 +246,29 @@
         }
     }
 
-    public void loadEffect(net.minecraft.resources.ResourceLocation resourceLocation) {
+    public void loadEffect(net.minecraft.resources.ResourceLocation $$0) {
         if (this.postEffect != null) {
             this.postEffect.close();
         }
         try {
-            this.postEffect = new net.minecraft.client.renderer.PostChain(this.minecraft.getTextureManager(), this.resourceManager, this.minecraft.getMainRenderTarget(), resourceLocation);
+            this.postEffect = new net.minecraft.client.renderer.PostChain(this.minecraft.getTextureManager(), this.resourceManager, this.minecraft.getMainRenderTarget(), $$0);
             this.postEffect.resize(this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight());
             this.effectActive = true;
         }
-        catch (java.io.IOException iOException) {
-            LOGGER.warn("Failed to load shader: {}", (java.lang.Object)resourceLocation, (java.lang.Object)((java.lang.Object)iOException));
+        catch (java.io.IOException $$1) {
+            LOGGER.warn("Failed to load shader: {}", (java.lang.Object)$$0, (java.lang.Object)((java.lang.Object)$$1));
             this.effectIndex = EFFECT_NONE;
             this.effectActive = false;
         }
-        catch (com.google.gson.JsonSyntaxException jsonSyntaxException) {
-            LOGGER.warn("Failed to parse shader: {}", (java.lang.Object)resourceLocation, (java.lang.Object)((java.lang.Object)jsonSyntaxException));
+        catch (com.google.gson.JsonSyntaxException $$2) {
+            LOGGER.warn("Failed to parse shader: {}", (java.lang.Object)$$0, (java.lang.Object)((java.lang.Object)$$2));
             this.effectIndex = EFFECT_NONE;
             this.effectActive = false;
         }
     }
 
-    public void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager resourceManager) {
-        this.reloadShaders(resourceManager);
-        if (this.postEffect != null) {
-            this.postEffect.close();
-        }
-        this.postEffect = null;
-        if (this.effectIndex == EFFECT_NONE) {
-            this.checkEntityPostEffect(this.minecraft.getCameraEntity());
-        } else {
-            this.loadEffect(EFFECTS[this.effectIndex]);
-        }
+    public net.minecraft.server.packs.resources.PreparableReloadListener createReloadListener() {
+        return new /* Unavailable Anonymous Inner Class!! */;
     }
 
     public void preloadUiShader(net.minecraft.server.packs.resources.ResourceProvider $$0) {
@@ -310,7 +300,7 @@
         }
     }
 
-    public void reloadShaders(net.minecraft.server.packs.resources.ResourceManager $$02) {
+    public void reloadShaders(net.minecraft.server.packs.resources.ResourceProvider $$02) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
         java.util.ArrayList $$1 = com.google.common.collect.Lists.newArrayList();
         $$1.addAll(com.mojang.blaze3d.shaders.Program$Type.FRAGMENT.getPrograms().values());
@@ -318,169 +308,169 @@
         $$1.forEach(com.mojang.blaze3d.shaders.Program::close);
         java.util.ArrayList $$2 = com.google.common.collect.Lists.newArrayListWithCapacity((int)this.shaders.size());
         try {
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "block", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "block", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 blockShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "new_entity", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "new_entity", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 newEntityShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "particle", com.mojang.blaze3d.vertex.DefaultVertexFormat.PARTICLE), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "particle", com.mojang.blaze3d.vertex.DefaultVertexFormat.PARTICLE), $$0 -> {
                 particleShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION), $$0 -> {
                 positionShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position_color", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position_color", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR), $$0 -> {
                 positionColorShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position_color_lightmap", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_LIGHTMAP), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position_color_lightmap", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_LIGHTMAP), $$0 -> {
                 positionColorLightmapShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position_color_tex", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position_color_tex", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX), $$0 -> {
                 positionColorTexShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position_color_tex_lightmap", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position_color_tex_lightmap", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
                 positionColorTexLightmapShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position_tex", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position_tex", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
                 positionTexShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position_tex_color", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_COLOR), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position_tex_color", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_COLOR), $$0 -> {
                 positionTexColorShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position_tex_color_normal", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position_tex_color_normal", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL), $$0 -> {
                 positionTexColorNormalShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "position_tex_lightmap_color", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_LIGHTMAP_COLOR), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "position_tex_lightmap_color", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_LIGHTMAP_COLOR), $$0 -> {
                 positionTexLightmapColorShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_solid", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_solid", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeSolidShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_cutout_mipped", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_cutout_mipped", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeCutoutMippedShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_cutout", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_cutout", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeCutoutShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_translucent", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_translucent", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeTranslucentShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_translucent_moving_block", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_translucent_moving_block", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeTranslucentMovingBlockShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_translucent_no_crumbling", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_translucent_no_crumbling", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeTranslucentNoCrumblingShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_armor_cutout_no_cull", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_armor_cutout_no_cull", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeArmorCutoutNoCullShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_solid", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_solid", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntitySolidShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_cutout", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_cutout", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityCutoutShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_cutout_no_cull", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_cutout_no_cull", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityCutoutNoCullShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_cutout_no_cull_z_offset", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_cutout_no_cull_z_offset", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityCutoutNoCullZOffsetShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_item_entity_translucent_cull", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_item_entity_translucent_cull", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeItemEntityTranslucentCullShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_translucent_cull", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_translucent_cull", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityTranslucentCullShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_translucent", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_translucent", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityTranslucentShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_translucent_emissive", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_translucent_emissive", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityTranslucentEmissiveShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_smooth_cutout", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_smooth_cutout", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntitySmoothCutoutShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_beacon_beam", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_beacon_beam", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeBeaconBeamShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_decal", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_decal", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityDecalShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_no_outline", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_no_outline", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityNoOutlineShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_shadow", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_shadow", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityShadowShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_alpha", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_alpha", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEntityAlphaShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_eyes", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_eyes", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEyesShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_energy_swirl", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_energy_swirl", com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY), $$0 -> {
                 rendertypeEnergySwirlShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_leash", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_LIGHTMAP), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_leash", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_LIGHTMAP), $$0 -> {
                 rendertypeLeashShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_water_mask", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_water_mask", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION), $$0 -> {
                 rendertypeWaterMaskShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_outline", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_outline", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX), $$0 -> {
                 rendertypeOutlineShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_armor_glint", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_armor_glint", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
                 rendertypeArmorGlintShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_armor_entity_glint", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_armor_entity_glint", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
                 rendertypeArmorEntityGlintShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_glint_translucent", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_glint_translucent", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
                 rendertypeGlintTranslucentShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_glint", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_glint", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
                 rendertypeGlintShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_glint_direct", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_glint_direct", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
                 rendertypeGlintDirectShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_glint", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_glint", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
                 rendertypeEntityGlintShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_entity_glint_direct", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_entity_glint_direct", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX), $$0 -> {
                 rendertypeEntityGlintDirectShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_text", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_text", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
                 rendertypeTextShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_text_intensity", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_text_intensity", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
                 rendertypeTextIntensityShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_text_see_through", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_text_see_through", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
                 rendertypeTextSeeThroughShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_text_intensity_see_through", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_text_intensity_see_through", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_TEX_LIGHTMAP), $$0 -> {
                 rendertypeTextIntensitySeeThroughShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_lightning", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_lightning", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR), $$0 -> {
                 rendertypeLightningShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_tripwire", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_tripwire", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeTripwireShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_end_portal", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_end_portal", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION), $$0 -> {
                 rendertypeEndPortalShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_end_gateway", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_end_gateway", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION), $$0 -> {
                 rendertypeEndGatewayShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_lines", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_NORMAL), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_lines", com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_COLOR_NORMAL), $$0 -> {
                 rendertypeLinesShader = $$0;
             }));
-            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance((net.minecraft.server.packs.resources.ResourceProvider)$$02, "rendertype_crumbling", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
+            $$2.add((java.lang.Object)com.mojang.datafixers.util.Pair.of((java.lang.Object)new net.minecraft.client.renderer.ShaderInstance($$02, "rendertype_crumbling", com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK), $$0 -> {
                 rendertypeCrumblingShader = $$0;
             }));
         }
@@ -542,16 +532,16 @@
         return this.postEffect;
     }
 
-    public void resize(int width, int height) {
+    public void resize(int $$0, int $$1) {
         if (this.postEffect != null) {
-            this.postEffect.resize(width, height);
+            this.postEffect.resize($$0, $$1);
         }
-        this.minecraft.levelRenderer.resize(width, height);
+        this.minecraft.levelRenderer.resize($$0, $$1);
     }
 
-    public void pick(float partialTicks) {
-        net.minecraft.world.entity.Entity entity = this.minecraft.getCameraEntity();
-        if (entity == null) {
+    public void pick(float $$02) {
+        net.minecraft.world.entity.Entity $$1 = this.minecraft.getCameraEntity();
+        if ($$1 == null) {
             return;
         }
         if (this.minecraft.level == null) {
@@ -559,39 +549,39 @@
         }
         this.minecraft.getProfiler().push("pick");
         this.minecraft.crosshairPickEntity = null;
-        double d = this.minecraft.gameMode.getPickRange();
-        this.minecraft.hitResult = entity.pick(d, partialTicks, false);
-        net.minecraft.world.phys.Vec3 vec3 = entity.getEyePosition(partialTicks);
-        boolean bl = false;
-        int n = 3;
-        double d2 = d;
+        double $$2 = this.minecraft.gameMode.getPickRange();
+        this.minecraft.hitResult = $$1.pick($$2, $$02, false);
+        net.minecraft.world.phys.Vec3 $$3 = $$1.getEyePosition($$02);
+        boolean $$4 = false;
+        int $$5 = 3;
+        double $$6 = $$2;
         if (this.minecraft.gameMode.hasFarPickRange()) {
-            d = d2 = 6.0;
+            $$2 = $$6 = 6.0;
         } else {
-            if (d2 > 3.0) {
-                bl = true;
+            if ($$6 > 3.0) {
+                $$4 = true;
             }
-            d = d2;
+            $$2 = $$6;
         }
-        d2 *= d2;
+        $$6 *= $$6;
         if (this.minecraft.hitResult != null) {
-            d2 = this.minecraft.hitResult.getLocation().distanceToSqr(vec3);
+            $$6 = this.minecraft.hitResult.getLocation().distanceToSqr($$3);
         }
-        net.minecraft.world.phys.Vec3 vec32 = entity.getViewVector(1.0f);
-        net.minecraft.world.phys.Vec3 vec33 = vec3.add(vec32.x * d, vec32.y * d, vec32.z * d);
-        float f = 1.0f;
-        net.minecraft.world.phys.AABB aABB = entity.getBoundingBox().expandTowards(vec32.scale(d)).inflate(1.0, 1.0, 1.0);
-        net.minecraft.world.phys.EntityHitResult entityHitResult = net.minecraft.world.entity.projectile.ProjectileUtil.getEntityHitResult((net.minecraft.world.entity.Entity)entity, (net.minecraft.world.phys.Vec3)vec3, (net.minecraft.world.phys.Vec3)vec33, (net.minecraft.world.phys.AABB)aABB, $$0 -> !$$0.isSpectator() && $$0.isPickable(), (double)d2);
-        if (entityHitResult != null) {
-            net.minecraft.world.entity.Entity entity2 = entityHitResult.getEntity();
-            net.minecraft.world.phys.Vec3 vec34 = entityHitResult.getLocation();
-            double d3 = vec3.distanceToSqr(vec34);
-            if (bl && d3 > 9.0) {
-                this.minecraft.hitResult = net.minecraft.world.phys.BlockHitResult.miss((net.minecraft.world.phys.Vec3)vec34, (net.minecraft.core.Direction)net.minecraft.core.Direction.getNearest((double)vec32.x, (double)vec32.y, (double)vec32.z), (net.minecraft.core.BlockPos)new net.minecraft.core.BlockPos(vec34));
-            } else if (d3 < d2 || this.minecraft.hitResult == null) {
-                this.minecraft.hitResult = entityHitResult;
-                if (entity2 instanceof net.minecraft.world.entity.LivingEntity || entity2 instanceof net.minecraft.world.entity.decoration.ItemFrame) {
-                    this.minecraft.crosshairPickEntity = entity2;
+        net.minecraft.world.phys.Vec3 $$7 = $$1.getViewVector(1.0f);
+        net.minecraft.world.phys.Vec3 $$8 = $$3.add($$7.x * $$2, $$7.y * $$2, $$7.z * $$2);
+        float $$9 = 1.0f;
+        net.minecraft.world.phys.AABB $$10 = $$1.getBoundingBox().expandTowards($$7.scale($$2)).inflate(1.0, 1.0, 1.0);
+        net.minecraft.world.phys.EntityHitResult $$11 = net.minecraft.world.entity.projectile.ProjectileUtil.getEntityHitResult((net.minecraft.world.entity.Entity)$$1, (net.minecraft.world.phys.Vec3)$$3, (net.minecraft.world.phys.Vec3)$$8, (net.minecraft.world.phys.AABB)$$10, $$0 -> !$$0.isSpectator() && $$0.isPickable(), (double)$$6);
+        if ($$11 != null) {
+            net.minecraft.world.entity.Entity $$12 = $$11.getEntity();
+            net.minecraft.world.phys.Vec3 $$13 = $$11.getLocation();
+            double $$14 = $$3.distanceToSqr($$13);
+            if ($$4 && $$14 > 9.0) {
+                this.minecraft.hitResult = net.minecraft.world.phys.BlockHitResult.miss((net.minecraft.world.phys.Vec3)$$13, (net.minecraft.core.Direction)net.minecraft.core.Direction.getNearest((double)$$7.x, (double)$$7.y, (double)$$7.z), (net.minecraft.core.BlockPos)new net.minecraft.core.BlockPos($$13));
+            } else if ($$14 < $$6 || this.minecraft.hitResult == null) {
+                this.minecraft.hitResult = $$11;
+                if ($$12 instanceof net.minecraft.world.entity.LivingEntity || $$12 instanceof net.minecraft.world.entity.decoration.ItemFrame) {
+                    this.minecraft.crosshairPickEntity = $$12;
                 }
             }
         }
@@ -614,58 +604,57 @@
         }
     }
 
-    public double getFov(net.minecraft.client.Camera activeRenderInfo, float partialTicks, boolean useFOVSetting) {
-        net.minecraft.world.level.material.FogType fogType;
+    public double getFov(net.minecraft.client.Camera $$0, float $$1, boolean $$2) {
+        net.minecraft.world.level.material.FogType $$5;
         if (this.panoramicMode) {
             return 90.0;
         }
-        double d = 70.0;
-        if (useFOVSetting) {
-            d = ((java.lang.Integer)this.minecraft.options.fov().get()).intValue();
-            d *= (double)net.minecraft.util.Mth.lerp((float)partialTicks, (float)this.oldFov, (float)this.fov);
+        double $$3 = 70.0;
+        if ($$2) {
+            $$3 = ((java.lang.Integer)this.minecraft.options.fov().get()).intValue();
+            $$3 *= (double)net.minecraft.util.Mth.lerp((float)$$1, (float)this.oldFov, (float)this.fov);
         }
-        if (activeRenderInfo.getEntity() instanceof net.minecraft.world.entity.LivingEntity && ((net.minecraft.world.entity.LivingEntity)activeRenderInfo.getEntity()).isDeadOrDying()) {
-            float f = java.lang.Math.min((float)((float)((net.minecraft.world.entity.LivingEntity)activeRenderInfo.getEntity()).deathTime + partialTicks), (float)20.0f);
-            d /= (double)((1.0f - 500.0f / (f + 500.0f)) * 2.0f + 1.0f);
+        if ($$0.getEntity() instanceof net.minecraft.world.entity.LivingEntity && ((net.minecraft.world.entity.LivingEntity)$$0.getEntity()).isDeadOrDying()) {
+            float $$4 = java.lang.Math.min((float)((float)((net.minecraft.world.entity.LivingEntity)$$0.getEntity()).deathTime + $$1), (float)20.0f);
+            $$3 /= (double)((1.0f - 500.0f / ($$4 + 500.0f)) * 2.0f + 1.0f);
         }
-        if ((fogType = activeRenderInfo.getFluidInCamera()) == net.minecraft.world.level.material.FogType.LAVA || fogType == net.minecraft.world.level.material.FogType.WATER) {
-            d *= net.minecraft.util.Mth.lerp((double)((java.lang.Double)this.minecraft.options.fovEffectScale().get()), (double)1.0, (double)0.8571428656578064);
+        if (($$5 = $$0.getFluidInCamera()) == net.minecraft.world.level.material.FogType.LAVA || $$5 == net.minecraft.world.level.material.FogType.WATER) {
+            $$3 *= net.minecraft.util.Mth.lerp((double)((java.lang.Double)this.minecraft.options.fovEffectScale().get()), (double)1.0, (double)0.8571428656578064);
         }
-        return d;
+        return $$3;
     }
 
-    public void bobHurt(com.mojang.blaze3d.vertex.PoseStack matrixStack, float partialTicks) {
+    public void bobHurt(com.mojang.blaze3d.vertex.PoseStack $$0, float $$1) {
         if (this.minecraft.getCameraEntity() instanceof net.minecraft.world.entity.LivingEntity) {
-            float f;
-            net.minecraft.world.entity.LivingEntity livingEntity = (net.minecraft.world.entity.LivingEntity)this.minecraft.getCameraEntity();
-            float f2 = (float)livingEntity.hurtTime - partialTicks;
-            if (livingEntity.isDeadOrDying()) {
-                f = java.lang.Math.min((float)((float)livingEntity.deathTime + partialTicks), (float)20.0f);
-                matrixStack.mulPose(com.mojang.math.Vector3f.ZP.rotationDegrees(40.0f - 8000.0f / (f + 200.0f)));
+            net.minecraft.world.entity.LivingEntity $$2 = (net.minecraft.world.entity.LivingEntity)this.minecraft.getCameraEntity();
+            float $$3 = (float)$$2.hurtTime - $$1;
+            if ($$2.isDeadOrDying()) {
+                float $$4 = java.lang.Math.min((float)((float)$$2.deathTime + $$1), (float)20.0f);
+                $$0.mulPose(com.mojang.math.Vector3f.ZP.rotationDegrees(40.0f - 8000.0f / ($$4 + 200.0f)));
             }
-            if (f2 < 0.0f) {
+            if ($$3 < 0.0f) {
                 return;
             }
-            f2 /= (float)livingEntity.hurtDuration;
-            f2 = net.minecraft.util.Mth.sin((float)(f2 * f2 * f2 * f2 * (float)java.lang.Math.PI));
-            f = livingEntity.hurtDir;
-            matrixStack.mulPose(com.mojang.math.Vector3f.YP.rotationDegrees(-f));
-            matrixStack.mulPose(com.mojang.math.Vector3f.ZP.rotationDegrees(-f2 * 14.0f));
-            matrixStack.mulPose(com.mojang.math.Vector3f.YP.rotationDegrees(f));
+            $$3 /= (float)$$2.hurtDuration;
+            $$3 = net.minecraft.util.Mth.sin((float)($$3 * $$3 * $$3 * $$3 * (float)java.lang.Math.PI));
+            float $$5 = $$2.hurtDir;
+            $$0.mulPose(com.mojang.math.Vector3f.YP.rotationDegrees(-$$5));
+            $$0.mulPose(com.mojang.math.Vector3f.ZP.rotationDegrees(-$$3 * 14.0f));
+            $$0.mulPose(com.mojang.math.Vector3f.YP.rotationDegrees($$5));
         }
     }
 
-    public void bobView(com.mojang.blaze3d.vertex.PoseStack matrixStack, float partialTicks) {
+    public void bobView(com.mojang.blaze3d.vertex.PoseStack $$0, float $$1) {
         if (!(this.minecraft.getCameraEntity() instanceof net.minecraft.world.entity.player.Player)) {
             return;
         }
-        net.minecraft.world.entity.player.Player player = (net.minecraft.world.entity.player.Player)this.minecraft.getCameraEntity();
-        float f = player.walkDist - player.walkDistO;
-        float f2 = -(player.walkDist + f * partialTicks);
-        float f3 = net.minecraft.util.Mth.lerp((float)partialTicks, (float)player.oBob, (float)player.bob);
-        matrixStack.translate((double)(net.minecraft.util.Mth.sin((float)(f2 * (float)java.lang.Math.PI)) * f3 * 0.5f), (double)(-java.lang.Math.abs((float)(net.minecraft.util.Mth.cos((float)(f2 * (float)java.lang.Math.PI)) * f3))), 0.0);
-        matrixStack.mulPose(com.mojang.math.Vector3f.ZP.rotationDegrees(net.minecraft.util.Mth.sin((float)(f2 * (float)java.lang.Math.PI)) * f3 * 3.0f));
-        matrixStack.mulPose(com.mojang.math.Vector3f.XP.rotationDegrees(java.lang.Math.abs((float)(net.minecraft.util.Mth.cos((float)(f2 * (float)java.lang.Math.PI - 0.2f)) * f3)) * 5.0f));
+        net.minecraft.world.entity.player.Player $$2 = (net.minecraft.world.entity.player.Player)this.minecraft.getCameraEntity();
+        float $$3 = $$2.walkDist - $$2.walkDistO;
+        float $$4 = -($$2.walkDist + $$3 * $$1);
+        float $$5 = net.minecraft.util.Mth.lerp((float)$$1, (float)$$2.oBob, (float)$$2.bob);
+        $$0.translate((double)(net.minecraft.util.Mth.sin((float)($$4 * (float)java.lang.Math.PI)) * $$5 * 0.5f), (double)(-java.lang.Math.abs((float)(net.minecraft.util.Mth.cos((float)($$4 * (float)java.lang.Math.PI)) * $$5))), 0.0);
+        $$0.mulPose(com.mojang.math.Vector3f.ZP.rotationDegrees(net.minecraft.util.Mth.sin((float)($$4 * (float)java.lang.Math.PI)) * $$5 * 3.0f));
+        $$0.mulPose(com.mojang.math.Vector3f.XP.rotationDegrees(java.lang.Math.abs((float)(net.minecraft.util.Mth.cos((float)($$4 * (float)java.lang.Math.PI - 0.2f)) * $$5)) * 5.0f));
     }
 
     public void renderZoomed(float $$0, float $$1, float $$2) {
@@ -678,38 +667,38 @@
         this.zoom = 1.0f;
     }
 
-    public void renderItemInHand(com.mojang.blaze3d.vertex.PoseStack matrixStack, net.minecraft.client.Camera activeRenderInfo, float partialTicks) {
-        boolean bl;
+    public void renderItemInHand(com.mojang.blaze3d.vertex.PoseStack $$0, net.minecraft.client.Camera $$1, float $$2) {
+        boolean $$4;
         if (this.panoramicMode) {
             return;
         }
-        this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(activeRenderInfo, partialTicks, false)));
-        com.mojang.blaze3d.vertex.PoseStack$Pose pose = matrixStack.last();
-        pose.pose().setIdentity();
-        pose.normal().setIdentity();
-        matrixStack.pushPose();
-        this.bobHurt(matrixStack, partialTicks);
+        this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov($$1, $$2, false)));
+        com.mojang.blaze3d.vertex.PoseStack$Pose $$3 = $$0.last();
+        $$3.pose().setIdentity();
+        $$3.normal().setIdentity();
+        $$0.pushPose();
+        this.bobHurt($$0, $$2);
         if (((java.lang.Boolean)this.minecraft.options.bobView().get()).booleanValue()) {
-            this.bobView(matrixStack, partialTicks);
+            this.bobView($$0, $$2);
         }
-        boolean bl2 = bl = this.minecraft.getCameraEntity() instanceof net.minecraft.world.entity.LivingEntity && ((net.minecraft.world.entity.LivingEntity)this.minecraft.getCameraEntity()).isSleeping();
-        if (this.minecraft.options.getCameraType().isFirstPerson() && !bl && !this.minecraft.options.hideGui && this.minecraft.gameMode.getPlayerMode() != net.minecraft.world.level.GameType.SPECTATOR) {
+        boolean bl = $$4 = this.minecraft.getCameraEntity() instanceof net.minecraft.world.entity.LivingEntity && ((net.minecraft.world.entity.LivingEntity)this.minecraft.getCameraEntity()).isSleeping();
+        if (this.minecraft.options.getCameraType().isFirstPerson() && !$$4 && !this.minecraft.options.hideGui && this.minecraft.gameMode.getPlayerMode() != net.minecraft.world.level.GameType.SPECTATOR) {
             this.lightTexture.turnOnLightLayer();
-            this.itemInHandRenderer.renderHandsWithItems(partialTicks, matrixStack, this.renderBuffers.bufferSource(), this.minecraft.player, this.minecraft.getEntityRenderDispatcher().getPackedLightCoords((net.minecraft.world.entity.Entity)this.minecraft.player, partialTicks));
+            this.itemInHandRenderer.renderHandsWithItems($$2, $$0, this.renderBuffers.bufferSource(), this.minecraft.player, this.minecraft.getEntityRenderDispatcher().getPackedLightCoords((net.minecraft.world.entity.Entity)this.minecraft.player, $$2));
             this.lightTexture.turnOffLightLayer();
         }
-        matrixStack.popPose();
-        if (this.minecraft.options.getCameraType().isFirstPerson() && !bl) {
-            net.minecraft.client.renderer.ScreenEffectRenderer.renderScreenEffect((net.minecraft.client.Minecraft)this.minecraft, (com.mojang.blaze3d.vertex.PoseStack)matrixStack);
-            this.bobHurt(matrixStack, partialTicks);
+        $$0.popPose();
+        if (this.minecraft.options.getCameraType().isFirstPerson() && !$$4) {
+            net.minecraft.client.renderer.ScreenEffectRenderer.renderScreenEffect((net.minecraft.client.Minecraft)this.minecraft, (com.mojang.blaze3d.vertex.PoseStack)$$0);
+            this.bobHurt($$0, $$2);
         }
         if (((java.lang.Boolean)this.minecraft.options.bobView().get()).booleanValue()) {
-            this.bobView(matrixStack, partialTicks);
+            this.bobView($$0, $$2);
         }
     }
 
-    public void resetProjectionMatrix(com.mojang.math.Matrix4f matrix) {
-        com.mojang.blaze3d.systems.RenderSystem.setProjectionMatrix((com.mojang.math.Matrix4f)matrix);
+    public void resetProjectionMatrix(com.mojang.math.Matrix4f $$0) {
+        com.mojang.blaze3d.systems.RenderSystem.setProjectionMatrix((com.mojang.math.Matrix4f)$$0);
     }
 
     public com.mojang.math.Matrix4f getProjectionMatrix(double $$0) {
@@ -727,15 +716,15 @@
         return this.renderDistance * 4.0f;
     }
 
-    public static float getNightVisionScale(net.minecraft.world.entity.LivingEntity livingEntity, float nanoTime) {
-        int n = livingEntity.getEffect(net.minecraft.world.effect.MobEffects.NIGHT_VISION).getDuration();
-        if (n > 200) {
+    public static float getNightVisionScale(net.minecraft.world.entity.LivingEntity $$0, float $$1) {
+        int $$2 = $$0.getEffect(net.minecraft.world.effect.MobEffects.NIGHT_VISION).getDuration();
+        if ($$2 > 200) {
             return 1.0f;
         }
-        return 0.7f + net.minecraft.util.Mth.sin((float)(((float)n - nanoTime) * (float)java.lang.Math.PI * 0.2f)) * 0.3f;
+        return 0.7f + net.minecraft.util.Mth.sin((float)(((float)$$2 - $$1) * (float)java.lang.Math.PI * 0.2f)) * 0.3f;
     }
 
-    public void render(float partialTicks, long nanoTime, boolean renderLevel) {
+    public void render(float $$0, long $$1, boolean $$2) {
         if (this.minecraft.isWindowActive() || !this.minecraft.options.pauseOnLostFocus || ((java.lang.Boolean)this.minecraft.options.touchscreen().get()).booleanValue() && this.minecraft.mouseHandler.isRightPressed()) {
             this.lastActiveTime = net.minecraft.Util.getMillis();
         } else if (net.minecraft.Util.getMillis() - this.lastActiveTime > 500L) {
@@ -744,12 +733,12 @@
         if (this.minecraft.noRender) {
             return;
         }
-        int n = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
-        int n2 = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
+        int $$3 = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
+        int $$4 = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
         com.mojang.blaze3d.systems.RenderSystem.viewport((int)0, (int)0, (int)this.minecraft.getWindow().getWidth(), (int)this.minecraft.getWindow().getHeight());
-        if (renderLevel && this.minecraft.level != null) {
+        if ($$2 && this.minecraft.level != null) {
             this.minecraft.getProfiler().push("level");
-            this.renderLevel(partialTicks, nanoTime, new com.mojang.blaze3d.vertex.PoseStack());
+            this.renderLevel($$0, $$1, new com.mojang.blaze3d.vertex.PoseStack());
             this.tryTakeScreenshotIfNeeded();
             this.minecraft.levelRenderer.doEntityOutline();
             if (this.postEffect != null && this.effectActive) {
@@ -757,69 +746,69 @@
                 com.mojang.blaze3d.systems.RenderSystem.disableDepthTest();
                 com.mojang.blaze3d.systems.RenderSystem.enableTexture();
                 com.mojang.blaze3d.systems.RenderSystem.resetTextureMatrix();
-                this.postEffect.process(partialTicks);
+                this.postEffect.process($$0);
             }
             this.minecraft.getMainRenderTarget().bindWrite(true);
         }
-        com.mojang.blaze3d.platform.Window window = this.minecraft.getWindow();
+        com.mojang.blaze3d.platform.Window $$5 = this.minecraft.getWindow();
         com.mojang.blaze3d.systems.RenderSystem.clear((int)256, (boolean)net.minecraft.client.Minecraft.ON_OSX);
-        com.mojang.math.Matrix4f matrix4f = com.mojang.math.Matrix4f.orthographic((float)0.0f, (float)((float)((double)window.getWidth() / window.getGuiScale())), (float)0.0f, (float)((float)((double)window.getHeight() / window.getGuiScale())), (float)1000.0f, (float)3000.0f);
-        com.mojang.blaze3d.systems.RenderSystem.setProjectionMatrix((com.mojang.math.Matrix4f)matrix4f);
-        com.mojang.blaze3d.vertex.PoseStack poseStack = com.mojang.blaze3d.systems.RenderSystem.getModelViewStack();
-        poseStack.setIdentity();
-        poseStack.translate(0.0, 0.0, -2000.0);
+        com.mojang.math.Matrix4f $$6 = com.mojang.math.Matrix4f.orthographic((float)0.0f, (float)((float)((double)$$5.getWidth() / $$5.getGuiScale())), (float)0.0f, (float)((float)((double)$$5.getHeight() / $$5.getGuiScale())), (float)1000.0f, (float)3000.0f);
+        com.mojang.blaze3d.systems.RenderSystem.setProjectionMatrix((com.mojang.math.Matrix4f)$$6);
+        com.mojang.blaze3d.vertex.PoseStack $$7 = com.mojang.blaze3d.systems.RenderSystem.getModelViewStack();
+        $$7.setIdentity();
+        $$7.translate(0.0, 0.0, -2000.0);
         com.mojang.blaze3d.systems.RenderSystem.applyModelViewMatrix();
         com.mojang.blaze3d.platform.Lighting.setupFor3DItems();
-        com.mojang.blaze3d.vertex.PoseStack poseStack2 = new com.mojang.blaze3d.vertex.PoseStack();
-        if (renderLevel && this.minecraft.level != null) {
+        com.mojang.blaze3d.vertex.PoseStack $$8 = new com.mojang.blaze3d.vertex.PoseStack();
+        if ($$2 && this.minecraft.level != null) {
             this.minecraft.getProfiler().popPush("gui");
             if (this.minecraft.player != null) {
-                float f = net.minecraft.util.Mth.lerp((float)partialTicks, (float)this.minecraft.player.oPortalTime, (float)this.minecraft.player.portalTime);
-                float f2 = ((java.lang.Double)this.minecraft.options.screenEffectScale().get()).floatValue();
-                if (f > 0.0f && this.minecraft.player.hasEffect(net.minecraft.world.effect.MobEffects.CONFUSION) && f2 < 1.0f) {
-                    this.renderConfusionOverlay(f * (1.0f - f2));
+                float $$9 = net.minecraft.util.Mth.lerp((float)$$0, (float)this.minecraft.player.oPortalTime, (float)this.minecraft.player.portalTime);
+                float $$10 = ((java.lang.Double)this.minecraft.options.screenEffectScale().get()).floatValue();
+                if ($$9 > 0.0f && this.minecraft.player.hasEffect(net.minecraft.world.effect.MobEffects.CONFUSION) && $$10 < 1.0f) {
+                    this.renderConfusionOverlay($$9 * (1.0f - $$10));
                 }
             }
             if (!this.minecraft.options.hideGui || this.minecraft.screen != null) {
-                this.renderItemActivationAnimation(this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), partialTicks);
-                this.minecraft.gui.render(poseStack2, partialTicks);
+                this.renderItemActivationAnimation(this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), $$0);
+                this.minecraft.gui.render($$8, $$0);
                 com.mojang.blaze3d.systems.RenderSystem.clear((int)256, (boolean)net.minecraft.client.Minecraft.ON_OSX);
             }
             this.minecraft.getProfiler().pop();
         }
         if (this.minecraft.getOverlay() != null) {
             try {
-                this.minecraft.getOverlay().render(poseStack2, n, n2, this.minecraft.getDeltaFrameTime());
+                this.minecraft.getOverlay().render($$8, $$3, $$4, this.minecraft.getDeltaFrameTime());
             }
-            catch (java.lang.Throwable throwable) {
-                net.minecraft.CrashReport crashReport = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)throwable, (java.lang.String)"Rendering overlay");
-                net.minecraft.CrashReportCategory crashReportCategory = crashReport.addCategory("Overlay render details");
-                crashReportCategory.setDetail("Overlay name", () -> this.minecraft.getOverlay().getClass().getCanonicalName());
-                throw new net.minecraft.ReportedException(crashReport);
+            catch (java.lang.Throwable $$11) {
+                net.minecraft.CrashReport $$12 = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)$$11, (java.lang.String)"Rendering overlay");
+                net.minecraft.CrashReportCategory $$13 = $$12.addCategory("Overlay render details");
+                $$13.setDetail("Overlay name", () -> this.minecraft.getOverlay().getClass().getCanonicalName());
+                throw new net.minecraft.ReportedException($$12);
             }
         }
         if (this.minecraft.screen != null) {
             try {
-                this.minecraft.screen.render(poseStack2, n, n2, this.minecraft.getDeltaFrameTime());
+                this.minecraft.screen.render($$8, $$3, $$4, this.minecraft.getDeltaFrameTime());
             }
-            catch (java.lang.Throwable throwable) {
-                net.minecraft.CrashReport crashReport = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)throwable, (java.lang.String)"Rendering screen");
-                net.minecraft.CrashReportCategory crashReportCategory = crashReport.addCategory("Screen render details");
-                crashReportCategory.setDetail("Screen name", () -> this.minecraft.screen.getClass().getCanonicalName());
-                crashReportCategory.setDetail("Mouse location", () -> java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Scaled: (%d, %d). Absolute: (%f, %f)", (java.lang.Object[])new java.lang.Object[]{n, n2, this.minecraft.mouseHandler.xpos(), this.minecraft.mouseHandler.ypos()}));
-                crashReportCategory.setDetail("Screen size", () -> java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %f", (java.lang.Object[])new java.lang.Object[]{this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight(), this.minecraft.getWindow().getGuiScale()}));
-                throw new net.minecraft.ReportedException(crashReport);
+            catch (java.lang.Throwable $$14) {
+                net.minecraft.CrashReport $$15 = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)$$14, (java.lang.String)"Rendering screen");
+                net.minecraft.CrashReportCategory $$16 = $$15.addCategory("Screen render details");
+                $$16.setDetail("Screen name", () -> this.minecraft.screen.getClass().getCanonicalName());
+                $$16.setDetail("Mouse location", () -> java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Scaled: (%d, %d). Absolute: (%f, %f)", (java.lang.Object[])new java.lang.Object[]{$$3, $$4, this.minecraft.mouseHandler.xpos(), this.minecraft.mouseHandler.ypos()}));
+                $$16.setDetail("Screen size", () -> java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %f", (java.lang.Object[])new java.lang.Object[]{this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight(), this.minecraft.getWindow().getGuiScale()}));
+                throw new net.minecraft.ReportedException($$15);
             }
             try {
                 if (this.minecraft.screen != null) {
                     this.minecraft.screen.handleDelayedNarration();
                 }
             }
-            catch (java.lang.Throwable throwable) {
-                net.minecraft.CrashReport crashReport = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)throwable, (java.lang.String)"Narrating screen");
-                net.minecraft.CrashReportCategory crashReportCategory = crashReport.addCategory("Screen details");
-                crashReportCategory.setDetail("Screen name", () -> this.minecraft.screen.getClass().getCanonicalName());
-                throw new net.minecraft.ReportedException(crashReport);
+            catch (java.lang.Throwable $$17) {
+                net.minecraft.CrashReport $$18 = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)$$17, (java.lang.String)"Narrating screen");
+                net.minecraft.CrashReportCategory $$19 = $$18.addCategory("Screen details");
+                $$19.setDetail("Screen name", () -> this.minecraft.screen.getClass().getCanonicalName());
+                throw new net.minecraft.ReportedException($$18);
             }
         }
     }
@@ -901,51 +890,51 @@
         return $$1;
     }
 
-    public void renderLevel(float partialTicks, long finishTimeNano, com.mojang.blaze3d.vertex.PoseStack matrixStack) {
-        this.lightTexture.updateLightTexture(partialTicks);
+    public void renderLevel(float $$0, long $$1, com.mojang.blaze3d.vertex.PoseStack $$2) {
+        this.lightTexture.updateLightTexture($$0);
         if (this.minecraft.getCameraEntity() == null) {
             this.minecraft.setCameraEntity((net.minecraft.world.entity.Entity)this.minecraft.player);
         }
-        this.pick(partialTicks);
+        this.pick($$0);
         this.minecraft.getProfiler().push("center");
-        boolean bl = this.shouldRenderBlockOutline();
+        boolean $$3 = this.shouldRenderBlockOutline();
         this.minecraft.getProfiler().popPush("camera");
-        net.minecraft.client.Camera camera = this.mainCamera;
+        net.minecraft.client.Camera $$4 = this.mainCamera;
         this.renderDistance = this.minecraft.options.getEffectiveRenderDistance() * 16;
-        com.mojang.blaze3d.vertex.PoseStack poseStack = new com.mojang.blaze3d.vertex.PoseStack();
-        double d = this.getFov(camera, partialTicks, true);
-        poseStack.last().pose().multiply(this.getProjectionMatrix(d));
-        this.bobHurt(poseStack, partialTicks);
+        com.mojang.blaze3d.vertex.PoseStack $$5 = new com.mojang.blaze3d.vertex.PoseStack();
+        double $$6 = this.getFov($$4, $$0, true);
+        $$5.last().pose().multiply(this.getProjectionMatrix($$6));
+        this.bobHurt($$5, $$0);
         if (((java.lang.Boolean)this.minecraft.options.bobView().get()).booleanValue()) {
-            this.bobView(poseStack, partialTicks);
+            this.bobView($$5, $$0);
         }
-        float f = ((java.lang.Double)this.minecraft.options.screenEffectScale().get()).floatValue();
-        float f2 = net.minecraft.util.Mth.lerp((float)partialTicks, (float)this.minecraft.player.oPortalTime, (float)this.minecraft.player.portalTime) * (f * f);
-        if (f2 > 0.0f) {
-            int n = this.minecraft.player.hasEffect(net.minecraft.world.effect.MobEffects.CONFUSION) ? 7 : 20;
-            float f3 = 5.0f / (f2 * f2 + 5.0f) - f2 * 0.04f;
-            f3 *= f3;
-            com.mojang.math.Vector3f vector3f = new com.mojang.math.Vector3f(0.0f, net.minecraft.util.Mth.SQRT_OF_TWO / 2.0f, net.minecraft.util.Mth.SQRT_OF_TWO / 2.0f);
-            poseStack.mulPose(vector3f.rotationDegrees(((float)this.tick + partialTicks) * (float)n));
-            poseStack.scale(1.0f / f3, 1.0f, 1.0f);
-            float f4 = -((float)this.tick + partialTicks) * (float)n;
-            poseStack.mulPose(vector3f.rotationDegrees(f4));
+        float $$7 = ((java.lang.Double)this.minecraft.options.screenEffectScale().get()).floatValue();
+        float $$8 = net.minecraft.util.Mth.lerp((float)$$0, (float)this.minecraft.player.oPortalTime, (float)this.minecraft.player.portalTime) * ($$7 * $$7);
+        if ($$8 > 0.0f) {
+            int $$9 = this.minecraft.player.hasEffect(net.minecraft.world.effect.MobEffects.CONFUSION) ? 7 : 20;
+            float $$10 = 5.0f / ($$8 * $$8 + 5.0f) - $$8 * 0.04f;
+            $$10 *= $$10;
+            com.mojang.math.Vector3f $$11 = new com.mojang.math.Vector3f(0.0f, net.minecraft.util.Mth.SQRT_OF_TWO / 2.0f, net.minecraft.util.Mth.SQRT_OF_TWO / 2.0f);
+            $$5.mulPose($$11.rotationDegrees(((float)this.tick + $$0) * (float)$$9));
+            $$5.scale(1.0f / $$10, 1.0f, 1.0f);
+            float $$12 = -((float)this.tick + $$0) * (float)$$9;
+            $$5.mulPose($$11.rotationDegrees($$12));
         }
-        com.mojang.math.Matrix4f matrix4f = poseStack.last().pose();
-        this.resetProjectionMatrix(matrix4f);
-        camera.setup((net.minecraft.world.level.BlockGetter)this.minecraft.level, (net.minecraft.world.entity.Entity)(this.minecraft.getCameraEntity() == null ? this.minecraft.player : this.minecraft.getCameraEntity()), !this.minecraft.options.getCameraType().isFirstPerson(), this.minecraft.options.getCameraType().isMirrored(), partialTicks);
-        matrixStack.mulPose(com.mojang.math.Vector3f.XP.rotationDegrees(camera.getXRot()));
-        matrixStack.mulPose(com.mojang.math.Vector3f.YP.rotationDegrees(camera.getYRot() + 180.0f));
-        com.mojang.math.Matrix3f matrix3f = matrixStack.last().normal().copy();
-        if (matrix3f.invert()) {
-            com.mojang.blaze3d.systems.RenderSystem.setInverseViewRotationMatrix((com.mojang.math.Matrix3f)matrix3f);
+        com.mojang.math.Matrix4f $$13 = $$5.last().pose();
+        this.resetProjectionMatrix($$13);
+        $$4.setup((net.minecraft.world.level.BlockGetter)this.minecraft.level, (net.minecraft.world.entity.Entity)(this.minecraft.getCameraEntity() == null ? this.minecraft.player : this.minecraft.getCameraEntity()), !this.minecraft.options.getCameraType().isFirstPerson(), this.minecraft.options.getCameraType().isMirrored(), $$0);
+        $$2.mulPose(com.mojang.math.Vector3f.XP.rotationDegrees($$4.getXRot()));
+        $$2.mulPose(com.mojang.math.Vector3f.YP.rotationDegrees($$4.getYRot() + 180.0f));
+        com.mojang.math.Matrix3f $$14 = $$2.last().normal().copy();
+        if ($$14.invert()) {
+            com.mojang.blaze3d.systems.RenderSystem.setInverseViewRotationMatrix((com.mojang.math.Matrix3f)$$14);
         }
-        this.minecraft.levelRenderer.prepareCullFrustum(matrixStack, camera.getPosition(), this.getProjectionMatrix(java.lang.Math.max((double)d, (double)((java.lang.Integer)this.minecraft.options.fov().get()).intValue())));
-        this.minecraft.levelRenderer.renderLevel(matrixStack, partialTicks, finishTimeNano, bl, camera, this, this.lightTexture, matrix4f);
+        this.minecraft.levelRenderer.prepareCullFrustum($$2, $$4.getPosition(), this.getProjectionMatrix(java.lang.Math.max((double)$$6, (double)((java.lang.Integer)this.minecraft.options.fov().get()).intValue())));
+        this.minecraft.levelRenderer.renderLevel($$2, $$0, $$1, $$3, $$4, this, this.lightTexture, $$13);
         this.minecraft.getProfiler().popPush("hand");
         if (this.renderHand) {
             com.mojang.blaze3d.systems.RenderSystem.clear((int)256, (boolean)net.minecraft.client.Minecraft.ON_OSX);
-            this.renderItemInHand(matrixStack, camera, partialTicks);
+            this.renderItemInHand($$2, $$4, $$0);
         }
         this.minecraft.getProfiler().pop();
     }
@@ -961,39 +950,39 @@
         return this.mapRenderer;
     }
 
-    public void displayItemActivation(net.minecraft.world.item.ItemStack stack) {
-        this.itemActivationItem = stack;
+    public void displayItemActivation(net.minecraft.world.item.ItemStack $$0) {
+        this.itemActivationItem = $$0;
         this.itemActivationTicks = 40;
         this.itemActivationOffX = this.random.nextFloat() * 2.0f - 1.0f;
         this.itemActivationOffY = this.random.nextFloat() * 2.0f - 1.0f;
     }
 
-    public void renderItemActivationAnimation(int widthsp, int heightScaled, float partialTicks) {
+    public void renderItemActivationAnimation(int $$0, int $$1, float $$2) {
         if (this.itemActivationItem == null || this.itemActivationTicks <= 0) {
             return;
         }
-        int n = 40 - this.itemActivationTicks;
-        float f = ((float)n + partialTicks) / 40.0f;
-        float f2 = f * f;
-        float f3 = f * f2;
-        float f4 = 10.25f * f3 * f2 - 24.95f * f2 * f2 + 25.5f * f3 - 13.8f * f2 + 4.0f * f;
-        float f5 = f4 * (float)java.lang.Math.PI;
-        float f6 = this.itemActivationOffX * (float)(widthsp / 4);
-        float f7 = this.itemActivationOffY * (float)(heightScaled / 4);
+        int $$3 = 40 - this.itemActivationTicks;
+        float $$4 = ((float)$$3 + $$2) / 40.0f;
+        float $$5 = $$4 * $$4;
+        float $$6 = $$4 * $$5;
+        float $$7 = 10.25f * $$6 * $$5 - 24.95f * $$5 * $$5 + 25.5f * $$6 - 13.8f * $$5 + 4.0f * $$4;
+        float $$8 = $$7 * (float)java.lang.Math.PI;
+        float $$9 = this.itemActivationOffX * (float)($$0 / 4);
+        float $$10 = this.itemActivationOffY * (float)($$1 / 4);
         com.mojang.blaze3d.systems.RenderSystem.enableDepthTest();
         com.mojang.blaze3d.systems.RenderSystem.disableCull();
-        com.mojang.blaze3d.vertex.PoseStack poseStack = new com.mojang.blaze3d.vertex.PoseStack();
-        poseStack.pushPose();
-        poseStack.translate((double)((float)(widthsp / 2) + f6 * net.minecraft.util.Mth.abs((float)net.minecraft.util.Mth.sin((float)(f5 * 2.0f)))), (double)((float)(heightScaled / 2) + f7 * net.minecraft.util.Mth.abs((float)net.minecraft.util.Mth.sin((float)(f5 * 2.0f)))), -50.0);
-        float f8 = 50.0f + 175.0f * net.minecraft.util.Mth.sin((float)f5);
-        poseStack.scale(f8, -f8, f8);
-        poseStack.mulPose(com.mojang.math.Vector3f.YP.rotationDegrees(900.0f * net.minecraft.util.Mth.abs((float)net.minecraft.util.Mth.sin((float)f5))));
-        poseStack.mulPose(com.mojang.math.Vector3f.XP.rotationDegrees(6.0f * net.minecraft.util.Mth.cos((float)(f * 8.0f))));
-        poseStack.mulPose(com.mojang.math.Vector3f.ZP.rotationDegrees(6.0f * net.minecraft.util.Mth.cos((float)(f * 8.0f))));
-        net.minecraft.client.renderer.MultiBufferSource$BufferSource bufferSource = this.renderBuffers.bufferSource();
-        this.minecraft.getItemRenderer().renderStatic(this.itemActivationItem, net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.FIXED, 0xF000F0, net.minecraft.client.renderer.texture.OverlayTexture.NO_OVERLAY, poseStack, (net.minecraft.client.renderer.MultiBufferSource)bufferSource, 0);
-        poseStack.popPose();
-        bufferSource.endBatch();
+        com.mojang.blaze3d.vertex.PoseStack $$11 = new com.mojang.blaze3d.vertex.PoseStack();
+        $$11.pushPose();
+        $$11.translate((double)((float)($$0 / 2) + $$9 * net.minecraft.util.Mth.abs((float)net.minecraft.util.Mth.sin((float)($$8 * 2.0f)))), (double)((float)($$1 / 2) + $$10 * net.minecraft.util.Mth.abs((float)net.minecraft.util.Mth.sin((float)($$8 * 2.0f)))), -50.0);
+        float $$12 = 50.0f + 175.0f * net.minecraft.util.Mth.sin((float)$$8);
+        $$11.scale($$12, -$$12, $$12);
+        $$11.mulPose(com.mojang.math.Vector3f.YP.rotationDegrees(900.0f * net.minecraft.util.Mth.abs((float)net.minecraft.util.Mth.sin((float)$$8))));
+        $$11.mulPose(com.mojang.math.Vector3f.XP.rotationDegrees(6.0f * net.minecraft.util.Mth.cos((float)($$4 * 8.0f))));
+        $$11.mulPose(com.mojang.math.Vector3f.ZP.rotationDegrees(6.0f * net.minecraft.util.Mth.cos((float)($$4 * 8.0f))));
+        net.minecraft.client.renderer.MultiBufferSource$BufferSource $$13 = this.renderBuffers.bufferSource();
+        this.minecraft.getItemRenderer().renderStatic(this.itemActivationItem, net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.FIXED, 0xF000F0, net.minecraft.client.renderer.texture.OverlayTexture.NO_OVERLAY, $$11, (net.minecraft.client.renderer.MultiBufferSource)$$13, 0);
+        $$11.popPose();
+        $$13.endBatch();
         com.mojang.blaze3d.systems.RenderSystem.enableCull();
         com.mojang.blaze3d.systems.RenderSystem.disableDepthTest();
     }
@@ -1035,8 +1024,8 @@
         return this.minecraft;
     }
 
-    public float getDarkenWorldAmount(float partialTicks) {
-        return net.minecraft.util.Mth.lerp((float)partialTicks, (float)this.darkenWorldAmountO, (float)this.darkenWorldAmount);
+    public float getDarkenWorldAmount(float $$0) {
+        return net.minecraft.util.Mth.lerp((float)$$0, (float)this.darkenWorldAmountO, (float)this.darkenWorldAmount);
     }
 
     public float getRenderDistance() {