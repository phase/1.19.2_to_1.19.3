--- net/minecraft/client/renderer/ViewArea.java
+++ net/minecraft/client/renderer/ViewArea.java
@@ -12,26 +12,26 @@
     public int chunkGridSizeZ;
     public net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk[] chunks;
 
-    public net.minecraft.client.renderer.ViewArea(net.minecraft.client.renderer.chunk.ChunkRenderDispatcher chunkRenderDispatcher, net.minecraft.world.level.Level level, int n, net.minecraft.client.renderer.LevelRenderer levelRenderer) {
-        this.levelRenderer = levelRenderer;
-        this.level = level;
-        this.setViewDistance(n);
-        this.createChunks(chunkRenderDispatcher);
+    public net.minecraft.client.renderer.ViewArea(net.minecraft.client.renderer.chunk.ChunkRenderDispatcher $$0, net.minecraft.world.level.Level $$1, int $$2, net.minecraft.client.renderer.LevelRenderer $$3) {
+        this.levelRenderer = $$3;
+        this.level = $$1;
+        this.setViewDistance($$2);
+        this.createChunks($$0);
     }
 
-    public void createChunks(net.minecraft.client.renderer.chunk.ChunkRenderDispatcher renderChunkFactory) {
+    public void createChunks(net.minecraft.client.renderer.chunk.ChunkRenderDispatcher $$0) {
         if (!net.minecraft.client.Minecraft.getInstance().isSameThread()) {
             throw new java.lang.IllegalStateException("createChunks called from wrong thread: " + java.lang.Thread.currentThread().getName());
         }
-        int n = this.chunkGridSizeX * this.chunkGridSizeY * this.chunkGridSizeZ;
-        this.chunks = new net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk[n];
-        for (int i = 0; i < this.chunkGridSizeX; ++i) {
-            for (int j = 0; j < this.chunkGridSizeY; ++j) {
-                for (int k = 0; k < this.chunkGridSizeZ; ++k) {
-                    int n2 = this.getChunkIndex(i, j, k);
-                    net.minecraft.client.renderer.chunk.ChunkRenderDispatcher chunkRenderDispatcher = renderChunkFactory;
+        int $$1 = this.chunkGridSizeX * this.chunkGridSizeY * this.chunkGridSizeZ;
+        this.chunks = new net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk[$$1];
+        for (int $$2 = 0; $$2 < this.chunkGridSizeX; ++$$2) {
+            for (int $$3 = 0; $$3 < this.chunkGridSizeY; ++$$3) {
+                for (int $$4 = 0; $$4 < this.chunkGridSizeZ; ++$$4) {
+                    int $$5 = this.getChunkIndex($$2, $$3, $$4);
+                    net.minecraft.client.renderer.chunk.ChunkRenderDispatcher chunkRenderDispatcher = $$0;
                     java.util.Objects.requireNonNull((java.lang.Object)chunkRenderDispatcher);
-                    this.chunks[n2] = new net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk(chunkRenderDispatcher, n2, i * 16, j * 16, k * 16);
+                    this.chunks[$$5] = new net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk(chunkRenderDispatcher, $$5, $$2 * 16, $$3 * 16, $$4 * 16);
                 }
             }
         }
@@ -43,58 +43,58 @@
         }
     }
 
-    public int getChunkIndex(int x, int y, int z) {
-        return (z * this.chunkGridSizeY + y) * this.chunkGridSizeX + x;
+    public int getChunkIndex(int $$0, int $$1, int $$2) {
+        return ($$2 * this.chunkGridSizeY + $$1) * this.chunkGridSizeX + $$0;
     }
 
-    public void setViewDistance(int renderDistanceChunks) {
-        int n;
-        this.chunkGridSizeX = n = renderDistanceChunks * 2 + 1;
+    public void setViewDistance(int $$0) {
+        int $$1;
+        this.chunkGridSizeX = $$1 = $$0 * 2 + 1;
         this.chunkGridSizeY = this.level.getSectionsCount();
-        this.chunkGridSizeZ = n;
+        this.chunkGridSizeZ = $$1;
     }
 
-    public void repositionCamera(double viewEntityX, double viewEntityZ) {
-        int n = net.minecraft.util.Mth.ceil((double)viewEntityX);
-        int n2 = net.minecraft.util.Mth.ceil((double)viewEntityZ);
-        for (int i = 0; i < this.chunkGridSizeX; ++i) {
-            int n3 = this.chunkGridSizeX * 16;
-            int n4 = n - 8 - n3 / 2;
-            int n5 = n4 + java.lang.Math.floorMod((int)(i * 16 - n4), (int)n3);
-            for (int j = 0; j < this.chunkGridSizeZ; ++j) {
-                int n6 = this.chunkGridSizeZ * 16;
-                int n7 = n2 - 8 - n6 / 2;
-                int n8 = n7 + java.lang.Math.floorMod((int)(j * 16 - n7), (int)n6);
-                for (int k = 0; k < this.chunkGridSizeY; ++k) {
-                    int n9 = this.level.getMinBuildHeight() + k * 16;
-                    net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk renderChunk = this.chunks[this.getChunkIndex(i, k, j)];
-                    net.minecraft.core.BlockPos blockPos = renderChunk.getOrigin();
-                    if (n5 == blockPos.getX() && n9 == blockPos.getY() && n8 == blockPos.getZ()) continue;
-                    renderChunk.setOrigin(n5, n9, n8);
+    public void repositionCamera(double $$0, double $$1) {
+        int $$2 = net.minecraft.util.Mth.ceil((double)$$0);
+        int $$3 = net.minecraft.util.Mth.ceil((double)$$1);
+        for (int $$4 = 0; $$4 < this.chunkGridSizeX; ++$$4) {
+            int $$5 = this.chunkGridSizeX * 16;
+            int $$6 = $$2 - 8 - $$5 / 2;
+            int $$7 = $$6 + java.lang.Math.floorMod((int)($$4 * 16 - $$6), (int)$$5);
+            for (int $$8 = 0; $$8 < this.chunkGridSizeZ; ++$$8) {
+                int $$9 = this.chunkGridSizeZ * 16;
+                int $$10 = $$3 - 8 - $$9 / 2;
+                int $$11 = $$10 + java.lang.Math.floorMod((int)($$8 * 16 - $$10), (int)$$9);
+                for (int $$12 = 0; $$12 < this.chunkGridSizeY; ++$$12) {
+                    int $$13 = this.level.getMinBuildHeight() + $$12 * 16;
+                    net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk $$14 = this.chunks[this.getChunkIndex($$4, $$12, $$8)];
+                    net.minecraft.core.BlockPos $$15 = $$14.getOrigin();
+                    if ($$7 == $$15.getX() && $$13 == $$15.getY() && $$11 == $$15.getZ()) continue;
+                    $$14.setOrigin($$7, $$13, $$11);
                 }
             }
         }
     }
 
-    public void setDirty(int sectionX, int sectionY, int sectionZ, boolean rerenderOnMainThread) {
-        int n = java.lang.Math.floorMod((int)sectionX, (int)this.chunkGridSizeX);
-        int n2 = java.lang.Math.floorMod((int)(sectionY - this.level.getMinSection()), (int)this.chunkGridSizeY);
-        int n3 = java.lang.Math.floorMod((int)sectionZ, (int)this.chunkGridSizeZ);
-        net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk renderChunk = this.chunks[this.getChunkIndex(n, n2, n3)];
-        renderChunk.setDirty(rerenderOnMainThread);
+    public void setDirty(int $$0, int $$1, int $$2, boolean $$3) {
+        int $$4 = java.lang.Math.floorMod((int)$$0, (int)this.chunkGridSizeX);
+        int $$5 = java.lang.Math.floorMod((int)($$1 - this.level.getMinSection()), (int)this.chunkGridSizeY);
+        int $$6 = java.lang.Math.floorMod((int)$$2, (int)this.chunkGridSizeZ);
+        net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk $$7 = this.chunks[this.getChunkIndex($$4, $$5, $$6)];
+        $$7.setDirty($$3);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk getRenderChunkAt(net.minecraft.core.BlockPos pos) {
-        int n = net.minecraft.util.Mth.intFloorDiv((int)pos.getX(), (int)16);
-        int n2 = net.minecraft.util.Mth.intFloorDiv((int)(pos.getY() - this.level.getMinBuildHeight()), (int)16);
-        int n3 = net.minecraft.util.Mth.intFloorDiv((int)pos.getZ(), (int)16);
-        if (n2 < 0 || n2 >= this.chunkGridSizeY) {
+    public net.minecraft.client.renderer.chunk.ChunkRenderDispatcher$RenderChunk getRenderChunkAt(net.minecraft.core.BlockPos $$0) {
+        int $$1 = net.minecraft.util.Mth.intFloorDiv((int)$$0.getX(), (int)16);
+        int $$2 = net.minecraft.util.Mth.intFloorDiv((int)($$0.getY() - this.level.getMinBuildHeight()), (int)16);
+        int $$3 = net.minecraft.util.Mth.intFloorDiv((int)$$0.getZ(), (int)16);
+        if ($$2 < 0 || $$2 >= this.chunkGridSizeY) {
             return null;
         }
-        n = net.minecraft.util.Mth.positiveModulo((int)n, (int)this.chunkGridSizeX);
-        n3 = net.minecraft.util.Mth.positiveModulo((int)n3, (int)this.chunkGridSizeZ);
-        return this.chunks[this.getChunkIndex(n, n2, n3)];
+        $$1 = net.minecraft.util.Mth.positiveModulo((int)$$1, (int)this.chunkGridSizeX);
+        $$3 = net.minecraft.util.Mth.positiveModulo((int)$$3, (int)this.chunkGridSizeZ);
+        return this.chunks[this.getChunkIndex($$1, $$2, $$3)];
     }
 }
 