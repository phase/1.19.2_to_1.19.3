--- net/minecraft/client/renderer/block/model/BlockModel$Deserializer.java
+++ net/minecraft/client/renderer/block/model/BlockModel$Deserializer.java
@@ -31,56 +31,56 @@
         return new net.minecraft.client.renderer.block.model.BlockModel($$12, $$4, $$6, $$7, $$11, $$8, $$10);
     }
 
-    public java.util.List<net.minecraft.client.renderer.block.model.ItemOverride> getOverrides(com.google.gson.JsonDeserializationContext deserializationContext, com.google.gson.JsonObject object) {
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-        if (object.has("overrides")) {
-            com.google.gson.JsonArray jsonArray = net.minecraft.util.GsonHelper.getAsJsonArray((com.google.gson.JsonObject)object, (java.lang.String)"overrides");
-            for (com.google.gson.JsonElement jsonElement : jsonArray) {
-                arrayList.add((java.lang.Object)((net.minecraft.client.renderer.block.model.ItemOverride)deserializationContext.deserialize(jsonElement, net.minecraft.client.renderer.block.model.ItemOverride.class)));
+    public java.util.List<net.minecraft.client.renderer.block.model.ItemOverride> getOverrides(com.google.gson.JsonDeserializationContext $$0, com.google.gson.JsonObject $$1) {
+        java.util.ArrayList $$2 = com.google.common.collect.Lists.newArrayList();
+        if ($$1.has("overrides")) {
+            com.google.gson.JsonArray $$3 = net.minecraft.util.GsonHelper.getAsJsonArray((com.google.gson.JsonObject)$$1, (java.lang.String)"overrides");
+            for (com.google.gson.JsonElement $$4 : $$3) {
+                $$2.add((java.lang.Object)((net.minecraft.client.renderer.block.model.ItemOverride)$$0.deserialize($$4, net.minecraft.client.renderer.block.model.ItemOverride.class)));
             }
         }
-        return arrayList;
+        return $$2;
     }
 
-    public java.util.Map<java.lang.String, com.mojang.datafixers.util.Either<net.minecraft.client.resources.model.Material, java.lang.String>> getTextureMap(com.google.gson.JsonObject object) {
-        net.minecraft.resources.ResourceLocation resourceLocation = net.minecraft.client.renderer.texture.TextureAtlas.LOCATION_BLOCKS;
-        java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-        if (object.has("textures")) {
-            com.google.gson.JsonObject jsonObject = net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)object, (java.lang.String)"textures");
-            for (java.util.Map$Entry entry : jsonObject.entrySet()) {
-                hashMap.put((java.lang.Object)((java.lang.String)entry.getKey()), (java.lang.Object)net.minecraft.client.renderer.block.model.BlockModel$Deserializer.parseTextureLocationOrReference((net.minecraft.resources.ResourceLocation)resourceLocation, (java.lang.String)((com.google.gson.JsonElement)entry.getValue()).getAsString()));
+    public java.util.Map<java.lang.String, com.mojang.datafixers.util.Either<net.minecraft.client.resources.model.Material, java.lang.String>> getTextureMap(com.google.gson.JsonObject $$0) {
+        net.minecraft.resources.ResourceLocation $$1 = net.minecraft.client.renderer.texture.TextureAtlas.LOCATION_BLOCKS;
+        java.util.HashMap $$2 = com.google.common.collect.Maps.newHashMap();
+        if ($$0.has("textures")) {
+            com.google.gson.JsonObject $$3 = net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)$$0, (java.lang.String)"textures");
+            for (java.util.Map$Entry $$4 : $$3.entrySet()) {
+                $$2.put((java.lang.Object)((java.lang.String)$$4.getKey()), (java.lang.Object)net.minecraft.client.renderer.block.model.BlockModel$Deserializer.parseTextureLocationOrReference((net.minecraft.resources.ResourceLocation)$$1, (java.lang.String)((com.google.gson.JsonElement)$$4.getValue()).getAsString()));
             }
         }
-        return hashMap;
+        return $$2;
     }
 
-    public static com.mojang.datafixers.util.Either<net.minecraft.client.resources.model.Material, java.lang.String> parseTextureLocationOrReference(net.minecraft.resources.ResourceLocation location, java.lang.String name) {
-        if (net.minecraft.client.renderer.block.model.BlockModel.isTextureReference((java.lang.String)name)) {
-            return com.mojang.datafixers.util.Either.right((java.lang.Object)name.substring(1));
+    public static com.mojang.datafixers.util.Either<net.minecraft.client.resources.model.Material, java.lang.String> parseTextureLocationOrReference(net.minecraft.resources.ResourceLocation $$0, java.lang.String $$1) {
+        if (net.minecraft.client.renderer.block.model.BlockModel.isTextureReference((java.lang.String)$$1)) {
+            return com.mojang.datafixers.util.Either.right((java.lang.Object)$$1.substring(1));
         }
-        net.minecraft.resources.ResourceLocation resourceLocation = net.minecraft.resources.ResourceLocation.tryParse((java.lang.String)name);
-        if (resourceLocation == null) {
-            throw new com.google.gson.JsonParseException(name + " is not valid resource location");
+        net.minecraft.resources.ResourceLocation $$2 = net.minecraft.resources.ResourceLocation.tryParse((java.lang.String)$$1);
+        if ($$2 == null) {
+            throw new com.google.gson.JsonParseException($$1 + " is not valid resource location");
         }
-        return com.mojang.datafixers.util.Either.left((java.lang.Object)new net.minecraft.client.resources.model.Material(location, resourceLocation));
+        return com.mojang.datafixers.util.Either.left((java.lang.Object)new net.minecraft.client.resources.model.Material($$0, $$2));
     }
 
-    public java.lang.String getParentName(com.google.gson.JsonObject object) {
-        return net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)object, (java.lang.String)"parent", (java.lang.String)"");
+    public java.lang.String getParentName(com.google.gson.JsonObject $$0) {
+        return net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"parent", (java.lang.String)"");
     }
 
-    public boolean getAmbientOcclusion(com.google.gson.JsonObject object) {
-        return net.minecraft.util.GsonHelper.getAsBoolean((com.google.gson.JsonObject)object, (java.lang.String)"ambientocclusion", (boolean)true);
+    public boolean getAmbientOcclusion(com.google.gson.JsonObject $$0) {
+        return net.minecraft.util.GsonHelper.getAsBoolean((com.google.gson.JsonObject)$$0, (java.lang.String)"ambientocclusion", (boolean)true);
     }
 
-    public java.util.List<net.minecraft.client.renderer.block.model.BlockElement> getElements(com.google.gson.JsonDeserializationContext deserializationContext, com.google.gson.JsonObject object) {
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-        if (object.has("elements")) {
-            for (com.google.gson.JsonElement jsonElement : net.minecraft.util.GsonHelper.getAsJsonArray((com.google.gson.JsonObject)object, (java.lang.String)"elements")) {
-                arrayList.add((java.lang.Object)((net.minecraft.client.renderer.block.model.BlockElement)deserializationContext.deserialize(jsonElement, net.minecraft.client.renderer.block.model.BlockElement.class)));
+    public java.util.List<net.minecraft.client.renderer.block.model.BlockElement> getElements(com.google.gson.JsonDeserializationContext $$0, com.google.gson.JsonObject $$1) {
+        java.util.ArrayList $$2 = com.google.common.collect.Lists.newArrayList();
+        if ($$1.has("elements")) {
+            for (com.google.gson.JsonElement $$3 : net.minecraft.util.GsonHelper.getAsJsonArray((com.google.gson.JsonObject)$$1, (java.lang.String)"elements")) {
+                $$2.add((java.lang.Object)((net.minecraft.client.renderer.block.model.BlockElement)$$0.deserialize($$3, net.minecraft.client.renderer.block.model.BlockElement.class)));
             }
         }
-        return arrayList;
+        return $$2;
     }
 
     public /* synthetic */ java.lang.Object deserialize(com.google.gson.JsonElement jsonElement, java.lang.reflect.Type type, com.google.gson.JsonDeserializationContext jsonDeserializationContext) throws com.google.gson.JsonParseException {