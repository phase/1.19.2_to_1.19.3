--- net/minecraft/client/renderer/block/model/ItemModelGenerator.java
+++ net/minecraft/client/renderer/block/model/ItemModelGenerator.java
@@ -12,159 +12,159 @@
     public net.minecraft.client.renderer.block.model.ItemModelGenerator() {
     }
 
-    public net.minecraft.client.renderer.block.model.BlockModel generateBlockModel(java.util.function.Function<net.minecraft.client.resources.model.Material, net.minecraft.client.renderer.texture.TextureAtlasSprite> textureGetter, net.minecraft.client.renderer.block.model.BlockModel blockModel) {
-        java.lang.String string;
-        java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-        for (int i = 0; i < LAYERS.size() && blockModel.hasTexture(string = (java.lang.String)LAYERS.get(i)); ++i) {
-            net.minecraft.client.resources.model.Material material = blockModel.getMaterial(string);
-            hashMap.put((java.lang.Object)string, (java.lang.Object)com.mojang.datafixers.util.Either.left((java.lang.Object)material));
-            net.minecraft.client.renderer.texture.TextureAtlasSprite textureAtlasSprite = (net.minecraft.client.renderer.texture.TextureAtlasSprite)textureGetter.apply((java.lang.Object)material);
-            arrayList.addAll((java.util.Collection)this.processFrames(i, string, textureAtlasSprite));
+    public net.minecraft.client.renderer.block.model.BlockModel generateBlockModel(java.util.function.Function<net.minecraft.client.resources.model.Material, net.minecraft.client.renderer.texture.TextureAtlasSprite> $$0, net.minecraft.client.renderer.block.model.BlockModel $$1) {
+        java.lang.String $$5;
+        java.util.HashMap $$2 = com.google.common.collect.Maps.newHashMap();
+        java.util.ArrayList $$3 = com.google.common.collect.Lists.newArrayList();
+        for (int $$4 = 0; $$4 < LAYERS.size() && $$1.hasTexture($$5 = (java.lang.String)LAYERS.get($$4)); ++$$4) {
+            net.minecraft.client.resources.model.Material $$6 = $$1.getMaterial($$5);
+            $$2.put((java.lang.Object)$$5, (java.lang.Object)com.mojang.datafixers.util.Either.left((java.lang.Object)$$6));
+            net.minecraft.client.renderer.texture.SpriteContents $$7 = ((net.minecraft.client.renderer.texture.TextureAtlasSprite)$$0.apply((java.lang.Object)$$6)).contents();
+            $$3.addAll((java.util.Collection)this.processFrames($$4, $$5, $$7));
         }
-        hashMap.put((java.lang.Object)"particle", (java.lang.Object)(blockModel.hasTexture("particle") ? com.mojang.datafixers.util.Either.left((java.lang.Object)blockModel.getMaterial("particle")) : (com.mojang.datafixers.util.Either)hashMap.get((java.lang.Object)"layer0")));
-        net.minecraft.client.renderer.block.model.BlockModel blockModel2 = new net.minecraft.client.renderer.block.model.BlockModel(null, (java.util.List)arrayList, (java.util.Map)hashMap, false, blockModel.getGuiLight(), blockModel.getTransforms(), blockModel.getOverrides());
-        blockModel2.name = blockModel.name;
-        return blockModel2;
+        $$2.put((java.lang.Object)"particle", (java.lang.Object)($$1.hasTexture("particle") ? com.mojang.datafixers.util.Either.left((java.lang.Object)$$1.getMaterial("particle")) : (com.mojang.datafixers.util.Either)$$2.get((java.lang.Object)"layer0")));
+        net.minecraft.client.renderer.block.model.BlockModel $$8 = new net.minecraft.client.renderer.block.model.BlockModel(null, (java.util.List)$$3, (java.util.Map)$$2, false, $$1.getGuiLight(), $$1.getTransforms(), $$1.getOverrides());
+        $$8.name = $$1.name;
+        return $$8;
     }
 
-    public java.util.List<net.minecraft.client.renderer.block.model.BlockElement> processFrames(int tintIndex, java.lang.String texture, net.minecraft.client.renderer.texture.TextureAtlasSprite sprite) {
-        java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-        hashMap.put((java.lang.Object)net.minecraft.core.Direction.SOUTH, (java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElementFace(null, tintIndex, texture, new net.minecraft.client.renderer.block.model.BlockFaceUV(new float[]{0.0f, 0.0f, 16.0f, 16.0f}, 0)));
-        hashMap.put((java.lang.Object)net.minecraft.core.Direction.NORTH, (java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElementFace(null, tintIndex, texture, new net.minecraft.client.renderer.block.model.BlockFaceUV(new float[]{16.0f, 0.0f, 0.0f, 16.0f}, 0)));
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-        arrayList.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f(0.0f, 0.0f, 7.5f), new com.mojang.math.Vector3f(16.0f, 16.0f, 8.5f), (java.util.Map)hashMap, null, true));
-        arrayList.addAll((java.util.Collection)this.createSideElements(sprite, texture, tintIndex));
-        return arrayList;
+    public java.util.List<net.minecraft.client.renderer.block.model.BlockElement> processFrames(int $$0, java.lang.String $$1, net.minecraft.client.renderer.texture.SpriteContents $$2) {
+        java.util.HashMap $$3 = com.google.common.collect.Maps.newHashMap();
+        $$3.put((java.lang.Object)net.minecraft.core.Direction.SOUTH, (java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElementFace(null, $$0, $$1, new net.minecraft.client.renderer.block.model.BlockFaceUV(new float[]{0.0f, 0.0f, 16.0f, 16.0f}, 0)));
+        $$3.put((java.lang.Object)net.minecraft.core.Direction.NORTH, (java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElementFace(null, $$0, $$1, new net.minecraft.client.renderer.block.model.BlockFaceUV(new float[]{16.0f, 0.0f, 0.0f, 16.0f}, 0)));
+        java.util.ArrayList $$4 = com.google.common.collect.Lists.newArrayList();
+        $$4.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f(0.0f, 0.0f, 7.5f), new com.mojang.math.Vector3f(16.0f, 16.0f, 8.5f), (java.util.Map)$$3, null, true));
+        $$4.addAll((java.util.Collection)this.createSideElements($$2, $$1, $$0));
+        return $$4;
     }
 
-    public java.util.List<net.minecraft.client.renderer.block.model.BlockElement> createSideElements(net.minecraft.client.renderer.texture.TextureAtlasSprite sprite, java.lang.String texture, int tintIndex) {
-        float f = sprite.getWidth();
-        float f2 = sprite.getHeight();
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-        for (net.minecraft.client.renderer.block.model.ItemModelGenerator$Span span : this.getSpans(sprite)) {
-            float f3 = 0.0f;
-            float f4 = 0.0f;
-            float f5 = 0.0f;
-            float f6 = 0.0f;
-            float f7 = 0.0f;
-            float f8 = 0.0f;
-            float f9 = 0.0f;
-            float f10 = 0.0f;
-            float f11 = 16.0f / f;
-            float f12 = 16.0f / f2;
-            float f13 = span.getMin();
-            float f14 = span.getMax();
-            float f15 = span.getAnchor();
-            net.minecraft.client.renderer.block.model.ItemModelGenerator$SpanFacing spanFacing = span.getFacing();
-            switch (net.minecraft.client.renderer.block.model.ItemModelGenerator$1.$SwitchMap$net$minecraft$client$renderer$block$model$ItemModelGenerator$SpanFacing[spanFacing.ordinal()]) {
+    public java.util.List<net.minecraft.client.renderer.block.model.BlockElement> createSideElements(net.minecraft.client.renderer.texture.SpriteContents $$0, java.lang.String $$1, int $$2) {
+        float $$3 = $$0.width();
+        float $$4 = $$0.height();
+        java.util.ArrayList $$5 = com.google.common.collect.Lists.newArrayList();
+        for (net.minecraft.client.renderer.block.model.ItemModelGenerator$Span $$6 : this.getSpans($$0)) {
+            float $$7 = 0.0f;
+            float $$8 = 0.0f;
+            float $$9 = 0.0f;
+            float $$10 = 0.0f;
+            float $$11 = 0.0f;
+            float $$12 = 0.0f;
+            float $$13 = 0.0f;
+            float $$14 = 0.0f;
+            float $$15 = 16.0f / $$3;
+            float $$16 = 16.0f / $$4;
+            float $$17 = $$6.getMin();
+            float $$18 = $$6.getMax();
+            float $$19 = $$6.getAnchor();
+            net.minecraft.client.renderer.block.model.ItemModelGenerator$SpanFacing $$20 = $$6.getFacing();
+            switch (net.minecraft.client.renderer.block.model.ItemModelGenerator$1.$SwitchMap$net$minecraft$client$renderer$block$model$ItemModelGenerator$SpanFacing[$$20.ordinal()]) {
                 case 1: {
-                    f3 = f7 = f13;
-                    f5 = f8 = f14 + 1.0f;
-                    f4 = f9 = f15;
-                    f6 = f15;
-                    f10 = f15 + 1.0f;
+                    $$7 = $$11 = $$17;
+                    $$9 = $$12 = $$18 + 1.0f;
+                    $$8 = $$13 = $$19;
+                    $$10 = $$19;
+                    $$14 = $$19 + 1.0f;
                     break;
                 }
                 case 2: {
-                    f9 = f15;
-                    f10 = f15 + 1.0f;
-                    f3 = f7 = f13;
-                    f5 = f8 = f14 + 1.0f;
-                    f4 = f15 + 1.0f;
-                    f6 = f15 + 1.0f;
+                    $$13 = $$19;
+                    $$14 = $$19 + 1.0f;
+                    $$7 = $$11 = $$17;
+                    $$9 = $$12 = $$18 + 1.0f;
+                    $$8 = $$19 + 1.0f;
+                    $$10 = $$19 + 1.0f;
                     break;
                 }
                 case 3: {
-                    f3 = f7 = f15;
-                    f5 = f15;
-                    f8 = f15 + 1.0f;
-                    f4 = f10 = f13;
-                    f6 = f9 = f14 + 1.0f;
+                    $$7 = $$11 = $$19;
+                    $$9 = $$19;
+                    $$12 = $$19 + 1.0f;
+                    $$8 = $$14 = $$17;
+                    $$10 = $$13 = $$18 + 1.0f;
                     break;
                 }
                 case 4: {
-                    f7 = f15;
-                    f8 = f15 + 1.0f;
-                    f3 = f15 + 1.0f;
-                    f5 = f15 + 1.0f;
-                    f4 = f10 = f13;
-                    f6 = f9 = f14 + 1.0f;
+                    $$11 = $$19;
+                    $$12 = $$19 + 1.0f;
+                    $$7 = $$19 + 1.0f;
+                    $$9 = $$19 + 1.0f;
+                    $$8 = $$14 = $$17;
+                    $$10 = $$13 = $$18 + 1.0f;
                 }
             }
-            f3 *= f11;
-            f5 *= f11;
-            f4 *= f12;
-            f6 *= f12;
-            f4 = 16.0f - f4;
-            f6 = 16.0f - f6;
-            java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-            hashMap.put((java.lang.Object)spanFacing.getDirection(), (java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElementFace(null, tintIndex, texture, new net.minecraft.client.renderer.block.model.BlockFaceUV(new float[]{f7 *= f11, f9 *= f12, f8 *= f11, f10 *= f12}, 0)));
-            switch (net.minecraft.client.renderer.block.model.ItemModelGenerator$1.$SwitchMap$net$minecraft$client$renderer$block$model$ItemModelGenerator$SpanFacing[spanFacing.ordinal()]) {
+            $$7 *= $$15;
+            $$9 *= $$15;
+            $$8 *= $$16;
+            $$10 *= $$16;
+            $$8 = 16.0f - $$8;
+            $$10 = 16.0f - $$10;
+            java.util.HashMap $$21 = com.google.common.collect.Maps.newHashMap();
+            $$21.put((java.lang.Object)$$20.getDirection(), (java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElementFace(null, $$2, $$1, new net.minecraft.client.renderer.block.model.BlockFaceUV(new float[]{$$11 *= $$15, $$13 *= $$16, $$12 *= $$15, $$14 *= $$16}, 0)));
+            switch (net.minecraft.client.renderer.block.model.ItemModelGenerator$1.$SwitchMap$net$minecraft$client$renderer$block$model$ItemModelGenerator$SpanFacing[$$20.ordinal()]) {
                 case 1: {
-                    arrayList.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f(f3, f4, 7.5f), new com.mojang.math.Vector3f(f5, f4, 8.5f), (java.util.Map)hashMap, null, true));
+                    $$5.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f($$7, $$8, 7.5f), new com.mojang.math.Vector3f($$9, $$8, 8.5f), (java.util.Map)$$21, null, true));
                     break;
                 }
                 case 2: {
-                    arrayList.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f(f3, f6, 7.5f), new com.mojang.math.Vector3f(f5, f6, 8.5f), (java.util.Map)hashMap, null, true));
+                    $$5.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f($$7, $$10, 7.5f), new com.mojang.math.Vector3f($$9, $$10, 8.5f), (java.util.Map)$$21, null, true));
                     break;
                 }
                 case 3: {
-                    arrayList.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f(f3, f4, 7.5f), new com.mojang.math.Vector3f(f3, f6, 8.5f), (java.util.Map)hashMap, null, true));
+                    $$5.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f($$7, $$8, 7.5f), new com.mojang.math.Vector3f($$7, $$10, 8.5f), (java.util.Map)$$21, null, true));
                     break;
                 }
                 case 4: {
-                    arrayList.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f(f5, f4, 7.5f), new com.mojang.math.Vector3f(f5, f6, 8.5f), (java.util.Map)hashMap, null, true));
+                    $$5.add((java.lang.Object)new net.minecraft.client.renderer.block.model.BlockElement(new com.mojang.math.Vector3f($$9, $$8, 7.5f), new com.mojang.math.Vector3f($$9, $$10, 8.5f), (java.util.Map)$$21, null, true));
                 }
             }
         }
-        return arrayList;
+        return $$5;
     }
 
-    public java.util.List<net.minecraft.client.renderer.block.model.ItemModelGenerator$Span> getSpans(net.minecraft.client.renderer.texture.TextureAtlasSprite sprite) {
-        int n = sprite.getWidth();
-        int n2 = sprite.getHeight();
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-        sprite.getUniqueFrames().forEach(arg_0 -> this.lambda$getSpans$0(n2, n, sprite, (java.util.List)arrayList, arg_0));
-        return arrayList;
+    public java.util.List<net.minecraft.client.renderer.block.model.ItemModelGenerator$Span> getSpans(net.minecraft.client.renderer.texture.SpriteContents $$0) {
+        int $$1 = $$0.width();
+        int $$2 = $$0.height();
+        java.util.ArrayList $$3 = com.google.common.collect.Lists.newArrayList();
+        $$0.getUniqueFrames().forEach(arg_0 -> this.lambda$getSpans$0($$2, $$1, $$0, (java.util.List)$$3, arg_0));
+        return $$3;
     }
 
-    public void checkTransition(net.minecraft.client.renderer.block.model.ItemModelGenerator$SpanFacing spanFacing, java.util.List<net.minecraft.client.renderer.block.model.ItemModelGenerator$Span> listSpans, net.minecraft.client.renderer.texture.TextureAtlasSprite sprite, int frameIndex, int pixelX, int pixelY, int spiteWidth, int spriteHeight, boolean transparent) {
-        boolean bl;
-        boolean bl2 = bl = this.isTransparent(sprite, frameIndex, pixelX + spanFacing.getXOffset(), pixelY + spanFacing.getYOffset(), spiteWidth, spriteHeight) && transparent;
-        if (bl) {
-            this.createOrExpandSpan(listSpans, spanFacing, pixelX, pixelY);
+    public void checkTransition(net.minecraft.client.renderer.block.model.ItemModelGenerator$SpanFacing $$0, java.util.List<net.minecraft.client.renderer.block.model.ItemModelGenerator$Span> $$1, net.minecraft.client.renderer.texture.SpriteContents $$2, int $$3, int $$4, int $$5, int $$6, int $$7, boolean $$8) {
+        boolean $$9;
+        boolean bl = $$9 = this.isTransparent($$2, $$3, $$4 + $$0.getXOffset(), $$5 + $$0.getYOffset(), $$6, $$7) && $$8;
+        if ($$9) {
+            this.createOrExpandSpan($$1, $$0, $$4, $$5);
         }
     }
 
-    public void createOrExpandSpan(java.util.List<net.minecraft.client.renderer.block.model.ItemModelGenerator$Span> listSpans, net.minecraft.client.renderer.block.model.ItemModelGenerator$SpanFacing spanFacing, int pixelX, int pixelY) {
-        int n;
-        net.minecraft.client.renderer.block.model.ItemModelGenerator$Span span = null;
-        for (net.minecraft.client.renderer.block.model.ItemModelGenerator$Span span2 : listSpans) {
-            int n2;
-            if (span2.getFacing() != spanFacing) continue;
-            int n3 = n2 = spanFacing.isHorizontal() ? pixelY : pixelX;
-            if (span2.getAnchor() != n2) continue;
-            span = span2;
+    public void createOrExpandSpan(java.util.List<net.minecraft.client.renderer.block.model.ItemModelGenerator$Span> $$0, net.minecraft.client.renderer.block.model.ItemModelGenerator$SpanFacing $$1, int $$2, int $$3) {
+        int $$8;
+        net.minecraft.client.renderer.block.model.ItemModelGenerator$Span $$4 = null;
+        for (net.minecraft.client.renderer.block.model.ItemModelGenerator$Span $$5 : $$0) {
+            int $$6;
+            if ($$5.getFacing() != $$1) continue;
+            int n = $$6 = $$1.isHorizontal() ? $$3 : $$2;
+            if ($$5.getAnchor() != $$6) continue;
+            $$4 = $$5;
             break;
         }
-        int n4 = spanFacing.isHorizontal() ? pixelY : pixelX;
-        int n5 = n = spanFacing.isHorizontal() ? pixelX : pixelY;
-        if (span == null) {
-            listSpans.add((java.lang.Object)new net.minecraft.client.renderer.block.model.ItemModelGenerator$Span(spanFacing, n, n4));
+        int $$7 = $$1.isHorizontal() ? $$3 : $$2;
+        int n = $$8 = $$1.isHorizontal() ? $$2 : $$3;
+        if ($$4 == null) {
+            $$0.add((java.lang.Object)new net.minecraft.client.renderer.block.model.ItemModelGenerator$Span($$1, $$8, $$7));
         } else {
-            span.expand(n);
+            $$4.expand($$8);
         }
     }
 
-    public boolean isTransparent(net.minecraft.client.renderer.texture.TextureAtlasSprite sprite, int frameIndex, int pixelX, int pixelY, int spiteWidth, int spriteHeight) {
-        if (pixelX < 0 || pixelY < 0 || pixelX >= spiteWidth || pixelY >= spriteHeight) {
+    public boolean isTransparent(net.minecraft.client.renderer.texture.SpriteContents $$0, int $$1, int $$2, int $$3, int $$4, int $$5) {
+        if ($$2 < 0 || $$3 < 0 || $$2 >= $$4 || $$3 >= $$5) {
             return true;
         }
-        return sprite.isTransparent(frameIndex, pixelX, pixelY);
+        return $$0.isTransparent($$1, $$2, $$3);
     }
 
-    public /* synthetic */ void lambda$getSpans$0(int $$0, int $$1, net.minecraft.client.renderer.texture.TextureAtlasSprite $$2, java.util.List $$3, int $$4) {
+    public /* synthetic */ void lambda$getSpans$0(int $$0, int $$1, net.minecraft.client.renderer.texture.SpriteContents $$2, java.util.List $$3, int $$4) {
         for (int $$5 = 0; $$5 < $$0; ++$$5) {
             for (int $$6 = 0; $$6 < $$1; ++$$6) {
                 boolean $$7 = !this.isTransparent($$2, $$4, $$6, $$5, $$1, $$0);