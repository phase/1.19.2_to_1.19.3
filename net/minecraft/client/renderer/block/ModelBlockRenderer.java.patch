--- net/minecraft/client/renderer/block/ModelBlockRenderer.java
+++ net/minecraft/client/renderer/block/ModelBlockRenderer.java
@@ -75,140 +75,137 @@
         }
     }
 
-    public void renderModelFaceAO(net.minecraft.world.level.BlockAndTintGetter blockAccess, net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.BlockPos pos, com.mojang.blaze3d.vertex.PoseStack matrixStack, com.mojang.blaze3d.vertex.VertexConsumer buffer, java.util.List<net.minecraft.client.renderer.block.model.BakedQuad> list, float[] quadBounds, java.util.BitSet bitSet, net.minecraft.client.renderer.block.ModelBlockRenderer$AmbientOcclusionFace aoFace, int combinedOverlay) {
-        for (net.minecraft.client.renderer.block.model.BakedQuad bakedQuad : list) {
-            this.calculateShape(blockAccess, state, pos, bakedQuad.getVertices(), bakedQuad.getDirection(), quadBounds, bitSet);
-            aoFace.calculate(blockAccess, state, pos, bakedQuad.getDirection(), quadBounds, bitSet, bakedQuad.isShade());
-            this.putQuadData(blockAccess, state, pos, buffer, matrixStack.last(), bakedQuad, aoFace.brightness[0], aoFace.brightness[1], aoFace.brightness[2], aoFace.brightness[3], aoFace.lightmap[0], aoFace.lightmap[1], aoFace.lightmap[2], aoFace.lightmap[3], combinedOverlay);
+    public void renderModelFaceAO(net.minecraft.world.level.BlockAndTintGetter $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.core.BlockPos $$2, com.mojang.blaze3d.vertex.PoseStack $$3, com.mojang.blaze3d.vertex.VertexConsumer $$4, java.util.List<net.minecraft.client.renderer.block.model.BakedQuad> $$5, float[] $$6, java.util.BitSet $$7, net.minecraft.client.renderer.block.ModelBlockRenderer$AmbientOcclusionFace $$8, int $$9) {
+        for (net.minecraft.client.renderer.block.model.BakedQuad $$10 : $$5) {
+            this.calculateShape($$0, $$1, $$2, $$10.getVertices(), $$10.getDirection(), $$6, $$7);
+            $$8.calculate($$0, $$1, $$2, $$10.getDirection(), $$6, $$7, $$10.isShade());
+            this.putQuadData($$0, $$1, $$2, $$4, $$3.last(), $$10, $$8.brightness[0], $$8.brightness[1], $$8.brightness[2], $$8.brightness[3], $$8.lightmap[0], $$8.lightmap[1], $$8.lightmap[2], $$8.lightmap[3], $$9);
         }
     }
 
-    public void putQuadData(net.minecraft.world.level.BlockAndTintGetter blockAccess, net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.BlockPos pos, com.mojang.blaze3d.vertex.VertexConsumer buffer, com.mojang.blaze3d.vertex.PoseStack$Pose matrixEntry, net.minecraft.client.renderer.block.model.BakedQuad quad, float colorMul0, float colorMul1, float colorMul2, float colorMul3, int brightness0, int brightness1, int brightness2, int brightness3, int combinedOverlay) {
-        float f;
-        float f2;
-        float f3;
-        if (quad.isTinted()) {
-            int n = this.blockColors.getColor(state, blockAccess, pos, quad.getTintIndex());
-            f3 = (float)(n >> 16 & 0xFF) / 255.0f;
-            f2 = (float)(n >> 8 & 0xFF) / 255.0f;
-            f = (float)(n & 0xFF) / 255.0f;
+    public void putQuadData(net.minecraft.world.level.BlockAndTintGetter $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.core.BlockPos $$2, com.mojang.blaze3d.vertex.VertexConsumer $$3, com.mojang.blaze3d.vertex.PoseStack$Pose $$4, net.minecraft.client.renderer.block.model.BakedQuad $$5, float $$6, float $$7, float $$8, float $$9, int $$10, int $$11, int $$12, int $$13, int $$14) {
+        float $$21;
+        float $$20;
+        float $$19;
+        if ($$5.isTinted()) {
+            int $$15 = this.blockColors.getColor($$1, $$0, $$2, $$5.getTintIndex());
+            float $$16 = (float)($$15 >> 16 & 0xFF) / 255.0f;
+            float $$17 = (float)($$15 >> 8 & 0xFF) / 255.0f;
+            float $$18 = (float)($$15 & 0xFF) / 255.0f;
         } else {
-            f3 = 1.0f;
-            f2 = 1.0f;
-            f = 1.0f;
+            $$19 = 1.0f;
+            $$20 = 1.0f;
+            $$21 = 1.0f;
         }
-        buffer.putBulkData(matrixEntry, quad, new float[]{colorMul0, colorMul1, colorMul2, colorMul3}, f3, f2, f, new int[]{brightness0, brightness1, brightness2, brightness3}, combinedOverlay, true);
+        $$3.putBulkData($$4, $$5, new float[]{$$6, $$7, $$8, $$9}, $$19, $$20, $$21, new int[]{$$10, $$11, $$12, $$13}, $$14, true);
     }
 
-    public void calculateShape(net.minecraft.world.level.BlockAndTintGetter blockReader, net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.BlockPos pos, int[] vertexData, net.minecraft.core.Direction face, @javax.annotation.Nullable float[] quadBounds, java.util.BitSet boundsFlags) {
-        float f;
-        int n;
-        float f2 = 32.0f;
-        float f3 = 32.0f;
-        float f4 = 32.0f;
-        float f5 = -32.0f;
-        float f6 = -32.0f;
-        float f7 = -32.0f;
-        for (n = 0;
- n < 4; ++n) {
-            f = java.lang.Float.intBitsToFloat((int)vertexData[n * 8]);
-            float f8 = java.lang.Float.intBitsToFloat((int)vertexData[n * 8 + 1]);
-            float f9 = java.lang.Float.intBitsToFloat((int)vertexData[n * 8 + 2]);
-            f2 = java.lang.Math.min((float)f2, (float)f);
-            f3 = java.lang.Math.min((float)f3, (float)f8);
-            f4 = java.lang.Math.min((float)f4, (float)f9);
-            f5 = java.lang.Math.max((float)f5, (float)f);
-            f6 = java.lang.Math.max((float)f6, (float)f8);
-            f7 = java.lang.Math.max((float)f7, (float)f9);
+    public void calculateShape(net.minecraft.world.level.BlockAndTintGetter $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.core.BlockPos $$2, int[] $$3, net.minecraft.core.Direction $$4, @javax.annotation.Nullable float[] $$5, java.util.BitSet $$6) {
+        float $$7 = 32.0f;
+        float $$8 = 32.0f;
+        float $$9 = 32.0f;
+        float $$10 = -32.0f;
+        float $$11 = -32.0f;
+        float $$12 = -32.0f;
+        for (int $$13 = 0; $$13 < 4; ++$$13) {
+            float $$14 = java.lang.Float.intBitsToFloat((int)$$3[$$13 * 8]);
+            float $$15 = java.lang.Float.intBitsToFloat((int)$$3[$$13 * 8 + 1]);
+            float $$16 = java.lang.Float.intBitsToFloat((int)$$3[$$13 * 8 + 2]);
+            $$7 = java.lang.Math.min((float)$$7, (float)$$14);
+            $$8 = java.lang.Math.min((float)$$8, (float)$$15);
+            $$9 = java.lang.Math.min((float)$$9, (float)$$16);
+            $$10 = java.lang.Math.max((float)$$10, (float)$$14);
+            $$11 = java.lang.Math.max((float)$$11, (float)$$15);
+            $$12 = java.lang.Math.max((float)$$12, (float)$$16);
         }
-        if (quadBounds != null) {
-            quadBounds[net.minecraft.core.Direction.WEST.get3DDataValue()] = f2;
-            quadBounds[net.minecraft.core.Direction.EAST.get3DDataValue()] = f5;
-            quadBounds[net.minecraft.core.Direction.DOWN.get3DDataValue()] = f3;
-            quadBounds[net.minecraft.core.Direction.UP.get3DDataValue()] = f6;
-            quadBounds[net.minecraft.core.Direction.NORTH.get3DDataValue()] = f4;
-            quadBounds[net.minecraft.core.Direction.SOUTH.get3DDataValue()] = f7;
-            n = DIRECTIONS.length;
-            quadBounds[net.minecraft.core.Direction.WEST.get3DDataValue() + n] = 1.0f - f2;
-            quadBounds[net.minecraft.core.Direction.EAST.get3DDataValue() + n] = 1.0f - f5;
-            quadBounds[net.minecraft.core.Direction.DOWN.get3DDataValue() + n] = 1.0f - f3;
-            quadBounds[net.minecraft.core.Direction.UP.get3DDataValue() + n] = 1.0f - f6;
-            quadBounds[net.minecraft.core.Direction.NORTH.get3DDataValue() + n] = 1.0f - f4;
-            quadBounds[net.minecraft.core.Direction.SOUTH.get3DDataValue() + n] = 1.0f - f7;
+        if ($$5 != null) {
+            $$5[net.minecraft.core.Direction.WEST.get3DDataValue()] = $$7;
+            $$5[net.minecraft.core.Direction.EAST.get3DDataValue()] = $$10;
+            $$5[net.minecraft.core.Direction.DOWN.get3DDataValue()] = $$8;
+            $$5[net.minecraft.core.Direction.UP.get3DDataValue()] = $$11;
+            $$5[net.minecraft.core.Direction.NORTH.get3DDataValue()] = $$9;
+            $$5[net.minecraft.core.Direction.SOUTH.get3DDataValue()] = $$12;
+            int $$17 = DIRECTIONS.length;
+            $$5[net.minecraft.core.Direction.WEST.get3DDataValue() + $$17] = 1.0f - $$7;
+            $$5[net.minecraft.core.Direction.EAST.get3DDataValue() + $$17] = 1.0f - $$10;
+            $$5[net.minecraft.core.Direction.DOWN.get3DDataValue() + $$17] = 1.0f - $$8;
+            $$5[net.minecraft.core.Direction.UP.get3DDataValue() + $$17] = 1.0f - $$11;
+            $$5[net.minecraft.core.Direction.NORTH.get3DDataValue() + $$17] = 1.0f - $$9;
+            $$5[net.minecraft.core.Direction.SOUTH.get3DDataValue() + $$17] = 1.0f - $$12;
         }
-        float f10 = 1.0E-4f;
-        f = 0.9999f;
-        switch (net.minecraft.client.renderer.block.ModelBlockRenderer$1.$SwitchMap$net$minecraft$core$Direction[face.ordinal()]) {
+        float $$18 = 1.0E-4f;
+        float $$19 = 0.9999f;
+        switch (net.minecraft.client.renderer.block.ModelBlockRenderer$1.$SwitchMap$net$minecraft$core$Direction[$$4.ordinal()]) {
             case 1: {
-                boundsFlags.set(1, f2 >= 1.0E-4f || f4 >= 1.0E-4f || f5 <= 0.9999f || f7 <= 0.9999f);
-                boundsFlags.set(0, f3 == f6 && (f3 < 1.0E-4f || state.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)blockReader, pos)));
+                $$6.set(1, $$7 >= 1.0E-4f || $$9 >= 1.0E-4f || $$10 <= 0.9999f || $$12 <= 0.9999f);
+                $$6.set(0, $$8 == $$11 && ($$8 < 1.0E-4f || $$1.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)$$0, $$2)));
                 break;
             }
             case 2: {
-                boundsFlags.set(1, f2 >= 1.0E-4f || f4 >= 1.0E-4f || f5 <= 0.9999f || f7 <= 0.9999f);
-                boundsFlags.set(0, f3 == f6 && (f6 > 0.9999f || state.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)blockReader, pos)));
+                $$6.set(1, $$7 >= 1.0E-4f || $$9 >= 1.0E-4f || $$10 <= 0.9999f || $$12 <= 0.9999f);
+                $$6.set(0, $$8 == $$11 && ($$11 > 0.9999f || $$1.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)$$0, $$2)));
                 break;
             }
             case 3: {
-                boundsFlags.set(1, f2 >= 1.0E-4f || f3 >= 1.0E-4f || f5 <= 0.9999f || f6 <= 0.9999f);
-                boundsFlags.set(0, f4 == f7 && (f4 < 1.0E-4f || state.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)blockReader, pos)));
+                $$6.set(1, $$7 >= 1.0E-4f || $$8 >= 1.0E-4f || $$10 <= 0.9999f || $$11 <= 0.9999f);
+                $$6.set(0, $$9 == $$12 && ($$9 < 1.0E-4f || $$1.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)$$0, $$2)));
                 break;
             }
             case 4: {
-                boundsFlags.set(1, f2 >= 1.0E-4f || f3 >= 1.0E-4f || f5 <= 0.9999f || f6 <= 0.9999f);
-                boundsFlags.set(0, f4 == f7 && (f7 > 0.9999f || state.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)blockReader, pos)));
+                $$6.set(1, $$7 >= 1.0E-4f || $$8 >= 1.0E-4f || $$10 <= 0.9999f || $$11 <= 0.9999f);
+                $$6.set(0, $$9 == $$12 && ($$12 > 0.9999f || $$1.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)$$0, $$2)));
                 break;
             }
             case 5: {
-                boundsFlags.set(1, f3 >= 1.0E-4f || f4 >= 1.0E-4f || f6 <= 0.9999f || f7 <= 0.9999f);
-                boundsFlags.set(0, f2 == f5 && (f2 < 1.0E-4f || state.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)blockReader, pos)));
+                $$6.set(1, $$8 >= 1.0E-4f || $$9 >= 1.0E-4f || $$11 <= 0.9999f || $$12 <= 0.9999f);
+                $$6.set(0, $$7 == $$10 && ($$7 < 1.0E-4f || $$1.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)$$0, $$2)));
                 break;
             }
             case 6: {
-                boundsFlags.set(1, f3 >= 1.0E-4f || f4 >= 1.0E-4f || f6 <= 0.9999f || f7 <= 0.9999f);
-                boundsFlags.set(0, f2 == f5 && (f5 > 0.9999f || state.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)blockReader, pos)));
+                $$6.set(1, $$8 >= 1.0E-4f || $$9 >= 1.0E-4f || $$11 <= 0.9999f || $$12 <= 0.9999f);
+                $$6.set(0, $$7 == $$10 && ($$10 > 0.9999f || $$1.isCollisionShapeFullBlock((net.minecraft.world.level.BlockGetter)$$0, $$2)));
             }
         }
     }
 
-    public void renderModelFaceFlat(net.minecraft.world.level.BlockAndTintGetter blockAccess, net.minecraft.world.level.block.state.BlockState state, net.minecraft.core.BlockPos pos, int brightness, int combinedOverlay, boolean ownBrightness, com.mojang.blaze3d.vertex.PoseStack matrixStack, com.mojang.blaze3d.vertex.VertexConsumer buffer, java.util.List<net.minecraft.client.renderer.block.model.BakedQuad> list, java.util.BitSet bitSet) {
-        for (net.minecraft.client.renderer.block.model.BakedQuad bakedQuad : list) {
-            if (ownBrightness) {
-                this.calculateShape(blockAccess, state, pos, bakedQuad.getVertices(), bakedQuad.getDirection(), null, bitSet);
-                net.minecraft.core.BlockPos blockPos = bitSet.get(0) ? pos.relative(bakedQuad.getDirection()) : pos;
-                brightness = net.minecraft.client.renderer.LevelRenderer.getLightColor((net.minecraft.world.level.BlockAndTintGetter)blockAccess, (net.minecraft.world.level.block.state.BlockState)state, (net.minecraft.core.BlockPos)blockPos);
+    public void renderModelFaceFlat(net.minecraft.world.level.BlockAndTintGetter $$0, net.minecraft.world.level.block.state.BlockState $$1, net.minecraft.core.BlockPos $$2, int $$3, int $$4, boolean $$5, com.mojang.blaze3d.vertex.PoseStack $$6, com.mojang.blaze3d.vertex.VertexConsumer $$7, java.util.List<net.minecraft.client.renderer.block.model.BakedQuad> $$8, java.util.BitSet $$9) {
+        for (net.minecraft.client.renderer.block.model.BakedQuad $$10 : $$8) {
+            if ($$5) {
+                this.calculateShape($$0, $$1, $$2, $$10.getVertices(), $$10.getDirection(), null, $$9);
+                net.minecraft.core.BlockPos $$11 = $$9.get(0) ? $$2.relative($$10.getDirection()) : $$2;
+                $$3 = net.minecraft.client.renderer.LevelRenderer.getLightColor((net.minecraft.world.level.BlockAndTintGetter)$$0, (net.minecraft.world.level.block.state.BlockState)$$1, (net.minecraft.core.BlockPos)$$11);
             }
-            float f = blockAccess.getShade(bakedQuad.getDirection(), bakedQuad.isShade());
-            this.putQuadData(blockAccess, state, pos, buffer, matrixStack.last(), bakedQuad, f, f, f, f, brightness, brightness, brightness, brightness, combinedOverlay);
+            float $$12 = $$0.getShade($$10.getDirection(), $$10.isShade());
+            this.putQuadData($$0, $$1, $$2, $$7, $$6.last(), $$10, $$12, $$12, $$12, $$12, $$3, $$3, $$3, $$3, $$4);
         }
     }
 
-    public void renderModel(com.mojang.blaze3d.vertex.PoseStack$Pose matrixEntry, com.mojang.blaze3d.vertex.VertexConsumer buffer, @javax.annotation.Nullable net.minecraft.world.level.block.state.BlockState state, net.minecraft.client.resources.model.BakedModel model, float red, float green, float blue, int combinedLight, int combinedOverlay) {
-        net.minecraft.util.RandomSource randomSource = net.minecraft.util.RandomSource.create();
-        long l = 42L;
-        for (net.minecraft.core.Direction direction : DIRECTIONS) {
-            randomSource.setSeed(42L);
-            net.minecraft.client.renderer.block.ModelBlockRenderer.renderQuadList((com.mojang.blaze3d.vertex.PoseStack$Pose)matrixEntry, (com.mojang.blaze3d.vertex.VertexConsumer)buffer, (float)red, (float)green, (float)blue, (java.util.List)model.getQuads(state, direction, randomSource), (int)combinedLight, (int)combinedOverlay);
+    public void renderModel(com.mojang.blaze3d.vertex.PoseStack$Pose $$0, com.mojang.blaze3d.vertex.VertexConsumer $$1, @javax.annotation.Nullable net.minecraft.world.level.block.state.BlockState $$2, net.minecraft.client.resources.model.BakedModel $$3, float $$4, float $$5, float $$6, int $$7, int $$8) {
+        net.minecraft.util.RandomSource $$9 = net.minecraft.util.RandomSource.create();
+        long $$10 = 42L;
+        for (net.minecraft.core.Direction $$11 : DIRECTIONS) {
+            $$9.setSeed(42L);
+            net.minecraft.client.renderer.block.ModelBlockRenderer.renderQuadList((com.mojang.blaze3d.vertex.PoseStack$Pose)$$0, (com.mojang.blaze3d.vertex.VertexConsumer)$$1, (float)$$4, (float)$$5, (float)$$6, (java.util.List)$$3.getQuads($$2, $$11, $$9), (int)$$7, (int)$$8);
         }
-        randomSource.setSeed(42L);
-        net.minecraft.client.renderer.block.ModelBlockRenderer.renderQuadList((com.mojang.blaze3d.vertex.PoseStack$Pose)matrixEntry, (com.mojang.blaze3d.vertex.VertexConsumer)buffer, (float)red, (float)green, (float)blue, (java.util.List)model.getQuads(state, null, randomSource), (int)combinedLight, (int)combinedOverlay);
+        $$9.setSeed(42L);
+        net.minecraft.client.renderer.block.ModelBlockRenderer.renderQuadList((com.mojang.blaze3d.vertex.PoseStack$Pose)$$0, (com.mojang.blaze3d.vertex.VertexConsumer)$$1, (float)$$4, (float)$$5, (float)$$6, (java.util.List)$$3.getQuads($$2, null, $$9), (int)$$7, (int)$$8);
     }
 
-    public static void renderQuadList(com.mojang.blaze3d.vertex.PoseStack$Pose matrixEntry, com.mojang.blaze3d.vertex.VertexConsumer buffer, float red, float green, float blue, java.util.List<net.minecraft.client.renderer.block.model.BakedQuad> listQuads, int combinedLight, int combinedOverlay) {
-        for (net.minecraft.client.renderer.block.model.BakedQuad bakedQuad : listQuads) {
-            float f;
-            float f2;
-            float f3;
-            if (bakedQuad.isTinted()) {
-                f3 = net.minecraft.util.Mth.clamp((float)red, (float)0.0f, (float)1.0f);
-                f2 = net.minecraft.util.Mth.clamp((float)green, (float)0.0f, (float)1.0f);
-                f = net.minecraft.util.Mth.clamp((float)blue, (float)0.0f, (float)1.0f);
+    public static void renderQuadList(com.mojang.blaze3d.vertex.PoseStack$Pose $$0, com.mojang.blaze3d.vertex.VertexConsumer $$1, float $$2, float $$3, float $$4, java.util.List<net.minecraft.client.renderer.block.model.BakedQuad> $$5, int $$6, int $$7) {
+        for (net.minecraft.client.renderer.block.model.BakedQuad $$8 : $$5) {
+            float $$14;
+            float $$13;
+            float $$12;
+            if ($$8.isTinted()) {
+                float $$9 = net.minecraft.util.Mth.clamp((float)$$2, (float)0.0f, (float)1.0f);
+                float $$10 = net.minecraft.util.Mth.clamp((float)$$3, (float)0.0f, (float)1.0f);
+                float $$11 = net.minecraft.util.Mth.clamp((float)$$4, (float)0.0f, (float)1.0f);
             } else {
-                f3 = 1.0f;
-                f2 = 1.0f;
-                f = 1.0f;
+                $$12 = 1.0f;
+                $$13 = 1.0f;
+                $$14 = 1.0f;
             }
-            buffer.putBulkData(matrixEntry, bakedQuad, f3, f2, f, combinedLight, combinedOverlay);
+            $$1.putBulkData($$0, $$8, $$12, $$13, $$14, $$6, $$7);
         }
     }
 