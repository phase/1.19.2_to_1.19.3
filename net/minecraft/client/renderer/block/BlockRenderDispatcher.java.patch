--- net/minecraft/client/renderer/block/BlockRenderDispatcher.java
+++ net/minecraft/client/renderer/block/BlockRenderDispatcher.java
@@ -26,13 +26,13 @@
         return this.blockModelShaper;
     }
 
-    public void renderBreakingTexture(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.core.BlockPos pos, net.minecraft.world.level.BlockAndTintGetter lightReader, com.mojang.blaze3d.vertex.PoseStack matrixStack, com.mojang.blaze3d.vertex.VertexConsumer vertexBuilder) {
-        if (blockState.getRenderShape() != net.minecraft.world.level.block.RenderShape.MODEL) {
+    public void renderBreakingTexture(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.BlockAndTintGetter $$2, com.mojang.blaze3d.vertex.PoseStack $$3, com.mojang.blaze3d.vertex.VertexConsumer $$4) {
+        if ($$0.getRenderShape() != net.minecraft.world.level.block.RenderShape.MODEL) {
             return;
         }
-        net.minecraft.client.resources.model.BakedModel bakedModel = this.blockModelShaper.getBlockModel(blockState);
-        long l = blockState.getSeed(pos);
-        this.modelRenderer.tesselateBlock(lightReader, bakedModel, blockState, pos, matrixStack, vertexBuilder, true, this.random, l, net.minecraft.client.renderer.texture.OverlayTexture.NO_OVERLAY);
+        net.minecraft.client.resources.model.BakedModel $$5 = this.blockModelShaper.getBlockModel($$0);
+        long $$6 = $$0.getSeed($$1);
+        this.modelRenderer.tesselateBlock($$2, $$5, $$0, $$1, $$3, $$4, true, this.random, $$6, net.minecraft.client.renderer.texture.OverlayTexture.NO_OVERLAY);
     }
 
     public void renderBatched(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.core.BlockPos $$1, net.minecraft.world.level.BlockAndTintGetter $$2, com.mojang.blaze3d.vertex.PoseStack $$3, com.mojang.blaze3d.vertex.VertexConsumer $$4, boolean $$5, net.minecraft.util.RandomSource $$6) {
@@ -66,32 +66,32 @@
         return this.modelRenderer;
     }
 
-    public net.minecraft.client.resources.model.BakedModel getBlockModel(net.minecraft.world.level.block.state.BlockState state) {
-        return this.blockModelShaper.getBlockModel(state);
+    public net.minecraft.client.resources.model.BakedModel getBlockModel(net.minecraft.world.level.block.state.BlockState $$0) {
+        return this.blockModelShaper.getBlockModel($$0);
     }
 
-    public void renderSingleBlock(net.minecraft.world.level.block.state.BlockState blockState, com.mojang.blaze3d.vertex.PoseStack matrixStack, net.minecraft.client.renderer.MultiBufferSource bufferType, int combinedLight, int combinedOverlay) {
-        net.minecraft.world.level.block.RenderShape renderShape = blockState.getRenderShape();
-        if (renderShape == net.minecraft.world.level.block.RenderShape.INVISIBLE) {
+    public void renderSingleBlock(net.minecraft.world.level.block.state.BlockState $$0, com.mojang.blaze3d.vertex.PoseStack $$1, net.minecraft.client.renderer.MultiBufferSource $$2, int $$3, int $$4) {
+        net.minecraft.world.level.block.RenderShape $$5 = $$0.getRenderShape();
+        if ($$5 == net.minecraft.world.level.block.RenderShape.INVISIBLE) {
             return;
         }
-        switch (net.minecraft.client.renderer.block.BlockRenderDispatcher$1.$SwitchMap$net$minecraft$world$level$block$RenderShape[renderShape.ordinal()]) {
+        switch (net.minecraft.client.renderer.block.BlockRenderDispatcher$1.$SwitchMap$net$minecraft$world$level$block$RenderShape[$$5.ordinal()]) {
             case 1: {
-                net.minecraft.client.resources.model.BakedModel bakedModel = this.getBlockModel(blockState);
-                int n = this.blockColors.getColor(blockState, null, null, 0);
-                float f = (float)(n >> 16 & 0xFF) / 255.0f;
-                float f2 = (float)(n >> 8 & 0xFF) / 255.0f;
-                float f3 = (float)(n & 0xFF) / 255.0f;
-                this.modelRenderer.renderModel(matrixStack.last(), bufferType.getBuffer(net.minecraft.client.renderer.ItemBlockRenderTypes.getRenderType((net.minecraft.world.level.block.state.BlockState)blockState, (boolean)false)), blockState, bakedModel, f, f2, f3, combinedLight, combinedOverlay);
+                net.minecraft.client.resources.model.BakedModel $$6 = this.getBlockModel($$0);
+                int $$7 = this.blockColors.getColor($$0, null, null, 0);
+                float $$8 = (float)($$7 >> 16 & 0xFF) / 255.0f;
+                float $$9 = (float)($$7 >> 8 & 0xFF) / 255.0f;
+                float $$10 = (float)($$7 & 0xFF) / 255.0f;
+                this.modelRenderer.renderModel($$1.last(), $$2.getBuffer(net.minecraft.client.renderer.ItemBlockRenderTypes.getRenderType((net.minecraft.world.level.block.state.BlockState)$$0, (boolean)false)), $$0, $$6, $$8, $$9, $$10, $$3, $$4);
                 break;
             }
             case 2: {
-                this.blockEntityRenderer.renderByItem(new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)blockState.getBlock()), net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.NONE, matrixStack, bufferType, combinedLight, combinedOverlay);
+                this.blockEntityRenderer.renderByItem(new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)$$0.getBlock()), net.minecraft.client.renderer.block.model.ItemTransforms$TransformType.NONE, $$1, $$2, $$3, $$4);
             }
         }
     }
 
-    public void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager resourceManager) {
+    public void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager $$0) {
         this.liquidBlockRenderer.setupSprites();
     }
 }