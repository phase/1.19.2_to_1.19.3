--- net/minecraft/client/multiplayer/ClientPacketListener.java
+++ net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -10,14 +10,19 @@
     public static net.minecraft.network.chat.Component GENERIC_DISCONNECT_MESSAGE;
     public static net.minecraft.network.chat.Component UNSECURE_SERVER_TOAST_TITLE;
     public static net.minecraft.network.chat.Component UNSERURE_SERVER_TOAST;
-    public static int UNACKNOWLEDGED_MESSAGES_THRESHOLD = 64;
+    public static net.minecraft.network.chat.Component INVALID_PACKET;
+    public static net.minecraft.network.chat.Component CHAT_VALIDATION_FAILED_ERROR;
+    public static int PENDING_OFFSET_THRESHOLD = 64;
     public net.minecraft.network.Connection connection;
+    @javax.annotation.Nullable
+    public net.minecraft.client.multiplayer.ServerData serverData;
     public com.mojang.authlib.GameProfile localGameProfile;
     public net.minecraft.client.gui.screens.Screen callbackScreen;
     public net.minecraft.client.Minecraft minecraft;
     public net.minecraft.client.multiplayer.ClientLevel level;
     public net.minecraft.client.multiplayer.ClientLevel$ClientLevelData levelData;
     public java.util.Map<java.util.UUID, net.minecraft.client.multiplayer.PlayerInfo> playerInfoMap;
+    public net.minecraft.util.SortedArraySet<net.minecraft.client.multiplayer.PlayerInfo> listedPlayers;
     public net.minecraft.client.multiplayer.ClientAdvancements advancements;
     public net.minecraft.client.multiplayer.ClientSuggestionProvider suggestionsProvider;
     public net.minecraft.client.DebugQueryHandler debugQueryHandler;
@@ -28,15 +33,17 @@
     public net.minecraft.world.item.crafting.RecipeManager recipeManager;
     public java.util.UUID id;
     public java.util.Set<net.minecraft.resources.ResourceKey<net.minecraft.world.level.Level>> levels;
-    public net.minecraft.core.RegistryAccess$Frozen registryAccess;
+    public net.minecraft.core.LayeredRegistryAccess<net.minecraft.client.multiplayer.ClientRegistryLayer> registryAccess;
+    public net.minecraft.world.flag.FeatureFlagSet enabledFeatures;
     public net.minecraft.client.ClientTelemetryManager telemetryManager;
     public net.minecraft.network.chat.SignedMessageChain$Encoder signedMessageEncoder;
-    public net.minecraft.network.chat.LastSeenMessagesTracker lastSeenMessagesTracker;
-    public java.util.Optional<net.minecraft.network.chat.LastSeenMessages$Entry> lastUnacknowledgedReceivedMessage;
-    public int unacknowledgedReceivedMessageCount;
+    public net.minecraft.network.chat.LastSeenMessagesTracker lastSeenMessages;
+    public net.minecraft.network.chat.MessageSignatureCache messageSignatureCache;
+    public net.minecraft.network.chat.MessageSignature$Unpacker messageSignatureUnpacker;
 
-    public net.minecraft.client.multiplayer.ClientPacketListener(net.minecraft.client.Minecraft $$0, net.minecraft.client.gui.screens.Screen $$1, net.minecraft.network.Connection $$2, com.mojang.authlib.GameProfile $$3, net.minecraft.client.ClientTelemetryManager $$4) {
+    public net.minecraft.client.multiplayer.ClientPacketListener(net.minecraft.client.Minecraft $$02, net.minecraft.client.gui.screens.Screen $$1, net.minecraft.network.Connection $$2, net.minecraft.network.chat.LocalChatSession $$3, @javax.annotation.Nullable net.minecraft.client.multiplayer.ServerData $$4, com.mojang.authlib.GameProfile $$5, net.minecraft.client.ClientTelemetryManager $$6) {
         this.playerInfoMap = com.google.common.collect.Maps.newHashMap();
+        this.listedPlayers = net.minecraft.util.SortedArraySet.create((java.util.Comparator)java.util.Comparator.comparing($$0 -> $$0.getProfile().getName(), java.lang.String::compareToIgnoreCase));
         this.debugQueryHandler = new net.minecraft.client.DebugQueryHandler(this);
         this.serverChunkRadius = 3;
         this.serverSimulationDistance = 3;
@@ -44,17 +51,20 @@
         this.commands = new com.mojang.brigadier.CommandDispatcher();
         this.recipeManager = new net.minecraft.world.item.crafting.RecipeManager();
         this.id = java.util.UUID.randomUUID();
-        this.registryAccess = (net.minecraft.core.RegistryAccess$Frozen)net.minecraft.core.RegistryAccess.BUILTIN.get();
-        this.signedMessageEncoder = new net.minecraft.network.chat.SignedMessageChain().encoder();
-        this.lastSeenMessagesTracker = new net.minecraft.network.chat.LastSeenMessagesTracker(5);
-        this.lastUnacknowledgedReceivedMessage = java.util.Optional.empty();
-        this.minecraft = $$0;
+        this.registryAccess = net.minecraft.client.multiplayer.ClientRegistryLayer.createRegistryAccess();
+        this.enabledFeatures = net.minecraft.world.flag.FeatureFlags.DEFAULT_FLAGS;
+        this.lastSeenMessages = new net.minecraft.network.chat.LastSeenMessagesTracker(20);
+        this.messageSignatureCache = net.minecraft.network.chat.MessageSignatureCache.createDefault();
+        this.messageSignatureUnpacker = this.messageSignatureCache.unpacker();
+        this.minecraft = $$02;
         this.callbackScreen = $$1;
         this.connection = $$2;
-        this.localGameProfile = $$3;
-        this.advancements = new net.minecraft.client.multiplayer.ClientAdvancements($$0);
-        this.suggestionsProvider = new net.minecraft.client.multiplayer.ClientSuggestionProvider(this, $$0);
-        this.telemetryManager = $$4;
+        this.serverData = $$4;
+        this.localGameProfile = $$5;
+        this.advancements = new net.minecraft.client.multiplayer.ClientAdvancements($$02);
+        this.suggestionsProvider = new net.minecraft.client.multiplayer.ClientSuggestionProvider(this, $$02);
+        this.telemetryManager = $$6;
+        this.signedMessageEncoder = $$3.createMessageEncoder($$5.getId());
     }
 
     public net.minecraft.client.multiplayer.ClientSuggestionProvider getSuggestionsProvider() {
@@ -69,25 +79,25 @@
         return this.recipeManager;
     }
 
-    public void handleLogin(net.minecraft.network.protocol.game.ClientboundLoginPacket packet) {
-        net.minecraft.client.multiplayer.ClientLevel$ClientLevelData clientLevelData;
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+    public void handleLogin(net.minecraft.network.protocol.game.ClientboundLoginPacket $$02) {
+        net.minecraft.client.multiplayer.ClientLevel$ClientLevelData $$6;
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$02, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
         this.minecraft.gameMode = new net.minecraft.client.multiplayer.MultiPlayerGameMode(this.minecraft, this);
-        this.registryAccess = packet.registryHolder();
+        this.registryAccess = this.registryAccess.replaceFrom((java.lang.Object)net.minecraft.client.multiplayer.ClientRegistryLayer.REMOTE, new net.minecraft.core.RegistryAccess$Frozen[]{$$02.registryHolder()});
         if (!this.connection.isMemoryConnection()) {
-            this.registryAccess.registries().forEach($$0 -> $$0.value().resetTags());
+            this.registryAccess.compositeAccess().registries().forEach($$0 -> $$0.value().resetTags());
         }
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList((java.lang.Iterable)packet.levels());
-        java.util.Collections.shuffle((java.util.List)arrayList);
-        this.levels = com.google.common.collect.Sets.newLinkedHashSet((java.lang.Iterable)arrayList);
-        net.minecraft.resources.ResourceKey resourceKey = packet.dimension();
-        net.minecraft.core.Holder holder = this.registryAccess.registryOrThrow(net.minecraft.core.Registry.DIMENSION_TYPE_REGISTRY).getHolderOrThrow(packet.dimensionType());
-        this.serverChunkRadius = packet.chunkRadius();
-        this.serverSimulationDistance = packet.simulationDistance();
-        boolean bl = packet.isDebug();
-        boolean bl2 = packet.isFlat();
-        this.levelData = clientLevelData = new net.minecraft.client.multiplayer.ClientLevel$ClientLevelData(net.minecraft.world.Difficulty.NORMAL, packet.hardcore(), bl2);
-        this.level = new net.minecraft.client.multiplayer.ClientLevel(this, clientLevelData, resourceKey, holder, this.serverChunkRadius, this.serverSimulationDistance, () -> ((net.minecraft.client.Minecraft)this.minecraft).getProfiler(), this.minecraft.levelRenderer, bl, packet.seed());
+        java.util.ArrayList $$1 = com.google.common.collect.Lists.newArrayList((java.lang.Iterable)$$02.levels());
+        java.util.Collections.shuffle((java.util.List)$$1);
+        this.levels = com.google.common.collect.Sets.newLinkedHashSet((java.lang.Iterable)$$1);
+        net.minecraft.resources.ResourceKey $$2 = $$02.dimension();
+        net.minecraft.core.Holder$Reference $$3 = this.registryAccess.compositeAccess().registryOrThrow(net.minecraft.core.Registry.DIMENSION_TYPE_REGISTRY).getHolderOrThrow($$02.dimensionType());
+        this.serverChunkRadius = $$02.chunkRadius();
+        this.serverSimulationDistance = $$02.simulationDistance();
+        boolean $$4 = $$02.isDebug();
+        boolean $$5 = $$02.isFlat();
+        this.levelData = $$6 = new net.minecraft.client.multiplayer.ClientLevel$ClientLevelData(net.minecraft.world.Difficulty.NORMAL, $$02.hardcore(), $$5);
+        this.level = new net.minecraft.client.multiplayer.ClientLevel(this, $$6, $$2, (net.minecraft.core.Holder)$$3, this.serverChunkRadius, this.serverSimulationDistance, () -> ((net.minecraft.client.Minecraft)this.minecraft).getProfiler(), this.minecraft.levelRenderer, $$4, $$02.seed());
         this.minecraft.setLevel(this.level);
         if (this.minecraft.player == null) {
             this.minecraft.player = this.minecraft.gameMode.createPlayer(this.level, new net.minecraft.stats.StatsCounter(), new net.minecraft.client.ClientRecipeBook());
@@ -98,35 +108,35 @@
         }
         this.minecraft.debugRenderer.clear();
         this.minecraft.player.resetPos();
-        int n = packet.playerId();
-        this.minecraft.player.setId(n);
-        this.level.addPlayer(n, (net.minecraft.client.player.AbstractClientPlayer)this.minecraft.player);
+        int $$7 = $$02.playerId();
+        this.minecraft.player.setId($$7);
+        this.level.addPlayer($$7, (net.minecraft.client.player.AbstractClientPlayer)this.minecraft.player);
         this.minecraft.player.input = new net.minecraft.client.player.KeyboardInput(this.minecraft.options);
         this.minecraft.gameMode.adjustPlayer((net.minecraft.world.entity.player.Player)this.minecraft.player);
         this.minecraft.cameraEntity = this.minecraft.player;
         this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.ReceivingLevelScreen());
-        this.minecraft.player.setReducedDebugInfo(packet.reducedDebugInfo());
-        this.minecraft.player.setShowDeathScreen(packet.showDeathScreen());
-        this.minecraft.player.setLastDeathLocation(packet.lastDeathLocation());
-        this.minecraft.gameMode.setLocalMode(packet.gameType(), packet.previousGameType());
-        this.minecraft.options.setServerRenderDistance(packet.chunkRadius());
+        this.minecraft.player.setReducedDebugInfo($$02.reducedDebugInfo());
+        this.minecraft.player.setShowDeathScreen($$02.showDeathScreen());
+        this.minecraft.player.setLastDeathLocation($$02.lastDeathLocation());
+        this.minecraft.gameMode.setLocalMode($$02.gameType(), $$02.previousGameType());
+        this.minecraft.options.setServerRenderDistance($$02.chunkRadius());
         this.minecraft.options.broadcastOptions();
         this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket(net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket.BRAND, new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer()).writeUtf(net.minecraft.client.ClientBrandRetriever.getClientModName())));
         this.minecraft.getGame().onStartGameSession();
-        this.telemetryManager.onPlayerInfoReceived(packet.gameType(), packet.hardcore());
+        this.telemetryManager.onPlayerInfoReceived($$02.gameType(), $$02.hardcore());
     }
 
-    public void handleAddEntity(net.minecraft.network.protocol.game.ClientboundAddEntityPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.EntityType entityType = packet.getType();
-        net.minecraft.world.entity.Entity entity = entityType.create((net.minecraft.world.level.Level)this.level);
-        if (entity != null) {
-            entity.recreateFromPacket(packet);
-            int n = packet.getId();
-            this.level.putNonPlayerEntity(n, entity);
-            this.postAddEntitySoundInstance(entity);
+    public void handleAddEntity(net.minecraft.network.protocol.game.ClientboundAddEntityPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.EntityType $$1 = $$0.getType();
+        net.minecraft.world.entity.Entity $$2 = $$1.create((net.minecraft.world.level.Level)this.level);
+        if ($$2 != null) {
+            $$2.recreateFromPacket($$0);
+            int $$3 = $$0.getId();
+            this.level.putNonPlayerEntity($$3, $$2);
+            this.postAddEntitySoundInstance($$2);
         } else {
-            LOGGER.warn("Skipping Entity with id {}", (java.lang.Object)entityType);
+            LOGGER.warn("Skipping Entity with id {}", (java.lang.Object)$$1);
         }
     }
 
@@ -145,113 +155,113 @@
         }
     }
 
-    public void handleAddExperienceOrb(net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        double d = packet.getX();
-        double d2 = packet.getY();
-        double d3 = packet.getZ();
-        net.minecraft.world.entity.ExperienceOrb experienceOrb = new net.minecraft.world.entity.ExperienceOrb((net.minecraft.world.level.Level)this.level, d, d2, d3, packet.getValue());
-        experienceOrb.syncPacketPositionCodec(d, d2, d3);
-        experienceOrb.setYRot(0.0f);
-        experienceOrb.setXRot(0.0f);
-        experienceOrb.setId(packet.getId());
-        this.level.putNonPlayerEntity(packet.getId(), (net.minecraft.world.entity.Entity)experienceOrb);
+    public void handleAddExperienceOrb(net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        double $$1 = $$0.getX();
+        double $$2 = $$0.getY();
+        double $$3 = $$0.getZ();
+        net.minecraft.world.entity.ExperienceOrb $$4 = new net.minecraft.world.entity.ExperienceOrb((net.minecraft.world.level.Level)this.level, $$1, $$2, $$3, $$0.getValue());
+        $$4.syncPacketPositionCodec($$1, $$2, $$3);
+        $$4.setYRot(0.0f);
+        $$4.setXRot(0.0f);
+        $$4.setId($$0.getId());
+        this.level.putNonPlayerEntity($$0.getId(), (net.minecraft.world.entity.Entity)$$4);
     }
 
-    public void handleSetEntityMotion(net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getId());
-        if (entity == null) {
+    public void handleSetEntityMotion(net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getId());
+        if ($$1 == null) {
             return;
         }
-        entity.lerpMotion((double)packet.getXa() / 8000.0, (double)packet.getYa() / 8000.0, (double)packet.getZa() / 8000.0);
+        $$1.lerpMotion((double)$$0.getXa() / 8000.0, (double)$$0.getYa() / 8000.0, (double)$$0.getZa() / 8000.0);
     }
 
-    public void handleSetEntityData(net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getId());
-        if (entity != null && packet.getUnpackedData() != null) {
-            entity.getEntityData().assignValues(packet.getUnpackedData());
+    public void handleSetEntityData(net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getId());
+        if ($$1 != null && $$0.getUnpackedData() != null) {
+            $$1.getEntityData().assignValues($$0.getUnpackedData());
         }
     }
 
-    public void handleAddPlayer(net.minecraft.network.protocol.game.ClientboundAddPlayerPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.multiplayer.PlayerInfo playerInfo = this.getPlayerInfo(packet.getPlayerId());
-        if (playerInfo == null) {
-            LOGGER.warn("Server attempted to add player prior to sending player info (Player id {})", (java.lang.Object)packet.getPlayerId());
+    public void handleAddPlayer(net.minecraft.network.protocol.game.ClientboundAddPlayerPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.multiplayer.PlayerInfo $$1 = this.getPlayerInfo($$0.getPlayerId());
+        if ($$1 == null) {
+            LOGGER.warn("Server attempted to add player prior to sending player info (Player id {})", (java.lang.Object)$$0.getPlayerId());
             return;
         }
-        double d = packet.getX();
-        double d2 = packet.getY();
-        double d3 = packet.getZ();
-        float f = (float)(packet.getyRot() * 360) / 256.0f;
-        float f2 = (float)(packet.getxRot() * 360) / 256.0f;
-        int n = packet.getEntityId();
-        net.minecraft.client.player.RemotePlayer remotePlayer = new net.minecraft.client.player.RemotePlayer(this.minecraft.level, playerInfo.getProfile(), playerInfo.getProfilePublicKey());
-        remotePlayer.setId(n);
-        remotePlayer.syncPacketPositionCodec(d, d2, d3);
-        remotePlayer.absMoveTo(d, d2, d3, f, f2);
-        remotePlayer.setOldPosAndRot();
-        this.level.addPlayer(n, (net.minecraft.client.player.AbstractClientPlayer)remotePlayer);
+        double $$2 = $$0.getX();
+        double $$3 = $$0.getY();
+        double $$4 = $$0.getZ();
+        float $$5 = (float)($$0.getyRot() * 360) / 256.0f;
+        float $$6 = (float)($$0.getxRot() * 360) / 256.0f;
+        int $$7 = $$0.getEntityId();
+        net.minecraft.client.player.RemotePlayer $$8 = new net.minecraft.client.player.RemotePlayer(this.minecraft.level, $$1.getProfile());
+        $$8.setId($$7);
+        $$8.syncPacketPositionCodec($$2, $$3, $$4);
+        $$8.absMoveTo($$2, $$3, $$4, $$5, $$6);
+        $$8.setOldPosAndRot();
+        this.level.addPlayer($$7, (net.minecraft.client.player.AbstractClientPlayer)$$8);
     }
 
-    public void handleTeleportEntity(net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getId());
-        if (entity == null) {
+    public void handleTeleportEntity(net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getId());
+        if ($$1 == null) {
             return;
         }
-        double d = packet.getX();
-        double d2 = packet.getY();
-        double d3 = packet.getZ();
-        entity.syncPacketPositionCodec(d, d2, d3);
-        if (!entity.isControlledByLocalInstance()) {
-            float f = (float)(packet.getyRot() * 360) / 256.0f;
-            float f2 = (float)(packet.getxRot() * 360) / 256.0f;
-            entity.lerpTo(d, d2, d3, f, f2, 3, true);
-            entity.setOnGround(packet.isOnGround());
+        double $$2 = $$0.getX();
+        double $$3 = $$0.getY();
+        double $$4 = $$0.getZ();
+        $$1.syncPacketPositionCodec($$2, $$3, $$4);
+        if (!$$1.isControlledByLocalInstance()) {
+            float $$5 = (float)($$0.getyRot() * 360) / 256.0f;
+            float $$6 = (float)($$0.getxRot() * 360) / 256.0f;
+            $$1.lerpTo($$2, $$3, $$4, $$5, $$6, 3, true);
+            $$1.setOnGround($$0.isOnGround());
         }
     }
 
-    public void handleSetCarriedItem(net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        if (net.minecraft.world.entity.player.Inventory.isHotbarSlot((int)packet.getSlot())) {
-            this.minecraft.player.getInventory().selected = packet.getSlot();
+    public void handleSetCarriedItem(net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        if (net.minecraft.world.entity.player.Inventory.isHotbarSlot((int)$$0.getSlot())) {
+            this.minecraft.player.getInventory().selected = $$0.getSlot();
         }
     }
 
-    public void handleMoveEntity(net.minecraft.network.protocol.game.ClientboundMoveEntityPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = packet.getEntity((net.minecraft.world.level.Level)this.level);
-        if (entity == null) {
+    public void handleMoveEntity(net.minecraft.network.protocol.game.ClientboundMoveEntityPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = $$0.getEntity((net.minecraft.world.level.Level)this.level);
+        if ($$1 == null) {
             return;
         }
-        if (!entity.isControlledByLocalInstance()) {
-            if (packet.hasPosition()) {
-                net.minecraft.network.protocol.game.VecDeltaCodec vecDeltaCodec = entity.getPositionCodec();
-                net.minecraft.world.phys.Vec3 vec3 = vecDeltaCodec.decode((long)packet.getXa(), (long)packet.getYa(), (long)packet.getZa());
-                vecDeltaCodec.setBase(vec3);
-                float f = packet.hasRotation() ? (float)(packet.getyRot() * 360) / 256.0f : entity.getYRot();
-                float f2 = packet.hasRotation() ? (float)(packet.getxRot() * 360) / 256.0f : entity.getXRot();
-                entity.lerpTo(vec3.x(), vec3.y(), vec3.z(), f, f2, 3, false);
-            } else if (packet.hasRotation()) {
-                float f = (float)(packet.getyRot() * 360) / 256.0f;
-                float f3 = (float)(packet.getxRot() * 360) / 256.0f;
-                entity.lerpTo(entity.getX(), entity.getY(), entity.getZ(), f, f3, 3, false);
+        if (!$$1.isControlledByLocalInstance()) {
+            if ($$0.hasPosition()) {
+                net.minecraft.network.protocol.game.VecDeltaCodec $$2 = $$1.getPositionCodec();
+                net.minecraft.world.phys.Vec3 $$3 = $$2.decode((long)$$0.getXa(), (long)$$0.getYa(), (long)$$0.getZa());
+                $$2.setBase($$3);
+                float $$4 = $$0.hasRotation() ? (float)($$0.getyRot() * 360) / 256.0f : $$1.getYRot();
+                float $$5 = $$0.hasRotation() ? (float)($$0.getxRot() * 360) / 256.0f : $$1.getXRot();
+                $$1.lerpTo($$3.x(), $$3.y(), $$3.z(), $$4, $$5, 3, false);
+            } else if ($$0.hasRotation()) {
+                float $$6 = (float)($$0.getyRot() * 360) / 256.0f;
+                float $$7 = (float)($$0.getxRot() * 360) / 256.0f;
+                $$1.lerpTo($$1.getX(), $$1.getY(), $$1.getZ(), $$6, $$7, 3, false);
             }
-            entity.setOnGround(packet.isOnGround());
+            $$1.setOnGround($$0.isOnGround());
         }
     }
 
-    public void handleRotateMob(net.minecraft.network.protocol.game.ClientboundRotateHeadPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = packet.getEntity((net.minecraft.world.level.Level)this.level);
-        if (entity == null) {
+    public void handleRotateMob(net.minecraft.network.protocol.game.ClientboundRotateHeadPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = $$0.getEntity((net.minecraft.world.level.Level)this.level);
+        if ($$1 == null) {
             return;
         }
-        float f = (float)(packet.getYHeadRot() * 360) / 256.0f;
-        entity.lerpHeadTo(f, 3);
+        float $$2 = (float)($$0.getYHeadRot() * 360) / 256.0f;
+        $$1.lerpHeadTo($$2, 3);
     }
 
     public void handleRemoveEntities(net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket $$02) {
@@ -259,87 +269,80 @@
         $$02.getEntityIds().forEach($$0 -> this.level.removeEntity($$0, net.minecraft.world.entity.Entity$RemovalReason.DISCARDED));
     }
 
-    public void handleMovePlayer(net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket packet) {
-        double d;
-        double d2;
-        double d3;
-        double d4;
-        double d5;
-        double d6;
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.player.LocalPlayer localPlayer = this.minecraft.player;
-        if (packet.requestDismountVehicle()) {
-            localPlayer.removeVehicle();
+    public void handleMovePlayer(net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket $$0) {
+        double $$17;
+        double $$16;
+        double $$13;
+        double $$12;
+        double $$9;
+        double $$8;
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.player.LocalPlayer $$1 = this.minecraft.player;
+        if ($$0.requestDismountVehicle()) {
+            $$1.removeVehicle();
         }
-        net.minecraft.world.phys.Vec3 vec3 = localPlayer.getDeltaMovement();
-        boolean bl = packet.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.X);
-        boolean bl2 = packet.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.Y);
-        boolean bl3 = packet.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.Z);
-        if (bl) {
-            d6 = vec3.x();
-            d5 = localPlayer.getX() + packet.getX();
-            localPlayer.xOld += packet.getX();
+        net.minecraft.world.phys.Vec3 $$2 = $$1.getDeltaMovement();
+        boolean $$3 = $$0.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.X);
+        boolean $$4 = $$0.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.Y);
+        boolean $$5 = $$0.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.Z);
+        if ($$3) {
+            double $$6 = $$2.x();
+            double $$7 = $$1.getX() + $$0.getX();
+            $$1.xOld += $$0.getX();
+            $$1.xo += $$0.getX();
         } else {
-            d6 = 0.0;
-            localPlayer.xOld = d5 = packet.getX();
+            $$8 = 0.0;
+            $$1.xOld = $$9 = $$0.getX();
+            $$1.xo = $$9;
         }
-        if (bl2) {
-            d4 = vec3.y();
-            d3 = localPlayer.getY() + packet.getY();
-            localPlayer.yOld += packet.getY();
+        if ($$4) {
+            double $$10 = $$2.y();
+            double $$11 = $$1.getY() + $$0.getY();
+            $$1.yOld += $$0.getY();
+            $$1.yo += $$0.getY();
         } else {
-            d4 = 0.0;
-            localPlayer.yOld = d3 = packet.getY();
+            $$12 = 0.0;
+            $$1.yOld = $$13 = $$0.getY();
+            $$1.yo = $$13;
         }
-        if (bl3) {
-            d2 = vec3.z();
-            d = localPlayer.getZ() + packet.getZ();
-            localPlayer.zOld += packet.getZ();
+        if ($$5) {
+            double $$14 = $$2.z();
+            double $$15 = $$1.getZ() + $$0.getZ();
+            $$1.zOld += $$0.getZ();
+            $$1.zo += $$0.getZ();
         } else {
-            d2 = 0.0;
-            localPlayer.zOld = d = packet.getZ();
+            $$16 = 0.0;
+            $$1.zOld = $$17 = $$0.getZ();
+            $$1.zo = $$17;
         }
-        localPlayer.setPosRaw(d5, d3, d);
-        localPlayer.xo = d5;
-        localPlayer.yo = d3;
-        localPlayer.zo = d;
-        localPlayer.setDeltaMovement(d6, d4, d2);
-        float f = packet.getYRot();
-        float f2 = packet.getXRot();
-        if (packet.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.X_ROT)) {
-            f2 += localPlayer.getXRot();
+        $$1.setPos($$9, $$13, $$17);
+        $$1.setDeltaMovement($$8, $$12, $$16);
+        float $$18 = $$0.getYRot();
+        float $$19 = $$0.getXRot();
+        if ($$0.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.X_ROT)) {
+            $$1.setXRot($$1.getXRot() + $$19);
+            $$1.xRotO += $$19;
+        } else {
+            $$1.setXRot($$19);
+            $$1.xRotO = $$19;
         }
-        if (packet.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.Y_ROT)) {
-            f += localPlayer.getYRot();
+        if ($$0.getRelativeArguments().contains((java.lang.Object)net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument.Y_ROT)) {
+            $$1.setYRot($$1.getYRot() + $$18);
+            $$1.yRotO += $$18;
+        } else {
+            $$1.setYRot($$18);
+            $$1.yRotO = $$18;
         }
-        localPlayer.absMoveTo(d5, d3, d, f, f2);
-        this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket(packet.getId()));
-        this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$PosRot(localPlayer.getX(), localPlayer.getY(), localPlayer.getZ(), localPlayer.getYRot(), localPlayer.getXRot(), false));
+        this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket($$0.getId()));
+        this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$PosRot($$1.getX(), $$1.getY(), $$1.getZ(), $$1.getYRot(), $$1.getXRot(), false));
     }
 
-    public void handleChatPreview(net.minecraft.network.protocol.game.ClientboundChatPreviewPacket $$0) {
+    public void handleChunkBlocksUpdate(net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket $$0) {
         net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.gui.screens.ChatScreen $$1 = this.minecraft.gui.getChat().getFocusedChat();
-        if ($$1 != null) {
-            $$1.getChatPreview().handleResponse($$0.queryId(), $$0.preview());
-        }
+        int $$12 = 0x13 | ($$0.shouldSuppressLightUpdates() ? 128 : 0);
+        $$0.runUpdates(($$1, $$2) -> this.level.setServerVerifiedBlockState($$1, $$2, $$12));
     }
 
-    public void handleSetDisplayChatPreview(net.minecraft.network.protocol.game.ClientboundSetDisplayChatPreviewPacket $$0) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.multiplayer.ServerData $$1 = this.minecraft.getCurrentServer();
-        if ($$1 == null) {
-            return;
-        }
-        $$1.setChatPreviewEnabled($$0.enabled());
-    }
-
-    public void handleChunkBlocksUpdate(net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        int n = 0x13 | (packet.shouldSuppressLightUpdates() ? 128 : 0);
-        packet.runUpdates(($$1, $$2) -> this.level.setServerVerifiedBlockState($$1, $$2, n));
-    }
-
     public void handleLevelChunkWithLight(net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket $$0) {
         net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
         this.updateLevelChunk($$0.getX(), $$0.getZ(), $$0.getChunkData());
@@ -374,13 +377,13 @@
         this.level.setLightReady($$1, $$2);
     }
 
-    public void handleForgetLevelChunk(net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        int n = packet.getX();
-        int n2 = packet.getZ();
-        net.minecraft.client.multiplayer.ClientChunkCache clientChunkCache = this.level.getChunkSource();
-        clientChunkCache.drop(n, n2);
-        this.queueLightUpdate(packet);
+    public void handleForgetLevelChunk(net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        int $$1 = $$0.getX();
+        int $$2 = $$0.getZ();
+        net.minecraft.client.multiplayer.ClientChunkCache $$3 = this.level.getChunkSource();
+        $$3.drop($$1, $$2);
+        this.queueLightUpdate($$0);
     }
 
     public void queueLightUpdate(net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket $$0) {
@@ -394,56 +397,56 @@
         });
     }
 
-    public void handleBlockUpdate(net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.level.setServerVerifiedBlockState(packet.getPos(), packet.getBlockState(), 19);
+    public void handleBlockUpdate(net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.level.setServerVerifiedBlockState($$0.getPos(), $$0.getBlockState(), 19);
     }
 
-    public void handleDisconnect(net.minecraft.network.protocol.game.ClientboundDisconnectPacket packet) {
-        this.connection.disconnect(packet.getReason());
+    public void handleDisconnect(net.minecraft.network.protocol.game.ClientboundDisconnectPacket $$0) {
+        this.connection.disconnect($$0.getReason());
     }
 
-    public void onDisconnect(net.minecraft.network.chat.Component reason) {
+    public void onDisconnect(net.minecraft.network.chat.Component $$0) {
         this.minecraft.clearLevel();
         this.telemetryManager.onDisconnect();
         if (this.callbackScreen != null) {
             if (this.callbackScreen instanceof net.minecraft.realms.RealmsScreen) {
-                this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.realms.DisconnectedRealmsScreen(this.callbackScreen, GENERIC_DISCONNECT_MESSAGE, reason));
+                this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.realms.DisconnectedRealmsScreen(this.callbackScreen, GENERIC_DISCONNECT_MESSAGE, $$0));
             } else {
-                this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.DisconnectedScreen(this.callbackScreen, GENERIC_DISCONNECT_MESSAGE, reason));
+                this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.DisconnectedScreen(this.callbackScreen, GENERIC_DISCONNECT_MESSAGE, $$0));
             }
         } else {
-            this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.DisconnectedScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.TitleScreen()), GENERIC_DISCONNECT_MESSAGE, reason));
+            this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.DisconnectedScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.multiplayer.JoinMultiplayerScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.TitleScreen()), GENERIC_DISCONNECT_MESSAGE, $$0));
         }
     }
 
-    public void send(net.minecraft.network.protocol.Packet<?> packet) {
-        this.connection.send(packet);
+    public void send(net.minecraft.network.protocol.Packet<?> $$0) {
+        this.connection.send($$0);
     }
 
-    public void handleTakeItemEntity(net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getItemId());
-        net.minecraft.world.entity.LivingEntity livingEntity = (net.minecraft.world.entity.LivingEntity)this.level.getEntity(packet.getPlayerId());
-        if (livingEntity == null) {
-            livingEntity = this.minecraft.player;
+    public void handleTakeItemEntity(net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getItemId());
+        net.minecraft.world.entity.LivingEntity $$2 = (net.minecraft.world.entity.LivingEntity)this.level.getEntity($$0.getPlayerId());
+        if ($$2 == null) {
+            $$2 = this.minecraft.player;
         }
-        if (entity != null) {
-            if (entity instanceof net.minecraft.world.entity.ExperienceOrb) {
-                this.level.playLocalSound(entity.getX(), entity.getY(), entity.getZ(), net.minecraft.sounds.SoundEvents.EXPERIENCE_ORB_PICKUP, net.minecraft.sounds.SoundSource.PLAYERS, 0.1f, (this.random.nextFloat() - this.random.nextFloat()) * 0.35f + 0.9f, false);
+        if ($$1 != null) {
+            if ($$1 instanceof net.minecraft.world.entity.ExperienceOrb) {
+                this.level.playLocalSound($$1.getX(), $$1.getY(), $$1.getZ(), net.minecraft.sounds.SoundEvents.EXPERIENCE_ORB_PICKUP, net.minecraft.sounds.SoundSource.PLAYERS, 0.1f, (this.random.nextFloat() - this.random.nextFloat()) * 0.35f + 0.9f, false);
             } else {
-                this.level.playLocalSound(entity.getX(), entity.getY(), entity.getZ(), net.minecraft.sounds.SoundEvents.ITEM_PICKUP, net.minecraft.sounds.SoundSource.PLAYERS, 0.2f, (this.random.nextFloat() - this.random.nextFloat()) * 1.4f + 2.0f, false);
+                this.level.playLocalSound($$1.getX(), $$1.getY(), $$1.getZ(), net.minecraft.sounds.SoundEvents.ITEM_PICKUP, net.minecraft.sounds.SoundSource.PLAYERS, 0.2f, (this.random.nextFloat() - this.random.nextFloat()) * 1.4f + 2.0f, false);
             }
-            this.minecraft.particleEngine.add((net.minecraft.client.particle.Particle)new net.minecraft.client.particle.ItemPickupParticle(this.minecraft.getEntityRenderDispatcher(), this.minecraft.renderBuffers(), this.level, entity, (net.minecraft.world.entity.Entity)livingEntity));
-            if (entity instanceof net.minecraft.world.entity.item.ItemEntity) {
-                net.minecraft.world.entity.item.ItemEntity itemEntity = (net.minecraft.world.entity.item.ItemEntity)entity;
-                net.minecraft.world.item.ItemStack itemStack = itemEntity.getItem();
-                itemStack.shrink(packet.getAmount());
-                if (itemStack.isEmpty()) {
-                    this.level.removeEntity(packet.getItemId(), net.minecraft.world.entity.Entity$RemovalReason.DISCARDED);
+            this.minecraft.particleEngine.add((net.minecraft.client.particle.Particle)new net.minecraft.client.particle.ItemPickupParticle(this.minecraft.getEntityRenderDispatcher(), this.minecraft.renderBuffers(), this.level, $$1, (net.minecraft.world.entity.Entity)$$2));
+            if ($$1 instanceof net.minecraft.world.entity.item.ItemEntity) {
+                net.minecraft.world.entity.item.ItemEntity $$3 = (net.minecraft.world.entity.item.ItemEntity)$$1;
+                net.minecraft.world.item.ItemStack $$4 = $$3.getItem();
+                $$4.shrink($$0.getAmount());
+                if ($$4.isEmpty()) {
+                    this.level.removeEntity($$0.getItemId(), net.minecraft.world.entity.Entity$RemovalReason.DISCARDED);
                 }
-            } else if (!(entity instanceof net.minecraft.world.entity.ExperienceOrb)) {
-                this.level.removeEntity(packet.getItemId(), net.minecraft.world.entity.Entity$RemovalReason.DISCARDED);
+            } else if (!($$1 instanceof net.minecraft.world.entity.ExperienceOrb)) {
+                this.level.removeEntity($$0.getItemId(), net.minecraft.world.entity.Entity$RemovalReason.DISCARDED);
             }
         }
     }
@@ -455,274 +458,297 @@
 
     public void handlePlayerChat(net.minecraft.network.protocol.game.ClientboundPlayerChatPacket $$0) {
         net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        java.util.Optional $$1 = $$0.resolveChatType((net.minecraft.core.RegistryAccess)this.registryAccess);
-        if (!$$1.isPresent()) {
-            this.connection.disconnect((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.disconnect.invalid_packet"));
+        java.util.Optional $$1 = $$0.body().unpack(this.messageSignatureUnpacker);
+        java.util.Optional $$2 = $$0.chatType().resolve((net.minecraft.core.RegistryAccess)this.registryAccess.compositeAccess());
+        if ($$1.isEmpty() || $$2.isEmpty()) {
+            this.connection.disconnect(INVALID_PACKET);
             return;
         }
-        this.minecraft.getChatListener().handleChatMessage($$0.message(), (net.minecraft.network.chat.ChatType$Bound)$$1.get());
+        java.util.UUID $$3 = $$0.sender();
+        net.minecraft.client.multiplayer.PlayerInfo $$4 = this.getPlayerInfo($$3);
+        if ($$4 == null || $$4.getChatSession() == null) {
+            this.connection.disconnect(CHAT_VALIDATION_FAILED_ERROR);
+            return;
+        }
+        net.minecraft.network.chat.RemoteChatSession $$5 = $$4.getChatSession();
+        net.minecraft.network.chat.SignedMessageLink $$6 = new net.minecraft.network.chat.SignedMessageLink($$0.index(), $$3, $$5.sessionId());
+        net.minecraft.network.chat.PlayerChatMessage $$7 = new net.minecraft.network.chat.PlayerChatMessage($$6, $$0.signature(), (net.minecraft.network.chat.SignedMessageBody)$$1.get(), $$0.unsignedContent(), $$0.filterMask());
+        if (!$$4.getMessageValidator().updateAndValidate($$7)) {
+            this.connection.disconnect(CHAT_VALIDATION_FAILED_ERROR);
+            return;
+        }
+        this.minecraft.getChatListener().handlePlayerChatMessage($$7, $$4.getProfile(), (net.minecraft.network.chat.ChatType$Bound)$$2.get());
+        this.messageSignatureCache.push($$7);
     }
 
-    public void handlePlayerChatHeader(net.minecraft.network.protocol.game.ClientboundPlayerChatHeaderPacket $$0) {
+    public void handleDisguisedChat(net.minecraft.network.protocol.game.ClientboundDisguisedChatPacket $$0) {
         net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.getChatListener().handleChatHeader($$0.header(), $$0.headerSignature(), $$0.bodyDigest());
+        java.util.Optional $$1 = $$0.chatType().resolve((net.minecraft.core.RegistryAccess)this.registryAccess.compositeAccess());
+        if ($$1.isEmpty()) {
+            this.connection.disconnect(INVALID_PACKET);
+            return;
+        }
+        this.minecraft.getChatListener().handleDisguisedChatMessage($$0.message(), (net.minecraft.network.chat.ChatType$Bound)$$1.get());
     }
 
     public void handleDeleteChat(net.minecraft.network.protocol.game.ClientboundDeleteChatPacket $$0) {
         net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.network.chat.MessageSignature $$1 = $$0.messageSignature();
-        if (!this.minecraft.getChatListener().removeFromDelayedMessageQueue($$1)) {
-            this.minecraft.gui.getChat().deleteMessage($$1);
+        java.util.Optional $$1 = $$0.messageSignature().unpack(this.messageSignatureUnpacker);
+        if ($$1.isEmpty()) {
+            this.connection.disconnect(INVALID_PACKET);
+            return;
         }
+        this.lastSeenMessages.ignorePending((net.minecraft.network.chat.MessageSignature)$$1.get());
+        if (!this.minecraft.getChatListener().removeFromDelayedMessageQueue((net.minecraft.network.chat.MessageSignature)$$1.get())) {
+            this.minecraft.gui.getChat().deleteMessage((net.minecraft.network.chat.MessageSignature)$$1.get());
+        }
     }
 
-    public void handleAnimate(net.minecraft.network.protocol.game.ClientboundAnimatePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getId());
-        if (entity == null) {
+    public void handleAnimate(net.minecraft.network.protocol.game.ClientboundAnimatePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getId());
+        if ($$1 == null) {
             return;
         }
-        if (packet.getAction() == 0) {
-            net.minecraft.world.entity.LivingEntity livingEntity = (net.minecraft.world.entity.LivingEntity)entity;
-            livingEntity.swing(net.minecraft.world.InteractionHand.MAIN_HAND);
-        } else if (packet.getAction() == 3) {
-            net.minecraft.world.entity.LivingEntity livingEntity = (net.minecraft.world.entity.LivingEntity)entity;
-            livingEntity.swing(net.minecraft.world.InteractionHand.OFF_HAND);
-        } else if (packet.getAction() == 1) {
-            entity.animateHurt();
-        } else if (packet.getAction() == 2) {
-            net.minecraft.world.entity.player.Player player = (net.minecraft.world.entity.player.Player)entity;
-            player.stopSleepInBed(false, false);
-        } else if (packet.getAction() == 4) {
-            this.minecraft.particleEngine.createTrackingEmitter(entity, (net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.CRIT);
-        } else if (packet.getAction() == 5) {
-            this.minecraft.particleEngine.createTrackingEmitter(entity, (net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.ENCHANTED_HIT);
+        if ($$0.getAction() == 0) {
+            net.minecraft.world.entity.LivingEntity $$2 = (net.minecraft.world.entity.LivingEntity)$$1;
+            $$2.swing(net.minecraft.world.InteractionHand.MAIN_HAND);
+        } else if ($$0.getAction() == 3) {
+            net.minecraft.world.entity.LivingEntity $$3 = (net.minecraft.world.entity.LivingEntity)$$1;
+            $$3.swing(net.minecraft.world.InteractionHand.OFF_HAND);
+        } else if ($$0.getAction() == 1) {
+            $$1.animateHurt();
+        } else if ($$0.getAction() == 2) {
+            net.minecraft.world.entity.player.Player $$4 = (net.minecraft.world.entity.player.Player)$$1;
+            $$4.stopSleepInBed(false, false);
+        } else if ($$0.getAction() == 4) {
+            this.minecraft.particleEngine.createTrackingEmitter($$1, (net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.CRIT);
+        } else if ($$0.getAction() == 5) {
+            this.minecraft.particleEngine.createTrackingEmitter($$1, (net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.ENCHANTED_HIT);
         }
     }
 
-    public void handleSetTime(net.minecraft.network.protocol.game.ClientboundSetTimePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.level.setGameTime(packet.getGameTime());
-        this.minecraft.level.setDayTime(packet.getDayTime());
+    public void handleSetTime(net.minecraft.network.protocol.game.ClientboundSetTimePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.level.setGameTime($$0.getGameTime());
+        this.minecraft.level.setDayTime($$0.getDayTime());
     }
 
-    public void handleSetSpawn(net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.level.setDefaultSpawnPos(packet.getPos(), packet.getAngle());
+    public void handleSetSpawn(net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.level.setDefaultSpawnPos($$0.getPos(), $$0.getAngle());
         net.minecraft.client.gui.screens.Screen screen = this.minecraft.screen;
         if (screen instanceof net.minecraft.client.gui.screens.ReceivingLevelScreen) {
-            net.minecraft.client.gui.screens.ReceivingLevelScreen receivingLevelScreen = (net.minecraft.client.gui.screens.ReceivingLevelScreen)screen;
-            receivingLevelScreen.loadingPacketsReceived();
+            net.minecraft.client.gui.screens.ReceivingLevelScreen $$1 = (net.minecraft.client.gui.screens.ReceivingLevelScreen)screen;
+            $$1.loadingPacketsReceived();
         }
     }
 
-    public void handleSetEntityPassengersPacket(net.minecraft.network.protocol.game.ClientboundSetPassengersPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getVehicle());
-        if (entity == null) {
+    public void handleSetEntityPassengersPacket(net.minecraft.network.protocol.game.ClientboundSetPassengersPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getVehicle());
+        if ($$1 == null) {
             LOGGER.warn("Received passengers for unknown entity");
             return;
         }
-        boolean bl = entity.hasIndirectPassenger((net.minecraft.world.entity.Entity)this.minecraft.player);
-        entity.ejectPassengers();
-        for (int n : packet.getPassengers()) {
-            net.minecraft.world.entity.Entity entity2 = this.level.getEntity(n);
-            if (entity2 == null) continue;
-            entity2.startRiding(entity, true);
-            if (entity2 != this.minecraft.player || bl) continue;
-            if (entity instanceof net.minecraft.world.entity.vehicle.Boat) {
-                this.minecraft.player.yRotO = entity.getYRot();
-                this.minecraft.player.setYRot(entity.getYRot());
-                this.minecraft.player.setYHeadRot(entity.getYRot());
+        boolean $$2 = $$1.hasIndirectPassenger((net.minecraft.world.entity.Entity)this.minecraft.player);
+        $$1.ejectPassengers();
+        for (int $$3 : $$0.getPassengers()) {
+            net.minecraft.world.entity.Entity $$4 = this.level.getEntity($$3);
+            if ($$4 == null) continue;
+            $$4.startRiding($$1, true);
+            if ($$4 != this.minecraft.player || $$2) continue;
+            if ($$1 instanceof net.minecraft.world.entity.vehicle.Boat) {
+                this.minecraft.player.yRotO = $$1.getYRot();
+                this.minecraft.player.setYRot($$1.getYRot());
+                this.minecraft.player.setYHeadRot($$1.getYRot());
             }
-            net.minecraft.network.chat.MutableComponent mutableComponent = net.minecraft.network.chat.Component.translatable((java.lang.String)"mount.onboard", (java.lang.Object[])new java.lang.Object[]{this.minecraft.options.keyShift.getTranslatedKeyMessage()});
-            this.minecraft.gui.setOverlayMessage((net.minecraft.network.chat.Component)mutableComponent, false);
-            this.minecraft.getNarrator().sayNow((net.minecraft.network.chat.Component)mutableComponent);
+            net.minecraft.network.chat.MutableComponent $$5 = net.minecraft.network.chat.Component.translatable((java.lang.String)"mount.onboard", (java.lang.Object[])new java.lang.Object[]{this.minecraft.options.keyShift.getTranslatedKeyMessage()});
+            this.minecraft.gui.setOverlayMessage((net.minecraft.network.chat.Component)$$5, false);
+            this.minecraft.getNarrator().sayNow((net.minecraft.network.chat.Component)$$5);
         }
     }
 
-    public void handleEntityLinkPacket(net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getSourceId());
-        if (entity instanceof net.minecraft.world.entity.Mob) {
-            ((net.minecraft.world.entity.Mob)entity).setDelayedLeashHolderId(packet.getDestId());
+    public void handleEntityLinkPacket(net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getSourceId());
+        if ($$1 instanceof net.minecraft.world.entity.Mob) {
+            ((net.minecraft.world.entity.Mob)$$1).setDelayedLeashHolderId($$0.getDestId());
         }
     }
 
-    public static net.minecraft.world.item.ItemStack findTotem(net.minecraft.world.entity.player.Player player) {
-        for (net.minecraft.world.InteractionHand interactionHand : net.minecraft.world.InteractionHand.values()) {
-            net.minecraft.world.item.ItemStack itemStack = player.getItemInHand(interactionHand);
-            if (!itemStack.is(net.minecraft.world.item.Items.TOTEM_OF_UNDYING)) continue;
-            return itemStack;
+    public static net.minecraft.world.item.ItemStack findTotem(net.minecraft.world.entity.player.Player $$0) {
+        for (net.minecraft.world.InteractionHand $$1 : net.minecraft.world.InteractionHand.values()) {
+            net.minecraft.world.item.ItemStack $$2 = $$0.getItemInHand($$1);
+            if (!$$2.is(net.minecraft.world.item.Items.TOTEM_OF_UNDYING)) continue;
+            return $$2;
         }
         return new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)net.minecraft.world.item.Items.TOTEM_OF_UNDYING);
     }
 
-    public void handleEntityEvent(net.minecraft.network.protocol.game.ClientboundEntityEventPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = packet.getEntity((net.minecraft.world.level.Level)this.level);
-        if (entity != null) {
-            if (packet.getEventId() == 21) {
-                this.minecraft.getSoundManager().play((net.minecraft.client.resources.sounds.SoundInstance)new net.minecraft.client.resources.sounds.GuardianAttackSoundInstance((net.minecraft.world.entity.monster.Guardian)entity));
-            } else if (packet.getEventId() == 35) {
-                int n = 40;
-                this.minecraft.particleEngine.createTrackingEmitter(entity, (net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.TOTEM_OF_UNDYING, 30);
-                this.level.playLocalSound(entity.getX(), entity.getY(), entity.getZ(), net.minecraft.sounds.SoundEvents.TOTEM_USE, entity.getSoundSource(), 1.0f, 1.0f, false);
-                if (entity == this.minecraft.player) {
+    public void handleEntityEvent(net.minecraft.network.protocol.game.ClientboundEntityEventPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = $$0.getEntity((net.minecraft.world.level.Level)this.level);
+        if ($$1 != null) {
+            if ($$0.getEventId() == 21) {
+                this.minecraft.getSoundManager().play((net.minecraft.client.resources.sounds.SoundInstance)new net.minecraft.client.resources.sounds.GuardianAttackSoundInstance((net.minecraft.world.entity.monster.Guardian)$$1));
+            } else if ($$0.getEventId() == 35) {
+                int $$2 = 40;
+                this.minecraft.particleEngine.createTrackingEmitter($$1, (net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.TOTEM_OF_UNDYING, 30);
+                this.level.playLocalSound($$1.getX(), $$1.getY(), $$1.getZ(), net.minecraft.sounds.SoundEvents.TOTEM_USE, $$1.getSoundSource(), 1.0f, 1.0f, false);
+                if ($$1 == this.minecraft.player) {
                     this.minecraft.gameRenderer.displayItemActivation(net.minecraft.client.multiplayer.ClientPacketListener.findTotem((net.minecraft.world.entity.player.Player)this.minecraft.player));
                 }
             } else {
-                entity.handleEntityEvent(packet.getEventId());
+                $$1.handleEntityEvent($$0.getEventId());
             }
         }
     }
 
-    public void handleSetHealth(net.minecraft.network.protocol.game.ClientboundSetHealthPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.player.hurtTo(packet.getHealth());
-        this.minecraft.player.getFoodData().setFoodLevel(packet.getFood());
-        this.minecraft.player.getFoodData().setSaturation(packet.getSaturation());
+    public void handleSetHealth(net.minecraft.network.protocol.game.ClientboundSetHealthPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.player.hurtTo($$0.getHealth());
+        this.minecraft.player.getFoodData().setFoodLevel($$0.getFood());
+        this.minecraft.player.getFoodData().setSaturation($$0.getSaturation());
     }
 
-    public void handleSetExperience(net.minecraft.network.protocol.game.ClientboundSetExperiencePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.player.setExperienceValues(packet.getExperienceProgress(), packet.getTotalExperience(), packet.getExperienceLevel());
+    public void handleSetExperience(net.minecraft.network.protocol.game.ClientboundSetExperiencePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.player.setExperienceValues($$0.getExperienceProgress(), $$0.getTotalExperience(), $$0.getExperienceLevel());
     }
 
-    public void handleRespawn(net.minecraft.network.protocol.game.ClientboundRespawnPacket packet) {
-        java.util.Map map;
-        java.lang.String string;
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.resources.ResourceKey resourceKey = packet.getDimension();
-        net.minecraft.core.Holder holder = this.registryAccess.registryOrThrow(net.minecraft.core.Registry.DIMENSION_TYPE_REGISTRY).getHolderOrThrow(packet.getDimensionType());
-        net.minecraft.client.player.LocalPlayer localPlayer = this.minecraft.player;
-        int n = localPlayer.getId();
-        if (resourceKey != localPlayer.level.dimension()) {
-            net.minecraft.client.multiplayer.ClientLevel$ClientLevelData clientLevelData;
-            string = this.level.getScoreboard();
-            map = this.level.getAllMapData();
-            boolean bl = packet.isDebug();
-            boolean bl2 = packet.isFlat();
-            this.levelData = clientLevelData = new net.minecraft.client.multiplayer.ClientLevel$ClientLevelData(this.levelData.getDifficulty(), this.levelData.isHardcore(), bl2);
-            this.level = new net.minecraft.client.multiplayer.ClientLevel(this, clientLevelData, resourceKey, holder, this.serverChunkRadius, this.serverSimulationDistance, () -> ((net.minecraft.client.Minecraft)this.minecraft).getProfiler(), this.minecraft.levelRenderer, bl, packet.getSeed());
-            this.level.setScoreboard((net.minecraft.world.scores.Scoreboard)string);
-            this.level.addMapData(map);
+    public void handleRespawn(net.minecraft.network.protocol.game.ClientboundRespawnPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.resources.ResourceKey $$1 = $$0.getDimension();
+        net.minecraft.core.Holder$Reference $$2 = this.registryAccess.compositeAccess().registryOrThrow(net.minecraft.core.Registry.DIMENSION_TYPE_REGISTRY).getHolderOrThrow($$0.getDimensionType());
+        net.minecraft.client.player.LocalPlayer $$3 = this.minecraft.player;
+        int $$4 = $$3.getId();
+        if ($$1 != $$3.level.dimension()) {
+            net.minecraft.client.multiplayer.ClientLevel$ClientLevelData $$9;
+            net.minecraft.world.scores.Scoreboard $$5 = this.level.getScoreboard();
+            java.util.Map $$6 = this.level.getAllMapData();
+            boolean $$7 = $$0.isDebug();
+            boolean $$8 = $$0.isFlat();
+            this.levelData = $$9 = new net.minecraft.client.multiplayer.ClientLevel$ClientLevelData(this.levelData.getDifficulty(), this.levelData.isHardcore(), $$8);
+            this.level = new net.minecraft.client.multiplayer.ClientLevel(this, $$9, $$1, (net.minecraft.core.Holder)$$2, this.serverChunkRadius, this.serverSimulationDistance, () -> ((net.minecraft.client.Minecraft)this.minecraft).getProfiler(), this.minecraft.levelRenderer, $$7, $$0.getSeed());
+            this.level.setScoreboard($$5);
+            this.level.addMapData($$6);
             this.minecraft.setLevel(this.level);
             this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.ReceivingLevelScreen());
         }
-        string = localPlayer.getServerBrand();
+        java.lang.String $$10 = $$3.getServerBrand();
         this.minecraft.cameraEntity = null;
-        if (localPlayer.hasContainerOpen()) {
-            localPlayer.closeContainer();
+        if ($$3.hasContainerOpen()) {
+            $$3.closeContainer();
         }
-        map = this.minecraft.gameMode.createPlayer(this.level, localPlayer.getStats(), localPlayer.getRecipeBook(), localPlayer.isShiftKeyDown(), localPlayer.isSprinting());
-        map.setId(n);
-        this.minecraft.player = map;
-        if (resourceKey != localPlayer.level.dimension()) {
+        net.minecraft.client.player.LocalPlayer $$11 = this.minecraft.gameMode.createPlayer(this.level, $$3.getStats(), $$3.getRecipeBook(), $$3.isShiftKeyDown(), $$3.isSprinting());
+        $$11.setId($$4);
+        this.minecraft.player = $$11;
+        if ($$1 != $$3.level.dimension()) {
             this.minecraft.getMusicManager().stopPlaying();
         }
-        this.minecraft.cameraEntity = map;
-        map.getEntityData().assignValues(localPlayer.getEntityData().getAll());
-        if (packet.shouldKeepAllPlayerData()) {
-            map.getAttributes().assignValues(localPlayer.getAttributes());
+        this.minecraft.cameraEntity = $$11;
+        $$11.getEntityData().assignValues($$3.getEntityData().getAll());
+        if ($$0.shouldKeepAllPlayerData()) {
+            $$11.getAttributes().assignValues($$3.getAttributes());
         }
-        map.resetPos();
-        map.setServerBrand(string);
-        this.level.addPlayer(n, (net.minecraft.client.player.AbstractClientPlayer)map);
-        map.setYRot(-180.0f);
-        map.input = new net.minecraft.client.player.KeyboardInput(this.minecraft.options);
-        this.minecraft.gameMode.adjustPlayer((net.minecraft.world.entity.player.Player)map);
-        map.setReducedDebugInfo(localPlayer.isReducedDebugInfo());
-        map.setShowDeathScreen(localPlayer.shouldShowDeathScreen());
-        map.setLastDeathLocation(packet.getLastDeathLocation());
+        $$11.resetPos();
+        $$11.setServerBrand($$10);
+        this.level.addPlayer($$4, (net.minecraft.client.player.AbstractClientPlayer)$$11);
+        $$11.setYRot(-180.0f);
+        $$11.input = new net.minecraft.client.player.KeyboardInput(this.minecraft.options);
+        this.minecraft.gameMode.adjustPlayer((net.minecraft.world.entity.player.Player)$$11);
+        $$11.setReducedDebugInfo($$3.isReducedDebugInfo());
+        $$11.setShowDeathScreen($$3.shouldShowDeathScreen());
+        $$11.setLastDeathLocation($$0.getLastDeathLocation());
         if (this.minecraft.screen instanceof net.minecraft.client.gui.screens.DeathScreen) {
             this.minecraft.setScreen(null);
         }
-        this.minecraft.gameMode.setLocalMode(packet.getPlayerGameType(), packet.getPreviousPlayerGameType());
+        this.minecraft.gameMode.setLocalMode($$0.getPlayerGameType(), $$0.getPreviousPlayerGameType());
     }
 
-    public void handleExplosion(net.minecraft.network.protocol.game.ClientboundExplodePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.level.Explosion explosion = new net.minecraft.world.level.Explosion((net.minecraft.world.level.Level)this.minecraft.level, null, packet.getX(), packet.getY(), packet.getZ(), packet.getPower(), packet.getToBlow());
-        explosion.finalizeExplosion(true);
-        this.minecraft.player.setDeltaMovement(this.minecraft.player.getDeltaMovement().add((double)packet.getKnockbackX(), (double)packet.getKnockbackY(), (double)packet.getKnockbackZ()));
+    public void handleExplosion(net.minecraft.network.protocol.game.ClientboundExplodePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.level.Explosion $$1 = new net.minecraft.world.level.Explosion((net.minecraft.world.level.Level)this.minecraft.level, null, $$0.getX(), $$0.getY(), $$0.getZ(), $$0.getPower(), $$0.getToBlow());
+        $$1.finalizeExplosion(true);
+        this.minecraft.player.setDeltaMovement(this.minecraft.player.getDeltaMovement().add((double)$$0.getKnockbackX(), (double)$$0.getKnockbackY(), (double)$$0.getKnockbackZ()));
     }
 
-    public void handleHorseScreenOpen(net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getEntityId());
-        if (entity instanceof net.minecraft.world.entity.animal.horse.AbstractHorse) {
-            net.minecraft.client.player.LocalPlayer localPlayer = this.minecraft.player;
-            net.minecraft.world.entity.animal.horse.AbstractHorse abstractHorse = (net.minecraft.world.entity.animal.horse.AbstractHorse)entity;
-            net.minecraft.world.SimpleContainer simpleContainer = new net.minecraft.world.SimpleContainer(packet.getSize());
-            net.minecraft.world.inventory.HorseInventoryMenu horseInventoryMenu = new net.minecraft.world.inventory.HorseInventoryMenu(packet.getContainerId(), localPlayer.getInventory(), (net.minecraft.world.Container)simpleContainer, abstractHorse);
-            localPlayer.containerMenu = horseInventoryMenu;
-            this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.inventory.HorseInventoryScreen(horseInventoryMenu, localPlayer.getInventory(), abstractHorse));
+    public void handleHorseScreenOpen(net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getEntityId());
+        if ($$1 instanceof net.minecraft.world.entity.animal.horse.AbstractHorse) {
+            net.minecraft.client.player.LocalPlayer $$2 = this.minecraft.player;
+            net.minecraft.world.entity.animal.horse.AbstractHorse $$3 = (net.minecraft.world.entity.animal.horse.AbstractHorse)$$1;
+            net.minecraft.world.SimpleContainer $$4 = new net.minecraft.world.SimpleContainer($$0.getSize());
+            net.minecraft.world.inventory.HorseInventoryMenu $$5 = new net.minecraft.world.inventory.HorseInventoryMenu($$0.getContainerId(), $$2.getInventory(), (net.minecraft.world.Container)$$4, $$3);
+            $$2.containerMenu = $$5;
+            this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.inventory.HorseInventoryScreen($$5, $$2.getInventory(), $$3));
         }
     }
 
-    public void handleOpenScreen(net.minecraft.network.protocol.game.ClientboundOpenScreenPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.gui.screens.MenuScreens.create((net.minecraft.world.inventory.MenuType)packet.getType(), (net.minecraft.client.Minecraft)this.minecraft, (int)packet.getContainerId(), (net.minecraft.network.chat.Component)packet.getTitle());
+    public void handleOpenScreen(net.minecraft.network.protocol.game.ClientboundOpenScreenPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.gui.screens.MenuScreens.create((net.minecraft.world.inventory.MenuType)$$0.getType(), (net.minecraft.client.Minecraft)this.minecraft, (int)$$0.getContainerId(), (net.minecraft.network.chat.Component)$$0.getTitle());
     }
 
-    public void handleContainerSetSlot(net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.player.LocalPlayer localPlayer = this.minecraft.player;
-        net.minecraft.world.item.ItemStack itemStack = packet.getItem();
-        int n = packet.getSlot();
-        this.minecraft.getTutorial().onGetItem(itemStack);
-        if (packet.getContainerId() == -1) {
+    public void handleContainerSetSlot(net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.player.LocalPlayer $$1 = this.minecraft.player;
+        net.minecraft.world.item.ItemStack $$2 = $$0.getItem();
+        int $$3 = $$0.getSlot();
+        this.minecraft.getTutorial().onGetItem($$2);
+        if ($$0.getContainerId() == -1) {
             if (!(this.minecraft.screen instanceof net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen)) {
-                localPlayer.containerMenu.setCarried(itemStack);
+                $$1.containerMenu.setCarried($$2);
             }
-        } else if (packet.getContainerId() == -2) {
-            localPlayer.getInventory().setItem(n, itemStack);
+        } else if ($$0.getContainerId() == -2) {
+            $$1.getInventory().setItem($$3, $$2);
         } else {
-            net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen creativeModeInventoryScreen;
-            boolean bl = false;
+            boolean $$4 = false;
             if (this.minecraft.screen instanceof net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen) {
-                creativeModeInventoryScreen = (net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen)this.minecraft.screen;
-                boolean bl2 = bl = creativeModeInventoryScreen.getSelectedTab() != net.minecraft.world.item.CreativeModeTab.TAB_INVENTORY.getId();
+                net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen $$5 = (net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen)this.minecraft.screen;
+                boolean bl = $$4 = $$5.getSelectedTab() != net.minecraft.world.item.CreativeModeTabs.TAB_INVENTORY.getId();
             }
-            if (packet.getContainerId() == 0 && net.minecraft.world.inventory.InventoryMenu.isHotbarSlot((int)n)) {
-                if (!itemStack.isEmpty() && ((creativeModeInventoryScreen = localPlayer.inventoryMenu.getSlot(n).getItem()).isEmpty() || creativeModeInventoryScreen.getCount() < itemStack.getCount())) {
-                    itemStack.setPopTime(5);
+            if ($$0.getContainerId() == 0 && net.minecraft.world.inventory.InventoryMenu.isHotbarSlot((int)$$3)) {
+                net.minecraft.world.item.ItemStack $$6;
+                if (!$$2.isEmpty() && (($$6 = $$1.inventoryMenu.getSlot($$3).getItem()).isEmpty() || $$6.getCount() < $$2.getCount())) {
+                    $$2.setPopTime(5);
                 }
-                localPlayer.inventoryMenu.setItem(n, packet.getStateId(), itemStack);
-            } else if (!(packet.getContainerId() != localPlayer.containerMenu.containerId || packet.getContainerId() == 0 && bl)) {
-                localPlayer.containerMenu.setItem(n, packet.getStateId(), itemStack);
+                $$1.inventoryMenu.setItem($$3, $$0.getStateId(), $$2);
+            } else if (!($$0.getContainerId() != $$1.containerMenu.containerId || $$0.getContainerId() == 0 && $$4)) {
+                $$1.containerMenu.setItem($$3, $$0.getStateId(), $$2);
             }
         }
     }
 
-    public void handleContainerContent(net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.player.LocalPlayer localPlayer = this.minecraft.player;
-        if (packet.getContainerId() == 0) {
-            localPlayer.inventoryMenu.initializeContents(packet.getStateId(), packet.getItems(), packet.getCarriedItem());
-        } else if (packet.getContainerId() == localPlayer.containerMenu.containerId) {
-            localPlayer.containerMenu.initializeContents(packet.getStateId(), packet.getItems(), packet.getCarriedItem());
+    public void handleContainerContent(net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.player.LocalPlayer $$1 = this.minecraft.player;
+        if ($$0.getContainerId() == 0) {
+            $$1.inventoryMenu.initializeContents($$0.getStateId(), $$0.getItems(), $$0.getCarriedItem());
+        } else if ($$0.getContainerId() == $$1.containerMenu.containerId) {
+            $$1.containerMenu.initializeContents($$0.getStateId(), $$0.getItems(), $$0.getCarriedItem());
         }
     }
 
-    public void handleOpenSignEditor(net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.core.BlockPos blockPos = packet.getPos();
-        net.minecraft.world.level.block.entity.BlockEntity blockEntity = this.level.getBlockEntity(blockPos);
-        if (!(blockEntity instanceof net.minecraft.world.level.block.entity.SignBlockEntity)) {
-            net.minecraft.world.level.block.state.BlockState blockState = this.level.getBlockState(blockPos);
-            blockEntity = new net.minecraft.world.level.block.entity.SignBlockEntity(blockPos, blockState);
-            blockEntity.setLevel((net.minecraft.world.level.Level)this.level);
+    public void handleOpenSignEditor(net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.core.BlockPos $$1 = $$0.getPos();
+        net.minecraft.world.level.block.entity.BlockEntity $$2 = this.level.getBlockEntity($$1);
+        if (!($$2 instanceof net.minecraft.world.level.block.entity.SignBlockEntity)) {
+            net.minecraft.world.level.block.state.BlockState $$3 = this.level.getBlockState($$1);
+            $$2 = new net.minecraft.world.level.block.entity.SignBlockEntity($$1, $$3);
+            $$2.setLevel((net.minecraft.world.level.Level)this.level);
         }
-        this.minecraft.player.openTextEdit((net.minecraft.world.level.block.entity.SignBlockEntity)blockEntity);
+        this.minecraft.player.openTextEdit((net.minecraft.world.level.block.entity.SignBlockEntity)$$2);
     }
 
-    public void handleBlockEntityData(net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.core.BlockPos blockPos = packet.getPos();
-        this.minecraft.level.getBlockEntity(blockPos, packet.getType()).ifPresent($$1 -> {
-            net.minecraft.nbt.CompoundTag $$2 = packet.getTag();
+    public void handleBlockEntityData(net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.core.BlockPos $$12 = $$0.getPos();
+        this.minecraft.level.getBlockEntity($$12, $$0.getType()).ifPresent($$1 -> {
+            net.minecraft.nbt.CompoundTag $$2 = $$0.getTag();
             if ($$2 != null) {
                 $$1.load($$2);
             }
@@ -732,252 +758,263 @@
         });
     }
 
-    public void handleContainerSetData(net.minecraft.network.protocol.game.ClientboundContainerSetDataPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.player.LocalPlayer localPlayer = this.minecraft.player;
-        if (localPlayer.containerMenu != null && localPlayer.containerMenu.containerId == packet.getContainerId()) {
-            localPlayer.containerMenu.setData(packet.getId(), packet.getValue());
+    public void handleContainerSetData(net.minecraft.network.protocol.game.ClientboundContainerSetDataPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.player.LocalPlayer $$1 = this.minecraft.player;
+        if ($$1.containerMenu != null && $$1.containerMenu.containerId == $$0.getContainerId()) {
+            $$1.containerMenu.setData($$0.getId(), $$0.getValue());
         }
     }
 
-    public void handleSetEquipment(net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getEntity());
-        if (entity != null) {
-            packet.getSlots().forEach($$1 -> entity.setItemSlot((net.minecraft.world.entity.EquipmentSlot)$$1.getFirst(), (net.minecraft.world.item.ItemStack)$$1.getSecond()));
+    public void handleSetEquipment(net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$12 = this.level.getEntity($$0.getEntity());
+        if ($$12 != null) {
+            $$0.getSlots().forEach($$1 -> $$12.setItemSlot((net.minecraft.world.entity.EquipmentSlot)$$1.getFirst(), (net.minecraft.world.item.ItemStack)$$1.getSecond()));
         }
     }
 
-    public void handleContainerClose(net.minecraft.network.protocol.game.ClientboundContainerClosePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+    public void handleContainerClose(net.minecraft.network.protocol.game.ClientboundContainerClosePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
         this.minecraft.player.clientSideCloseContainer();
     }
 
-    public void handleBlockEvent(net.minecraft.network.protocol.game.ClientboundBlockEventPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.level.blockEvent(packet.getPos(), packet.getBlock(), packet.getB0(), packet.getB1());
+    public void handleBlockEvent(net.minecraft.network.protocol.game.ClientboundBlockEventPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.level.blockEvent($$0.getPos(), $$0.getBlock(), $$0.getB0(), $$0.getB1());
     }
 
-    public void handleBlockDestruction(net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.level.destroyBlockProgress(packet.getId(), packet.getPos(), packet.getProgress());
+    public void handleBlockDestruction(net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.level.destroyBlockProgress($$0.getId(), $$0.getPos(), $$0.getProgress());
     }
 
-    public void handleGameEvent(net.minecraft.network.protocol.game.ClientboundGameEventPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.player.LocalPlayer localPlayer = this.minecraft.player;
-        net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type type = packet.getEvent();
-        float f = packet.getParam();
-        int n = net.minecraft.util.Mth.floor((float)(f + 0.5f));
-        if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE) {
-            localPlayer.displayClientMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"block.minecraft.spawn.not_valid"), false);
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.START_RAINING) {
+    public void handleGameEvent(net.minecraft.network.protocol.game.ClientboundGameEventPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.player.LocalPlayer $$1 = this.minecraft.player;
+        net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type $$2 = $$0.getEvent();
+        float $$3 = $$0.getParam();
+        int $$4 = net.minecraft.util.Mth.floor((float)($$3 + 0.5f));
+        if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE) {
+            $$1.displayClientMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"block.minecraft.spawn.not_valid"), false);
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.START_RAINING) {
             this.level.getLevelData().setRaining(true);
             this.level.setRainLevel(0.0f);
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.STOP_RAINING) {
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.STOP_RAINING) {
             this.level.getLevelData().setRaining(false);
             this.level.setRainLevel(1.0f);
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.CHANGE_GAME_MODE) {
-            this.minecraft.gameMode.setLocalMode(net.minecraft.world.level.GameType.byId((int)n));
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.WIN_GAME) {
-            if (n == 0) {
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.CHANGE_GAME_MODE) {
+            this.minecraft.gameMode.setLocalMode(net.minecraft.world.level.GameType.byId((int)$$4));
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.WIN_GAME) {
+            if ($$4 == 0) {
                 this.minecraft.player.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundClientCommandPacket(net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action.PERFORM_RESPAWN));
                 this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.ReceivingLevelScreen());
-            } else if (n == 1) {
+            } else if ($$4 == 1) {
                 this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.WinScreen(true, () -> this.minecraft.player.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundClientCommandPacket(net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action.PERFORM_RESPAWN))));
             }
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.DEMO_EVENT) {
-            net.minecraft.client.Options options = this.minecraft.options;
-            if (f == 0.0f) {
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.DEMO_EVENT) {
+            net.minecraft.client.Options $$5 = this.minecraft.options;
+            if ($$3 == 0.0f) {
                 this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.DemoIntroScreen());
-            } else if (f == 101.0f) {
-                this.minecraft.gui.getChat().addMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"demo.help.movement", (java.lang.Object[])new java.lang.Object[]{options.keyUp.getTranslatedKeyMessage(), options.keyLeft.getTranslatedKeyMessage(), options.keyDown.getTranslatedKeyMessage(), options.keyRight.getTranslatedKeyMessage()}));
-            } else if (f == 102.0f) {
-                this.minecraft.gui.getChat().addMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"demo.help.jump", (java.lang.Object[])new java.lang.Object[]{options.keyJump.getTranslatedKeyMessage()}));
-            } else if (f == 103.0f) {
-                this.minecraft.gui.getChat().addMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"demo.help.inventory", (java.lang.Object[])new java.lang.Object[]{options.keyInventory.getTranslatedKeyMessage()}));
-            } else if (f == 104.0f) {
-                this.minecraft.gui.getChat().addMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"demo.day.6", (java.lang.Object[])new java.lang.Object[]{options.keyScreenshot.getTranslatedKeyMessage()}));
+            } else if ($$3 == 101.0f) {
+                this.minecraft.gui.getChat().addMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"demo.help.movement", (java.lang.Object[])new java.lang.Object[]{$$5.keyUp.getTranslatedKeyMessage(), $$5.keyLeft.getTranslatedKeyMessage(), $$5.keyDown.getTranslatedKeyMessage(), $$5.keyRight.getTranslatedKeyMessage()}));
+            } else if ($$3 == 102.0f) {
+                this.minecraft.gui.getChat().addMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"demo.help.jump", (java.lang.Object[])new java.lang.Object[]{$$5.keyJump.getTranslatedKeyMessage()}));
+            } else if ($$3 == 103.0f) {
+                this.minecraft.gui.getChat().addMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"demo.help.inventory", (java.lang.Object[])new java.lang.Object[]{$$5.keyInventory.getTranslatedKeyMessage()}));
+            } else if ($$3 == 104.0f) {
+                this.minecraft.gui.getChat().addMessage((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"demo.day.6", (java.lang.Object[])new java.lang.Object[]{$$5.keyScreenshot.getTranslatedKeyMessage()}));
             }
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.ARROW_HIT_PLAYER) {
-            this.level.playSound((net.minecraft.world.entity.player.Player)localPlayer, localPlayer.getX(), localPlayer.getEyeY(), localPlayer.getZ(), net.minecraft.sounds.SoundEvents.ARROW_HIT_PLAYER, net.minecraft.sounds.SoundSource.PLAYERS, 0.18f, 0.45f);
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.RAIN_LEVEL_CHANGE) {
-            this.level.setRainLevel(f);
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE) {
-            this.level.setThunderLevel(f);
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.PUFFER_FISH_STING) {
-            this.level.playSound((net.minecraft.world.entity.player.Player)localPlayer, localPlayer.getX(), localPlayer.getY(), localPlayer.getZ(), net.minecraft.sounds.SoundEvents.PUFFER_FISH_STING, net.minecraft.sounds.SoundSource.NEUTRAL, 1.0f, 1.0f);
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.GUARDIAN_ELDER_EFFECT) {
-            this.level.addParticle((net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.ELDER_GUARDIAN, localPlayer.getX(), localPlayer.getY(), localPlayer.getZ(), 0.0, 0.0, 0.0);
-            if (n == 1) {
-                this.level.playSound((net.minecraft.world.entity.player.Player)localPlayer, localPlayer.getX(), localPlayer.getY(), localPlayer.getZ(), net.minecraft.sounds.SoundEvents.ELDER_GUARDIAN_CURSE, net.minecraft.sounds.SoundSource.HOSTILE, 1.0f, 1.0f);
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.ARROW_HIT_PLAYER) {
+            this.level.playSound((net.minecraft.world.entity.player.Player)$$1, $$1.getX(), $$1.getEyeY(), $$1.getZ(), net.minecraft.sounds.SoundEvents.ARROW_HIT_PLAYER, net.minecraft.sounds.SoundSource.PLAYERS, 0.18f, 0.45f);
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.RAIN_LEVEL_CHANGE) {
+            this.level.setRainLevel($$3);
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE) {
+            this.level.setThunderLevel($$3);
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.PUFFER_FISH_STING) {
+            this.level.playSound((net.minecraft.world.entity.player.Player)$$1, $$1.getX(), $$1.getY(), $$1.getZ(), net.minecraft.sounds.SoundEvents.PUFFER_FISH_STING, net.minecraft.sounds.SoundSource.NEUTRAL, 1.0f, 1.0f);
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.GUARDIAN_ELDER_EFFECT) {
+            this.level.addParticle((net.minecraft.core.particles.ParticleOptions)net.minecraft.core.particles.ParticleTypes.ELDER_GUARDIAN, $$1.getX(), $$1.getY(), $$1.getZ(), 0.0, 0.0, 0.0);
+            if ($$4 == 1) {
+                this.level.playSound((net.minecraft.world.entity.player.Player)$$1, $$1.getX(), $$1.getY(), $$1.getZ(), net.minecraft.sounds.SoundEvents.ELDER_GUARDIAN_CURSE, net.minecraft.sounds.SoundSource.HOSTILE, 1.0f, 1.0f);
             }
-        } else if (type == net.minecraft.network.protocol.game.ClientboundGameEventPacket.IMMEDIATE_RESPAWN) {
-            this.minecraft.player.setShowDeathScreen(f == 0.0f);
+        } else if ($$2 == net.minecraft.network.protocol.game.ClientboundGameEventPacket.IMMEDIATE_RESPAWN) {
+            this.minecraft.player.setShowDeathScreen($$3 == 0.0f);
         }
     }
 
-    public void handleMapItemData(net.minecraft.network.protocol.game.ClientboundMapItemDataPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.gui.MapRenderer mapRenderer = this.minecraft.gameRenderer.getMapRenderer();
-        int n = packet.getMapId();
-        java.lang.String string = net.minecraft.world.item.MapItem.makeKey((int)n);
-        net.minecraft.world.level.saveddata.maps.MapItemSavedData mapItemSavedData = this.minecraft.level.getMapData(string);
-        if (mapItemSavedData == null) {
-            mapItemSavedData = net.minecraft.world.level.saveddata.maps.MapItemSavedData.createForClient((byte)packet.getScale(), (boolean)packet.isLocked(), (net.minecraft.resources.ResourceKey)this.minecraft.level.dimension());
-            this.minecraft.level.setMapData(string, mapItemSavedData);
+    public void handleMapItemData(net.minecraft.network.protocol.game.ClientboundMapItemDataPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.gui.MapRenderer $$1 = this.minecraft.gameRenderer.getMapRenderer();
+        int $$2 = $$0.getMapId();
+        java.lang.String $$3 = net.minecraft.world.item.MapItem.makeKey((int)$$2);
+        net.minecraft.world.level.saveddata.maps.MapItemSavedData $$4 = this.minecraft.level.getMapData($$3);
+        if ($$4 == null) {
+            $$4 = net.minecraft.world.level.saveddata.maps.MapItemSavedData.createForClient((byte)$$0.getScale(), (boolean)$$0.isLocked(), (net.minecraft.resources.ResourceKey)this.minecraft.level.dimension());
+            this.minecraft.level.setMapData($$3, $$4);
         }
-        packet.applyToMap(mapItemSavedData);
-        mapRenderer.update(n, mapItemSavedData);
+        $$0.applyToMap($$4);
+        $$1.update($$2, $$4);
     }
 
-    public void handleLevelEvent(net.minecraft.network.protocol.game.ClientboundLevelEventPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        if (packet.isGlobalEvent()) {
-            this.minecraft.level.globalLevelEvent(packet.getType(), packet.getPos(), packet.getData());
+    public void handleLevelEvent(net.minecraft.network.protocol.game.ClientboundLevelEventPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        if ($$0.isGlobalEvent()) {
+            this.minecraft.level.globalLevelEvent($$0.getType(), $$0.getPos(), $$0.getData());
         } else {
-            this.minecraft.level.levelEvent(packet.getType(), packet.getPos(), packet.getData());
+            this.minecraft.level.levelEvent($$0.getType(), $$0.getPos(), $$0.getData());
         }
     }
 
-    public void handleUpdateAdvancementsPacket(net.minecraft.network.protocol.game.ClientboundUpdateAdvancementsPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.advancements.update(packet);
+    public void handleUpdateAdvancementsPacket(net.minecraft.network.protocol.game.ClientboundUpdateAdvancementsPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.advancements.update($$0);
     }
 
-    public void handleSelectAdvancementsTab(net.minecraft.network.protocol.game.ClientboundSelectAdvancementsTabPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.resources.ResourceLocation resourceLocation = packet.getTab();
-        if (resourceLocation == null) {
+    public void handleSelectAdvancementsTab(net.minecraft.network.protocol.game.ClientboundSelectAdvancementsTabPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.resources.ResourceLocation $$1 = $$0.getTab();
+        if ($$1 == null) {
             this.advancements.setSelectedTab(null, false);
         } else {
-            net.minecraft.advancements.Advancement advancement = this.advancements.getAdvancements().get(resourceLocation);
-            this.advancements.setSelectedTab(advancement, false);
+            net.minecraft.advancements.Advancement $$2 = this.advancements.getAdvancements().get($$1);
+            this.advancements.setSelectedTab($$2, false);
         }
     }
 
-    public void handleCommands(net.minecraft.network.protocol.game.ClientboundCommandsPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.commands = new com.mojang.brigadier.CommandDispatcher(packet.getRoot(new net.minecraft.commands.CommandBuildContext((net.minecraft.core.RegistryAccess)this.registryAccess)));
+    public void handleCommands(net.minecraft.network.protocol.game.ClientboundCommandsPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.commands = new com.mojang.brigadier.CommandDispatcher($$0.getRoot(new net.minecraft.commands.CommandBuildContext((net.minecraft.core.RegistryAccess)this.registryAccess.compositeAccess(), this.enabledFeatures)));
     }
 
-    public void handleStopSoundEvent(net.minecraft.network.protocol.game.ClientboundStopSoundPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.getSoundManager().stop(packet.getName(), packet.getSource());
+    public void handleStopSoundEvent(net.minecraft.network.protocol.game.ClientboundStopSoundPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.getSoundManager().stop($$0.getName(), $$0.getSource());
     }
 
-    public void handleCommandSuggestions(net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.suggestionsProvider.completeCustomSuggestions(packet.getId(), packet.getSuggestions());
+    public void handleCommandSuggestions(net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.suggestionsProvider.completeCustomSuggestions($$0.getId(), $$0.getSuggestions());
     }
 
-    public void handleUpdateRecipes(net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.recipeManager.replaceRecipes((java.lang.Iterable)packet.getRecipes());
-        net.minecraft.client.ClientRecipeBook clientRecipeBook = this.minecraft.player.getRecipeBook();
-        clientRecipeBook.setupCollections((java.lang.Iterable)this.recipeManager.getRecipes());
-        this.minecraft.populateSearchTree(net.minecraft.client.searchtree.SearchRegistry.RECIPE_COLLECTIONS, clientRecipeBook.getCollections());
+    public void handleUpdateRecipes(net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.recipeManager.replaceRecipes((java.lang.Iterable)$$0.getRecipes());
+        net.minecraft.client.ClientRecipeBook $$1 = this.minecraft.player.getRecipeBook();
+        $$1.setupCollections((java.lang.Iterable)this.recipeManager.getRecipes());
+        this.minecraft.populateSearchTree(net.minecraft.client.searchtree.SearchRegistry.RECIPE_COLLECTIONS, $$1.getCollections());
     }
 
-    public void handleLookAt(net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.phys.Vec3 vec3 = packet.getPosition((net.minecraft.world.level.Level)this.level);
-        if (vec3 != null) {
-            this.minecraft.player.lookAt(packet.getFromAnchor(), vec3);
+    public void handleLookAt(net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.phys.Vec3 $$1 = $$0.getPosition((net.minecraft.world.level.Level)this.level);
+        if ($$1 != null) {
+            this.minecraft.player.lookAt($$0.getFromAnchor(), $$1);
         }
     }
 
-    public void handleTagQueryPacket(net.minecraft.network.protocol.game.ClientboundTagQueryPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        if (!this.debugQueryHandler.handleResponse(packet.getTransactionId(), packet.getTag())) {
-            LOGGER.debug("Got unhandled response to tag query {}", (java.lang.Object)packet.getTransactionId());
+    public void handleTagQueryPacket(net.minecraft.network.protocol.game.ClientboundTagQueryPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        if (!this.debugQueryHandler.handleResponse($$0.getTransactionId(), $$0.getTag())) {
+            LOGGER.debug("Got unhandled response to tag query {}", (java.lang.Object)$$0.getTransactionId());
         }
     }
 
-    public void handleAwardStats(net.minecraft.network.protocol.game.ClientboundAwardStatsPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        for (java.util.Map$Entry entry : packet.getStats().entrySet()) {
-            net.minecraft.stats.Stat stat = (net.minecraft.stats.Stat)entry.getKey();
-            int n = (java.lang.Integer)entry.getValue();
-            this.minecraft.player.getStats().setValue((net.minecraft.world.entity.player.Player)this.minecraft.player, stat, n);
+    public void handleAwardStats(net.minecraft.network.protocol.game.ClientboundAwardStatsPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        for (java.util.Map$Entry $$1 : $$0.getStats().entrySet()) {
+            net.minecraft.stats.Stat $$2 = (net.minecraft.stats.Stat)$$1.getKey();
+            int $$3 = (java.lang.Integer)$$1.getValue();
+            this.minecraft.player.getStats().setValue((net.minecraft.world.entity.player.Player)this.minecraft.player, $$2, $$3);
         }
         if (this.minecraft.screen instanceof net.minecraft.client.gui.screens.achievement.StatsUpdateListener) {
             ((net.minecraft.client.gui.screens.achievement.StatsUpdateListener)this.minecraft.screen).onStatsUpdated();
         }
     }
 
-    public void handleAddOrRemoveRecipes(net.minecraft.network.protocol.game.ClientboundRecipePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.ClientRecipeBook clientRecipeBook = this.minecraft.player.getRecipeBook();
-        clientRecipeBook.setBookSettings(packet.getBookSettings());
-        net.minecraft.network.protocol.game.ClientboundRecipePacket$State state = packet.getState();
-        switch (net.minecraft.client.multiplayer.ClientPacketListener$1.$SwitchMap$net$minecraft$network$protocol$game$ClientboundRecipePacket$State[state.ordinal()]) {
+    public void handleAddOrRemoveRecipes(net.minecraft.network.protocol.game.ClientboundRecipePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.ClientRecipeBook $$12 = this.minecraft.player.getRecipeBook();
+        $$12.setBookSettings($$0.getBookSettings());
+        net.minecraft.network.protocol.game.ClientboundRecipePacket$State $$2 = $$0.getState();
+        switch (net.minecraft.client.multiplayer.ClientPacketListener$1.$SwitchMap$net$minecraft$network$protocol$game$ClientboundRecipePacket$State[$$2.ordinal()]) {
             case 1: {
-                for (net.minecraft.resources.ResourceLocation resourceLocation : packet.getRecipes()) {
-                    this.recipeManager.byKey(resourceLocation).ifPresent(arg_0 -> ((net.minecraft.client.ClientRecipeBook)clientRecipeBook).remove(arg_0));
+                for (net.minecraft.resources.ResourceLocation $$3 : $$0.getRecipes()) {
+                    this.recipeManager.byKey($$3).ifPresent(arg_0 -> ((net.minecraft.client.ClientRecipeBook)$$12).remove(arg_0));
                 }
                 break;
             }
             case 2: {
-                for (net.minecraft.resources.ResourceLocation resourceLocation : packet.getRecipes()) {
-                    this.recipeManager.byKey(resourceLocation).ifPresent(arg_0 -> ((net.minecraft.client.ClientRecipeBook)clientRecipeBook).add(arg_0));
+                for (net.minecraft.resources.ResourceLocation $$4 : $$0.getRecipes()) {
+                    this.recipeManager.byKey($$4).ifPresent(arg_0 -> ((net.minecraft.client.ClientRecipeBook)$$12).add(arg_0));
                 }
-                for (net.minecraft.resources.ResourceLocation resourceLocation : packet.getHighlights()) {
-                    this.recipeManager.byKey(resourceLocation).ifPresent(arg_0 -> ((net.minecraft.client.ClientRecipeBook)clientRecipeBook).addHighlight(arg_0));
+                for (net.minecraft.resources.ResourceLocation $$5 : $$0.getHighlights()) {
+                    this.recipeManager.byKey($$5).ifPresent(arg_0 -> ((net.minecraft.client.ClientRecipeBook)$$12).addHighlight(arg_0));
                 }
                 break;
             }
             case 3: {
-                for (net.minecraft.resources.ResourceLocation resourceLocation : packet.getRecipes()) {
-                    this.recipeManager.byKey(resourceLocation).ifPresent($$1 -> {
-                        clientRecipeBook.add($$1);
-                        clientRecipeBook.addHighlight($$1);
+                for (net.minecraft.resources.ResourceLocation $$6 : $$0.getRecipes()) {
+                    this.recipeManager.byKey($$6).ifPresent($$1 -> {
+                        $$12.add($$1);
+                        $$12.addHighlight($$1);
                         net.minecraft.client.gui.components.toasts.RecipeToast.addOrUpdate((net.minecraft.client.gui.components.toasts.ToastComponent)this.minecraft.getToasts(), (net.minecraft.world.item.crafting.Recipe)$$1);
                     });
                 }
                 break;
             }
         }
-        clientRecipeBook.getCollections().forEach($$1 -> $$1.updateKnownRecipes((net.minecraft.stats.RecipeBook)clientRecipeBook));
+        $$12.getCollections().forEach($$1 -> $$1.updateKnownRecipes((net.minecraft.stats.RecipeBook)$$12));
         if (this.minecraft.screen instanceof net.minecraft.client.gui.screens.recipebook.RecipeUpdateListener) {
             ((net.minecraft.client.gui.screens.recipebook.RecipeUpdateListener)this.minecraft.screen).recipesUpdated();
         }
     }
 
-    public void handleUpdateMobEffect(net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getEntityId());
-        if (!(entity instanceof net.minecraft.world.entity.LivingEntity)) {
+    public void handleUpdateMobEffect(net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getEntityId());
+        if (!($$1 instanceof net.minecraft.world.entity.LivingEntity)) {
             return;
         }
-        net.minecraft.world.effect.MobEffect mobEffect = packet.getEffect();
-        if (mobEffect == null) {
+        net.minecraft.world.effect.MobEffect $$2 = $$0.getEffect();
+        if ($$2 == null) {
             return;
         }
-        net.minecraft.world.effect.MobEffectInstance mobEffectInstance = new net.minecraft.world.effect.MobEffectInstance(mobEffect, packet.getEffectDurationTicks(), (int)packet.getEffectAmplifier(), packet.isEffectAmbient(), packet.isEffectVisible(), packet.effectShowsIcon(), null, java.util.Optional.ofNullable((java.lang.Object)packet.getFactorData()));
-        mobEffectInstance.setNoCounter(packet.isSuperLongDuration());
-        ((net.minecraft.world.entity.LivingEntity)entity).forceAddEffect(mobEffectInstance, null);
+        net.minecraft.world.effect.MobEffectInstance $$3 = new net.minecraft.world.effect.MobEffectInstance($$2, $$0.getEffectDurationTicks(), (int)$$0.getEffectAmplifier(), $$0.isEffectAmbient(), $$0.isEffectVisible(), $$0.effectShowsIcon(), null, java.util.Optional.ofNullable((java.lang.Object)$$0.getFactorData()));
+        $$3.setNoCounter($$0.isSuperLongDuration());
+        ((net.minecraft.world.entity.LivingEntity)$$1).forceAddEffect($$3, null);
     }
 
-    public void handleUpdateTags(net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        packet.getTags().forEach((arg_0, arg_1) -> this.updateTagsForRegistry(arg_0, arg_1));
+    public void handleUpdateTags(net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        $$0.getTags().forEach((arg_0, arg_1) -> this.updateTagsForRegistry(arg_0, arg_1));
         if (!this.connection.isMemoryConnection()) {
             net.minecraft.world.level.block.Blocks.rebuildCache();
         }
-        net.minecraft.core.NonNullList nonNullList = net.minecraft.core.NonNullList.create();
-        for (net.minecraft.world.item.Item item : net.minecraft.core.Registry.ITEM) {
-            item.fillItemCategory(net.minecraft.world.item.CreativeModeTab.TAB_SEARCH, nonNullList);
+        this.rebuildCreativeScreenSearchData();
+    }
+
+    public void handleEnabledFeatures(net.minecraft.network.protocol.game.ClientboundUpdateEnabledFeaturesPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.enabledFeatures = net.minecraft.world.flag.FeatureFlags.REGISTRY.fromNames((java.lang.Iterable)$$0.features());
+        this.rebuildCreativeScreenSearchData();
+    }
+
+    public void rebuildCreativeScreenSearchData() {
+        for (net.minecraft.world.item.CreativeModeTab $$0 : net.minecraft.world.item.CreativeModeTabs.TABS) {
+            $$0.invalidateDisplayListCache();
         }
-        this.minecraft.populateSearchTree(net.minecraft.client.searchtree.SearchRegistry.CREATIVE_NAMES, (java.util.List)nonNullList);
-        this.minecraft.populateSearchTree(net.minecraft.client.searchtree.SearchRegistry.CREATIVE_TAGS, (java.util.List)nonNullList);
+        net.minecraft.core.NonNullList $$1 = net.minecraft.core.NonNullList.create();
+        $$1.addAll((java.util.Collection)net.minecraft.world.item.CreativeModeTabs.TAB_SEARCH.getDisplayItems(this.enabledFeatures));
+        this.minecraft.populateSearchTree(net.minecraft.client.searchtree.SearchRegistry.CREATIVE_NAMES, (java.util.List)$$1);
+        this.minecraft.populateSearchTree(net.minecraft.client.searchtree.SearchRegistry.CREATIVE_TAGS, (java.util.List)$$1);
     }
 
     public <T> void updateTagsForRegistry(net.minecraft.resources.ResourceKey<? extends net.minecraft.core.Registry<? extends T>> $$0, net.minecraft.tags.TagNetworkSerialization$NetworkPayload $$1) {
         if ($$1.isEmpty()) {
             return;
         }
-        net.minecraft.core.Registry $$2 = (net.minecraft.core.Registry)this.registryAccess.registry($$0).orElseThrow(() -> new java.lang.IllegalStateException("Unknown registry " + $$0));
+        net.minecraft.core.Registry $$2 = (net.minecraft.core.Registry)this.registryAccess.compositeAccess().registry($$0).orElseThrow(() -> new java.lang.IllegalStateException("Unknown registry " + $$0));
         net.minecraft.resources.ResourceKey<? extends net.minecraft.core.Registry<? extends T>> $$3 = $$0;
         java.util.HashMap $$4 = new java.util.HashMap();
         net.minecraft.tags.TagNetworkSerialization.deserializeTagsFromNetwork($$3, (net.minecraft.core.Registry)$$2, (net.minecraft.tags.TagNetworkSerialization$NetworkPayload)$$1, (arg_0, arg_1) -> ((java.util.Map)$$4).put(arg_0, arg_1));
@@ -1002,17 +1039,17 @@
         }
     }
 
-    public void handleChangeDifficulty(net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.levelData.setDifficulty(packet.getDifficulty());
-        this.levelData.setDifficultyLocked(packet.isLocked());
+    public void handleChangeDifficulty(net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.levelData.setDifficulty($$0.getDifficulty());
+        this.levelData.setDifficultyLocked($$0.isLocked());
     }
 
-    public void handleSetCamera(net.minecraft.network.protocol.game.ClientboundSetCameraPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = packet.getEntity((net.minecraft.world.level.Level)this.level);
-        if (entity != null) {
-            this.minecraft.setCameraEntity(entity);
+    public void handleSetCamera(net.minecraft.network.protocol.game.ClientboundSetCameraPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = $$0.getEntity((net.minecraft.world.level.Level)this.level);
+        if ($$1 != null) {
+            this.minecraft.setCameraEntity($$1);
         }
     }
 
@@ -1064,34 +1101,28 @@
         }
     }
 
-    public void handleServerData(net.minecraft.network.protocol.game.ClientboundServerDataPacket $$0) {
-        net.minecraft.client.multiplayer.ServerData$ChatPreview $$3;
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.multiplayer.ServerData $$12 = this.minecraft.getCurrentServer();
-        if ($$12 == null) {
+    public void handleServerData(net.minecraft.network.protocol.game.ClientboundServerDataPacket $$02) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$02, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        if (this.serverData == null) {
             return;
         }
-        $$0.getMotd().ifPresent($$1 -> {
-            $$0.motd = $$1;
+        $$02.getMotd().ifPresent($$0 -> {
+            this.serverData.motd = $$0;
         });
-        $$0.getIconBase64().ifPresent($$1 -> {
+        $$02.getIconBase64().ifPresent($$0 -> {
             try {
-                $$12.setIconB64(net.minecraft.client.multiplayer.ServerData.parseFavicon((java.lang.String)$$1));
+                this.serverData.setIconB64(net.minecraft.client.multiplayer.ServerData.parseFavicon((java.lang.String)$$0));
             }
-            catch (java.text.ParseException $$2) {
-                LOGGER.error("Invalid server icon", (java.lang.Throwable)$$2);
+            catch (java.text.ParseException $$1) {
+                LOGGER.error("Invalid server icon", (java.lang.Throwable)$$1);
             }
         });
-        $$12.setPreviewsChat($$0.previewsChat());
-        $$12.setEnforcesSecureChat($$0.enforcesSecureChat());
-        net.minecraft.client.multiplayer.ServerList.saveSingleServer((net.minecraft.client.multiplayer.ServerData)$$12);
-        if (!$$0.enforcesSecureChat()) {
-            net.minecraft.client.gui.components.toasts.SystemToast $$2 = net.minecraft.client.gui.components.toasts.SystemToast.multiline((net.minecraft.client.Minecraft)this.minecraft, (net.minecraft.client.gui.components.toasts.SystemToast$SystemToastIds)net.minecraft.client.gui.components.toasts.SystemToast$SystemToastIds.UNSECURE_SERVER_WARNING, (net.minecraft.network.chat.Component)UNSECURE_SERVER_TOAST_TITLE, (net.minecraft.network.chat.Component)UNSERURE_SERVER_TOAST);
-            this.minecraft.getToasts().addToast((net.minecraft.client.gui.components.toasts.Toast)$$2);
+        this.serverData.setEnforcesSecureChat($$02.enforcesSecureChat());
+        net.minecraft.client.multiplayer.ServerList.saveSingleServer((net.minecraft.client.multiplayer.ServerData)this.serverData);
+        if (!$$02.enforcesSecureChat()) {
+            net.minecraft.client.gui.components.toasts.SystemToast $$1 = net.minecraft.client.gui.components.toasts.SystemToast.multiline((net.minecraft.client.Minecraft)this.minecraft, (net.minecraft.client.gui.components.toasts.SystemToast$SystemToastIds)net.minecraft.client.gui.components.toasts.SystemToast$SystemToastIds.UNSECURE_SERVER_WARNING, (net.minecraft.network.chat.Component)UNSECURE_SERVER_TOAST_TITLE, (net.minecraft.network.chat.Component)UNSERURE_SERVER_TOAST);
+            this.minecraft.getToasts().addToast((net.minecraft.client.gui.components.toasts.Toast)$$1);
         }
-        if (($$3 = $$12.getChatPreview()) != null && !$$3.isAcknowledged()) {
-            this.minecraft.execute(() -> this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.multiplayer.ChatPreviewWarningScreen(this.minecraft.screen, $$12)));
-        }
     }
 
     public void handleCustomChatCompletions(net.minecraft.network.protocol.game.ClientboundCustomChatCompletionsPacket $$0) {
@@ -1119,129 +1150,168 @@
         this.minecraft.gui.setTimes($$0.getFadeIn(), $$0.getStay(), $$0.getFadeOut());
     }
 
-    public void handleTabListCustomisation(net.minecraft.network.protocol.game.ClientboundTabListPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.gui.getTabList().setHeader(packet.getHeader().getString().isEmpty() ? null : packet.getHeader());
-        this.minecraft.gui.getTabList().setFooter(packet.getFooter().getString().isEmpty() ? null : packet.getFooter());
+    public void handleTabListCustomisation(net.minecraft.network.protocol.game.ClientboundTabListPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.gui.getTabList().setHeader($$0.getHeader().getString().isEmpty() ? null : $$0.getHeader());
+        this.minecraft.gui.getTabList().setFooter($$0.getFooter().getString().isEmpty() ? null : $$0.getFooter());
     }
 
-    public void handleRemoveMobEffect(net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = packet.getEntity((net.minecraft.world.level.Level)this.level);
-        if (entity instanceof net.minecraft.world.entity.LivingEntity) {
-            ((net.minecraft.world.entity.LivingEntity)entity).removeEffectNoUpdate(packet.getEffect());
+    public void handleRemoveMobEffect(net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = $$0.getEntity((net.minecraft.world.level.Level)this.level);
+        if ($$1 instanceof net.minecraft.world.entity.LivingEntity) {
+            ((net.minecraft.world.entity.LivingEntity)$$1).removeEffectNoUpdate($$0.getEffect());
         }
     }
 
-    public void handlePlayerInfo(net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        for (net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate playerUpdate : packet.getEntries()) {
-            if (packet.getAction() == net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action.REMOVE_PLAYER) {
-                this.minecraft.getPlayerSocialManager().removePlayer(playerUpdate.getProfile().getId());
-                this.playerInfoMap.remove((java.lang.Object)playerUpdate.getProfile().getId());
+    public void handlePlayerInfoRemove(net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        for (java.util.UUID $$1 : $$0.profileIds()) {
+            this.minecraft.getPlayerSocialManager().removePlayer($$1);
+            net.minecraft.client.multiplayer.PlayerInfo $$2 = (net.minecraft.client.multiplayer.PlayerInfo)this.playerInfoMap.remove((java.lang.Object)$$1);
+            if ($$2 == null) continue;
+            this.listedPlayers.remove((java.lang.Object)$$2);
+        }
+    }
+
+    public void handlePlayerInfoUpdate(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        for (net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket$Entry $$1 : $$0.newEntries()) {
+            net.minecraft.client.multiplayer.PlayerInfo $$2 = new net.minecraft.client.multiplayer.PlayerInfo($$1.profile());
+            if (this.playerInfoMap.putIfAbsent((java.lang.Object)$$1.profileId(), (java.lang.Object)$$2) != null) continue;
+            this.minecraft.getPlayerSocialManager().addPlayer($$2);
+        }
+        for (net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket$Entry $$3 : $$0.entries()) {
+            net.minecraft.client.multiplayer.PlayerInfo $$4 = (net.minecraft.client.multiplayer.PlayerInfo)this.playerInfoMap.get((java.lang.Object)$$3.profileId());
+            if ($$4 == null) {
+                LOGGER.warn("Ignoring player info update for unknown player {}", (java.lang.Object)$$3.profileId());
                 continue;
             }
-            net.minecraft.client.multiplayer.PlayerInfo playerInfo = (net.minecraft.client.multiplayer.PlayerInfo)this.playerInfoMap.get((java.lang.Object)playerUpdate.getProfile().getId());
-            if (packet.getAction() == net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action.ADD_PLAYER && playerInfo == null) {
-                boolean bl = (java.lang.Boolean)net.minecraft.Util.mapNullable((java.lang.Object)this.minecraft.getCurrentServer(), net.minecraft.client.multiplayer.ServerData::enforcesSecureChat, (java.lang.Object)false);
-                playerInfo = new net.minecraft.client.multiplayer.PlayerInfo(playerUpdate, this.minecraft.getServiceSignatureValidator(), bl);
-                this.playerInfoMap.put((java.lang.Object)playerInfo.getProfile().getId(), (java.lang.Object)playerInfo);
-                this.minecraft.getPlayerSocialManager().addPlayer(playerInfo);
+            for (net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket$Action $$5 : $$0.actions()) {
+                this.applyPlayerInfoUpdate($$5, $$3, $$4);
             }
-            if (playerInfo == null) continue;
-            switch (net.minecraft.client.multiplayer.ClientPacketListener$1.$SwitchMap$net$minecraft$network$protocol$game$ClientboundPlayerInfoPacket$Action[packet.getAction().ordinal()]) {
-                case 1: {
-                    playerInfo.setGameMode(playerUpdate.getGameMode());
-                    playerInfo.setLatency(playerUpdate.getLatency());
-                    playerInfo.setTabListDisplayName(playerUpdate.getDisplayName());
+        }
+    }
+
+    public void applyPlayerInfoUpdate(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket$Action $$0, net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket$Entry $$1, net.minecraft.client.multiplayer.PlayerInfo $$2) {
+        switch (net.minecraft.client.multiplayer.ClientPacketListener$1.$SwitchMap$net$minecraft$network$protocol$game$ClientboundPlayerInfoUpdatePacket$Action[$$0.ordinal()]) {
+            case 1: {
+                this.initializeChatSession($$1, $$2);
+                break;
+            }
+            case 2: {
+                $$2.setGameMode($$1.gameMode());
+                break;
+            }
+            case 3: {
+                if ($$1.listed()) {
+                    this.listedPlayers.add((java.lang.Object)$$2);
                     break;
                 }
-                case 2: {
-                    playerInfo.setGameMode(playerUpdate.getGameMode());
-                    break;
-                }
-                case 3: {
-                    playerInfo.setLatency(playerUpdate.getLatency());
-                    break;
-                }
-                case 4: {
-                    playerInfo.setTabListDisplayName(playerUpdate.getDisplayName());
-                }
+                this.listedPlayers.remove((java.lang.Object)$$2);
+                break;
             }
+            case 4: {
+                $$2.setLatency($$1.latency());
+                break;
+            }
+            case 5: {
+                $$2.setTabListDisplayName($$1.displayName());
+            }
         }
     }
 
-    public void handleKeepAlive(net.minecraft.network.protocol.game.ClientboundKeepAlivePacket packet) {
-        this.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundKeepAlivePacket(packet.getId()));
+    public void initializeChatSession(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket$Entry $$0, net.minecraft.client.multiplayer.PlayerInfo $$1) {
+        boolean $$3;
+        net.minecraft.network.chat.RemoteChatSession $$2 = this.validateChatSession($$0.chatSession(), $$1.getProfile());
+        boolean bl = $$3 = this.serverData != null && this.serverData.enforcesSecureChat();
+        if ($$3 && !$$2.verifiable()) {
+            LOGGER.error("Received unverifiable chat session for player '{}', but Secure Chat is enforced", (java.lang.Object)$$1.getProfile().getName());
+            this.connection.disconnect(INVALID_PACKET);
+            return;
+        }
+        $$1.setChatSession($$2);
     }
 
-    public void handlePlayerAbilities(net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.client.player.LocalPlayer localPlayer = this.minecraft.player;
-        localPlayer.getAbilities().flying = packet.isFlying();
-        localPlayer.getAbilities().instabuild = packet.canInstabuild();
-        localPlayer.getAbilities().invulnerable = packet.isInvulnerable();
-        localPlayer.getAbilities().mayfly = packet.canFly();
-        localPlayer.getAbilities().setFlyingSpeed(packet.getFlyingSpeed());
-        localPlayer.getAbilities().setWalkingSpeed(packet.getWalkingSpeed());
+    public net.minecraft.network.chat.RemoteChatSession validateChatSession(net.minecraft.network.chat.RemoteChatSession$Data $$0, com.mojang.authlib.GameProfile $$1) {
+        try {
+            return $$0.validate($$1, this.minecraft.getServiceSignatureValidator(), net.minecraft.world.entity.player.ProfilePublicKey.EXPIRY_GRACE_PERIOD);
+        }
+        catch (net.minecraft.world.entity.player.ProfilePublicKey$ValidationException $$2) {
+            LOGGER.warn("Failed to validate profile key for player: '{}'", (java.lang.Object)$$1.getName(), (java.lang.Object)((java.lang.Object)$$2));
+            return net.minecraft.network.chat.RemoteChatSession.UNVERIFIED;
+        }
     }
 
-    public void handleSoundEvent(net.minecraft.network.protocol.game.ClientboundSoundPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.level.playSeededSound((net.minecraft.world.entity.player.Player)this.minecraft.player, packet.getX(), packet.getY(), packet.getZ(), packet.getSound(), packet.getSource(), packet.getVolume(), packet.getPitch(), packet.getSeed());
+    public void handleKeepAlive(net.minecraft.network.protocol.game.ClientboundKeepAlivePacket $$0) {
+        this.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundKeepAlivePacket($$0.getId()));
     }
 
-    public void handleSoundEntityEvent(net.minecraft.network.protocol.game.ClientboundSoundEntityPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getId());
-        if (entity == null) {
+    public void handlePlayerAbilities(net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.client.player.LocalPlayer $$1 = this.minecraft.player;
+        $$1.getAbilities().flying = $$0.isFlying();
+        $$1.getAbilities().instabuild = $$0.canInstabuild();
+        $$1.getAbilities().invulnerable = $$0.isInvulnerable();
+        $$1.getAbilities().mayfly = $$0.canFly();
+        $$1.getAbilities().setFlyingSpeed($$0.getFlyingSpeed());
+        $$1.getAbilities().setWalkingSpeed($$0.getWalkingSpeed());
+    }
+
+    public void handleSoundEvent(net.minecraft.network.protocol.game.ClientboundSoundPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.level.playSeededSound((net.minecraft.world.entity.player.Player)this.minecraft.player, $$0.getX(), $$0.getY(), $$0.getZ(), $$0.getSound(), $$0.getSource(), $$0.getVolume(), $$0.getPitch(), $$0.getSeed());
+    }
+
+    public void handleSoundEntityEvent(net.minecraft.network.protocol.game.ClientboundSoundEntityPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getId());
+        if ($$1 == null) {
             return;
         }
-        this.minecraft.level.playSeededSound((net.minecraft.world.entity.player.Player)this.minecraft.player, entity, packet.getSound(), packet.getSource(), packet.getVolume(), packet.getPitch(), packet.getSeed());
+        this.minecraft.level.playSeededSound((net.minecraft.world.entity.player.Player)this.minecraft.player, $$1, $$0.getSound(), $$0.getSource(), $$0.getVolume(), $$0.getPitch(), $$0.getSeed());
     }
 
-    public void handleCustomSoundEvent(net.minecraft.network.protocol.game.ClientboundCustomSoundPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.getSoundManager().play((net.minecraft.client.resources.sounds.SoundInstance)new net.minecraft.client.resources.sounds.SimpleSoundInstance(packet.getName(), packet.getSource(), packet.getVolume(), packet.getPitch(), net.minecraft.util.RandomSource.create((long)packet.getSeed()), false, 0, net.minecraft.client.resources.sounds.SoundInstance$Attenuation.LINEAR, packet.getX(), packet.getY(), packet.getZ(), false));
+    public void handleCustomSoundEvent(net.minecraft.network.protocol.game.ClientboundCustomSoundPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.getSoundManager().play((net.minecraft.client.resources.sounds.SoundInstance)new net.minecraft.client.resources.sounds.SimpleSoundInstance($$0.getName(), $$0.getSource(), $$0.getVolume(), $$0.getPitch(), net.minecraft.util.RandomSource.create((long)$$0.getSeed()), false, 0, net.minecraft.client.resources.sounds.SoundInstance$Attenuation.LINEAR, $$0.getX(), $$0.getY(), $$0.getZ(), false));
     }
 
-    public void handleResourcePack(net.minecraft.network.protocol.game.ClientboundResourcePackPacket packet) {
-        java.net.URL uRL = net.minecraft.client.multiplayer.ClientPacketListener.parseResourcePackUrl((java.lang.String)packet.getUrl());
-        if (uRL == null) {
+    public void handleResourcePack(net.minecraft.network.protocol.game.ClientboundResourcePackPacket $$0) {
+        java.net.URL $$1 = net.minecraft.client.multiplayer.ClientPacketListener.parseResourcePackUrl((java.lang.String)$$0.getUrl());
+        if ($$1 == null) {
             this.send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action.FAILED_DOWNLOAD);
             return;
         }
-        java.lang.String string = packet.getHash();
-        boolean bl = packet.isRequired();
-        net.minecraft.client.multiplayer.ServerData serverData = this.minecraft.getCurrentServer();
-        if (serverData != null && serverData.getResourcePackStatus() == net.minecraft.client.multiplayer.ServerData$ServerPackStatus.ENABLED) {
+        java.lang.String $$2 = $$0.getHash();
+        boolean $$3 = $$0.isRequired();
+        if (this.serverData != null && this.serverData.getResourcePackStatus() == net.minecraft.client.multiplayer.ServerData$ServerPackStatus.ENABLED) {
             this.send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action.ACCEPTED);
-            this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(uRL, string, true));
-        } else if (serverData == null || serverData.getResourcePackStatus() == net.minecraft.client.multiplayer.ServerData$ServerPackStatus.PROMPT || bl && serverData.getResourcePackStatus() == net.minecraft.client.multiplayer.ServerData$ServerPackStatus.DISABLED) {
+            this.downloadCallback(this.minecraft.getDownloadedPackSource().downloadAndSelectResourcePack($$1, $$2, true));
+        } else if (this.serverData == null || this.serverData.getResourcePackStatus() == net.minecraft.client.multiplayer.ServerData$ServerPackStatus.PROMPT || $$3 && this.serverData.getResourcePackStatus() == net.minecraft.client.multiplayer.ServerData$ServerPackStatus.DISABLED) {
             this.minecraft.execute(() -> this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.ConfirmScreen($$3 -> {
                 this.minecraft.setScreen(null);
-                net.minecraft.client.multiplayer.ServerData $$4 = this.minecraft.getCurrentServer();
                 if ($$3) {
-                    if ($$4 != null) {
-                        $$4.setResourcePackStatus(net.minecraft.client.multiplayer.ServerData$ServerPackStatus.ENABLED);
+                    if (this.serverData != null) {
+                        this.serverData.setResourcePackStatus(net.minecraft.client.multiplayer.ServerData$ServerPackStatus.ENABLED);
                     }
                     this.send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action.ACCEPTED);
-                    this.downloadCallback(this.minecraft.getClientPackSource().downloadAndSelectResourcePack(uRL, string, true));
+                    this.downloadCallback(this.minecraft.getDownloadedPackSource().downloadAndSelectResourcePack($$1, $$2, true));
                 } else {
                     this.send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action.DECLINED);
-                    if (bl) {
+                    if ($$3) {
                         this.connection.disconnect((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.requiredTexturePrompt.disconnect"));
-                    } else if ($$4 != null) {
-                        $$4.setResourcePackStatus(net.minecraft.client.multiplayer.ServerData$ServerPackStatus.DISABLED);
+                    } else if (this.serverData != null) {
+                        this.serverData.setResourcePackStatus(net.minecraft.client.multiplayer.ServerData$ServerPackStatus.DISABLED);
                     }
                 }
-                if ($$4 != null) {
-                    net.minecraft.client.multiplayer.ServerList.saveSingleServer((net.minecraft.client.multiplayer.ServerData)$$4);
+                if (this.serverData != null) {
+                    net.minecraft.client.multiplayer.ServerList.saveSingleServer((net.minecraft.client.multiplayer.ServerData)this.serverData);
                 }
-            }, (net.minecraft.network.chat.Component)(bl ? net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.requiredTexturePrompt.line1") : net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.texturePrompt.line1")), net.minecraft.client.multiplayer.ClientPacketListener.preparePackPrompt((net.minecraft.network.chat.Component)(bl ? net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.requiredTexturePrompt.line2").withStyle(new net.minecraft.ChatFormatting[]{net.minecraft.ChatFormatting.YELLOW, net.minecraft.ChatFormatting.BOLD}) : net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.texturePrompt.line2")), (net.minecraft.network.chat.Component)packet.getPrompt()), bl ? net.minecraft.network.chat.CommonComponents.GUI_PROCEED : net.minecraft.network.chat.CommonComponents.GUI_YES, (net.minecraft.network.chat.Component)(bl ? net.minecraft.network.chat.Component.translatable((java.lang.String)"menu.disconnect") : net.minecraft.network.chat.CommonComponents.GUI_NO))));
+            }, (net.minecraft.network.chat.Component)($$3 ? net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.requiredTexturePrompt.line1") : net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.texturePrompt.line1")), net.minecraft.client.multiplayer.ClientPacketListener.preparePackPrompt((net.minecraft.network.chat.Component)($$3 ? net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.requiredTexturePrompt.line2").withStyle(new net.minecraft.ChatFormatting[]{net.minecraft.ChatFormatting.YELLOW, net.minecraft.ChatFormatting.BOLD}) : net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.texturePrompt.line2")), (net.minecraft.network.chat.Component)$$0.getPrompt()), $$3 ? net.minecraft.network.chat.CommonComponents.GUI_PROCEED : net.minecraft.network.chat.CommonComponents.GUI_YES, (net.minecraft.network.chat.Component)($$3 ? net.minecraft.network.chat.Component.translatable((java.lang.String)"menu.disconnect") : net.minecraft.network.chat.CommonComponents.GUI_NO))));
         } else {
             this.send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action.DECLINED);
-            if (bl) {
+            if ($$3) {
                 this.connection.disconnect((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.requiredTexturePrompt.disconnect"));
             }
         }
@@ -1269,358 +1339,344 @@
         return null;
     }
 
-    public void downloadCallback(java.util.concurrent.CompletableFuture<?> future) {
-        future.thenRun(() -> this.send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action.SUCCESSFULLY_LOADED)).exceptionally($$0 -> {
+    public void downloadCallback(java.util.concurrent.CompletableFuture<?> $$02) {
+        $$02.thenRun(() -> this.send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action.SUCCESSFULLY_LOADED)).exceptionally($$0 -> {
             this.send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action.FAILED_DOWNLOAD);
             return null;
         });
     }
 
-    public void send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action action) {
-        this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundResourcePackPacket(action));
+    public void send(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action $$0) {
+        this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundResourcePackPacket($$0));
     }
 
-    public void handleBossUpdate(net.minecraft.network.protocol.game.ClientboundBossEventPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.minecraft.gui.getBossOverlay().update(packet);
+    public void handleBossUpdate(net.minecraft.network.protocol.game.ClientboundBossEventPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.minecraft.gui.getBossOverlay().update($$0);
     }
 
-    public void handleItemCooldown(net.minecraft.network.protocol.game.ClientboundCooldownPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        if (packet.getDuration() == 0) {
-            this.minecraft.player.getCooldowns().removeCooldown(packet.getItem());
+    public void handleItemCooldown(net.minecraft.network.protocol.game.ClientboundCooldownPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        if ($$0.getDuration() == 0) {
+            this.minecraft.player.getCooldowns().removeCooldown($$0.getItem());
         } else {
-            this.minecraft.player.getCooldowns().addCooldown(packet.getItem(), packet.getDuration());
+            this.minecraft.player.getCooldowns().addCooldown($$0.getItem(), $$0.getDuration());
         }
     }
 
-    public void handleMoveVehicle(net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.minecraft.player.getRootVehicle();
-        if (entity != this.minecraft.player && entity.isControlledByLocalInstance()) {
-            entity.absMoveTo(packet.getX(), packet.getY(), packet.getZ(), packet.getYRot(), packet.getXRot());
-            this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket(entity));
+    public void handleMoveVehicle(net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.minecraft.player.getRootVehicle();
+        if ($$1 != this.minecraft.player && $$1.isControlledByLocalInstance()) {
+            $$1.absMoveTo($$0.getX(), $$0.getY(), $$0.getZ(), $$0.getYRot(), $$0.getXRot());
+            this.connection.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket($$1));
         }
     }
 
-    public void handleOpenBook(net.minecraft.network.protocol.game.ClientboundOpenBookPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.item.ItemStack itemStack = this.minecraft.player.getItemInHand(packet.getHand());
-        if (itemStack.is(net.minecraft.world.item.Items.WRITTEN_BOOK)) {
-            this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.inventory.BookViewScreen((net.minecraft.client.gui.screens.inventory.BookViewScreen$BookAccess)new net.minecraft.client.gui.screens.inventory.BookViewScreen$WrittenBookAccess(itemStack)));
+    public void handleOpenBook(net.minecraft.network.protocol.game.ClientboundOpenBookPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.item.ItemStack $$1 = this.minecraft.player.getItemInHand($$0.getHand());
+        if ($$1.is(net.minecraft.world.item.Items.WRITTEN_BOOK)) {
+            this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.inventory.BookViewScreen((net.minecraft.client.gui.screens.inventory.BookViewScreen$BookAccess)new net.minecraft.client.gui.screens.inventory.BookViewScreen$WrittenBookAccess($$1)));
         }
     }
 
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
-    public void handleCustomPayload(net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.resources.ResourceLocation resourceLocation = packet.getIdentifier();
-        net.minecraft.network.FriendlyByteBuf friendlyByteBuf = null;
+    public void handleCustomPayload(net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.resources.ResourceLocation $$1 = $$0.getIdentifier();
+        net.minecraft.network.FriendlyByteBuf $$2 = null;
         try {
-            friendlyByteBuf = packet.getData();
-            if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.BRAND.equals((java.lang.Object)resourceLocation)) {
-                java.lang.String string = friendlyByteBuf.readUtf();
-                this.minecraft.player.setServerBrand(string);
-                this.telemetryManager.onServerBrandReceived(string);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_PATHFINDING_PACKET.equals((java.lang.Object)resourceLocation)) {
-                int n = friendlyByteBuf.readInt();
-                float f = friendlyByteBuf.readFloat();
-                net.minecraft.world.level.pathfinder.Path path = net.minecraft.world.level.pathfinder.Path.createFromStream((net.minecraft.network.FriendlyByteBuf)friendlyByteBuf);
-                this.minecraft.debugRenderer.pathfindingRenderer.addPath(n, path, f);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_NEIGHBORSUPDATE_PACKET.equals((java.lang.Object)resourceLocation)) {
-                long l = friendlyByteBuf.readVarLong();
-                net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                ((net.minecraft.client.renderer.debug.NeighborsUpdateRenderer)this.minecraft.debugRenderer.neighborsUpdateRenderer).addUpdate(l, blockPos);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_STRUCTURES_PACKET.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.world.level.dimension.DimensionType dimensionType = (net.minecraft.world.level.dimension.DimensionType)this.registryAccess.registryOrThrow(net.minecraft.core.Registry.DIMENSION_TYPE_REGISTRY).get(friendlyByteBuf.readResourceLocation());
-                net.minecraft.world.level.levelgen.structure.BoundingBox boundingBox = new net.minecraft.world.level.levelgen.structure.BoundingBox(friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt());
-                int n = friendlyByteBuf.readInt();
-                java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-                java.util.ArrayList arrayList2 = com.google.common.collect.Lists.newArrayList();
-                for (int i = 0; i < n; ++i) {
-                    arrayList.add((java.lang.Object)new net.minecraft.world.level.levelgen.structure.BoundingBox(friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt(), friendlyByteBuf.readInt()));
-                    arrayList2.add((java.lang.Object)friendlyByteBuf.readBoolean());
+            $$2 = $$0.getData();
+            if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.BRAND.equals((java.lang.Object)$$1)) {
+                java.lang.String $$3 = $$2.readUtf();
+                this.minecraft.player.setServerBrand($$3);
+                this.telemetryManager.onServerBrandReceived($$3);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_PATHFINDING_PACKET.equals((java.lang.Object)$$1)) {
+                int $$4 = $$2.readInt();
+                float $$5 = $$2.readFloat();
+                net.minecraft.world.level.pathfinder.Path $$6 = net.minecraft.world.level.pathfinder.Path.createFromStream((net.minecraft.network.FriendlyByteBuf)$$2);
+                this.minecraft.debugRenderer.pathfindingRenderer.addPath($$4, $$6, $$5);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_NEIGHBORSUPDATE_PACKET.equals((java.lang.Object)$$1)) {
+                long $$7 = $$2.readVarLong();
+                net.minecraft.core.BlockPos $$8 = $$2.readBlockPos();
+                ((net.minecraft.client.renderer.debug.NeighborsUpdateRenderer)this.minecraft.debugRenderer.neighborsUpdateRenderer).addUpdate($$7, $$8);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_STRUCTURES_PACKET.equals((java.lang.Object)$$1)) {
+                net.minecraft.world.level.dimension.DimensionType $$9 = (net.minecraft.world.level.dimension.DimensionType)this.registryAccess.compositeAccess().registryOrThrow(net.minecraft.core.Registry.DIMENSION_TYPE_REGISTRY).get($$2.readResourceLocation());
+                net.minecraft.world.level.levelgen.structure.BoundingBox $$10 = new net.minecraft.world.level.levelgen.structure.BoundingBox($$2.readInt(), $$2.readInt(), $$2.readInt(), $$2.readInt(), $$2.readInt(), $$2.readInt());
+                int $$11 = $$2.readInt();
+                java.util.ArrayList $$12 = com.google.common.collect.Lists.newArrayList();
+                java.util.ArrayList $$13 = com.google.common.collect.Lists.newArrayList();
+                for (int $$14 = 0; $$14 < $$11; ++$$14) {
+                    $$12.add((java.lang.Object)new net.minecraft.world.level.levelgen.structure.BoundingBox($$2.readInt(), $$2.readInt(), $$2.readInt(), $$2.readInt(), $$2.readInt(), $$2.readInt()));
+                    $$13.add((java.lang.Object)$$2.readBoolean());
                 }
-                this.minecraft.debugRenderer.structureRenderer.addBoundingBox(boundingBox, (java.util.List)arrayList, (java.util.List)arrayList2, dimensionType);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_WORLDGENATTEMPT_PACKET.equals((java.lang.Object)resourceLocation)) {
-                ((net.minecraft.client.renderer.debug.WorldGenAttemptRenderer)this.minecraft.debugRenderer.worldGenAttemptRenderer).addPos(friendlyByteBuf.readBlockPos(), friendlyByteBuf.readFloat(), friendlyByteBuf.readFloat(), friendlyByteBuf.readFloat(), friendlyByteBuf.readFloat(), friendlyByteBuf.readFloat());
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_VILLAGE_SECTIONS.equals((java.lang.Object)resourceLocation)) {
-                int n;
-                int n2 = friendlyByteBuf.readInt();
-                for (n = 0;
- n < n2; ++n) {
-                    this.minecraft.debugRenderer.villageSectionsDebugRenderer.setVillageSection(friendlyByteBuf.readSectionPos());
+                this.minecraft.debugRenderer.structureRenderer.addBoundingBox($$10, (java.util.List)$$12, (java.util.List)$$13, $$9);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_WORLDGENATTEMPT_PACKET.equals((java.lang.Object)$$1)) {
+                ((net.minecraft.client.renderer.debug.WorldGenAttemptRenderer)this.minecraft.debugRenderer.worldGenAttemptRenderer).addPos($$2.readBlockPos(), $$2.readFloat(), $$2.readFloat(), $$2.readFloat(), $$2.readFloat(), $$2.readFloat());
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_VILLAGE_SECTIONS.equals((java.lang.Object)$$1)) {
+                int $$15 = $$2.readInt();
+                for (int $$16 = 0; $$16 < $$15; ++$$16) {
+                    this.minecraft.debugRenderer.villageSectionsDebugRenderer.setVillageSection($$2.readSectionPos());
                 }
-                n = friendlyByteBuf.readInt();
-                for (int i = 0; i < n; ++i) {
-                    this.minecraft.debugRenderer.villageSectionsDebugRenderer.setNotVillageSection(friendlyByteBuf.readSectionPos());
+                int $$17 = $$2.readInt();
+                for (int $$18 = 0; $$18 < $$17; ++$$18) {
+                    this.minecraft.debugRenderer.villageSectionsDebugRenderer.setNotVillageSection($$2.readSectionPos());
                 }
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_POI_ADDED_PACKET.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                java.lang.String string = friendlyByteBuf.readUtf();
-                int n = friendlyByteBuf.readInt();
-                net.minecraft.client.renderer.debug.BrainDebugRenderer$PoiInfo poiInfo = new net.minecraft.client.renderer.debug.BrainDebugRenderer$PoiInfo(blockPos, string, n);
-                this.minecraft.debugRenderer.brainDebugRenderer.addPoi(poiInfo);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_POI_REMOVED_PACKET.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                this.minecraft.debugRenderer.brainDebugRenderer.removePoi(blockPos);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_POI_TICKET_COUNT_PACKET.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                int n = friendlyByteBuf.readInt();
-                this.minecraft.debugRenderer.brainDebugRenderer.setFreeTicketCount(blockPos, n);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GOAL_SELECTOR.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                int n = friendlyByteBuf.readInt();
-                int n3 = friendlyByteBuf.readInt();
-                java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-                for (int i = 0; i < n3; ++i) {
-                    int n4 = friendlyByteBuf.readInt();
-                    boolean bl = friendlyByteBuf.readBoolean();
-                    java.lang.String string = friendlyByteBuf.readUtf(255);
-                    arrayList.add((java.lang.Object)new net.minecraft.client.renderer.debug.GoalSelectorDebugRenderer$DebugGoal(blockPos, n4, string, bl));
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_POI_ADDED_PACKET.equals((java.lang.Object)$$1)) {
+                net.minecraft.core.BlockPos $$19 = $$2.readBlockPos();
+                java.lang.String $$20 = $$2.readUtf();
+                int $$21 = $$2.readInt();
+                net.minecraft.client.renderer.debug.BrainDebugRenderer$PoiInfo $$22 = new net.minecraft.client.renderer.debug.BrainDebugRenderer$PoiInfo($$19, $$20, $$21);
+                this.minecraft.debugRenderer.brainDebugRenderer.addPoi($$22);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_POI_REMOVED_PACKET.equals((java.lang.Object)$$1)) {
+                net.minecraft.core.BlockPos $$23 = $$2.readBlockPos();
+                this.minecraft.debugRenderer.brainDebugRenderer.removePoi($$23);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_POI_TICKET_COUNT_PACKET.equals((java.lang.Object)$$1)) {
+                net.minecraft.core.BlockPos $$24 = $$2.readBlockPos();
+                int $$25 = $$2.readInt();
+                this.minecraft.debugRenderer.brainDebugRenderer.setFreeTicketCount($$24, $$25);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GOAL_SELECTOR.equals((java.lang.Object)$$1)) {
+                net.minecraft.core.BlockPos $$26 = $$2.readBlockPos();
+                int $$27 = $$2.readInt();
+                int $$28 = $$2.readInt();
+                java.util.ArrayList $$29 = com.google.common.collect.Lists.newArrayList();
+                for (int $$30 = 0; $$30 < $$28; ++$$30) {
+                    int $$31 = $$2.readInt();
+                    boolean $$32 = $$2.readBoolean();
+                    java.lang.String $$33 = $$2.readUtf(255);
+                    $$29.add((java.lang.Object)new net.minecraft.client.renderer.debug.GoalSelectorDebugRenderer$DebugGoal($$26, $$31, $$33, $$32));
                 }
-                this.minecraft.debugRenderer.goalSelectorRenderer.addGoalSelector(n, (java.util.List)arrayList);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_RAIDS.equals((java.lang.Object)resourceLocation)) {
-                int n = friendlyByteBuf.readInt();
-                java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList();
-                for (int i = 0; i < n; ++i) {
-                    arrayList.add((java.lang.Object)friendlyByteBuf.readBlockPos());
+                this.minecraft.debugRenderer.goalSelectorRenderer.addGoalSelector($$27, (java.util.List)$$29);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_RAIDS.equals((java.lang.Object)$$1)) {
+                int $$34 = $$2.readInt();
+                java.util.ArrayList $$35 = com.google.common.collect.Lists.newArrayList();
+                for (int $$36 = 0; $$36 < $$34; ++$$36) {
+                    $$35.add((java.lang.Object)$$2.readBlockPos());
                 }
-                this.minecraft.debugRenderer.raidDebugRenderer.setRaidCenters((java.util.Collection)arrayList);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_BRAIN.equals((java.lang.Object)resourceLocation)) {
-                int n;
-                int n5;
-                int n6;
-                int n7;
-                int n8;
-                double d = friendlyByteBuf.readDouble();
-                double d2 = friendlyByteBuf.readDouble();
-                double d3 = friendlyByteBuf.readDouble();
-                net.minecraft.core.PositionImpl positionImpl = new net.minecraft.core.PositionImpl(d, d2, d3);
-                java.util.UUID uUID = friendlyByteBuf.readUUID();
-                int n9 = friendlyByteBuf.readInt();
-                java.lang.String string = friendlyByteBuf.readUtf();
-                java.lang.String string2 = friendlyByteBuf.readUtf();
-                int n10 = friendlyByteBuf.readInt();
-                float f = friendlyByteBuf.readFloat();
-                float f2 = friendlyByteBuf.readFloat();
-                java.lang.String string3 = friendlyByteBuf.readUtf();
-                net.minecraft.world.level.pathfinder.Path path = (net.minecraft.world.level.pathfinder.Path)friendlyByteBuf.readNullable(net.minecraft.world.level.pathfinder.Path::createFromStream);
-                boolean bl = friendlyByteBuf.readBoolean();
-                int n11 = friendlyByteBuf.readInt();
-                net.minecraft.client.renderer.debug.BrainDebugRenderer$BrainDump brainDump = new net.minecraft.client.renderer.debug.BrainDebugRenderer$BrainDump(uUID, n9, string, string2, n10, f, f2, (net.minecraft.core.Position)positionImpl, string3, path, bl, n11);
-                int n12 = friendlyByteBuf.readVarInt();
-                for (n8 = 0;
- n8 < n12; ++n8) {
-                    java.lang.String string4 = friendlyByteBuf.readUtf();
-                    brainDump.activities.add((java.lang.Object)string4);
+                this.minecraft.debugRenderer.raidDebugRenderer.setRaidCenters((java.util.Collection)$$35);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_BRAIN.equals((java.lang.Object)$$1)) {
+                double $$37 = $$2.readDouble();
+                double $$38 = $$2.readDouble();
+                double $$39 = $$2.readDouble();
+                net.minecraft.core.PositionImpl $$40 = new net.minecraft.core.PositionImpl($$37, $$38, $$39);
+                java.util.UUID $$41 = $$2.readUUID();
+                int $$42 = $$2.readInt();
+                java.lang.String $$43 = $$2.readUtf();
+                java.lang.String $$44 = $$2.readUtf();
+                int $$45 = $$2.readInt();
+                float $$46 = $$2.readFloat();
+                float $$47 = $$2.readFloat();
+                java.lang.String $$48 = $$2.readUtf();
+                net.minecraft.world.level.pathfinder.Path $$49 = (net.minecraft.world.level.pathfinder.Path)$$2.readNullable(net.minecraft.world.level.pathfinder.Path::createFromStream);
+                boolean $$50 = $$2.readBoolean();
+                int $$51 = $$2.readInt();
+                net.minecraft.client.renderer.debug.BrainDebugRenderer$BrainDump $$52 = new net.minecraft.client.renderer.debug.BrainDebugRenderer$BrainDump($$41, $$42, $$43, $$44, $$45, $$46, $$47, (net.minecraft.core.Position)$$40, $$48, $$49, $$50, $$51);
+                int $$53 = $$2.readVarInt();
+                for (int $$54 = 0; $$54 < $$53; ++$$54) {
+                    java.lang.String $$55 = $$2.readUtf();
+                    $$52.activities.add((java.lang.Object)$$55);
                 }
-                n8 = friendlyByteBuf.readVarInt();
-                for (n7 = 0;
- n7 < n8; ++n7) {
-                    java.lang.String string5 = friendlyByteBuf.readUtf();
-                    brainDump.behaviors.add((java.lang.Object)string5);
+                int $$56 = $$2.readVarInt();
+                for (int $$57 = 0; $$57 < $$56; ++$$57) {
+                    java.lang.String $$58 = $$2.readUtf();
+                    $$52.behaviors.add((java.lang.Object)$$58);
                 }
-                n7 = friendlyByteBuf.readVarInt();
-                for (n6 = 0;
- n6 < n7; ++n6) {
-                    java.lang.String string6 = friendlyByteBuf.readUtf();
-                    brainDump.memories.add((java.lang.Object)string6);
+                int $$59 = $$2.readVarInt();
+                for (int $$60 = 0; $$60 < $$59; ++$$60) {
+                    java.lang.String $$61 = $$2.readUtf();
+                    $$52.memories.add((java.lang.Object)$$61);
                 }
-                n6 = friendlyByteBuf.readVarInt();
-                for (n5 = 0;
- n5 < n6; ++n5) {
-                    net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                    brainDump.pois.add((java.lang.Object)blockPos);
+                int $$62 = $$2.readVarInt();
+                for (int $$63 = 0; $$63 < $$62; ++$$63) {
+                    net.minecraft.core.BlockPos $$64 = $$2.readBlockPos();
+                    $$52.pois.add((java.lang.Object)$$64);
                 }
-                n5 = friendlyByteBuf.readVarInt();
-                for (n = 0;
- n < n5; ++n) {
-                    net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                    brainDump.potentialPois.add((java.lang.Object)blockPos);
+                int $$65 = $$2.readVarInt();
+                for (int $$66 = 0; $$66 < $$65; ++$$66) {
+                    net.minecraft.core.BlockPos $$67 = $$2.readBlockPos();
+                    $$52.potentialPois.add((java.lang.Object)$$67);
                 }
-                n = friendlyByteBuf.readVarInt();
-                for (int i = 0; i < n; ++i) {
-                    java.lang.String string7 = friendlyByteBuf.readUtf();
-                    brainDump.gossips.add((java.lang.Object)string7);
+                int $$68 = $$2.readVarInt();
+                for (int $$69 = 0; $$69 < $$68; ++$$69) {
+                    java.lang.String $$70 = $$2.readUtf();
+                    $$52.gossips.add((java.lang.Object)$$70);
                 }
-                this.minecraft.debugRenderer.brainDebugRenderer.addOrUpdateBrainDump(brainDump);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_BEE.equals((java.lang.Object)resourceLocation)) {
-                int n;
-                double d = friendlyByteBuf.readDouble();
-                double d4 = friendlyByteBuf.readDouble();
-                double d5 = friendlyByteBuf.readDouble();
-                net.minecraft.core.PositionImpl positionImpl = new net.minecraft.core.PositionImpl(d, d4, d5);
-                java.util.UUID uUID = friendlyByteBuf.readUUID();
-                int n13 = friendlyByteBuf.readInt();
-                net.minecraft.core.BlockPos blockPos = (net.minecraft.core.BlockPos)friendlyByteBuf.readNullable(net.minecraft.network.FriendlyByteBuf::readBlockPos);
-                net.minecraft.core.BlockPos blockPos2 = (net.minecraft.core.BlockPos)friendlyByteBuf.readNullable(net.minecraft.network.FriendlyByteBuf::readBlockPos);
-                int n14 = friendlyByteBuf.readInt();
-                net.minecraft.world.level.pathfinder.Path path = (net.minecraft.world.level.pathfinder.Path)friendlyByteBuf.readNullable(net.minecraft.world.level.pathfinder.Path::createFromStream);
-                net.minecraft.client.renderer.debug.BeeDebugRenderer$BeeInfo beeInfo = new net.minecraft.client.renderer.debug.BeeDebugRenderer$BeeInfo(uUID, n13, (net.minecraft.core.Position)positionImpl, path, blockPos, blockPos2, n14);
-                int n15 = friendlyByteBuf.readVarInt();
-                for (n = 0;
- n < n15; ++n) {
-                    java.lang.String string = friendlyByteBuf.readUtf();
-                    beeInfo.goals.add((java.lang.Object)string);
+                this.minecraft.debugRenderer.brainDebugRenderer.addOrUpdateBrainDump($$52);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_BEE.equals((java.lang.Object)$$1)) {
+                double $$71 = $$2.readDouble();
+                double $$72 = $$2.readDouble();
+                double $$73 = $$2.readDouble();
+                net.minecraft.core.PositionImpl $$74 = new net.minecraft.core.PositionImpl($$71, $$72, $$73);
+                java.util.UUID $$75 = $$2.readUUID();
+                int $$76 = $$2.readInt();
+                net.minecraft.core.BlockPos $$77 = (net.minecraft.core.BlockPos)$$2.readNullable(net.minecraft.network.FriendlyByteBuf::readBlockPos);
+                net.minecraft.core.BlockPos $$78 = (net.minecraft.core.BlockPos)$$2.readNullable(net.minecraft.network.FriendlyByteBuf::readBlockPos);
+                int $$79 = $$2.readInt();
+                net.minecraft.world.level.pathfinder.Path $$80 = (net.minecraft.world.level.pathfinder.Path)$$2.readNullable(net.minecraft.world.level.pathfinder.Path::createFromStream);
+                net.minecraft.client.renderer.debug.BeeDebugRenderer$BeeInfo $$81 = new net.minecraft.client.renderer.debug.BeeDebugRenderer$BeeInfo($$75, $$76, (net.minecraft.core.Position)$$74, $$80, $$77, $$78, $$79);
+                int $$82 = $$2.readVarInt();
+                for (int $$83 = 0; $$83 < $$82; ++$$83) {
+                    java.lang.String $$84 = $$2.readUtf();
+                    $$81.goals.add((java.lang.Object)$$84);
                 }
-                n = friendlyByteBuf.readVarInt();
-                for (int i = 0; i < n; ++i) {
-                    net.minecraft.core.BlockPos blockPos3 = friendlyByteBuf.readBlockPos();
-                    beeInfo.blacklistedHives.add((java.lang.Object)blockPos3);
+                int $$85 = $$2.readVarInt();
+                for (int $$86 = 0; $$86 < $$85; ++$$86) {
+                    net.minecraft.core.BlockPos $$87 = $$2.readBlockPos();
+                    $$81.blacklistedHives.add((java.lang.Object)$$87);
                 }
-                this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateBeeInfo(beeInfo);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_HIVE.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                java.lang.String string = friendlyByteBuf.readUtf();
-                int n = friendlyByteBuf.readInt();
-                int n16 = friendlyByteBuf.readInt();
-                boolean bl = friendlyByteBuf.readBoolean();
-                net.minecraft.client.renderer.debug.BeeDebugRenderer$HiveInfo hiveInfo = new net.minecraft.client.renderer.debug.BeeDebugRenderer$HiveInfo(blockPos, string, n, n16, bl, this.level.getGameTime());
-                this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateHiveInfo(hiveInfo);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_CLEAR.equals((java.lang.Object)resourceLocation)) {
+                this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateBeeInfo($$81);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_HIVE.equals((java.lang.Object)$$1)) {
+                net.minecraft.core.BlockPos $$88 = $$2.readBlockPos();
+                java.lang.String $$89 = $$2.readUtf();
+                int $$90 = $$2.readInt();
+                int $$91 = $$2.readInt();
+                boolean $$92 = $$2.readBoolean();
+                net.minecraft.client.renderer.debug.BeeDebugRenderer$HiveInfo $$93 = new net.minecraft.client.renderer.debug.BeeDebugRenderer$HiveInfo($$88, $$89, $$90, $$91, $$92, this.level.getGameTime());
+                this.minecraft.debugRenderer.beeDebugRenderer.addOrUpdateHiveInfo($$93);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_CLEAR.equals((java.lang.Object)$$1)) {
                 this.minecraft.debugRenderer.gameTestDebugRenderer.clear();
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_ADD_MARKER.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.core.BlockPos blockPos = friendlyByteBuf.readBlockPos();
-                int n = friendlyByteBuf.readInt();
-                java.lang.String string = friendlyByteBuf.readUtf();
-                int n17 = friendlyByteBuf.readInt();
-                this.minecraft.debugRenderer.gameTestDebugRenderer.addMarker(blockPos, n, string, n17);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GAME_EVENT.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.world.level.gameevent.GameEvent gameEvent = (net.minecraft.world.level.gameevent.GameEvent)net.minecraft.core.Registry.GAME_EVENT.get(new net.minecraft.resources.ResourceLocation(friendlyByteBuf.readUtf()));
-                net.minecraft.world.phys.Vec3 vec3 = new net.minecraft.world.phys.Vec3(friendlyByteBuf.readDouble(), friendlyByteBuf.readDouble(), friendlyByteBuf.readDouble());
-                this.minecraft.debugRenderer.gameEventListenerRenderer.trackGameEvent(gameEvent, vec3);
-            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GAME_EVENT_LISTENER.equals((java.lang.Object)resourceLocation)) {
-                net.minecraft.resources.ResourceLocation resourceLocation2 = friendlyByteBuf.readResourceLocation();
-                net.minecraft.world.level.gameevent.PositionSource positionSource = ((net.minecraft.world.level.gameevent.PositionSourceType)net.minecraft.core.Registry.POSITION_SOURCE_TYPE.getOptional(resourceLocation2).orElseThrow(() -> new java.lang.IllegalArgumentException("Unknown position source type " + resourceLocation2))).read(friendlyByteBuf);
-                int n = friendlyByteBuf.readVarInt();
-                this.minecraft.debugRenderer.gameEventListenerRenderer.trackListener(positionSource, n);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GAME_TEST_ADD_MARKER.equals((java.lang.Object)$$1)) {
+                net.minecraft.core.BlockPos $$94 = $$2.readBlockPos();
+                int $$95 = $$2.readInt();
+                java.lang.String $$96 = $$2.readUtf();
+                int $$97 = $$2.readInt();
+                this.minecraft.debugRenderer.gameTestDebugRenderer.addMarker($$94, $$95, $$96, $$97);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GAME_EVENT.equals((java.lang.Object)$$1)) {
+                net.minecraft.world.level.gameevent.GameEvent $$98 = (net.minecraft.world.level.gameevent.GameEvent)net.minecraft.core.Registry.GAME_EVENT.get(new net.minecraft.resources.ResourceLocation($$2.readUtf()));
+                net.minecraft.world.phys.Vec3 $$99 = new net.minecraft.world.phys.Vec3($$2.readDouble(), $$2.readDouble(), $$2.readDouble());
+                this.minecraft.debugRenderer.gameEventListenerRenderer.trackGameEvent($$98, $$99);
+            } else if (net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket.DEBUG_GAME_EVENT_LISTENER.equals((java.lang.Object)$$1)) {
+                net.minecraft.resources.ResourceLocation $$100 = $$2.readResourceLocation();
+                net.minecraft.world.level.gameevent.PositionSource $$101 = ((net.minecraft.world.level.gameevent.PositionSourceType)net.minecraft.core.Registry.POSITION_SOURCE_TYPE.getOptional($$100).orElseThrow(() -> new java.lang.IllegalArgumentException("Unknown position source type " + $$100))).read($$2);
+                int $$102 = $$2.readVarInt();
+                this.minecraft.debugRenderer.gameEventListenerRenderer.trackListener($$101, $$102);
             } else {
-                LOGGER.warn("Unknown custom packed identifier: {}", (java.lang.Object)resourceLocation);
+                LOGGER.warn("Unknown custom packed identifier: {}", (java.lang.Object)$$1);
             }
         }
         finally {
-            if (friendlyByteBuf != null) {
-                friendlyByteBuf.release();
+            if ($$2 != null) {
+                $$2.release();
             }
         }
     }
 
-    public void handleAddObjective(net.minecraft.network.protocol.game.ClientboundSetObjectivePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.scores.Scoreboard scoreboard = this.level.getScoreboard();
-        java.lang.String string = packet.getObjectiveName();
-        if (packet.getMethod() == 0) {
-            scoreboard.addObjective(string, net.minecraft.world.scores.criteria.ObjectiveCriteria.DUMMY, packet.getDisplayName(), packet.getRenderType());
-        } else if (scoreboard.hasObjective(string)) {
-            net.minecraft.world.scores.Objective objective = scoreboard.getObjective(string);
-            if (packet.getMethod() == 1) {
-                scoreboard.removeObjective(objective);
-            } else if (packet.getMethod() == 2) {
-                objective.setRenderType(packet.getRenderType());
-                objective.setDisplayName(packet.getDisplayName());
+    public void handleAddObjective(net.minecraft.network.protocol.game.ClientboundSetObjectivePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.scores.Scoreboard $$1 = this.level.getScoreboard();
+        java.lang.String $$2 = $$0.getObjectiveName();
+        if ($$0.getMethod() == 0) {
+            $$1.addObjective($$2, net.minecraft.world.scores.criteria.ObjectiveCriteria.DUMMY, $$0.getDisplayName(), $$0.getRenderType());
+        } else if ($$1.hasObjective($$2)) {
+            net.minecraft.world.scores.Objective $$3 = $$1.getObjective($$2);
+            if ($$0.getMethod() == 1) {
+                $$1.removeObjective($$3);
+            } else if ($$0.getMethod() == 2) {
+                $$3.setRenderType($$0.getRenderType());
+                $$3.setDisplayName($$0.getDisplayName());
             }
         }
     }
 
-    public void handleSetScore(net.minecraft.network.protocol.game.ClientboundSetScorePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.scores.Scoreboard scoreboard = this.level.getScoreboard();
-        java.lang.String string = packet.getObjectiveName();
-        switch (net.minecraft.client.multiplayer.ClientPacketListener$1.$SwitchMap$net$minecraft$server$ServerScoreboard$Method[packet.getMethod().ordinal()]) {
+    public void handleSetScore(net.minecraft.network.protocol.game.ClientboundSetScorePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.scores.Scoreboard $$1 = this.level.getScoreboard();
+        java.lang.String $$2 = $$0.getObjectiveName();
+        switch (net.minecraft.client.multiplayer.ClientPacketListener$1.$SwitchMap$net$minecraft$server$ServerScoreboard$Method[$$0.getMethod().ordinal()]) {
             case 1: {
-                net.minecraft.world.scores.Objective objective = scoreboard.getOrCreateObjective(string);
-                net.minecraft.world.scores.Score score = scoreboard.getOrCreatePlayerScore(packet.getOwner(), objective);
-                score.setScore(packet.getScore());
+                net.minecraft.world.scores.Objective $$3 = $$1.getOrCreateObjective($$2);
+                net.minecraft.world.scores.Score $$4 = $$1.getOrCreatePlayerScore($$0.getOwner(), $$3);
+                $$4.setScore($$0.getScore());
                 break;
             }
             case 2: {
-                scoreboard.resetPlayerScore(packet.getOwner(), scoreboard.getObjective(string));
+                $$1.resetPlayerScore($$0.getOwner(), $$1.getObjective($$2));
             }
         }
     }
 
-    public void handleSetDisplayObjective(net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.scores.Scoreboard scoreboard = this.level.getScoreboard();
-        java.lang.String string = packet.getObjectiveName();
-        net.minecraft.world.scores.Objective objective = string == null ? null : scoreboard.getOrCreateObjective(string);
-        scoreboard.setDisplayObjective(packet.getSlot(), objective);
+    public void handleSetDisplayObjective(net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.scores.Scoreboard $$1 = this.level.getScoreboard();
+        java.lang.String $$2 = $$0.getObjectiveName();
+        net.minecraft.world.scores.Objective $$3 = $$2 == null ? null : $$1.getOrCreateObjective($$2);
+        $$1.setDisplayObjective($$0.getSlot(), $$3);
     }
 
-    public void handleSetPlayerTeamPacket(net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket packet) {
-        net.minecraft.world.scores.PlayerTeam playerTeam;
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.scores.Scoreboard scoreboard = this.level.getScoreboard();
-        net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action action = packet.getTeamAction();
-        if (action == net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action.ADD) {
-            playerTeam = scoreboard.addPlayerTeam(packet.getName());
+    public void handleSetPlayerTeamPacket(net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket $$0) {
+        net.minecraft.world.scores.PlayerTeam $$4;
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.scores.Scoreboard $$12 = this.level.getScoreboard();
+        net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action $$2 = $$0.getTeamAction();
+        if ($$2 == net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action.ADD) {
+            net.minecraft.world.scores.PlayerTeam $$3 = $$12.addPlayerTeam($$0.getName());
         } else {
-            playerTeam = scoreboard.getPlayerTeam(packet.getName());
-            if (playerTeam == null) {
-                LOGGER.warn("Received packet for unknown team {}: team action: {}, player action: {}", new java.lang.Object[]{packet.getName(), packet.getTeamAction(), packet.getPlayerAction()});
+            $$4 = $$12.getPlayerTeam($$0.getName());
+            if ($$4 == null) {
+                LOGGER.warn("Received packet for unknown team {}: team action: {}, player action: {}", new java.lang.Object[]{$$0.getName(), $$0.getTeamAction(), $$0.getPlayerAction()});
                 return;
             }
         }
-        java.util.Optional optional = packet.getParameters();
-        optional.ifPresent($$1 -> {
+        java.util.Optional $$5 = $$0.getParameters();
+        $$5.ifPresent($$1 -> {
             net.minecraft.world.scores.Team$CollisionRule $$3;
-            playerTeam.setDisplayName($$1.getDisplayName());
-            playerTeam.setColor($$1.getColor());
-            playerTeam.unpackOptions($$1.getOptions());
+            $$4.setDisplayName($$1.getDisplayName());
+            $$4.setColor($$1.getColor());
+            $$4.unpackOptions($$1.getOptions());
             net.minecraft.world.scores.Team$Visibility $$2 = net.minecraft.world.scores.Team$Visibility.byName((java.lang.String)$$1.getNametagVisibility());
             if ($$2 != null) {
-                playerTeam.setNameTagVisibility($$2);
+                $$4.setNameTagVisibility($$2);
             }
             if (($$3 = net.minecraft.world.scores.Team$CollisionRule.byName((java.lang.String)$$1.getCollisionRule())) != null) {
-                playerTeam.setCollisionRule($$3);
+                $$4.setCollisionRule($$3);
             }
-            playerTeam.setPlayerPrefix($$1.getPlayerPrefix());
-            playerTeam.setPlayerSuffix($$1.getPlayerSuffix());
+            $$4.setPlayerPrefix($$1.getPlayerPrefix());
+            $$4.setPlayerSuffix($$1.getPlayerSuffix());
         });
-        net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action action2 = packet.getPlayerAction();
-        if (action2 == net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action.ADD) {
-            for (java.lang.String string : packet.getPlayers()) {
-                scoreboard.addPlayerToTeam(string, playerTeam);
+        net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action $$6 = $$0.getPlayerAction();
+        if ($$6 == net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action.ADD) {
+            for (java.lang.String $$7 : $$0.getPlayers()) {
+                $$12.addPlayerToTeam($$7, $$4);
             }
-        } else if (action2 == net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action.REMOVE) {
-            for (java.lang.String string : packet.getPlayers()) {
-                scoreboard.removePlayerFromTeam(string, playerTeam);
+        } else if ($$6 == net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action.REMOVE) {
+            for (java.lang.String $$8 : $$0.getPlayers()) {
+                $$12.removePlayerFromTeam($$8, $$4);
             }
         }
-        if (action == net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action.REMOVE) {
-            scoreboard.removePlayerTeam(playerTeam);
+        if ($$2 == net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action.REMOVE) {
+            $$12.removePlayerTeam($$4);
         }
     }
 
-    public void handleParticleEvent(net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        if (packet.getCount() == 0) {
-            double d = packet.getMaxSpeed() * packet.getXDist();
-            double d2 = packet.getMaxSpeed() * packet.getYDist();
-            double d3 = packet.getMaxSpeed() * packet.getZDist();
+    public void handleParticleEvent(net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        if ($$0.getCount() == 0) {
+            double $$1 = $$0.getMaxSpeed() * $$0.getXDist();
+            double $$2 = $$0.getMaxSpeed() * $$0.getYDist();
+            double $$3 = $$0.getMaxSpeed() * $$0.getZDist();
             try {
-                this.level.addParticle(packet.getParticle(), packet.isOverrideLimiter(), packet.getX(), packet.getY(), packet.getZ(), d, d2, d3);
+                this.level.addParticle($$0.getParticle(), $$0.isOverrideLimiter(), $$0.getX(), $$0.getY(), $$0.getZ(), $$1, $$2, $$3);
             }
-            catch (java.lang.Throwable throwable) {
-                LOGGER.warn("Could not spawn particle effect {}", (java.lang.Object)packet.getParticle());
+            catch (java.lang.Throwable $$4) {
+                LOGGER.warn("Could not spawn particle effect {}", (java.lang.Object)$$0.getParticle());
             }
         } else {
-            for (int i = 0; i < packet.getCount(); ++i) {
-                double d = this.random.nextGaussian() * (double)packet.getXDist();
-                double d4 = this.random.nextGaussian() * (double)packet.getYDist();
-                double d5 = this.random.nextGaussian() * (double)packet.getZDist();
-                double d6 = this.random.nextGaussian() * (double)packet.getMaxSpeed();
-                double d7 = this.random.nextGaussian() * (double)packet.getMaxSpeed();
-                double d8 = this.random.nextGaussian() * (double)packet.getMaxSpeed();
+            for (int $$5 = 0; $$5 < $$0.getCount(); ++$$5) {
+                double $$6 = this.random.nextGaussian() * (double)$$0.getXDist();
+                double $$7 = this.random.nextGaussian() * (double)$$0.getYDist();
+                double $$8 = this.random.nextGaussian() * (double)$$0.getZDist();
+                double $$9 = this.random.nextGaussian() * (double)$$0.getMaxSpeed();
+                double $$10 = this.random.nextGaussian() * (double)$$0.getMaxSpeed();
+                double $$11 = this.random.nextGaussian() * (double)$$0.getMaxSpeed();
                 try {
-                    this.level.addParticle(packet.getParticle(), packet.isOverrideLimiter(), packet.getX() + d, packet.getY() + d4, packet.getZ() + d5, d6, d7, d8);
+                    this.level.addParticle($$0.getParticle(), $$0.isOverrideLimiter(), $$0.getX() + $$6, $$0.getY() + $$7, $$0.getZ() + $$8, $$9, $$10, $$11);
                     continue;
                 }
-                catch (java.lang.Throwable throwable) {
-                    LOGGER.warn("Could not spawn particle effect {}", (java.lang.Object)packet.getParticle());
+                catch (java.lang.Throwable $$12) {
+                    LOGGER.warn("Could not spawn particle effect {}", (java.lang.Object)$$0.getParticle());
                     return;
                 }
             }
@@ -1632,37 +1688,37 @@
         this.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundPongPacket($$0.getId()));
     }
 
-    public void handleUpdateAttributes(net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.entity.Entity entity = this.level.getEntity(packet.getEntityId());
-        if (entity == null) {
+    public void handleUpdateAttributes(net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.entity.Entity $$1 = this.level.getEntity($$0.getEntityId());
+        if ($$1 == null) {
             return;
         }
-        if (!(entity instanceof net.minecraft.world.entity.LivingEntity)) {
-            throw new java.lang.IllegalStateException("Server tried to update attributes of a non-living entity (actually: " + entity + ")");
+        if (!($$1 instanceof net.minecraft.world.entity.LivingEntity)) {
+            throw new java.lang.IllegalStateException("Server tried to update attributes of a non-living entity (actually: " + $$1 + ")");
         }
-        net.minecraft.world.entity.ai.attributes.AttributeMap attributeMap = ((net.minecraft.world.entity.LivingEntity)entity).getAttributes();
-        for (net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot attributeSnapshot : packet.getValues()) {
-            net.minecraft.world.entity.ai.attributes.AttributeInstance attributeInstance = attributeMap.getInstance(attributeSnapshot.getAttribute());
-            if (attributeInstance == null) {
-                LOGGER.warn("Entity {} does not have attribute {}", (java.lang.Object)entity, (java.lang.Object)net.minecraft.core.Registry.ATTRIBUTE.getKey((java.lang.Object)attributeSnapshot.getAttribute()));
+        net.minecraft.world.entity.ai.attributes.AttributeMap $$2 = ((net.minecraft.world.entity.LivingEntity)$$1).getAttributes();
+        for (net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot $$3 : $$0.getValues()) {
+            net.minecraft.world.entity.ai.attributes.AttributeInstance $$4 = $$2.getInstance($$3.getAttribute());
+            if ($$4 == null) {
+                LOGGER.warn("Entity {} does not have attribute {}", (java.lang.Object)$$1, (java.lang.Object)net.minecraft.core.Registry.ATTRIBUTE.getKey((java.lang.Object)$$3.getAttribute()));
                 continue;
             }
-            attributeInstance.setBaseValue(attributeSnapshot.getBase());
-            attributeInstance.removeModifiers();
-            for (net.minecraft.world.entity.ai.attributes.AttributeModifier attributeModifier : attributeSnapshot.getModifiers()) {
-                attributeInstance.addTransientModifier(attributeModifier);
+            $$4.setBaseValue($$3.getBase());
+            $$4.removeModifiers();
+            for (net.minecraft.world.entity.ai.attributes.AttributeModifier $$5 : $$3.getModifiers()) {
+                $$4.addTransientModifier($$5);
             }
         }
     }
 
-    public void handlePlaceRecipe(net.minecraft.network.protocol.game.ClientboundPlaceGhostRecipePacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.inventory.AbstractContainerMenu abstractContainerMenu = this.minecraft.player.containerMenu;
-        if (abstractContainerMenu.containerId != packet.getContainerId()) {
+    public void handlePlaceRecipe(net.minecraft.network.protocol.game.ClientboundPlaceGhostRecipePacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.inventory.AbstractContainerMenu $$12 = this.minecraft.player.containerMenu;
+        if ($$12.containerId != $$0.getContainerId()) {
             return;
         }
-        this.recipeManager.byKey(packet.getRecipe()).ifPresent($$1 -> {
+        this.recipeManager.byKey($$0.getRecipe()).ifPresent($$1 -> {
             if (this.minecraft.screen instanceof net.minecraft.client.gui.screens.recipebook.RecipeUpdateListener) {
                 net.minecraft.client.gui.screens.recipebook.RecipeBookComponent $$2 = ((net.minecraft.client.gui.screens.recipebook.RecipeUpdateListener)this.minecraft.screen).getRecipeBookComponent();
                 $$2.setupGhostRecipe($$1, (java.util.List)$$0.slots);
@@ -1691,24 +1747,24 @@
         this.level.setLightReady($$0, $$1);
     }
 
-    public void handleMerchantOffers(net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        net.minecraft.world.inventory.AbstractContainerMenu abstractContainerMenu = this.minecraft.player.containerMenu;
-        if (packet.getContainerId() == abstractContainerMenu.containerId && abstractContainerMenu instanceof net.minecraft.world.inventory.MerchantMenu) {
-            net.minecraft.world.inventory.MerchantMenu merchantMenu = (net.minecraft.world.inventory.MerchantMenu)abstractContainerMenu;
-            merchantMenu.setOffers(new net.minecraft.world.item.trading.MerchantOffers(packet.getOffers().createTag()));
-            merchantMenu.setXp(packet.getVillagerXp());
-            merchantMenu.setMerchantLevel(packet.getVillagerLevel());
-            merchantMenu.setShowProgressBar(packet.showProgress());
-            merchantMenu.setCanRestock(packet.canRestock());
+    public void handleMerchantOffers(net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        net.minecraft.world.inventory.AbstractContainerMenu $$1 = this.minecraft.player.containerMenu;
+        if ($$0.getContainerId() == $$1.containerId && $$1 instanceof net.minecraft.world.inventory.MerchantMenu) {
+            net.minecraft.world.inventory.MerchantMenu $$2 = (net.minecraft.world.inventory.MerchantMenu)$$1;
+            $$2.setOffers(new net.minecraft.world.item.trading.MerchantOffers($$0.getOffers().createTag()));
+            $$2.setXp($$0.getVillagerXp());
+            $$2.setMerchantLevel($$0.getVillagerLevel());
+            $$2.setShowProgressBar($$0.showProgress());
+            $$2.setCanRestock($$0.canRestock());
         }
     }
 
-    public void handleSetChunkCacheRadius(net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.serverChunkRadius = packet.getRadius();
+    public void handleSetChunkCacheRadius(net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.serverChunkRadius = $$0.getRadius();
         this.minecraft.options.setServerRenderDistance(this.serverChunkRadius);
-        this.level.getChunkSource().updateViewRadius(packet.getRadius());
+        this.level.getChunkSource().updateViewRadius($$0.getRadius());
     }
 
     public void handleSetSimulationDistance(net.minecraft.network.protocol.game.ClientboundSetSimulationDistancePacket $$0) {
@@ -1717,9 +1773,9 @@
         this.level.setServerSimulationDistance(this.serverSimulationDistance);
     }
 
-    public void handleSetChunkCacheCenter(net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket packet) {
-        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)packet, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
-        this.level.getChunkSource().updateViewCenter(packet.getX(), packet.getZ());
+    public void handleSetChunkCacheCenter(net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket $$0) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread((net.minecraft.network.protocol.Packet)$$0, (net.minecraft.network.PacketListener)this, (net.minecraft.util.thread.BlockableEventLoop)this.minecraft);
+        this.level.getChunkSource().updateViewCenter($$0.getX(), $$0.getZ());
     }
 
     public void handleBlockChangedAck(net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket $$0) {
@@ -1742,6 +1798,10 @@
         return this.connection;
     }
 
+    public java.util.Collection<net.minecraft.client.multiplayer.PlayerInfo> getListedOnlinePlayers() {
+        return this.listedPlayers;
+    }
+
     public java.util.Collection<net.minecraft.client.multiplayer.PlayerInfo> getOnlinePlayers() {
         return this.playerInfoMap.values();
     }
@@ -1751,15 +1811,15 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.client.multiplayer.PlayerInfo getPlayerInfo(java.util.UUID uniqueId) {
-        return (net.minecraft.client.multiplayer.PlayerInfo)this.playerInfoMap.get((java.lang.Object)uniqueId);
+    public net.minecraft.client.multiplayer.PlayerInfo getPlayerInfo(java.util.UUID $$0) {
+        return (net.minecraft.client.multiplayer.PlayerInfo)this.playerInfoMap.get((java.lang.Object)$$0);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.client.multiplayer.PlayerInfo getPlayerInfo(java.lang.String name) {
-        for (net.minecraft.client.multiplayer.PlayerInfo playerInfo : this.playerInfoMap.values()) {
-            if (!playerInfo.getProfile().getName().equals((java.lang.Object)name)) continue;
-            return playerInfo;
+    public net.minecraft.client.multiplayer.PlayerInfo getPlayerInfo(java.lang.String $$0) {
+        for (net.minecraft.client.multiplayer.PlayerInfo $$1 : this.playerInfoMap.values()) {
+            if (!$$1.getProfile().getName().equals((java.lang.Object)$$0)) continue;
+            return $$1;
         }
         return null;
     }
@@ -1793,39 +1853,75 @@
     }
 
     public net.minecraft.core.RegistryAccess registryAccess() {
-        return this.registryAccess;
+        return this.registryAccess.compositeAccess();
     }
 
-    public net.minecraft.network.chat.SignedMessageChain$Encoder signedMessageEncoder() {
-        return this.signedMessageEncoder;
+    public void markMessageAsProcessed(net.minecraft.network.chat.PlayerChatMessage $$0, boolean $$1) {
+        net.minecraft.network.chat.MessageSignature $$2 = $$0.signature();
+        if ($$2 != null && this.lastSeenMessages.addPending($$2, $$1) && this.lastSeenMessages.offset() > 64) {
+            this.sendChatAcknowledgement();
+        }
     }
 
-    public net.minecraft.network.chat.LastSeenMessages$Update generateMessageAcknowledgements() {
-        this.unacknowledgedReceivedMessageCount = 0;
-        return new net.minecraft.network.chat.LastSeenMessages$Update(this.lastSeenMessagesTracker.get(), this.lastUnacknowledgedReceivedMessage);
+    public void sendChatAcknowledgement() {
+        int $$0 = this.lastSeenMessages.getAndClearOffset();
+        if ($$0 > 0) {
+            this.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundChatAckPacket($$0));
+        }
     }
 
-    public void markMessageAsProcessed(net.minecraft.network.chat.PlayerChatMessage $$0, boolean $$1) {
-        net.minecraft.network.chat.LastSeenMessages$Entry $$2 = $$0.toLastSeenEntry();
-        if ($$2 == null) {
-            return;
+    public void sendChat(java.lang.String $$0) {
+        java.time.Instant $$1 = java.time.Instant.now();
+        long $$2 = net.minecraft.util.Crypt$SaltSupplier.getLong();
+        net.minecraft.network.chat.LastSeenMessagesTracker$Update $$3 = this.lastSeenMessages.generateAndApplyUpdate();
+        net.minecraft.network.chat.MessageSignature $$4 = this.signedMessageEncoder.pack(new net.minecraft.network.chat.SignedMessageBody($$0, $$1, $$2, $$3.lastSeen()));
+        this.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundChatPacket($$0, $$1, $$2, $$4, $$3.update()));
+    }
+
+    public void sendCommand(java.lang.String $$0) {
+        java.time.Instant $$1 = java.time.Instant.now();
+        long $$2 = net.minecraft.util.Crypt$SaltSupplier.getLong();
+        net.minecraft.network.chat.LastSeenMessagesTracker$Update $$32 = this.lastSeenMessages.generateAndApplyUpdate();
+        net.minecraft.commands.arguments.ArgumentSignatures $$4 = net.minecraft.commands.arguments.ArgumentSignatures.signCommand((net.minecraft.network.chat.SignableCommand)net.minecraft.network.chat.SignableCommand.of((com.mojang.brigadier.ParseResults)this.parseCommand($$0)), $$3 -> {
+            net.minecraft.network.chat.SignedMessageBody $$4 = new net.minecraft.network.chat.SignedMessageBody($$3, $$1, $$2, $$32.lastSeen());
+            return this.signedMessageEncoder.pack($$4);
+        });
+        this.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundChatCommandPacket($$0, $$1, $$2, $$4, $$32.update()));
+    }
+
+    public boolean sendUnsignedCommand(java.lang.String $$0) {
+        if (net.minecraft.network.chat.SignableCommand.of((com.mojang.brigadier.ParseResults)this.parseCommand($$0)).arguments().isEmpty()) {
+            net.minecraft.network.chat.LastSeenMessagesTracker$Update $$1 = this.lastSeenMessages.generateAndApplyUpdate();
+            this.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundChatCommandPacket($$0, java.time.Instant.now(), 0L, net.minecraft.commands.arguments.ArgumentSignatures.EMPTY, $$1.update()));
+            return true;
         }
-        if ($$1) {
-            this.lastSeenMessagesTracker.push($$2);
-            this.lastUnacknowledgedReceivedMessage = java.util.Optional.empty();
-        } else {
-            this.lastUnacknowledgedReceivedMessage = java.util.Optional.of((java.lang.Object)$$2);
-        }
-        if (this.unacknowledgedReceivedMessageCount++ > 64) {
-            this.send((net.minecraft.network.protocol.Packet)new net.minecraft.network.protocol.game.ServerboundChatAckPacket(this.generateMessageAcknowledgements()));
-        }
+        return false;
     }
 
+    public com.mojang.brigadier.ParseResults<net.minecraft.commands.SharedSuggestionProvider> parseCommand(java.lang.String $$0) {
+        return this.commands.parse($$0, (java.lang.Object)this.suggestionsProvider);
+    }
+
+    @javax.annotation.Nullable
+    public net.minecraft.client.multiplayer.ServerData getServerData() {
+        return this.serverData;
+    }
+
+    public net.minecraft.world.flag.FeatureFlagSet enabledFeatures() {
+        return this.enabledFeatures;
+    }
+
+    public boolean isFeatureEnabled(net.minecraft.world.flag.FeatureFlagSet $$0) {
+        return $$0.isSubsetOf(this.enabledFeatures());
+    }
+
     static {
         LOGGER = com.mojang.logging.LogUtils.getLogger();
         GENERIC_DISCONNECT_MESSAGE = net.minecraft.network.chat.Component.translatable((java.lang.String)"disconnect.lost");
         UNSECURE_SERVER_TOAST_TITLE = net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.unsecureserver.toast.title");
         UNSERURE_SERVER_TOAST = net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.unsecureserver.toast");
+        INVALID_PACKET = net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.disconnect.invalid_packet");
+        CHAT_VALIDATION_FAILED_ERROR = net.minecraft.network.chat.Component.translatable((java.lang.String)"multiplayer.disconnect.chat_validation_failed");
     }
 }
 