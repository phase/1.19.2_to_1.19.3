--- net/minecraft/client/multiplayer/ClientChunkCache$Storage.java
+++ net/minecraft/client/multiplayer/ClientChunkCache$Storage.java
@@ -20,36 +20,36 @@
         this.chunks = new java.util.concurrent.atomic.AtomicReferenceArray(this.viewRange * this.viewRange);
     }
 
-    public int getIndex(int x, int z) {
-        return java.lang.Math.floorMod((int)z, (int)this.viewRange) * this.viewRange + java.lang.Math.floorMod((int)x, (int)this.viewRange);
+    public int getIndex(int $$0, int $$1) {
+        return java.lang.Math.floorMod((int)$$1, (int)this.viewRange) * this.viewRange + java.lang.Math.floorMod((int)$$0, (int)this.viewRange);
     }
 
-    public void replace(int chunkIndex, @javax.annotation.Nullable net.minecraft.world.level.chunk.LevelChunk chunk) {
-        net.minecraft.world.level.chunk.LevelChunk levelChunk = (net.minecraft.world.level.chunk.LevelChunk)this.chunks.getAndSet(chunkIndex, (java.lang.Object)chunk);
-        if (levelChunk != null) {
+    public void replace(int $$0, @javax.annotation.Nullable net.minecraft.world.level.chunk.LevelChunk $$1) {
+        net.minecraft.world.level.chunk.LevelChunk $$2 = (net.minecraft.world.level.chunk.LevelChunk)this.chunks.getAndSet($$0, (java.lang.Object)$$1);
+        if ($$2 != null) {
             --this.chunkCount;
-            this.this$0.level.unload(levelChunk);
+            this.this$0.level.unload($$2);
         }
-        if (chunk != null) {
+        if ($$1 != null) {
             ++this.chunkCount;
         }
     }
 
-    public net.minecraft.world.level.chunk.LevelChunk replace(int chunkIndex, net.minecraft.world.level.chunk.LevelChunk chunk, @javax.annotation.Nullable net.minecraft.world.level.chunk.LevelChunk replaceWith) {
-        if (this.chunks.compareAndSet(chunkIndex, (java.lang.Object)chunk, (java.lang.Object)replaceWith) && replaceWith == null) {
+    public net.minecraft.world.level.chunk.LevelChunk replace(int $$0, net.minecraft.world.level.chunk.LevelChunk $$1, @javax.annotation.Nullable net.minecraft.world.level.chunk.LevelChunk $$2) {
+        if (this.chunks.compareAndSet($$0, (java.lang.Object)$$1, (java.lang.Object)$$2) && $$2 == null) {
             --this.chunkCount;
         }
-        this.this$0.level.unload(chunk);
-        return chunk;
+        this.this$0.level.unload($$1);
+        return $$1;
     }
 
-    public boolean inRange(int x, int z) {
-        return java.lang.Math.abs((int)(x - this.viewCenterX)) <= this.chunkRadius && java.lang.Math.abs((int)(z - this.viewCenterZ)) <= this.chunkRadius;
+    public boolean inRange(int $$0, int $$1) {
+        return java.lang.Math.abs((int)($$0 - this.viewCenterX)) <= this.chunkRadius && java.lang.Math.abs((int)($$1 - this.viewCenterZ)) <= this.chunkRadius;
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.chunk.LevelChunk getChunk(int chunkIndex) {
-        return (net.minecraft.world.level.chunk.LevelChunk)this.chunks.get(chunkIndex);
+    public net.minecraft.world.level.chunk.LevelChunk getChunk(int $$0) {
+        return (net.minecraft.world.level.chunk.LevelChunk)this.chunks.get($$0);
     }
 
     public void dumpChunks(java.lang.String $$0) {