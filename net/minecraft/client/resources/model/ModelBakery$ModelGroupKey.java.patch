--- net/minecraft/client/resources/model/ModelBakery$ModelGroupKey.java
+++ net/minecraft/client/resources/model/ModelBakery$ModelGroupKey.java
@@ -28,20 +28,20 @@
         return 31 * this.models.hashCode() + this.coloringValues.hashCode();
     }
 
-    public static net.minecraft.client.resources.model.ModelBakery$ModelGroupKey create(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.client.renderer.block.model.multipart.MultiPart multipart, java.util.Collection<net.minecraft.world.level.block.state.properties.Property<?>> properties) {
-        net.minecraft.world.level.block.state.StateDefinition stateDefinition = blockState.getBlock().getStateDefinition();
-        java.util.List list = (java.util.List)multipart.getSelectors().stream().filter($$2 -> $$2.getPredicate(stateDefinition).test((java.lang.Object)blockState)).map(net.minecraft.client.renderer.block.model.multipart.Selector::getVariant).collect(com.google.common.collect.ImmutableList.toImmutableList());
-        java.util.List list2 = net.minecraft.client.resources.model.ModelBakery$ModelGroupKey.getColoringValues((net.minecraft.world.level.block.state.BlockState)blockState, properties);
-        return new net.minecraft.client.resources.model.ModelBakery$ModelGroupKey(list, list2);
+    public static net.minecraft.client.resources.model.ModelBakery$ModelGroupKey create(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.client.renderer.block.model.multipart.MultiPart $$1, java.util.Collection<net.minecraft.world.level.block.state.properties.Property<?>> $$22) {
+        net.minecraft.world.level.block.state.StateDefinition $$3 = $$0.getBlock().getStateDefinition();
+        java.util.List $$4 = (java.util.List)$$1.getSelectors().stream().filter($$2 -> $$2.getPredicate($$3).test((java.lang.Object)$$0)).map(net.minecraft.client.renderer.block.model.multipart.Selector::getVariant).collect(com.google.common.collect.ImmutableList.toImmutableList());
+        java.util.List $$5 = net.minecraft.client.resources.model.ModelBakery$ModelGroupKey.getColoringValues((net.minecraft.world.level.block.state.BlockState)$$0, $$22);
+        return new net.minecraft.client.resources.model.ModelBakery$ModelGroupKey($$4, $$5);
     }
 
-    public static net.minecraft.client.resources.model.ModelBakery$ModelGroupKey create(net.minecraft.world.level.block.state.BlockState blockState, net.minecraft.client.resources.model.UnbakedModel model, java.util.Collection<net.minecraft.world.level.block.state.properties.Property<?>> properties) {
-        java.util.List list = net.minecraft.client.resources.model.ModelBakery$ModelGroupKey.getColoringValues((net.minecraft.world.level.block.state.BlockState)blockState, properties);
-        return new net.minecraft.client.resources.model.ModelBakery$ModelGroupKey((java.util.List)com.google.common.collect.ImmutableList.of((java.lang.Object)model), list);
+    public static net.minecraft.client.resources.model.ModelBakery$ModelGroupKey create(net.minecraft.world.level.block.state.BlockState $$0, net.minecraft.client.resources.model.UnbakedModel $$1, java.util.Collection<net.minecraft.world.level.block.state.properties.Property<?>> $$2) {
+        java.util.List $$3 = net.minecraft.client.resources.model.ModelBakery$ModelGroupKey.getColoringValues((net.minecraft.world.level.block.state.BlockState)$$0, $$2);
+        return new net.minecraft.client.resources.model.ModelBakery$ModelGroupKey((java.util.List)com.google.common.collect.ImmutableList.of((java.lang.Object)$$1), $$3);
     }
 
-    public static java.util.List<java.lang.Object> getColoringValues(net.minecraft.world.level.block.state.BlockState blockState, java.util.Collection<net.minecraft.world.level.block.state.properties.Property<?>> properties) {
-        return (java.util.List)properties.stream().map(arg_0 -> ((net.minecraft.world.level.block.state.BlockState)blockState).getValue(arg_0)).collect(com.google.common.collect.ImmutableList.toImmutableList());
+    public static java.util.List<java.lang.Object> getColoringValues(net.minecraft.world.level.block.state.BlockState $$0, java.util.Collection<net.minecraft.world.level.block.state.properties.Property<?>> $$1) {
+        return (java.util.List)$$1.stream().map(arg_0 -> ((net.minecraft.world.level.block.state.BlockState)$$0).getValue(arg_0)).collect(com.google.common.collect.ImmutableList.toImmutableList());
     }
 }
 