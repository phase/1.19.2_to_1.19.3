--- net/minecraft/client/resources/model/ModelManager$ReloadState.java
+++ net/minecraft/client/resources/model/ModelManager$ReloadState.java
@@ -1,0 +1,55 @@
+/*
+ * Decompiled with CFR 0.151.
+ */
+package net.minecraft.client.resources.model;
+
+public class net.minecraft.client.resources.model.ModelManager$ReloadState
+extends java.lang.Record
+ {
+    public net.minecraft.client.resources.model.ModelBakery modelBakery;
+    public net.minecraft.client.resources.model.BakedModel missingModel;
+    public java.util.Map<net.minecraft.world.level.block.state.BlockState, net.minecraft.client.resources.model.BakedModel> modelCache;
+    public java.util.Map<net.minecraft.resources.ResourceLocation, net.minecraft.client.resources.model.AtlasSet$StitchResult> atlasPreparations;
+    public java.util.concurrent.CompletableFuture<java.lang.Void> readyForUpload;
+
+    public net.minecraft.client.resources.model.ModelManager$ReloadState(net.minecraft.client.resources.model.ModelBakery $$0, net.minecraft.client.resources.model.BakedModel $$1, java.util.Map<net.minecraft.world.level.block.state.BlockState, net.minecraft.client.resources.model.BakedModel> $$2, java.util.Map<net.minecraft.resources.ResourceLocation, net.minecraft.client.resources.model.AtlasSet$StitchResult> $$3, java.util.concurrent.CompletableFuture<java.lang.Void> $$4) {
+        this.modelBakery = $$0;
+        this.missingModel = $$1;
+        this.modelCache = $$2;
+        this.atlasPreparations = $$3;
+        this.readyForUpload = $$4;
+    }
+
+    public java.lang.String toString() {
+        return java.lang.runtime.ObjectMethods.bootstrap("toString", new java.lang.invoke.MethodHandle[]{net.minecraft.client.resources.model.ModelManager$ReloadState.class, "modelBakery;missingModel;modelCache;atlasPreparations;readyForUpload", "modelBakery", "missingModel", "modelCache", "atlasPreparations", "readyForUpload"}, this);
+    }
+
+    public int hashCode() {
+        return (int)java.lang.runtime.ObjectMethods.bootstrap("hashCode", new java.lang.invoke.MethodHandle[]{net.minecraft.client.resources.model.ModelManager$ReloadState.class, "modelBakery;missingModel;modelCache;atlasPreparations;readyForUpload", "modelBakery", "missingModel", "modelCache", "atlasPreparations", "readyForUpload"}, this);
+    }
+
+    public boolean equals(java.lang.Object $$0) {
+        return (boolean)java.lang.runtime.ObjectMethods.bootstrap("equals", new java.lang.invoke.MethodHandle[]{net.minecraft.client.resources.model.ModelManager$ReloadState.class, "modelBakery;missingModel;modelCache;atlasPreparations;readyForUpload", "modelBakery", "missingModel", "modelCache", "atlasPreparations", "readyForUpload"}, this, $$0);
+    }
+
+    public net.minecraft.client.resources.model.ModelBakery modelBakery() {
+        return this.modelBakery;
+    }
+
+    public net.minecraft.client.resources.model.BakedModel missingModel() {
+        return this.missingModel;
+    }
+
+    public java.util.Map<net.minecraft.world.level.block.state.BlockState, net.minecraft.client.resources.model.BakedModel> modelCache() {
+        return this.modelCache;
+    }
+
+    public java.util.Map<net.minecraft.resources.ResourceLocation, net.minecraft.client.resources.model.AtlasSet$StitchResult> atlasPreparations() {
+        return this.atlasPreparations;
+    }
+
+    public java.util.concurrent.CompletableFuture<java.lang.Void> readyForUpload() {
+        return this.readyForUpload;
+    }
+}
+