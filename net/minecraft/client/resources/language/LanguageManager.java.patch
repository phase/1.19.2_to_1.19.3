--- net/minecraft/client/resources/language/LanguageManager.java
+++ net/minecraft/client/resources/language/LanguageManager.java
@@ -13,34 +13,34 @@
     public java.lang.String currentCode;
     public net.minecraft.client.resources.language.LanguageInfo currentLanguage;
 
-    public net.minecraft.client.resources.language.LanguageManager(java.lang.String currentCode) {
+    public net.minecraft.client.resources.language.LanguageManager(java.lang.String $$0) {
         this.languages = com.google.common.collect.ImmutableMap.of((java.lang.Object)"en_us", (java.lang.Object)DEFAULT_LANGUAGE);
         this.currentLanguage = DEFAULT_LANGUAGE;
-        this.currentCode = currentCode;
+        this.currentCode = $$0;
     }
 
-    public static java.util.Map<java.lang.String, net.minecraft.client.resources.language.LanguageInfo> extractLanguages(java.util.stream.Stream<net.minecraft.server.packs.PackResources> resources) {
-        java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-        resources.forEach(arg_0 -> net.minecraft.client.resources.language.LanguageManager.lambda$extractLanguages$0((java.util.Map)hashMap, arg_0));
-        return com.google.common.collect.ImmutableMap.copyOf((java.util.Map)hashMap);
+    public static java.util.Map<java.lang.String, net.minecraft.client.resources.language.LanguageInfo> extractLanguages(java.util.stream.Stream<net.minecraft.server.packs.PackResources> $$0) {
+        java.util.HashMap $$1 = com.google.common.collect.Maps.newHashMap();
+        $$0.forEach(arg_0 -> net.minecraft.client.resources.language.LanguageManager.lambda$extractLanguages$0((java.util.Map)$$1, arg_0));
+        return com.google.common.collect.ImmutableMap.copyOf((java.util.Map)$$1);
     }
 
-    public void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager resourceManager) {
-        this.languages = net.minecraft.client.resources.language.LanguageManager.extractLanguages((java.util.stream.Stream)resourceManager.listPacks());
-        net.minecraft.client.resources.language.LanguageInfo languageInfo = (net.minecraft.client.resources.language.LanguageInfo)this.languages.getOrDefault((java.lang.Object)"en_us", (java.lang.Object)DEFAULT_LANGUAGE);
-        this.currentLanguage = (net.minecraft.client.resources.language.LanguageInfo)this.languages.getOrDefault((java.lang.Object)this.currentCode, (java.lang.Object)languageInfo);
-        java.util.ArrayList arrayList = com.google.common.collect.Lists.newArrayList((java.lang.Object[])new net.minecraft.client.resources.language.LanguageInfo[]{languageInfo});
-        if (this.currentLanguage != languageInfo) {
-            arrayList.add((java.lang.Object)this.currentLanguage);
+    public void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager $$0) {
+        this.languages = net.minecraft.client.resources.language.LanguageManager.extractLanguages((java.util.stream.Stream)$$0.listPacks());
+        net.minecraft.client.resources.language.LanguageInfo $$1 = (net.minecraft.client.resources.language.LanguageInfo)this.languages.getOrDefault((java.lang.Object)"en_us", (java.lang.Object)DEFAULT_LANGUAGE);
+        this.currentLanguage = (net.minecraft.client.resources.language.LanguageInfo)this.languages.getOrDefault((java.lang.Object)this.currentCode, (java.lang.Object)$$1);
+        java.util.ArrayList $$2 = com.google.common.collect.Lists.newArrayList((java.lang.Object[])new net.minecraft.client.resources.language.LanguageInfo[]{$$1});
+        if (this.currentLanguage != $$1) {
+            $$2.add((java.lang.Object)this.currentLanguage);
         }
-        net.minecraft.client.resources.language.ClientLanguage clientLanguage = net.minecraft.client.resources.language.ClientLanguage.loadFrom((net.minecraft.server.packs.resources.ResourceManager)resourceManager, (java.util.List)arrayList);
-        net.minecraft.client.resources.language.I18n.setLanguage((net.minecraft.locale.Language)clientLanguage);
-        net.minecraft.locale.Language.inject((net.minecraft.locale.Language)clientLanguage);
+        net.minecraft.client.resources.language.ClientLanguage $$3 = net.minecraft.client.resources.language.ClientLanguage.loadFrom((net.minecraft.server.packs.resources.ResourceManager)$$0, (java.util.List)$$2);
+        net.minecraft.client.resources.language.I18n.setLanguage((net.minecraft.locale.Language)$$3);
+        net.minecraft.locale.Language.inject((net.minecraft.locale.Language)$$3);
     }
 
-    public void setSelected(net.minecraft.client.resources.language.LanguageInfo currentLanguage) {
-        this.currentCode = currentLanguage.getCode();
-        this.currentLanguage = currentLanguage;
+    public void setSelected(net.minecraft.client.resources.language.LanguageInfo $$0) {
+        this.currentCode = $$0.getCode();
+        this.currentLanguage = $$0;
     }
 
     public net.minecraft.client.resources.language.LanguageInfo getSelected() {
@@ -51,21 +51,21 @@
         return com.google.common.collect.Sets.newTreeSet((java.lang.Iterable)this.languages.values());
     }
 
-    public net.minecraft.client.resources.language.LanguageInfo getLanguage(java.lang.String code) {
-        return (net.minecraft.client.resources.language.LanguageInfo)this.languages.get((java.lang.Object)code);
+    public net.minecraft.client.resources.language.LanguageInfo getLanguage(java.lang.String $$0) {
+        return (net.minecraft.client.resources.language.LanguageInfo)this.languages.get((java.lang.Object)$$0);
     }
 
-    public static /* synthetic */ void lambda$extractLanguages$0(java.util.Map map, net.minecraft.server.packs.PackResources resource) {
+    public static /* synthetic */ void lambda$extractLanguages$0(java.util.Map $$0, net.minecraft.server.packs.PackResources $$1) {
         try {
-            net.minecraft.client.resources.metadata.language.LanguageMetadataSection languageMetadataSection = (net.minecraft.client.resources.metadata.language.LanguageMetadataSection)resource.getMetadataSection((net.minecraft.server.packs.metadata.MetadataSectionSerializer)net.minecraft.client.resources.metadata.language.LanguageMetadataSection.SERIALIZER);
-            if (languageMetadataSection != null) {
-                for (net.minecraft.client.resources.language.LanguageInfo languageInfo : languageMetadataSection.getLanguages()) {
-                    map.putIfAbsent((java.lang.Object)languageInfo.getCode(), (java.lang.Object)languageInfo);
+            net.minecraft.client.resources.metadata.language.LanguageMetadataSection $$2 = (net.minecraft.client.resources.metadata.language.LanguageMetadataSection)$$1.getMetadataSection((net.minecraft.server.packs.metadata.MetadataSectionSerializer)net.minecraft.client.resources.metadata.language.LanguageMetadataSection.SERIALIZER);
+            if ($$2 != null) {
+                for (net.minecraft.client.resources.language.LanguageInfo $$3 : $$2.getLanguages()) {
+                    $$0.putIfAbsent((java.lang.Object)$$3.getCode(), (java.lang.Object)$$3);
                 }
             }
         }
-        catch (java.io.IOException | java.lang.RuntimeException throwable) {
-            LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", (java.lang.Object)resource.getName(), (java.lang.Object)throwable);
+        catch (java.io.IOException | java.lang.RuntimeException $$4) {
+            LOGGER.warn("Unable to parse language metadata section of resourcepack: {}", (java.lang.Object)$$1.packId(), (java.lang.Object)$$4);
         }
     }
 