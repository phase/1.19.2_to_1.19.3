--- net/minecraft/client/model/LlamaModel.java
+++ net/minecraft/client/model/LlamaModel.java
@@ -43,40 +43,40 @@
         return net.minecraft.client.model.geom.builders.LayerDefinition.create((net.minecraft.client.model.geom.builders.MeshDefinition)$$1, (int)128, (int)64);
     }
 
-    public void setupAnim(T entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
-        boolean bl;
-        this.head.xRot = headPitch * ((float)java.lang.Math.PI / 180);
-        this.head.yRot = netHeadYaw * ((float)java.lang.Math.PI / 180);
-        this.rightHindLeg.xRot = net.minecraft.util.Mth.cos((float)(limbSwing * 0.6662f)) * 1.4f * limbSwingAmount;
-        this.leftHindLeg.xRot = net.minecraft.util.Mth.cos((float)(limbSwing * 0.6662f + (float)java.lang.Math.PI)) * 1.4f * limbSwingAmount;
-        this.rightFrontLeg.xRot = net.minecraft.util.Mth.cos((float)(limbSwing * 0.6662f + (float)java.lang.Math.PI)) * 1.4f * limbSwingAmount;
-        this.leftFrontLeg.xRot = net.minecraft.util.Mth.cos((float)(limbSwing * 0.6662f)) * 1.4f * limbSwingAmount;
-        this.rightChest.visible = bl = !entity.isBaby() && entity.hasChest();
-        this.leftChest.visible = bl;
+    public void setupAnim(T $$0, float $$1, float $$2, float $$3, float $$4, float $$5) {
+        boolean $$6;
+        this.head.xRot = $$5 * ((float)java.lang.Math.PI / 180);
+        this.head.yRot = $$4 * ((float)java.lang.Math.PI / 180);
+        this.rightHindLeg.xRot = net.minecraft.util.Mth.cos((float)($$1 * 0.6662f)) * 1.4f * $$2;
+        this.leftHindLeg.xRot = net.minecraft.util.Mth.cos((float)($$1 * 0.6662f + (float)java.lang.Math.PI)) * 1.4f * $$2;
+        this.rightFrontLeg.xRot = net.minecraft.util.Mth.cos((float)($$1 * 0.6662f + (float)java.lang.Math.PI)) * 1.4f * $$2;
+        this.leftFrontLeg.xRot = net.minecraft.util.Mth.cos((float)($$1 * 0.6662f)) * 1.4f * $$2;
+        this.rightChest.visible = $$6 = !$$0.isBaby() && $$0.hasChest();
+        this.leftChest.visible = $$6;
     }
 
-    public void renderToBuffer(com.mojang.blaze3d.vertex.PoseStack matrixStack, com.mojang.blaze3d.vertex.VertexConsumer buffer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
+    public void renderToBuffer(com.mojang.blaze3d.vertex.PoseStack $$0, com.mojang.blaze3d.vertex.VertexConsumer $$1, int $$2, int $$3, float $$4, float $$5, float $$6, float $$7) {
         if (this.young) {
-            float f = 2.0f;
-            matrixStack.pushPose();
-            float f2 = 0.7f;
-            matrixStack.scale(0.71428573f, 0.64935064f, 0.7936508f);
-            matrixStack.translate(0.0, 1.3125, (double)0.22f);
-            this.head.render(matrixStack, buffer, packedLight, packedOverlay, red, green, blue, alpha);
-            matrixStack.popPose();
-            matrixStack.pushPose();
-            float f3 = 1.1f;
-            matrixStack.scale(0.625f, 0.45454544f, 0.45454544f);
-            matrixStack.translate(0.0, 2.0625, 0.0);
-            this.body.render(matrixStack, buffer, packedLight, packedOverlay, red, green, blue, alpha);
-            matrixStack.popPose();
-            matrixStack.pushPose();
-            matrixStack.scale(0.45454544f, 0.41322312f, 0.45454544f);
-            matrixStack.translate(0.0, 2.0625, 0.0);
-            com.google.common.collect.ImmutableList.of((java.lang.Object)this.rightHindLeg, (java.lang.Object)this.leftHindLeg, (java.lang.Object)this.rightFrontLeg, (java.lang.Object)this.leftFrontLeg, (java.lang.Object)this.rightChest, (java.lang.Object)this.leftChest).forEach($$8 -> $$8.render(matrixStack, buffer, packedLight, packedOverlay, red, green, blue, alpha));
-            matrixStack.popPose();
+            float $$82 = 2.0f;
+            $$0.pushPose();
+            float $$9 = 0.7f;
+            $$0.scale(0.71428573f, 0.64935064f, 0.7936508f);
+            $$0.translate(0.0, 1.3125, (double)0.22f);
+            this.head.render($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7);
+            $$0.popPose();
+            $$0.pushPose();
+            float $$10 = 1.1f;
+            $$0.scale(0.625f, 0.45454544f, 0.45454544f);
+            $$0.translate(0.0, 2.0625, 0.0);
+            this.body.render($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7);
+            $$0.popPose();
+            $$0.pushPose();
+            $$0.scale(0.45454544f, 0.41322312f, 0.45454544f);
+            $$0.translate(0.0, 2.0625, 0.0);
+            com.google.common.collect.ImmutableList.of((java.lang.Object)this.rightHindLeg, (java.lang.Object)this.leftHindLeg, (java.lang.Object)this.rightFrontLeg, (java.lang.Object)this.leftFrontLeg, (java.lang.Object)this.rightChest, (java.lang.Object)this.leftChest).forEach($$8 -> $$8.render($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7));
+            $$0.popPose();
         } else {
-            com.google.common.collect.ImmutableList.of((java.lang.Object)this.head, (java.lang.Object)this.body, (java.lang.Object)this.rightHindLeg, (java.lang.Object)this.leftHindLeg, (java.lang.Object)this.rightFrontLeg, (java.lang.Object)this.leftFrontLeg, (java.lang.Object)this.rightChest, (java.lang.Object)this.leftChest).forEach($$8 -> $$8.render(matrixStack, buffer, packedLight, packedOverlay, red, green, blue, alpha));
+            com.google.common.collect.ImmutableList.of((java.lang.Object)this.head, (java.lang.Object)this.body, (java.lang.Object)this.rightHindLeg, (java.lang.Object)this.leftHindLeg, (java.lang.Object)this.rightFrontLeg, (java.lang.Object)this.leftFrontLeg, (java.lang.Object)this.rightChest, (java.lang.Object)this.leftChest).forEach($$8 -> $$8.render($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7));
         }
     }
 }