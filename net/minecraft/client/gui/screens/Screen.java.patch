--- net/minecraft/client/gui/screens/Screen.java
+++ net/minecraft/client/gui/screens/Screen.java
@@ -35,14 +35,14 @@
     @javax.annotation.Nullable
     public net.minecraft.client.gui.narration.NarratableEntry lastNarratable;
 
-    public net.minecraft.client.gui.screens.Screen(net.minecraft.network.chat.Component title) {
+    public net.minecraft.client.gui.screens.Screen(net.minecraft.network.chat.Component $$0) {
         this.children = com.google.common.collect.Lists.newArrayList();
         this.narratables = com.google.common.collect.Lists.newArrayList();
         this.renderables = com.google.common.collect.Lists.newArrayList();
         this.narrationState = new net.minecraft.client.gui.narration.ScreenNarrationCollector();
         this.narrationSuppressTime = java.lang.Long.MIN_VALUE;
         this.nextNarrationTime = java.lang.Long.MAX_VALUE;
-        this.title = title;
+        this.title = $$0;
     }
 
     public net.minecraft.network.chat.Component getTitle() {
@@ -53,26 +53,26 @@
         return this.getTitle();
     }
 
-    public void render(com.mojang.blaze3d.vertex.PoseStack matrixStack, int mouseX, int mouseY, float partialTicks) {
-        for (net.minecraft.client.gui.components.Widget widget : this.renderables) {
-            widget.render(matrixStack, mouseX, mouseY, partialTicks);
+    public void render(com.mojang.blaze3d.vertex.PoseStack $$0, int $$1, int $$2, float $$3) {
+        for (net.minecraft.client.gui.components.Widget $$4 : this.renderables) {
+            $$4.render($$0, $$1, $$2, $$3);
         }
     }
 
-    public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
-        if (keyCode == 256 && this.shouldCloseOnEsc()) {
+    public boolean keyPressed(int $$0, int $$1, int $$2) {
+        if ($$0 == 256 && this.shouldCloseOnEsc()) {
             this.onClose();
             return true;
         }
-        if (keyCode == 258) {
-            boolean bl;
-            boolean bl2 = bl = !net.minecraft.client.gui.screens.Screen.hasShiftDown();
-            if (!this.changeFocus(bl)) {
-                this.changeFocus(bl);
+        if ($$0 == 258) {
+            boolean $$3;
+            boolean bl = $$3 = !net.minecraft.client.gui.screens.Screen.hasShiftDown();
+            if (!this.changeFocus($$3)) {
+                this.changeFocus($$3);
             }
             return false;
         }
-        return super.keyPressed(keyCode, scanCode, modifiers);
+        return super.keyPressed($$0, $$1, $$2);
     }
 
     public boolean shouldCloseOnEsc() {
@@ -93,10 +93,10 @@
         return $$0;
     }
 
-    public <T extends net.minecraft.client.gui.components.events.GuiEventListener & net.minecraft.client.gui.narration.NarratableEntry> T addWidget(T listener) {
-        this.children.add(listener);
-        this.narratables.add((java.lang.Object)listener);
-        return listener;
+    public <T extends net.minecraft.client.gui.components.events.GuiEventListener & net.minecraft.client.gui.narration.NarratableEntry> T addWidget(T $$0) {
+        this.children.add($$0);
+        this.narratables.add((java.lang.Object)$$0);
+        return $$0;
     }
 
     public void removeWidget(net.minecraft.client.gui.components.events.GuiEventListener $$0) {
@@ -115,8 +115,8 @@
         this.narratables.clear();
     }
 
-    public void renderTooltip(com.mojang.blaze3d.vertex.PoseStack poseStack, net.minecraft.world.item.ItemStack itemStack, int mouseX, int mouseY) {
-        this.renderTooltip(poseStack, this.getTooltipFromItem(itemStack), itemStack.getTooltipImage(), mouseX, mouseY);
+    public void renderTooltip(com.mojang.blaze3d.vertex.PoseStack $$0, net.minecraft.world.item.ItemStack $$1, int $$2, int $$3) {
+        this.renderTooltip($$0, this.getTooltipFromItem($$1), $$1.getTooltipImage(), $$2, $$3);
     }
 
     public void renderTooltip(com.mojang.blaze3d.vertex.PoseStack $$0, java.util.List<net.minecraft.network.chat.Component> $$12, java.util.Optional<net.minecraft.world.inventory.tooltip.TooltipComponent> $$2, int $$3, int $$4) {
@@ -125,20 +125,20 @@
         this.renderTooltipInternal($$0, $$5, $$3, $$4);
     }
 
-    public java.util.List<net.minecraft.network.chat.Component> getTooltipFromItem(net.minecraft.world.item.ItemStack itemStack) {
-        return itemStack.getTooltipLines((net.minecraft.world.entity.player.Player)this.minecraft.player, (net.minecraft.world.item.TooltipFlag)(this.minecraft.options.advancedItemTooltips ? net.minecraft.world.item.TooltipFlag$Default.ADVANCED : net.minecraft.world.item.TooltipFlag$Default.NORMAL));
+    public java.util.List<net.minecraft.network.chat.Component> getTooltipFromItem(net.minecraft.world.item.ItemStack $$0) {
+        return $$0.getTooltipLines((net.minecraft.world.entity.player.Player)this.minecraft.player, (net.minecraft.world.item.TooltipFlag)(this.minecraft.options.advancedItemTooltips ? net.minecraft.world.item.TooltipFlag$Default.ADVANCED : net.minecraft.world.item.TooltipFlag$Default.NORMAL));
     }
 
-    public void renderTooltip(com.mojang.blaze3d.vertex.PoseStack matrixStack, net.minecraft.network.chat.Component text, int mouseX, int mouseY) {
-        this.renderTooltip(matrixStack, java.util.Arrays.asList((java.lang.Object[])new net.minecraft.util.FormattedCharSequence[]{text.getVisualOrderText()}), mouseX, mouseY);
+    public void renderTooltip(com.mojang.blaze3d.vertex.PoseStack $$0, net.minecraft.network.chat.Component $$1, int $$2, int $$3) {
+        this.renderTooltip($$0, java.util.Arrays.asList((java.lang.Object[])new net.minecraft.util.FormattedCharSequence[]{$$1.getVisualOrderText()}), $$2, $$3);
     }
 
-    public void renderComponentTooltip(com.mojang.blaze3d.vertex.PoseStack poseStack, java.util.List<net.minecraft.network.chat.Component> tooltips, int mouseX, int mouseY) {
-        this.renderTooltip(poseStack, com.google.common.collect.Lists.transform(tooltips, net.minecraft.network.chat.Component::getVisualOrderText), mouseX, mouseY);
+    public void renderComponentTooltip(com.mojang.blaze3d.vertex.PoseStack $$0, java.util.List<net.minecraft.network.chat.Component> $$1, int $$2, int $$3) {
+        this.renderTooltip($$0, com.google.common.collect.Lists.transform($$1, net.minecraft.network.chat.Component::getVisualOrderText), $$2, $$3);
     }
 
-    public void renderTooltip(com.mojang.blaze3d.vertex.PoseStack matrixStack, java.util.List<? extends net.minecraft.util.FormattedCharSequence> tooltips, int mouseX, int mouseY) {
-        this.renderTooltipInternal(matrixStack, (java.util.List)tooltips.stream().map(net.minecraft.client.gui.screens.inventory.tooltip.ClientTooltipComponent::create).collect(java.util.stream.Collectors.toList()), mouseX, mouseY);
+    public void renderTooltip(com.mojang.blaze3d.vertex.PoseStack $$0, java.util.List<? extends net.minecraft.util.FormattedCharSequence> $$1, int $$2, int $$3) {
+        this.renderTooltipInternal($$0, (java.util.List)$$1.stream().map(net.minecraft.client.gui.screens.inventory.tooltip.ClientTooltipComponent::create).collect(java.util.stream.Collectors.toList()), $$2, $$3);
     }
 
     public void renderTooltipInternal(com.mojang.blaze3d.vertex.PoseStack $$0, java.util.List<net.minecraft.client.gui.screens.inventory.tooltip.ClientTooltipComponent> $$1, int $$2, int $$3) {
@@ -159,7 +159,7 @@
         int $$10 = $$4;
         int $$11 = $$5;
         if ($$8 + $$4 > this.width) {
-            $$8 -= 28 + $$4;
+            $$8 = java.lang.Math.max((int)($$8 - 24 - 4 - $$4), (int)4);
         }
         if ($$9 + $$11 + 6 > this.height) {
             $$9 = this.height - $$11 - 6;
@@ -211,84 +211,84 @@
         this.itemRenderer.blitOffset = $$16;
     }
 
-    public void renderComponentHoverEffect(com.mojang.blaze3d.vertex.PoseStack matrixStack, @javax.annotation.Nullable net.minecraft.network.chat.Style style, int mouseX, int mouseY) {
-        if (style == null || style.getHoverEvent() == null) {
+    public void renderComponentHoverEffect(com.mojang.blaze3d.vertex.PoseStack $$0, @javax.annotation.Nullable net.minecraft.network.chat.Style $$1, int $$2, int $$3) {
+        if ($$1 == null || $$1.getHoverEvent() == null) {
             return;
         }
-        net.minecraft.network.chat.HoverEvent hoverEvent = style.getHoverEvent();
-        net.minecraft.network.chat.HoverEvent$ItemStackInfo itemStackInfo = (net.minecraft.network.chat.HoverEvent$ItemStackInfo)hoverEvent.getValue(net.minecraft.network.chat.HoverEvent$Action.SHOW_ITEM);
-        if (itemStackInfo != null) {
-            this.renderTooltip(matrixStack, itemStackInfo.getItemStack(), mouseX, mouseY);
+        net.minecraft.network.chat.HoverEvent $$4 = $$1.getHoverEvent();
+        net.minecraft.network.chat.HoverEvent$ItemStackInfo $$5 = (net.minecraft.network.chat.HoverEvent$ItemStackInfo)$$4.getValue(net.minecraft.network.chat.HoverEvent$Action.SHOW_ITEM);
+        if ($$5 != null) {
+            this.renderTooltip($$0, $$5.getItemStack(), $$2, $$3);
         } else {
-            net.minecraft.network.chat.HoverEvent$EntityTooltipInfo entityTooltipInfo = (net.minecraft.network.chat.HoverEvent$EntityTooltipInfo)hoverEvent.getValue(net.minecraft.network.chat.HoverEvent$Action.SHOW_ENTITY);
-            if (entityTooltipInfo != null) {
+            net.minecraft.network.chat.HoverEvent$EntityTooltipInfo $$6 = (net.minecraft.network.chat.HoverEvent$EntityTooltipInfo)$$4.getValue(net.minecraft.network.chat.HoverEvent$Action.SHOW_ENTITY);
+            if ($$6 != null) {
                 if (this.minecraft.options.advancedItemTooltips) {
-                    this.renderComponentTooltip(matrixStack, entityTooltipInfo.getTooltipLines(), mouseX, mouseY);
+                    this.renderComponentTooltip($$0, $$6.getTooltipLines(), $$2, $$3);
                 }
             } else {
-                net.minecraft.network.chat.Component component = (net.minecraft.network.chat.Component)hoverEvent.getValue(net.minecraft.network.chat.HoverEvent$Action.SHOW_TEXT);
-                if (component != null) {
-                    this.renderTooltip(matrixStack, this.minecraft.font.split((net.minecraft.network.chat.FormattedText)component, java.lang.Math.max((int)(this.width / 2), (int)200)), mouseX, mouseY);
+                net.minecraft.network.chat.Component $$7 = (net.minecraft.network.chat.Component)$$4.getValue(net.minecraft.network.chat.HoverEvent$Action.SHOW_TEXT);
+                if ($$7 != null) {
+                    this.renderTooltip($$0, this.minecraft.font.split((net.minecraft.network.chat.FormattedText)$$7, java.lang.Math.max((int)(this.width / 2), (int)200)), $$2, $$3);
                 }
             }
         }
     }
 
-    public void insertText(java.lang.String text, boolean overwrite) {
+    public void insertText(java.lang.String $$0, boolean $$1) {
     }
 
-    public boolean handleComponentClicked(@javax.annotation.Nullable net.minecraft.network.chat.Style style) {
-        if (style == null) {
+    public boolean handleComponentClicked(@javax.annotation.Nullable net.minecraft.network.chat.Style $$0) {
+        if ($$0 == null) {
             return false;
         }
-        net.minecraft.network.chat.ClickEvent clickEvent = style.getClickEvent();
+        net.minecraft.network.chat.ClickEvent $$1 = $$0.getClickEvent();
         if (net.minecraft.client.gui.screens.Screen.hasShiftDown()) {
-            if (style.getInsertion() != null) {
-                this.insertText(style.getInsertion(), false);
+            if ($$0.getInsertion() != null) {
+                this.insertText($$0.getInsertion(), false);
             }
-        } else if (clickEvent != null) {
+        } else if ($$1 != null) {
 block24:            {
-                if (clickEvent.getAction() == net.minecraft.network.chat.ClickEvent$Action.OPEN_URL) {
+                if ($$1.getAction() == net.minecraft.network.chat.ClickEvent$Action.OPEN_URL) {
                     if (!((java.lang.Boolean)this.minecraft.options.chatLinks().get()).booleanValue()) {
                         return false;
                     }
                     try {
-                        java.net.URI uRI = new java.net.URI(clickEvent.getValue());
-                        java.lang.String string = uRI.getScheme();
-                        if (string == null) {
-                            throw new java.net.URISyntaxException(clickEvent.getValue(), "Missing protocol");
+                        java.net.URI $$2 = new java.net.URI($$1.getValue());
+                        java.lang.String $$3 = $$2.getScheme();
+                        if ($$3 == null) {
+                            throw new java.net.URISyntaxException($$1.getValue(), "Missing protocol");
                         }
-                        if (!ALLOWED_PROTOCOLS.contains((java.lang.Object)string.toLowerCase(java.util.Locale.ROOT))) {
-                            throw new java.net.URISyntaxException(clickEvent.getValue(), "Unsupported protocol: " + string.toLowerCase(java.util.Locale.ROOT));
+                        if (!ALLOWED_PROTOCOLS.contains((java.lang.Object)$$3.toLowerCase(java.util.Locale.ROOT))) {
+                            throw new java.net.URISyntaxException($$1.getValue(), "Unsupported protocol: " + $$3.toLowerCase(java.util.Locale.ROOT));
                         }
                         if (((java.lang.Boolean)this.minecraft.options.chatLinksPrompt().get()).booleanValue()) {
-                            this.clickedLink = uRI;
-                            this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.ConfirmLinkScreen(arg_0 -> this.confirmLink(arg_0), clickEvent.getValue(), false));
+                            this.clickedLink = $$2;
+                            this.minecraft.setScreen((net.minecraft.client.gui.screens.Screen)new net.minecraft.client.gui.screens.ConfirmLinkScreen(arg_0 -> this.confirmLink(arg_0), $$1.getValue(), false));
                             break block24;
                         }
-                        this.openLink(uRI);
+                        this.openLink($$2);
                     }
-                    catch (java.net.URISyntaxException uRISyntaxException) {
-                        LOGGER.error("Can't open url for {}", (java.lang.Object)clickEvent, (java.lang.Object)((java.lang.Object)uRISyntaxException));
+                    catch (java.net.URISyntaxException $$4) {
+                        LOGGER.error("Can't open url for {}", (java.lang.Object)$$1, (java.lang.Object)((java.lang.Object)$$4));
                     }
-                } else if (clickEvent.getAction() == net.minecraft.network.chat.ClickEvent$Action.OPEN_FILE) {
-                    java.net.URI uRI = new java.io.File(clickEvent.getValue()).toURI();
-                    this.openLink(uRI);
-                } else if (clickEvent.getAction() == net.minecraft.network.chat.ClickEvent$Action.SUGGEST_COMMAND) {
-                    this.insertText(net.minecraft.SharedConstants.filterText((java.lang.String)clickEvent.getValue()), true);
-                } else if (clickEvent.getAction() == net.minecraft.network.chat.ClickEvent$Action.RUN_COMMAND) {
-                    java.lang.String string = net.minecraft.SharedConstants.filterText((java.lang.String)clickEvent.getValue());
-                    if (string.startsWith("/")) {
-                        if (!this.minecraft.player.commandUnsigned(string.substring(1))) {
-                            LOGGER.error("Not allowed to run command with signed argument from click event: '{}'", (java.lang.Object)string);
+                } else if ($$1.getAction() == net.minecraft.network.chat.ClickEvent$Action.OPEN_FILE) {
+                    java.net.URI $$5 = new java.io.File($$1.getValue()).toURI();
+                    this.openLink($$5);
+                } else if ($$1.getAction() == net.minecraft.network.chat.ClickEvent$Action.SUGGEST_COMMAND) {
+                    this.insertText(net.minecraft.SharedConstants.filterText((java.lang.String)$$1.getValue()), true);
+                } else if ($$1.getAction() == net.minecraft.network.chat.ClickEvent$Action.RUN_COMMAND) {
+                    java.lang.String $$6 = net.minecraft.SharedConstants.filterText((java.lang.String)$$1.getValue());
+                    if ($$6.startsWith("/")) {
+                        if (!this.minecraft.player.connection.sendUnsignedCommand($$6.substring(1))) {
+                            LOGGER.error("Not allowed to run command with signed argument from click event: '{}'", (java.lang.Object)$$6);
                         }
                     } else {
-                        LOGGER.error("Failed to run command without '/' prefix from click event: '{}'", (java.lang.Object)string);
+                        LOGGER.error("Failed to run command without '/' prefix from click event: '{}'", (java.lang.Object)$$6);
                     }
-                } else if (clickEvent.getAction() == net.minecraft.network.chat.ClickEvent$Action.COPY_TO_CLIPBOARD) {
-                    this.minecraft.keyboardHandler.setClipboard(clickEvent.getValue());
+                } else if ($$1.getAction() == net.minecraft.network.chat.ClickEvent$Action.COPY_TO_CLIPBOARD) {
+                    this.minecraft.keyboardHandler.setClipboard($$1.getValue());
                 } else {
-                    LOGGER.error("Don't know how to handle {}", (java.lang.Object)clickEvent);
+                    LOGGER.error("Don't know how to handle {}", (java.lang.Object)$$1);
                 }
             }
             return true;
@@ -296,12 +296,12 @@
         return false;
     }
 
-    public void init(net.minecraft.client.Minecraft minecraft, int width, int height) {
-        this.minecraft = minecraft;
-        this.itemRenderer = minecraft.getItemRenderer();
-        this.font = minecraft.font;
-        this.width = width;
-        this.height = height;
+    public void init(net.minecraft.client.Minecraft $$0, int $$1, int $$2) {
+        this.minecraft = $$0;
+        this.itemRenderer = $$0.getItemRenderer();
+        this.font = $$0.font;
+        this.width = $$1;
+        this.height = $$2;
         this.rebuildWidgets();
         this.triggerImmediateNarration(false);
         this.suppressNarration(NARRATE_SUPPRESS_AFTER_INIT_TIME);
@@ -326,47 +326,47 @@
     public void removed() {
     }
 
-    public void renderBackground(com.mojang.blaze3d.vertex.PoseStack matrixStack) {
-        this.renderBackground(matrixStack, 0);
+    public void renderBackground(com.mojang.blaze3d.vertex.PoseStack $$0) {
+        this.renderBackground($$0, 0);
     }
 
-    public void renderBackground(com.mojang.blaze3d.vertex.PoseStack matrixStack, int vOffset) {
+    public void renderBackground(com.mojang.blaze3d.vertex.PoseStack $$0, int $$1) {
         if (this.minecraft.level != null) {
-            this.fillGradient(matrixStack, 0, 0, this.width, this.height, -1072689136, -804253680);
+            this.fillGradient($$0, 0, 0, this.width, this.height, -1072689136, -804253680);
         } else {
-            this.renderDirtBackground(vOffset);
+            this.renderDirtBackground($$1);
         }
     }
 
-    public void renderDirtBackground(int vOffset) {
-        com.mojang.blaze3d.vertex.Tesselator tesselator = com.mojang.blaze3d.vertex.Tesselator.getInstance();
-        com.mojang.blaze3d.vertex.BufferBuilder bufferBuilder = tesselator.getBuilder();
+    public void renderDirtBackground(int $$0) {
+        com.mojang.blaze3d.vertex.Tesselator $$1 = com.mojang.blaze3d.vertex.Tesselator.getInstance();
+        com.mojang.blaze3d.vertex.BufferBuilder $$2 = $$1.getBuilder();
         com.mojang.blaze3d.systems.RenderSystem.setShader(net.minecraft.client.renderer.GameRenderer::getPositionTexColorShader);
         com.mojang.blaze3d.systems.RenderSystem.setShaderTexture((int)0, (net.minecraft.resources.ResourceLocation)BACKGROUND_LOCATION);
         com.mojang.blaze3d.systems.RenderSystem.setShaderColor((float)1.0f, (float)1.0f, (float)1.0f, (float)1.0f);
-        float f = 32.0f;
-        bufferBuilder.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.QUADS, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_COLOR);
-        bufferBuilder.vertex(0.0, (double)this.height, 0.0).uv(0.0f, (float)this.height / 32.0f + (float)vOffset).color(64, 64, 64, 255).endVertex();
-        bufferBuilder.vertex((double)this.width, (double)this.height, 0.0).uv((float)this.width / 32.0f, (float)this.height / 32.0f + (float)vOffset).color(64, 64, 64, 255).endVertex();
-        bufferBuilder.vertex((double)this.width, 0.0, 0.0).uv((float)this.width / 32.0f, (float)vOffset).color(64, 64, 64, 255).endVertex();
-        bufferBuilder.vertex(0.0, 0.0, 0.0).uv(0.0f, (float)vOffset).color(64, 64, 64, 255).endVertex();
-        tesselator.end();
+        float $$3 = 32.0f;
+        $$2.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.QUADS, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_COLOR);
+        $$2.vertex(0.0, (double)this.height, 0.0).uv(0.0f, (float)this.height / 32.0f + (float)$$0).color(64, 64, 64, 255).endVertex();
+        $$2.vertex((double)this.width, (double)this.height, 0.0).uv((float)this.width / 32.0f, (float)this.height / 32.0f + (float)$$0).color(64, 64, 64, 255).endVertex();
+        $$2.vertex((double)this.width, 0.0, 0.0).uv((float)this.width / 32.0f, (float)$$0).color(64, 64, 64, 255).endVertex();
+        $$2.vertex(0.0, 0.0, 0.0).uv(0.0f, (float)$$0).color(64, 64, 64, 255).endVertex();
+        $$1.end();
     }
 
     public boolean isPauseScreen() {
         return true;
     }
 
-    public void confirmLink(boolean doOpen) {
-        if (doOpen) {
+    public void confirmLink(boolean $$0) {
+        if ($$0) {
             this.openLink(this.clickedLink);
         }
         this.clickedLink = null;
         this.minecraft.setScreen(this);
     }
 
-    public void openLink(java.net.URI uri) {
-        net.minecraft.Util.getPlatform().openUri(uri);
+    public void openLink(java.net.URI $$0) {
+        net.minecraft.Util.getPlatform().openUri($$0);
     }
 
     public static boolean hasControlDown() {
@@ -384,55 +384,55 @@
         return com.mojang.blaze3d.platform.InputConstants.isKeyDown((long)net.minecraft.client.Minecraft.getInstance().getWindow().getWindow(), (int)342) || com.mojang.blaze3d.platform.InputConstants.isKeyDown((long)net.minecraft.client.Minecraft.getInstance().getWindow().getWindow(), (int)346);
     }
 
-    public static boolean isCut(int keyCode) {
-        return keyCode == 88 && net.minecraft.client.gui.screens.Screen.hasControlDown() && !net.minecraft.client.gui.screens.Screen.hasShiftDown() && !net.minecraft.client.gui.screens.Screen.hasAltDown();
+    public static boolean isCut(int $$0) {
+        return $$0 == 88 && net.minecraft.client.gui.screens.Screen.hasControlDown() && !net.minecraft.client.gui.screens.Screen.hasShiftDown() && !net.minecraft.client.gui.screens.Screen.hasAltDown();
     }
 
-    public static boolean isPaste(int keyCode) {
-        return keyCode == 86 && net.minecraft.client.gui.screens.Screen.hasControlDown() && !net.minecraft.client.gui.screens.Screen.hasShiftDown() && !net.minecraft.client.gui.screens.Screen.hasAltDown();
+    public static boolean isPaste(int $$0) {
+        return $$0 == 86 && net.minecraft.client.gui.screens.Screen.hasControlDown() && !net.minecraft.client.gui.screens.Screen.hasShiftDown() && !net.minecraft.client.gui.screens.Screen.hasAltDown();
     }
 
-    public static boolean isCopy(int keyCode) {
-        return keyCode == 67 && net.minecraft.client.gui.screens.Screen.hasControlDown() && !net.minecraft.client.gui.screens.Screen.hasShiftDown() && !net.minecraft.client.gui.screens.Screen.hasAltDown();
+    public static boolean isCopy(int $$0) {
+        return $$0 == 67 && net.minecraft.client.gui.screens.Screen.hasControlDown() && !net.minecraft.client.gui.screens.Screen.hasShiftDown() && !net.minecraft.client.gui.screens.Screen.hasAltDown();
     }
 
-    public static boolean isSelectAll(int keyCode) {
-        return keyCode == 65 && net.minecraft.client.gui.screens.Screen.hasControlDown() && !net.minecraft.client.gui.screens.Screen.hasShiftDown() && !net.minecraft.client.gui.screens.Screen.hasAltDown();
+    public static boolean isSelectAll(int $$0) {
+        return $$0 == 65 && net.minecraft.client.gui.screens.Screen.hasControlDown() && !net.minecraft.client.gui.screens.Screen.hasShiftDown() && !net.minecraft.client.gui.screens.Screen.hasAltDown();
     }
 
-    public void resize(net.minecraft.client.Minecraft minecraft, int width, int height) {
-        this.init(minecraft, width, height);
+    public void resize(net.minecraft.client.Minecraft $$0, int $$1, int $$2) {
+        this.init($$0, $$1, $$2);
     }
 
-    public static void wrapScreenError(java.lang.Runnable action, java.lang.String errorDesc, java.lang.String screenName) {
+    public static void wrapScreenError(java.lang.Runnable $$0, java.lang.String $$1, java.lang.String $$2) {
         try {
-            action.run();
+            $$0.run();
         }
-        catch (java.lang.Throwable throwable) {
-            net.minecraft.CrashReport crashReport = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)throwable, (java.lang.String)errorDesc);
-            net.minecraft.CrashReportCategory crashReportCategory = crashReport.addCategory("Affected screen");
-            crashReportCategory.setDetail("Screen name", () -> screenName);
-            throw new net.minecraft.ReportedException(crashReport);
+        catch (java.lang.Throwable $$3) {
+            net.minecraft.CrashReport $$4 = net.minecraft.CrashReport.forThrowable((java.lang.Throwable)$$3, (java.lang.String)$$1);
+            net.minecraft.CrashReportCategory $$5 = $$4.addCategory("Affected screen");
+            $$5.setDetail("Screen name", () -> $$2);
+            throw new net.minecraft.ReportedException($$4);
         }
     }
 
-    public boolean isValidCharacterForName(java.lang.String text, char charTyped, int cursorPos) {
-        int n = text.indexOf(58);
-        int n2 = text.indexOf(47);
-        if (charTyped == ':') {
-            return (n2 == -1 || cursorPos <= n2) && n == -1;
+    public boolean isValidCharacterForName(java.lang.String $$0, char $$1, int $$2) {
+        int $$3 = $$0.indexOf(58);
+        int $$4 = $$0.indexOf(47);
+        if ($$1 == ':') {
+            return ($$4 == -1 || $$2 <= $$4) && $$3 == -1;
         }
-        if (charTyped == '/') {
-            return cursorPos > n;
+        if ($$1 == '/') {
+            return $$2 > $$3;
         }
-        return charTyped == '_' || charTyped == '-' || charTyped >= 'a' && charTyped <= 'z' || charTyped >= '0' && charTyped <= '9' || charTyped == '.';
+        return $$1 == '_' || $$1 == '-' || $$1 >= 'a' && $$1 <= 'z' || $$1 >= '0' && $$1 <= '9' || $$1 == '.';
     }
 
-    public boolean isMouseOver(double mouseX, double mouseY) {
+    public boolean isMouseOver(double $$0, double $$1) {
         return true;
     }
 
-    public void onFilesDrop(java.util.List<java.nio.file.Path> packs) {
+    public void onFilesDrop(java.util.List<java.nio.file.Path> $$0) {
     }
 
     public void scheduleNarration(long $$0, boolean $$1) {