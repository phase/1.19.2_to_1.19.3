--- net/minecraft/client/gui/Font.java
+++ net/minecraft/client/gui/Font.java
@@ -22,80 +22,80 @@
         this.splitter = new net.minecraft.client.StringSplitter(($$0, $$1) -> this.getFontSet($$1.getFont()).getGlyphInfo($$0, this.filterFishyGlyphs).getAdvance($$1.isBold()));
     }
 
-    public net.minecraft.client.gui.font.FontSet getFontSet(net.minecraft.resources.ResourceLocation fontLocation) {
-        return (net.minecraft.client.gui.font.FontSet)this.fonts.apply((java.lang.Object)fontLocation);
+    public net.minecraft.client.gui.font.FontSet getFontSet(net.minecraft.resources.ResourceLocation $$0) {
+        return (net.minecraft.client.gui.font.FontSet)this.fonts.apply((java.lang.Object)$$0);
     }
 
-    public int drawShadow(com.mojang.blaze3d.vertex.PoseStack matrixStack, java.lang.String text, float x, float y, int color) {
-        return this.drawInternal(text, x, y, color, matrixStack.last().pose(), true, this.isBidirectional());
+    public int drawShadow(com.mojang.blaze3d.vertex.PoseStack $$0, java.lang.String $$1, float $$2, float $$3, int $$4) {
+        return this.drawInternal($$1, $$2, $$3, $$4, $$0.last().pose(), true, this.isBidirectional());
     }
 
-    public int drawShadow(com.mojang.blaze3d.vertex.PoseStack matrixStack, java.lang.String text, float x, float y, int color, boolean transparency) {
-        return this.drawInternal(text, x, y, color, matrixStack.last().pose(), true, transparency);
+    public int drawShadow(com.mojang.blaze3d.vertex.PoseStack $$0, java.lang.String $$1, float $$2, float $$3, int $$4, boolean $$5) {
+        return this.drawInternal($$1, $$2, $$3, $$4, $$0.last().pose(), true, $$5);
     }
 
-    public int draw(com.mojang.blaze3d.vertex.PoseStack matrixStack, java.lang.String text, float x, float y, int color) {
-        return this.drawInternal(text, x, y, color, matrixStack.last().pose(), false, this.isBidirectional());
+    public int draw(com.mojang.blaze3d.vertex.PoseStack $$0, java.lang.String $$1, float $$2, float $$3, int $$4) {
+        return this.drawInternal($$1, $$2, $$3, $$4, $$0.last().pose(), false, this.isBidirectional());
     }
 
-    public int drawShadow(com.mojang.blaze3d.vertex.PoseStack matrixStack, net.minecraft.util.FormattedCharSequence text, float x, float y, int color) {
-        return this.drawInternal(text, x, y, color, matrixStack.last().pose(), true);
+    public int drawShadow(com.mojang.blaze3d.vertex.PoseStack $$0, net.minecraft.util.FormattedCharSequence $$1, float $$2, float $$3, int $$4) {
+        return this.drawInternal($$1, $$2, $$3, $$4, $$0.last().pose(), true);
     }
 
-    public int drawShadow(com.mojang.blaze3d.vertex.PoseStack matrixStack, net.minecraft.network.chat.Component text, float x, float y, int color) {
-        return this.drawInternal(text.getVisualOrderText(), x, y, color, matrixStack.last().pose(), true);
+    public int drawShadow(com.mojang.blaze3d.vertex.PoseStack $$0, net.minecraft.network.chat.Component $$1, float $$2, float $$3, int $$4) {
+        return this.drawInternal($$1.getVisualOrderText(), $$2, $$3, $$4, $$0.last().pose(), true);
     }
 
     public int draw(com.mojang.blaze3d.vertex.PoseStack $$0, net.minecraft.util.FormattedCharSequence $$1, float $$2, float $$3, int $$4) {
         return this.drawInternal($$1, $$2, $$3, $$4, $$0.last().pose(), false);
     }
 
-    public int draw(com.mojang.blaze3d.vertex.PoseStack matrixStack, net.minecraft.network.chat.Component text, float x, float y, int color) {
-        return this.drawInternal(text.getVisualOrderText(), x, y, color, matrixStack.last().pose(), false);
+    public int draw(com.mojang.blaze3d.vertex.PoseStack $$0, net.minecraft.network.chat.Component $$1, float $$2, float $$3, int $$4) {
+        return this.drawInternal($$1.getVisualOrderText(), $$2, $$3, $$4, $$0.last().pose(), false);
     }
 
-    public java.lang.String bidirectionalShaping(java.lang.String text) {
+    public java.lang.String bidirectionalShaping(java.lang.String $$0) {
         try {
-            com.ibm.icu.text.Bidi bidi = new com.ibm.icu.text.Bidi(new com.ibm.icu.text.ArabicShaping(8).shape(text), 127);
-            bidi.setReorderingMode(0);
-            return bidi.writeReordered(2);
+            com.ibm.icu.text.Bidi $$1 = new com.ibm.icu.text.Bidi(new com.ibm.icu.text.ArabicShaping(8).shape($$0), 127);
+            $$1.setReorderingMode(0);
+            return $$1.writeReordered(2);
         }
         catch (com.ibm.icu.text.ArabicShapingException arabicShapingException) {
-            return text;
+            return $$0;
         }
     }
 
-    public int drawInternal(java.lang.String text, float x, float y, int color, com.mojang.math.Matrix4f matrix, boolean dropShadow, boolean transparency) {
-        if (text == null) {
+    public int drawInternal(java.lang.String $$0, float $$1, float $$2, int $$3, com.mojang.math.Matrix4f $$4, boolean $$5, boolean $$6) {
+        if ($$0 == null) {
             return 0;
         }
-        net.minecraft.client.renderer.MultiBufferSource$BufferSource bufferSource = net.minecraft.client.renderer.MultiBufferSource.immediate((com.mojang.blaze3d.vertex.BufferBuilder)com.mojang.blaze3d.vertex.Tesselator.getInstance().getBuilder());
-        int n = this.drawInBatch(text, x, y, color, dropShadow, matrix, (net.minecraft.client.renderer.MultiBufferSource)bufferSource, false, 0, 0xF000F0, transparency);
-        bufferSource.endBatch();
-        return n;
+        net.minecraft.client.renderer.MultiBufferSource$BufferSource $$7 = net.minecraft.client.renderer.MultiBufferSource.immediate((com.mojang.blaze3d.vertex.BufferBuilder)com.mojang.blaze3d.vertex.Tesselator.getInstance().getBuilder());
+        int $$8 = this.drawInBatch($$0, $$1, $$2, $$3, $$5, $$4, (net.minecraft.client.renderer.MultiBufferSource)$$7, false, 0, 0xF000F0, $$6);
+        $$7.endBatch();
+        return $$8;
     }
 
-    public int drawInternal(net.minecraft.util.FormattedCharSequence reorderingProcessor, float x, float y, int color, com.mojang.math.Matrix4f matrix, boolean drawShadow) {
-        net.minecraft.client.renderer.MultiBufferSource$BufferSource bufferSource = net.minecraft.client.renderer.MultiBufferSource.immediate((com.mojang.blaze3d.vertex.BufferBuilder)com.mojang.blaze3d.vertex.Tesselator.getInstance().getBuilder());
-        int n = this.drawInBatch(reorderingProcessor, x, y, color, drawShadow, matrix, (net.minecraft.client.renderer.MultiBufferSource)bufferSource, false, 0, 0xF000F0);
-        bufferSource.endBatch();
-        return n;
+    public int drawInternal(net.minecraft.util.FormattedCharSequence $$0, float $$1, float $$2, int $$3, com.mojang.math.Matrix4f $$4, boolean $$5) {
+        net.minecraft.client.renderer.MultiBufferSource$BufferSource $$6 = net.minecraft.client.renderer.MultiBufferSource.immediate((com.mojang.blaze3d.vertex.BufferBuilder)com.mojang.blaze3d.vertex.Tesselator.getInstance().getBuilder());
+        int $$7 = this.drawInBatch($$0, $$1, $$2, $$3, $$5, $$4, (net.minecraft.client.renderer.MultiBufferSource)$$6, false, 0, 0xF000F0);
+        $$6.endBatch();
+        return $$7;
     }
 
-    public int drawInBatch(java.lang.String text, float x, float y, int color, boolean dropShadow, com.mojang.math.Matrix4f matrix, net.minecraft.client.renderer.MultiBufferSource buffer, boolean transparent, int colorBackground, int packedLight) {
-        return this.drawInBatch(text, x, y, color, dropShadow, matrix, buffer, transparent, colorBackground, packedLight, this.isBidirectional());
+    public int drawInBatch(java.lang.String $$0, float $$1, float $$2, int $$3, boolean $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$6, boolean $$7, int $$8, int $$9) {
+        return this.drawInBatch($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9, this.isBidirectional());
     }
 
-    public int drawInBatch(java.lang.String text, float x, float y, int color, boolean dropShadow, com.mojang.math.Matrix4f matrix, net.minecraft.client.renderer.MultiBufferSource buffer, boolean transparency, int colorBackground, int packedLight, boolean bidiFlag) {
-        return this.drawInternal(text, x, y, color, dropShadow, matrix, buffer, transparency, colorBackground, packedLight, bidiFlag);
+    public int drawInBatch(java.lang.String $$0, float $$1, float $$2, int $$3, boolean $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$6, boolean $$7, int $$8, int $$9, boolean $$10) {
+        return this.drawInternal($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10);
     }
 
     public int drawInBatch(net.minecraft.network.chat.Component $$0, float $$1, float $$2, int $$3, boolean $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$6, boolean $$7, int $$8, int $$9) {
         return this.drawInBatch($$0.getVisualOrderText(), $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9);
     }
 
-    public int drawInBatch(net.minecraft.util.FormattedCharSequence processor, float x, float y, int color, boolean dropShadow, com.mojang.math.Matrix4f matrix, net.minecraft.client.renderer.MultiBufferSource buffer, boolean transparent, int colorBackground, int packedLight) {
-        return this.drawInternal(processor, x, y, color, dropShadow, matrix, buffer, transparent, colorBackground, packedLight);
+    public int drawInBatch(net.minecraft.util.FormattedCharSequence $$0, float $$1, float $$2, int $$3, boolean $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$6, boolean $$7, int $$8, int $$9) {
+        return this.drawInternal($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9);
     }
 
     public void drawInBatch8xOutline(net.minecraft.util.FormattedCharSequence $$0, float $$1, float $$2, int $$3, int $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$62, int $$72) {
@@ -123,42 +123,42 @@
         $$15.finish(0, $$1);
     }
 
-    public static int adjustColor(int color) {
-        if ((color & 0xFC000000) == 0) {
-            return color | 0xFF000000;
+    public static int adjustColor(int $$0) {
+        if (($$0 & 0xFC000000) == 0) {
+            return $$0 | 0xFF000000;
         }
-        return color;
+        return $$0;
     }
 
-    public int drawInternal(java.lang.String text, float x, float y, int color, boolean dropShadow, com.mojang.math.Matrix4f matrix, net.minecraft.client.renderer.MultiBufferSource buffer, boolean transparent, int colorBackground, int packedLight, boolean bidiFlag) {
-        if (bidiFlag) {
-            text = this.bidirectionalShaping(text);
+    public int drawInternal(java.lang.String $$0, float $$1, float $$2, int $$3, boolean $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$6, boolean $$7, int $$8, int $$9, boolean $$10) {
+        if ($$10) {
+            $$0 = this.bidirectionalShaping($$0);
         }
-        color = net.minecraft.client.gui.Font.adjustColor((int)color);
-        com.mojang.math.Matrix4f matrix4f = matrix.copy();
-        if (dropShadow) {
-            this.renderText(text, x, y, color, true, matrix, buffer, transparent, colorBackground, packedLight);
-            matrix4f.translate(SHADOW_OFFSET);
+        $$3 = net.minecraft.client.gui.Font.adjustColor((int)$$3);
+        com.mojang.math.Matrix4f $$11 = $$5.copy();
+        if ($$4) {
+            this.renderText($$0, $$1, $$2, $$3, true, $$5, $$6, $$7, $$8, $$9);
+            $$11.translate(SHADOW_OFFSET);
         }
-        x = this.renderText(text, x, y, color, false, matrix4f, buffer, transparent, colorBackground, packedLight);
-        return (int)x + (dropShadow ? 1 : 0);
+        $$1 = this.renderText($$0, $$1, $$2, $$3, false, $$11, $$6, $$7, $$8, $$9);
+        return (int)$$1 + ($$4 ? 1 : 0);
     }
 
-    public int drawInternal(net.minecraft.util.FormattedCharSequence processor, float x, float y, int color, boolean drawShadow, com.mojang.math.Matrix4f matrix, net.minecraft.client.renderer.MultiBufferSource buffer, boolean transparent, int colorBackground, int packedLight) {
-        color = net.minecraft.client.gui.Font.adjustColor((int)color);
-        com.mojang.math.Matrix4f matrix4f = matrix.copy();
-        if (drawShadow) {
-            this.renderText(processor, x, y, color, true, matrix, buffer, transparent, colorBackground, packedLight);
-            matrix4f.translate(SHADOW_OFFSET);
+    public int drawInternal(net.minecraft.util.FormattedCharSequence $$0, float $$1, float $$2, int $$3, boolean $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$6, boolean $$7, int $$8, int $$9) {
+        $$3 = net.minecraft.client.gui.Font.adjustColor((int)$$3);
+        com.mojang.math.Matrix4f $$10 = $$5.copy();
+        if ($$4) {
+            this.renderText($$0, $$1, $$2, $$3, true, $$5, $$6, $$7, $$8, $$9);
+            $$10.translate(SHADOW_OFFSET);
         }
-        x = this.renderText(processor, x, y, color, false, matrix4f, buffer, transparent, colorBackground, packedLight);
-        return (int)x + (drawShadow ? 1 : 0);
+        $$1 = this.renderText($$0, $$1, $$2, $$3, false, $$10, $$6, $$7, $$8, $$9);
+        return (int)$$1 + ($$4 ? 1 : 0);
     }
 
-    public float renderText(java.lang.String text, float x, float y, int color, boolean isShadow, com.mojang.math.Matrix4f matrix, net.minecraft.client.renderer.MultiBufferSource buffer, boolean isTransparent, int colorBackground, int packedLight) {
-        net.minecraft.client.gui.Font$StringRenderOutput stringRenderOutput = new net.minecraft.client.gui.Font$StringRenderOutput(this, buffer, x, y, color, isShadow, matrix, isTransparent, packedLight);
-        net.minecraft.util.StringDecomposer.iterateFormatted((java.lang.String)text, (net.minecraft.network.chat.Style)net.minecraft.network.chat.Style.EMPTY, (net.minecraft.util.FormattedCharSink)stringRenderOutput);
-        return stringRenderOutput.finish(colorBackground, x);
+    public float renderText(java.lang.String $$0, float $$1, float $$2, int $$3, boolean $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$6, boolean $$7, int $$8, int $$9) {
+        net.minecraft.client.gui.Font$StringRenderOutput $$10 = new net.minecraft.client.gui.Font$StringRenderOutput(this, $$6, $$1, $$2, $$3, $$4, $$5, $$7, $$9);
+        net.minecraft.util.StringDecomposer.iterateFormatted((java.lang.String)$$0, (net.minecraft.network.chat.Style)net.minecraft.network.chat.Style.EMPTY, (net.minecraft.util.FormattedCharSink)$$10);
+        return $$10.finish($$8, $$1);
     }
 
     public float renderText(net.minecraft.util.FormattedCharSequence $$0, float $$1, float $$2, int $$3, boolean $$4, com.mojang.math.Matrix4f $$5, net.minecraft.client.renderer.MultiBufferSource $$6, boolean $$7, int $$8, int $$9) {
@@ -167,31 +167,31 @@
         return $$10.finish($$8, $$1);
     }
 
-    public void renderChar(net.minecraft.client.gui.font.glyphs.BakedGlyph glyph, boolean bold, boolean italic, float boldOffset, float x, float y, com.mojang.math.Matrix4f matrix, com.mojang.blaze3d.vertex.VertexConsumer buffer, float red, float green, float blue, float alpha, int packedLight) {
-        glyph.render(italic, x, y, matrix, buffer, red, green, blue, alpha, packedLight);
-        if (bold) {
-            glyph.render(italic, x + boldOffset, y, matrix, buffer, red, green, blue, alpha, packedLight);
+    public void renderChar(net.minecraft.client.gui.font.glyphs.BakedGlyph $$0, boolean $$1, boolean $$2, float $$3, float $$4, float $$5, com.mojang.math.Matrix4f $$6, com.mojang.blaze3d.vertex.VertexConsumer $$7, float $$8, float $$9, float $$10, float $$11, int $$12) {
+        $$0.render($$2, $$4, $$5, $$6, $$7, $$8, $$9, $$10, $$11, $$12);
+        if ($$1) {
+            $$0.render($$2, $$4 + $$3, $$5, $$6, $$7, $$8, $$9, $$10, $$11, $$12);
         }
     }
 
-    public int width(java.lang.String text) {
-        return net.minecraft.util.Mth.ceil((float)this.splitter.stringWidth(text));
+    public int width(java.lang.String $$0) {
+        return net.minecraft.util.Mth.ceil((float)this.splitter.stringWidth($$0));
     }
 
-    public int width(net.minecraft.network.chat.FormattedText properties) {
-        return net.minecraft.util.Mth.ceil((float)this.splitter.stringWidth(properties));
+    public int width(net.minecraft.network.chat.FormattedText $$0) {
+        return net.minecraft.util.Mth.ceil((float)this.splitter.stringWidth($$0));
     }
 
     public int width(net.minecraft.util.FormattedCharSequence $$0) {
         return net.minecraft.util.Mth.ceil((float)this.splitter.stringWidth($$0));
     }
 
-    public java.lang.String plainSubstrByWidth(java.lang.String text, int maxLength, boolean bl) {
-        return bl ? this.splitter.plainTailByWidth(text, maxLength, net.minecraft.network.chat.Style.EMPTY) : this.splitter.plainHeadByWidth(text, maxLength, net.minecraft.network.chat.Style.EMPTY);
+    public java.lang.String plainSubstrByWidth(java.lang.String $$0, int $$1, boolean $$2) {
+        return $$2 ? this.splitter.plainTailByWidth($$0, $$1, net.minecraft.network.chat.Style.EMPTY) : this.splitter.plainHeadByWidth($$0, $$1, net.minecraft.network.chat.Style.EMPTY);
     }
 
-    public java.lang.String plainSubstrByWidth(java.lang.String text, int maxLength) {
-        return this.splitter.plainHeadByWidth(text, maxLength, net.minecraft.network.chat.Style.EMPTY);
+    public java.lang.String plainSubstrByWidth(java.lang.String $$0, int $$1) {
+        return this.splitter.plainHeadByWidth($$0, $$1, net.minecraft.network.chat.Style.EMPTY);
     }
 
     public net.minecraft.network.chat.FormattedText substrByWidth(net.minecraft.network.chat.FormattedText $$0, int $$1) {
@@ -206,8 +206,8 @@
         }
     }
 
-    public int wordWrapHeight(java.lang.String str, int maxLength) {
-        return 9 * this.splitter.splitLines(str, maxLength, net.minecraft.network.chat.Style.EMPTY).size();
+    public int wordWrapHeight(java.lang.String $$0, int $$1) {
+        return 9 * this.splitter.splitLines($$0, $$1, net.minecraft.network.chat.Style.EMPTY).size();
     }
 
     public int wordWrapHeight(net.minecraft.network.chat.FormattedText $$0, int $$1) {