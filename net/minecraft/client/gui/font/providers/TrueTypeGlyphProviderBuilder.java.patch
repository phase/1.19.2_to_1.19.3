--- net/minecraft/client/gui/font/providers/TrueTypeGlyphProviderBuilder.java
+++ net/minecraft/client/gui/font/providers/TrueTypeGlyphProviderBuilder.java
@@ -14,66 +14,65 @@
     public float shiftY;
     public java.lang.String skip;
 
-    public net.minecraft.client.gui.font.providers.TrueTypeGlyphProviderBuilder(net.minecraft.resources.ResourceLocation location, float size, float oversample, float shiftX, float shiftY, java.lang.String skip) {
-        this.location = location;
-        this.size = size;
-        this.oversample = oversample;
-        this.shiftX = shiftX;
-        this.shiftY = shiftY;
-        this.skip = skip;
+    public net.minecraft.client.gui.font.providers.TrueTypeGlyphProviderBuilder(net.minecraft.resources.ResourceLocation $$0, float $$1, float $$2, float $$3, float $$4, java.lang.String $$5) {
+        this.location = $$0;
+        this.size = $$1;
+        this.oversample = $$2;
+        this.shiftX = $$3;
+        this.shiftY = $$4;
+        this.skip = $$5;
     }
 
-    public static net.minecraft.client.gui.font.providers.GlyphProviderBuilder fromJson(com.google.gson.JsonObject json) {
-        com.google.gson.JsonArray jsonArray;
-        float f = 0.0f;
-        float f2 = 0.0f;
-        if (json.has("shift")) {
-            jsonArray = json.getAsJsonArray("shift");
-            if (jsonArray.size() != 2) {
-                throw new com.google.gson.JsonParseException("Expected 2 elements in 'shift', found " + jsonArray.size());
+    public static net.minecraft.client.gui.font.providers.GlyphProviderBuilder fromJson(com.google.gson.JsonObject $$0) {
+        float $$1 = 0.0f;
+        float $$2 = 0.0f;
+        if ($$0.has("shift")) {
+            com.google.gson.JsonArray $$3 = $$0.getAsJsonArray("shift");
+            if ($$3.size() != 2) {
+                throw new com.google.gson.JsonParseException("Expected 2 elements in 'shift', found " + $$3.size());
             }
-            f = net.minecraft.util.GsonHelper.convertToFloat((com.google.gson.JsonElement)jsonArray.get(0), (java.lang.String)"shift[0]");
-            f2 = net.minecraft.util.GsonHelper.convertToFloat((com.google.gson.JsonElement)jsonArray.get(1), (java.lang.String)"shift[1]");
+            $$1 = net.minecraft.util.GsonHelper.convertToFloat((com.google.gson.JsonElement)$$3.get(0), (java.lang.String)"shift[0]");
+            $$2 = net.minecraft.util.GsonHelper.convertToFloat((com.google.gson.JsonElement)$$3.get(1), (java.lang.String)"shift[1]");
         }
-        jsonArray = new java.lang.StringBuilder();
-        if (json.has("skip")) {
-            com.google.gson.JsonElement jsonElement = json.get("skip");
-            if (jsonElement.isJsonArray()) {
-                com.google.gson.JsonArray jsonArray2 = net.minecraft.util.GsonHelper.convertToJsonArray((com.google.gson.JsonElement)jsonElement, (java.lang.String)"skip");
-                for (int i = 0; i < jsonArray2.size(); ++i) {
-                    jsonArray.append(net.minecraft.util.GsonHelper.convertToString((com.google.gson.JsonElement)jsonArray2.get(i), (java.lang.String)("skip[" + i + "]")));
+        java.lang.StringBuilder $$4 = new java.lang.StringBuilder();
+        if ($$0.has("skip")) {
+            com.google.gson.JsonElement $$5 = $$0.get("skip");
+            if ($$5.isJsonArray()) {
+                com.google.gson.JsonArray $$6 = net.minecraft.util.GsonHelper.convertToJsonArray((com.google.gson.JsonElement)$$5, (java.lang.String)"skip");
+                for (int $$7 = 0; $$7 < $$6.size(); ++$$7) {
+                    $$4.append(net.minecraft.util.GsonHelper.convertToString((com.google.gson.JsonElement)$$6.get($$7), (java.lang.String)("skip[" + $$7 + "]")));
                 }
             } else {
-                jsonArray.append(net.minecraft.util.GsonHelper.convertToString((com.google.gson.JsonElement)jsonElement, (java.lang.String)"skip"));
+                $$4.append(net.minecraft.util.GsonHelper.convertToString((com.google.gson.JsonElement)$$5, (java.lang.String)"skip"));
             }
         }
-        return new net.minecraft.client.gui.font.providers.TrueTypeGlyphProviderBuilder(new net.minecraft.resources.ResourceLocation(net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)json, (java.lang.String)"file")), net.minecraft.util.GsonHelper.getAsFloat((com.google.gson.JsonObject)json, (java.lang.String)"size", (float)11.0f), net.minecraft.util.GsonHelper.getAsFloat((com.google.gson.JsonObject)json, (java.lang.String)"oversample", (float)1.0f), f, f2, jsonArray.toString());
+        return new net.minecraft.client.gui.font.providers.TrueTypeGlyphProviderBuilder(new net.minecraft.resources.ResourceLocation(net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"file")), net.minecraft.util.GsonHelper.getAsFloat((com.google.gson.JsonObject)$$0, (java.lang.String)"size", (float)11.0f), net.minecraft.util.GsonHelper.getAsFloat((com.google.gson.JsonObject)$$0, (java.lang.String)"oversample", (float)1.0f), $$1, $$2, $$4.toString());
     }
 
     @javax.annotation.Nullable
-    public com.mojang.blaze3d.font.GlyphProvider create(net.minecraft.server.packs.resources.ResourceManager resourceManager) {
+    public com.mojang.blaze3d.font.GlyphProvider create(net.minecraft.server.packs.resources.ResourceManager $$0) {
         com.mojang.blaze3d.font.TrueTypeGlyphProvider trueTypeGlyphProvider;
 block10:        {
-            org.lwjgl.stb.STBTTFontinfo sTBTTFontinfo = null;
-            java.nio.ByteBuffer byteBuffer = null;
-            java.io.InputStream inputStream = resourceManager.open(new net.minecraft.resources.ResourceLocation(this.location.getNamespace(), "font/" + this.location.getPath()));
+            org.lwjgl.stb.STBTTFontinfo $$1 = null;
+            java.nio.ByteBuffer $$2 = null;
+            java.io.InputStream $$3 = $$0.open(this.location.withPrefix("font/"));
             try {
                 LOGGER.debug("Loading font {}", (java.lang.Object)this.location);
-                sTBTTFontinfo = org.lwjgl.stb.STBTTFontinfo.malloc();
-                byteBuffer = com.mojang.blaze3d.platform.TextureUtil.readResource((java.io.InputStream)inputStream);
-                byteBuffer.flip();
+                $$1 = org.lwjgl.stb.STBTTFontinfo.malloc();
+                $$2 = com.mojang.blaze3d.platform.TextureUtil.readResource((java.io.InputStream)$$3);
+                $$2.flip();
                 LOGGER.debug("Reading font {}", (java.lang.Object)this.location);
-                if (!org.lwjgl.stb.STBTruetype.stbtt_InitFont((org.lwjgl.stb.STBTTFontinfo)sTBTTFontinfo, (java.nio.ByteBuffer)byteBuffer)) {
+                if (!org.lwjgl.stb.STBTruetype.stbtt_InitFont((org.lwjgl.stb.STBTTFontinfo)$$1, (java.nio.ByteBuffer)$$2)) {
                     throw new java.io.IOException("Invalid ttf");
                 }
-                trueTypeGlyphProvider = new com.mojang.blaze3d.font.TrueTypeGlyphProvider(byteBuffer, sTBTTFontinfo, this.size, this.oversample, this.shiftX, this.shiftY, this.skip);
-                if (inputStream == null) break block10;
+                trueTypeGlyphProvider = new com.mojang.blaze3d.font.TrueTypeGlyphProvider($$2, $$1, this.size, this.oversample, this.shiftX, this.shiftY, this.skip);
+                if ($$3 == null) break block10;
             }
             catch (java.lang.Throwable throwable) {
                 try {
-                    if (inputStream != null) {
+                    if ($$3 != null) {
                         try {
-                            inputStream.close();
+                            $$3.close();
                         }
                         catch (java.lang.Throwable throwable2) {
                             throwable.addSuppressed(throwable2);
@@ -81,16 +80,16 @@
                     }
                     throw throwable;
                 }
-                catch (java.lang.Exception exception) {
-                    LOGGER.error("Couldn't load truetype font {}", (java.lang.Object)this.location, (java.lang.Object)((java.lang.Object)exception));
-                    if (sTBTTFontinfo != null) {
-                        sTBTTFontinfo.free();
+                catch (java.lang.Exception $$4) {
+                    LOGGER.error("Couldn't load truetype font {}", (java.lang.Object)this.location, (java.lang.Object)((java.lang.Object)$$4));
+                    if ($$1 != null) {
+                        $$1.free();
                     }
-                    org.lwjgl.system.MemoryUtil.memFree(byteBuffer);
+                    org.lwjgl.system.MemoryUtil.memFree($$2);
                     return null;
                 }
             }
-            inputStream.close();
+            $$3.close();
         }
         return trueTypeGlyphProvider;
     }