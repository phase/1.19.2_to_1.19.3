--- net/minecraft/client/gui/font/TextFieldHelper.java
+++ net/minecraft/client/gui/font/TextFieldHelper.java
@@ -13,77 +13,77 @@
     public int cursorPos;
     public int selectionPos;
 
-    public net.minecraft.client.gui.font.TextFieldHelper(java.util.function.Supplier<java.lang.String> getMessage, java.util.function.Consumer<java.lang.String> setMessage, java.util.function.Supplier<java.lang.String> getClipboard, java.util.function.Consumer<java.lang.String> setClipboard, java.util.function.Predicate<java.lang.String> stringValidator) {
-        this.getMessageFn = getMessage;
-        this.setMessageFn = setMessage;
-        this.getClipboardFn = getClipboard;
-        this.setClipboardFn = setClipboard;
-        this.stringValidator = stringValidator;
+    public net.minecraft.client.gui.font.TextFieldHelper(java.util.function.Supplier<java.lang.String> $$0, java.util.function.Consumer<java.lang.String> $$1, java.util.function.Supplier<java.lang.String> $$2, java.util.function.Consumer<java.lang.String> $$3, java.util.function.Predicate<java.lang.String> $$4) {
+        this.getMessageFn = $$0;
+        this.setMessageFn = $$1;
+        this.getClipboardFn = $$2;
+        this.setClipboardFn = $$3;
+        this.stringValidator = $$4;
         this.setCursorToEnd();
     }
 
-    public static java.util.function.Supplier<java.lang.String> createClipboardGetter(net.minecraft.client.Minecraft minecraft) {
-        return () -> net.minecraft.client.gui.font.TextFieldHelper.getClipboardContents((net.minecraft.client.Minecraft)minecraft);
+    public static java.util.function.Supplier<java.lang.String> createClipboardGetter(net.minecraft.client.Minecraft $$0) {
+        return () -> net.minecraft.client.gui.font.TextFieldHelper.getClipboardContents((net.minecraft.client.Minecraft)$$0);
     }
 
-    public static java.lang.String getClipboardContents(net.minecraft.client.Minecraft minecraft) {
-        return net.minecraft.ChatFormatting.stripFormatting((java.lang.String)minecraft.keyboardHandler.getClipboard().replaceAll("\\r", ""));
+    public static java.lang.String getClipboardContents(net.minecraft.client.Minecraft $$0) {
+        return net.minecraft.ChatFormatting.stripFormatting((java.lang.String)$$0.keyboardHandler.getClipboard().replaceAll("\\r", ""));
     }
 
-    public static java.util.function.Consumer<java.lang.String> createClipboardSetter(net.minecraft.client.Minecraft minecraft) {
-        return $$1 -> net.minecraft.client.gui.font.TextFieldHelper.setClipboardContents((net.minecraft.client.Minecraft)minecraft, (java.lang.String)$$1);
+    public static java.util.function.Consumer<java.lang.String> createClipboardSetter(net.minecraft.client.Minecraft $$0) {
+        return $$1 -> net.minecraft.client.gui.font.TextFieldHelper.setClipboardContents((net.minecraft.client.Minecraft)$$0, (java.lang.String)$$1);
     }
 
-    public static void setClipboardContents(net.minecraft.client.Minecraft minecraft, java.lang.String text) {
-        minecraft.keyboardHandler.setClipboard(text);
+    public static void setClipboardContents(net.minecraft.client.Minecraft $$0, java.lang.String $$1) {
+        $$0.keyboardHandler.setClipboard($$1);
     }
 
-    public boolean charTyped(char character) {
-        if (net.minecraft.SharedConstants.isAllowedChatCharacter((char)character)) {
-            this.insertText((java.lang.String)this.getMessageFn.get(), java.lang.Character.toString((char)character));
+    public boolean charTyped(char $$0) {
+        if (net.minecraft.SharedConstants.isAllowedChatCharacter((char)$$0)) {
+            this.insertText((java.lang.String)this.getMessageFn.get(), java.lang.Character.toString((char)$$0));
         }
         return true;
     }
 
-    public boolean keyPressed(int key) {
-        net.minecraft.client.gui.font.TextFieldHelper$CursorStep cursorStep;
-        if (net.minecraft.client.gui.screens.Screen.isSelectAll((int)key)) {
+    public boolean keyPressed(int $$0) {
+        net.minecraft.client.gui.font.TextFieldHelper$CursorStep $$1;
+        if (net.minecraft.client.gui.screens.Screen.isSelectAll((int)$$0)) {
             this.selectAll();
             return true;
         }
-        if (net.minecraft.client.gui.screens.Screen.isCopy((int)key)) {
+        if (net.minecraft.client.gui.screens.Screen.isCopy((int)$$0)) {
             this.copy();
             return true;
         }
-        if (net.minecraft.client.gui.screens.Screen.isPaste((int)key)) {
+        if (net.minecraft.client.gui.screens.Screen.isPaste((int)$$0)) {
             this.paste();
             return true;
         }
-        if (net.minecraft.client.gui.screens.Screen.isCut((int)key)) {
+        if (net.minecraft.client.gui.screens.Screen.isCut((int)$$0)) {
             this.cut();
             return true;
         }
-        net.minecraft.client.gui.font.TextFieldHelper$CursorStep cursorStep2 = cursorStep = net.minecraft.client.gui.screens.Screen.hasControlDown() ? net.minecraft.client.gui.font.TextFieldHelper$CursorStep.WORD : net.minecraft.client.gui.font.TextFieldHelper$CursorStep.CHARACTER;
-        if (key == 259) {
-            this.removeFromCursor(-1, cursorStep);
+        net.minecraft.client.gui.font.TextFieldHelper$CursorStep cursorStep = $$1 = net.minecraft.client.gui.screens.Screen.hasControlDown() ? net.minecraft.client.gui.font.TextFieldHelper$CursorStep.WORD : net.minecraft.client.gui.font.TextFieldHelper$CursorStep.CHARACTER;
+        if ($$0 == 259) {
+            this.removeFromCursor(-1, $$1);
             return true;
         }
-        if (key == 261) {
-            this.removeFromCursor(1, cursorStep);
+        if ($$0 == 261) {
+            this.removeFromCursor(1, $$1);
         } else {
-            if (key == 263) {
-                this.moveBy(-1, net.minecraft.client.gui.screens.Screen.hasShiftDown(), cursorStep);
+            if ($$0 == 263) {
+                this.moveBy(-1, net.minecraft.client.gui.screens.Screen.hasShiftDown(), $$1);
                 return true;
             }
-            if (key == 262) {
-                this.moveBy(1, net.minecraft.client.gui.screens.Screen.hasShiftDown(), cursorStep);
+            if ($$0 == 262) {
+                this.moveBy(1, net.minecraft.client.gui.screens.Screen.hasShiftDown(), $$1);
                 return true;
             }
-            if (key == 268) {
+            if ($$0 == 268) {
                 this.setCursorToStart(net.minecraft.client.gui.screens.Screen.hasShiftDown());
                 return true;
             }
-            if (key == 269) {
+            if ($$0 == 269) {
                 this.setCursorToEnd(net.minecraft.client.gui.screens.Screen.hasShiftDown());
                 return true;
             }
@@ -91,28 +91,28 @@
         return false;
     }
 
-    public int clampToMsgLength(int textIndex) {
-        return net.minecraft.util.Mth.clamp((int)textIndex, (int)0, (int)((java.lang.String)this.getMessageFn.get()).length());
+    public int clampToMsgLength(int $$0) {
+        return net.minecraft.util.Mth.clamp((int)$$0, (int)0, (int)((java.lang.String)this.getMessageFn.get()).length());
     }
 
-    public void insertText(java.lang.String text, java.lang.String clipboardText) {
+    public void insertText(java.lang.String $$0, java.lang.String $$1) {
         if (this.selectionPos != this.cursorPos) {
-            text = this.deleteSelection(text);
+            $$0 = this.deleteSelection($$0);
         }
-        this.cursorPos = net.minecraft.util.Mth.clamp((int)this.cursorPos, (int)0, (int)text.length());
-        java.lang.String string = new java.lang.StringBuilder(text).insert(this.cursorPos, clipboardText).toString();
-        if (this.stringValidator.test((java.lang.Object)string)) {
-            this.setMessageFn.accept((java.lang.Object)string);
-            this.selectionPos = this.cursorPos = java.lang.Math.min((int)string.length(), (int)(this.cursorPos + clipboardText.length()));
+        this.cursorPos = net.minecraft.util.Mth.clamp((int)this.cursorPos, (int)0, (int)$$0.length());
+        java.lang.String $$2 = new java.lang.StringBuilder($$0).insert(this.cursorPos, $$1).toString();
+        if (this.stringValidator.test((java.lang.Object)$$2)) {
+            this.setMessageFn.accept((java.lang.Object)$$2);
+            this.selectionPos = this.cursorPos = java.lang.Math.min((int)$$2.length(), (int)(this.cursorPos + $$1.length()));
         }
     }
 
-    public void insertText(java.lang.String text) {
-        this.insertText((java.lang.String)this.getMessageFn.get(), text);
+    public void insertText(java.lang.String $$0) {
+        this.insertText((java.lang.String)this.getMessageFn.get(), $$0);
     }
 
-    public void resetSelectionIfNeeded(boolean keepSelection) {
-        if (!keepSelection) {
+    public void resetSelectionIfNeeded(boolean $$0) {
+        if (!$$0) {
             this.selectionPos = this.cursorPos;
         }
     }
@@ -133,18 +133,18 @@
         this.moveByChars($$0, false);
     }
 
-    public void moveByChars(int direction, boolean keepSelection) {
-        this.cursorPos = net.minecraft.Util.offsetByCodepoints((java.lang.String)((java.lang.String)this.getMessageFn.get()), (int)this.cursorPos, (int)direction);
-        this.resetSelectionIfNeeded(keepSelection);
+    public void moveByChars(int $$0, boolean $$1) {
+        this.cursorPos = net.minecraft.Util.offsetByCodepoints((java.lang.String)((java.lang.String)this.getMessageFn.get()), (int)this.cursorPos, (int)$$0);
+        this.resetSelectionIfNeeded($$1);
     }
 
     public void moveByWords(int $$0) {
         this.moveByWords($$0, false);
     }
 
-    public void moveByWords(int direction, boolean keepSelection) {
-        this.cursorPos = net.minecraft.client.StringSplitter.getWordPosition((java.lang.String)((java.lang.String)this.getMessageFn.get()), (int)direction, (int)this.cursorPos, (boolean)true);
-        this.resetSelectionIfNeeded(keepSelection);
+    public void moveByWords(int $$0, boolean $$1) {
+        this.cursorPos = net.minecraft.client.StringSplitter.getWordPosition((java.lang.String)((java.lang.String)this.getMessageFn.get()), (int)$$0, (int)this.cursorPos, (boolean)true);
+        this.resetSelectionIfNeeded($$1);
     }
 
     public void removeFromCursor(int $$0, net.minecraft.client.gui.font.TextFieldHelper$CursorStep $$1) {
@@ -164,22 +164,22 @@
         this.removeCharsFromCursor($$1 - this.cursorPos);
     }
 
-    public void removeCharsFromCursor(int bidiDirection) {
-        java.lang.String string = (java.lang.String)this.getMessageFn.get();
-        if (!string.isEmpty()) {
-            java.lang.String string2;
+    public void removeCharsFromCursor(int $$0) {
+        java.lang.String $$1 = (java.lang.String)this.getMessageFn.get();
+        if (!$$1.isEmpty()) {
+            java.lang.String $$6;
             if (this.selectionPos != this.cursorPos) {
-                string2 = this.deleteSelection(string);
+                java.lang.String $$2 = this.deleteSelection($$1);
             } else {
-                int n = net.minecraft.Util.offsetByCodepoints((java.lang.String)string, (int)this.cursorPos, (int)bidiDirection);
-                int n2 = java.lang.Math.min((int)n, (int)this.cursorPos);
-                int n3 = java.lang.Math.max((int)n, (int)this.cursorPos);
-                string2 = new java.lang.StringBuilder(string).delete(n2, n3).toString();
-                if (bidiDirection < 0) {
-                    this.selectionPos = this.cursorPos = n2;
+                int $$3 = net.minecraft.Util.offsetByCodepoints((java.lang.String)$$1, (int)this.cursorPos, (int)$$0);
+                int $$4 = java.lang.Math.min((int)$$3, (int)this.cursorPos);
+                int $$5 = java.lang.Math.max((int)$$3, (int)this.cursorPos);
+                $$6 = new java.lang.StringBuilder($$1).delete($$4, $$5).toString();
+                if ($$0 < 0) {
+                    this.selectionPos = this.cursorPos = $$4;
                 }
             }
-            this.setMessageFn.accept((java.lang.Object)string2);
+            this.setMessageFn.accept((java.lang.Object)$$6);
         }
     }
 
@@ -203,39 +203,39 @@
         this.cursorPos = ((java.lang.String)this.getMessageFn.get()).length();
     }
 
-    public java.lang.String getSelected(java.lang.String text) {
-        int n = java.lang.Math.min((int)this.cursorPos, (int)this.selectionPos);
-        int n2 = java.lang.Math.max((int)this.cursorPos, (int)this.selectionPos);
-        return text.substring(n, n2);
+    public java.lang.String getSelected(java.lang.String $$0) {
+        int $$1 = java.lang.Math.min((int)this.cursorPos, (int)this.selectionPos);
+        int $$2 = java.lang.Math.max((int)this.cursorPos, (int)this.selectionPos);
+        return $$0.substring($$1, $$2);
     }
 
-    public java.lang.String deleteSelection(java.lang.String text) {
+    public java.lang.String deleteSelection(java.lang.String $$0) {
         if (this.selectionPos == this.cursorPos) {
-            return text;
+            return $$0;
         }
-        int n = java.lang.Math.min((int)this.cursorPos, (int)this.selectionPos);
-        int n2 = java.lang.Math.max((int)this.cursorPos, (int)this.selectionPos);
-        java.lang.String string = text.substring(0, n) + text.substring(n2);
-        this.selectionPos = this.cursorPos = n;
-        return string;
+        int $$1 = java.lang.Math.min((int)this.cursorPos, (int)this.selectionPos);
+        int $$2 = java.lang.Math.max((int)this.cursorPos, (int)this.selectionPos);
+        java.lang.String $$3 = $$0.substring(0, $$1) + $$0.substring($$2);
+        this.selectionPos = this.cursorPos = $$1;
+        return $$3;
     }
 
     public void setCursorToStart() {
         this.setCursorToStart(false);
     }
 
-    public void setCursorToStart(boolean keepSelection) {
+    public void setCursorToStart(boolean $$0) {
         this.cursorPos = 0;
-        this.resetSelectionIfNeeded(keepSelection);
+        this.resetSelectionIfNeeded($$0);
     }
 
     public void setCursorToEnd() {
         this.setCursorToEnd(false);
     }
 
-    public void setCursorToEnd(boolean keepSelection) {
+    public void setCursorToEnd(boolean $$0) {
         this.cursorPos = ((java.lang.String)this.getMessageFn.get()).length();
-        this.resetSelectionIfNeeded(keepSelection);
+        this.resetSelectionIfNeeded($$0);
     }
 
     public int getCursorPos() {
@@ -246,9 +246,9 @@
         this.setCursorPos($$0, true);
     }
 
-    public void setCursorPos(int textIndex, boolean keepSelection) {
-        this.cursorPos = this.clampToMsgLength(textIndex);
-        this.resetSelectionIfNeeded(keepSelection);
+    public void setCursorPos(int $$0, boolean $$1) {
+        this.cursorPos = this.clampToMsgLength($$0);
+        this.resetSelectionIfNeeded($$1);
     }
 
     public int getSelectionPos() {
@@ -259,10 +259,10 @@
         this.selectionPos = this.clampToMsgLength($$0);
     }
 
-    public void setSelectionRange(int selectionStart, int selectionEnd) {
-        int n = ((java.lang.String)this.getMessageFn.get()).length();
-        this.cursorPos = net.minecraft.util.Mth.clamp((int)selectionStart, (int)0, (int)n);
-        this.selectionPos = net.minecraft.util.Mth.clamp((int)selectionEnd, (int)0, (int)n);
+    public void setSelectionRange(int $$0, int $$1) {
+        int $$2 = ((java.lang.String)this.getMessageFn.get()).length();
+        this.cursorPos = net.minecraft.util.Mth.clamp((int)$$0, (int)0, (int)$$2);
+        this.selectionPos = net.minecraft.util.Mth.clamp((int)$$1, (int)0, (int)$$2);
     }
 
     public boolean isSelecting() {