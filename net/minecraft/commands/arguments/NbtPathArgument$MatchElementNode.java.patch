--- net/minecraft/commands/arguments/NbtPathArgument$MatchElementNode.java
+++ net/minecraft/commands/arguments/NbtPathArgument$MatchElementNode.java
@@ -9,30 +9,30 @@
     public net.minecraft.nbt.CompoundTag pattern;
     public java.util.function.Predicate<net.minecraft.nbt.Tag> predicate;
 
-    public net.minecraft.commands.arguments.NbtPathArgument$MatchElementNode(net.minecraft.nbt.CompoundTag pattern) {
-        this.pattern = pattern;
-        this.predicate = net.minecraft.commands.arguments.NbtPathArgument.createTagPredicate((net.minecraft.nbt.CompoundTag)pattern);
+    public net.minecraft.commands.arguments.NbtPathArgument$MatchElementNode(net.minecraft.nbt.CompoundTag $$0) {
+        this.pattern = $$0;
+        this.predicate = net.minecraft.commands.arguments.NbtPathArgument.createTagPredicate((net.minecraft.nbt.CompoundTag)$$0);
     }
 
-    public void getTag(net.minecraft.nbt.Tag tag, java.util.List<net.minecraft.nbt.Tag> tags) {
-        if (tag instanceof net.minecraft.nbt.ListTag) {
-            net.minecraft.nbt.ListTag listTag = (net.minecraft.nbt.ListTag)tag;
-            listTag.stream().filter(this.predicate).forEach(arg_0 -> tags.add(arg_0));
+    public void getTag(net.minecraft.nbt.Tag $$0, java.util.List<net.minecraft.nbt.Tag> $$1) {
+        if ($$0 instanceof net.minecraft.nbt.ListTag) {
+            net.minecraft.nbt.ListTag $$2 = (net.minecraft.nbt.ListTag)$$0;
+            $$2.stream().filter(this.predicate).forEach(arg_0 -> $$1.add(arg_0));
         }
     }
 
-    public void getOrCreateTag(net.minecraft.nbt.Tag tag, java.util.function.Supplier<net.minecraft.nbt.Tag> supplier, java.util.List<net.minecraft.nbt.Tag> tags) {
-        org.apache.commons.lang3.mutable.MutableBoolean mutableBoolean = new org.apache.commons.lang3.mutable.MutableBoolean();
-        if (tag instanceof net.minecraft.nbt.ListTag) {
-            net.minecraft.nbt.ListTag listTag = (net.minecraft.nbt.ListTag)tag;
-            listTag.stream().filter(this.predicate).forEach(currentTag -> {
-                tags.add(currentTag);
-                mutableBoolean.setTrue();
+    public void getOrCreateTag(net.minecraft.nbt.Tag $$0, java.util.function.Supplier<net.minecraft.nbt.Tag> $$1, java.util.List<net.minecraft.nbt.Tag> $$22) {
+        org.apache.commons.lang3.mutable.MutableBoolean $$3 = new org.apache.commons.lang3.mutable.MutableBoolean();
+        if ($$0 instanceof net.minecraft.nbt.ListTag) {
+            net.minecraft.nbt.ListTag $$4 = (net.minecraft.nbt.ListTag)$$0;
+            $$4.stream().filter(this.predicate).forEach($$2 -> {
+                $$22.add($$2);
+                $$3.setTrue();
             });
-            if (mutableBoolean.isFalse()) {
-                net.minecraft.nbt.CompoundTag compoundTag = this.pattern.copy();
-                listTag.add((java.lang.Object)compoundTag);
-                tags.add((java.lang.Object)compoundTag);
+            if ($$3.isFalse()) {
+                net.minecraft.nbt.CompoundTag $$5 = this.pattern.copy();
+                $$4.add((java.lang.Object)$$5);
+                $$22.add((java.lang.Object)$$5);
             }
         }
     }
@@ -41,37 +41,37 @@
         return new net.minecraft.nbt.ListTag();
     }
 
-    public int setTag(net.minecraft.nbt.Tag tag, java.util.function.Supplier<net.minecraft.nbt.Tag> supplier) {
-        int n = 0;
-        if (tag instanceof net.minecraft.nbt.ListTag) {
-            net.minecraft.nbt.ListTag listTag = (net.minecraft.nbt.ListTag)tag;
-            int n2 = listTag.size();
-            if (n2 == 0) {
-                listTag.add((java.lang.Object)((net.minecraft.nbt.Tag)supplier.get()));
-                ++n;
+    public int setTag(net.minecraft.nbt.Tag $$0, java.util.function.Supplier<net.minecraft.nbt.Tag> $$1) {
+        int $$2 = 0;
+        if ($$0 instanceof net.minecraft.nbt.ListTag) {
+            net.minecraft.nbt.ListTag $$3 = (net.minecraft.nbt.ListTag)$$0;
+            int $$4 = $$3.size();
+            if ($$4 == 0) {
+                $$3.add((java.lang.Object)((net.minecraft.nbt.Tag)$$1.get()));
+                ++$$2;
             } else {
-                for (int i = 0; i < n2; ++i) {
-                    net.minecraft.nbt.Tag tag2;
-                    net.minecraft.nbt.Tag tag3 = listTag.get(i);
-                    if (!this.predicate.test((java.lang.Object)tag3) || (tag2 = (net.minecraft.nbt.Tag)supplier.get()).equals((java.lang.Object)tag3) || !listTag.setTag(i, tag2)) continue;
-                    ++n;
+                for (int $$5 = 0; $$5 < $$4; ++$$5) {
+                    net.minecraft.nbt.Tag $$7;
+                    net.minecraft.nbt.Tag $$6 = $$3.get($$5);
+                    if (!this.predicate.test((java.lang.Object)$$6) || ($$7 = (net.minecraft.nbt.Tag)$$1.get()).equals((java.lang.Object)$$6) || !$$3.setTag($$5, $$7)) continue;
+                    ++$$2;
                 }
             }
         }
-        return n;
+        return $$2;
     }
 
-    public int removeTag(net.minecraft.nbt.Tag tag) {
-        int n = 0;
-        if (tag instanceof net.minecraft.nbt.ListTag) {
-            net.minecraft.nbt.ListTag listTag = (net.minecraft.nbt.ListTag)tag;
-            for (int i = listTag.size() - 1; i >= 0; --i) {
-                if (!this.predicate.test((java.lang.Object)listTag.get(i))) continue;
-                listTag.remove(i);
-                ++n;
+    public int removeTag(net.minecraft.nbt.Tag $$0) {
+        int $$1 = 0;
+        if ($$0 instanceof net.minecraft.nbt.ListTag) {
+            net.minecraft.nbt.ListTag $$2 = (net.minecraft.nbt.ListTag)$$0;
+            for (int $$3 = $$2.size() - 1; $$3 >= 0; --$$3) {
+                if (!this.predicate.test((java.lang.Object)$$2.get($$3))) continue;
+                $$2.remove($$3);
+                ++$$1;
             }
         }
-        return n;
+        return $$1;
     }
 }
 