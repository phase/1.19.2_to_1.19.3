--- net/minecraft/commands/arguments/NbtPathArgument$NbtPath.java
+++ net/minecraft/commands/arguments/NbtPathArgument$NbtPath.java
@@ -9,73 +9,73 @@
     public it.unimi.dsi.fastutil.objects.Object2IntMap<net.minecraft.commands.arguments.NbtPathArgument$Node> nodeToOriginalPosition;
     public net.minecraft.commands.arguments.NbtPathArgument$Node[] nodes;
 
-    public net.minecraft.commands.arguments.NbtPathArgument$NbtPath(java.lang.String original, net.minecraft.commands.arguments.NbtPathArgument$Node[] nodes, it.unimi.dsi.fastutil.objects.Object2IntMap<net.minecraft.commands.arguments.NbtPathArgument$Node> nodeToOriginPosition) {
-        this.original = original;
-        this.nodes = nodes;
-        this.nodeToOriginalPosition = nodeToOriginPosition;
+    public net.minecraft.commands.arguments.NbtPathArgument$NbtPath(java.lang.String $$0, net.minecraft.commands.arguments.NbtPathArgument$Node[] $$1, it.unimi.dsi.fastutil.objects.Object2IntMap<net.minecraft.commands.arguments.NbtPathArgument$Node> $$2) {
+        this.original = $$0;
+        this.nodes = $$1;
+        this.nodeToOriginalPosition = $$2;
     }
 
-    public java.util.List<net.minecraft.nbt.Tag> get(net.minecraft.nbt.Tag tag) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.util.List list = java.util.Collections.singletonList((java.lang.Object)tag);
-        for (net.minecraft.commands.arguments.NbtPathArgument$Node node : this.nodes) {
-            if (!(list = node.get(list)).isEmpty()) continue;
-            throw this.createNotFoundException(node);
+    public java.util.List<net.minecraft.nbt.Tag> get(net.minecraft.nbt.Tag $$0) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.util.List $$1 = java.util.Collections.singletonList((java.lang.Object)$$0);
+        for (net.minecraft.commands.arguments.NbtPathArgument$Node $$2 : this.nodes) {
+            if (!($$1 = $$2.get($$1)).isEmpty()) continue;
+            throw this.createNotFoundException($$2);
         }
-        return list;
+        return $$1;
     }
 
-    public int countMatching(net.minecraft.nbt.Tag tag) {
-        java.util.List list = java.util.Collections.singletonList((java.lang.Object)tag);
-        for (net.minecraft.commands.arguments.NbtPathArgument$Node node : this.nodes) {
-            if (!(list = node.get(list)).isEmpty()) continue;
+    public int countMatching(net.minecraft.nbt.Tag $$0) {
+        java.util.List $$1 = java.util.Collections.singletonList((java.lang.Object)$$0);
+        for (net.minecraft.commands.arguments.NbtPathArgument$Node $$2 : this.nodes) {
+            if (!($$1 = $$2.get($$1)).isEmpty()) continue;
             return 0;
         }
-        return list.size();
+        return $$1.size();
     }
 
-    public java.util.List<net.minecraft.nbt.Tag> getOrCreateParents(net.minecraft.nbt.Tag tag) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.util.List list = java.util.Collections.singletonList((java.lang.Object)tag);
-        for (int i = 0; i < this.nodes.length - 1; ++i) {
-            net.minecraft.commands.arguments.NbtPathArgument$Node node = this.nodes[i];
-            int n = i + 1;
-            if (!(list = node.getOrCreate(list, () -> ((net.minecraft.commands.arguments.NbtPathArgument$Node)this.nodes[n]).createPreferredParentTag())).isEmpty()) continue;
-            throw this.createNotFoundException(node);
+    public java.util.List<net.minecraft.nbt.Tag> getOrCreateParents(net.minecraft.nbt.Tag $$0) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.util.List $$1 = java.util.Collections.singletonList((java.lang.Object)$$0);
+        for (int $$2 = 0; $$2 < this.nodes.length - 1; ++$$2) {
+            net.minecraft.commands.arguments.NbtPathArgument$Node $$3 = this.nodes[$$2];
+            int $$4 = $$2 + 1;
+            if (!($$1 = $$3.getOrCreate($$1, () -> ((net.minecraft.commands.arguments.NbtPathArgument$Node)this.nodes[$$4]).createPreferredParentTag())).isEmpty()) continue;
+            throw this.createNotFoundException($$3);
         }
-        return list;
+        return $$1;
     }
 
-    public java.util.List<net.minecraft.nbt.Tag> getOrCreate(net.minecraft.nbt.Tag tag, java.util.function.Supplier<net.minecraft.nbt.Tag> supplier) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.util.List list = this.getOrCreateParents(tag);
-        net.minecraft.commands.arguments.NbtPathArgument$Node node = this.nodes[this.nodes.length - 1];
-        return node.getOrCreate(list, supplier);
+    public java.util.List<net.minecraft.nbt.Tag> getOrCreate(net.minecraft.nbt.Tag $$0, java.util.function.Supplier<net.minecraft.nbt.Tag> $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.util.List $$2 = this.getOrCreateParents($$0);
+        net.minecraft.commands.arguments.NbtPathArgument$Node $$3 = this.nodes[this.nodes.length - 1];
+        return $$3.getOrCreate($$2, $$1);
     }
 
-    public static int apply(java.util.List<net.minecraft.nbt.Tag> tags, java.util.function.Function<net.minecraft.nbt.Tag, java.lang.Integer> function) {
-        return (java.lang.Integer)tags.stream().map(function).reduce((java.lang.Object)0, (a, b) -> a + b);
+    public static int apply(java.util.List<net.minecraft.nbt.Tag> $$02, java.util.function.Function<net.minecraft.nbt.Tag, java.lang.Integer> $$12) {
+        return (java.lang.Integer)$$02.stream().map($$12).reduce((java.lang.Object)0, ($$0, $$1) -> $$0 + $$1);
     }
 
     public int set(net.minecraft.nbt.Tag $$0, net.minecraft.nbt.Tag $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
         return this.set($$0, () -> ((net.minecraft.nbt.Tag)$$1).copy());
     }
 
-    public int set(net.minecraft.nbt.Tag tag, java.util.function.Supplier<net.minecraft.nbt.Tag> supplier) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.util.List list = this.getOrCreateParents(tag);
-        net.minecraft.commands.arguments.NbtPathArgument$Node node = this.nodes[this.nodes.length - 1];
-        return net.minecraft.commands.arguments.NbtPathArgument$NbtPath.apply((java.util.List)list, currentTag -> node.setTag(currentTag, supplier));
+    public int set(net.minecraft.nbt.Tag $$0, java.util.function.Supplier<net.minecraft.nbt.Tag> $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.util.List $$22 = this.getOrCreateParents($$0);
+        net.minecraft.commands.arguments.NbtPathArgument$Node $$3 = this.nodes[this.nodes.length - 1];
+        return net.minecraft.commands.arguments.NbtPathArgument$NbtPath.apply((java.util.List)$$22, $$2 -> $$3.setTag($$2, $$1));
     }
 
-    public int remove(net.minecraft.nbt.Tag tag) {
-        java.util.List list = java.util.Collections.singletonList((java.lang.Object)tag);
-        for (int i = 0; i < this.nodes.length - 1; ++i) {
-            list = this.nodes[i].get(list);
+    public int remove(net.minecraft.nbt.Tag $$0) {
+        java.util.List $$1 = java.util.Collections.singletonList((java.lang.Object)$$0);
+        for (int $$2 = 0; $$2 < this.nodes.length - 1; ++$$2) {
+            $$1 = this.nodes[$$2].get($$1);
         }
-        net.minecraft.commands.arguments.NbtPathArgument$Node node = this.nodes[this.nodes.length - 1];
-        return net.minecraft.commands.arguments.NbtPathArgument$NbtPath.apply((java.util.List)list, arg_0 -> ((net.minecraft.commands.arguments.NbtPathArgument$Node)node).removeTag(arg_0));
+        net.minecraft.commands.arguments.NbtPathArgument$Node $$3 = this.nodes[this.nodes.length - 1];
+        return net.minecraft.commands.arguments.NbtPathArgument$NbtPath.apply((java.util.List)$$1, arg_0 -> ((net.minecraft.commands.arguments.NbtPathArgument$Node)$$3).removeTag(arg_0));
     }
 
-    public com.mojang.brigadier.exceptions.CommandSyntaxException createNotFoundException(net.minecraft.commands.arguments.NbtPathArgument$Node node) {
-        int n = this.nodeToOriginalPosition.getInt((java.lang.Object)node);
-        return net.minecraft.commands.arguments.NbtPathArgument.ERROR_NOTHING_FOUND.create((java.lang.Object)this.original.substring(0, n));
+    public com.mojang.brigadier.exceptions.CommandSyntaxException createNotFoundException(net.minecraft.commands.arguments.NbtPathArgument$Node $$0) {
+        int $$1 = this.nodeToOriginalPosition.getInt((java.lang.Object)$$0);
+        return net.minecraft.commands.arguments.NbtPathArgument.ERROR_NOTHING_FOUND.create((java.lang.Object)this.original.substring(0, $$1));
     }
 
     public java.lang.String toString() {