--- net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -73,27 +73,27 @@
     public boolean hasAdvancements;
     public boolean usesSelectors;
 
-    public net.minecraft.commands.arguments.selector.EntitySelectorParser(com.mojang.brigadier.StringReader reader) {
-        this(reader, true);
+    public net.minecraft.commands.arguments.selector.EntitySelectorParser(com.mojang.brigadier.StringReader $$0) {
+        this($$0, true);
     }
 
-    public net.minecraft.commands.arguments.selector.EntitySelectorParser(com.mojang.brigadier.StringReader reader, boolean allowSelectors) {
+    public net.minecraft.commands.arguments.selector.EntitySelectorParser(com.mojang.brigadier.StringReader $$02, boolean $$1) {
         this.distance = net.minecraft.advancements.critereon.MinMaxBounds$Doubles.ANY;
         this.level = net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY;
         this.rotX = net.minecraft.advancements.critereon.WrappedMinMaxBounds.ANY;
         this.rotY = net.minecraft.advancements.critereon.WrappedMinMaxBounds.ANY;
-        this.predicate = entity -> true;
+        this.predicate = $$0 -> true;
         this.order = ORDER_ARBITRARY;
         this.suggestions = SUGGEST_NOTHING;
-        this.reader = reader;
-        this.allowSelectors = allowSelectors;
+        this.reader = $$02;
+        this.allowSelectors = $$1;
     }
 
     public net.minecraft.commands.arguments.selector.EntitySelector getSelector() {
         java.util.function.Function $$5;
         net.minecraft.world.phys.AABB $$3;
         if (this.deltaX != null || this.deltaY != null || this.deltaZ != null) {
-            net.minecraft.world.phys.AABB $$0 = this.createAabb(this.deltaX == null ? 0.0 : this.deltaX, this.deltaY == null ? 0.0 : this.deltaY, this.deltaZ == null ? 0.0 : this.deltaZ);
+            net.minecraft.world.phys.AABB $$02 = this.createAabb(this.deltaX == null ? 0.0 : this.deltaX, this.deltaY == null ? 0.0 : this.deltaY, this.deltaZ == null ? 0.0 : this.deltaZ);
         } else if (this.distance.getMax() != null) {
             double $$1 = (java.lang.Double)this.distance.getMax();
             net.minecraft.world.phys.AABB $$2 = new net.minecraft.world.phys.AABB(-$$1, -$$1, -$$1, $$1 + 1.0, $$1 + 1.0, $$1 + 1.0);
@@ -101,24 +101,24 @@
             $$3 = null;
         }
         if (this.x == null && this.y == null && this.z == null) {
-            java.util.function.Function $$4 = vector -> vector;
+            java.util.function.Function $$4 = $$0 -> $$0;
         } else {
-            $$5 = vector -> new net.minecraft.world.phys.Vec3(this.x == null ? vector.x : this.x, this.y == null ? vector.y : this.y, this.z == null ? vector.z : this.z);
+            $$5 = $$0 -> new net.minecraft.world.phys.Vec3(this.x == null ? $$0.x : this.x, this.y == null ? $$0.y : this.y, this.z == null ? $$0.z : this.z);
         }
         return new net.minecraft.commands.arguments.selector.EntitySelector(this.maxResults, this.includesEntities, this.worldLimited, this.predicate, this.distance, $$5, $$3, this.order, this.currentEntity, this.playerName, this.entityUUID, this.type, this.usesSelectors);
     }
 
-    public net.minecraft.world.phys.AABB createAabb(double sizeX, double sizeY, double sizeZ) {
-        boolean bl = sizeX < 0.0;
-        boolean bl2 = sizeY < 0.0;
-        boolean bl3 = sizeZ < 0.0;
-        double d = bl ? sizeX : 0.0;
-        double d2 = bl2 ? sizeY : 0.0;
-        double d3 = bl3 ? sizeZ : 0.0;
-        double d4 = (bl ? 0.0 : sizeX) + 1.0;
-        double d5 = (bl2 ? 0.0 : sizeY) + 1.0;
-        double d6 = (bl3 ? 0.0 : sizeZ) + 1.0;
-        return new net.minecraft.world.phys.AABB(d, d2, d3, d4, d5, d6);
+    public net.minecraft.world.phys.AABB createAabb(double $$0, double $$1, double $$2) {
+        boolean $$3 = $$0 < 0.0;
+        boolean $$4 = $$1 < 0.0;
+        boolean $$5 = $$2 < 0.0;
+        double $$6 = $$3 ? $$0 : 0.0;
+        double $$7 = $$4 ? $$1 : 0.0;
+        double $$8 = $$5 ? $$2 : 0.0;
+        double $$9 = ($$3 ? 0.0 : $$0) + 1.0;
+        double $$10 = ($$4 ? 0.0 : $$1) + 1.0;
+        double $$11 = ($$5 ? 0.0 : $$2) + 1.0;
+        return new net.minecraft.world.phys.AABB($$6, $$7, $$8, $$9, $$10, $$11);
     }
 
     public void finalizePredicates() {
@@ -138,15 +138,15 @@
         }
     }
 
-    public java.util.function.Predicate<net.minecraft.world.entity.Entity> createRotationPredicate(net.minecraft.advancements.critereon.WrappedMinMaxBounds angleBounds, java.util.function.ToDoubleFunction<net.minecraft.world.entity.Entity> angleFunction) {
-        double d = net.minecraft.util.Mth.wrapDegrees((float)(angleBounds.getMin() == null ? 0.0f : angleBounds.getMin().floatValue()));
-        double d2 = net.minecraft.util.Mth.wrapDegrees((float)(angleBounds.getMax() == null ? 359.0f : angleBounds.getMax().floatValue()));
+    public java.util.function.Predicate<net.minecraft.world.entity.Entity> createRotationPredicate(net.minecraft.advancements.critereon.WrappedMinMaxBounds $$0, java.util.function.ToDoubleFunction<net.minecraft.world.entity.Entity> $$1) {
+        double $$2 = net.minecraft.util.Mth.wrapDegrees((float)($$0.getMin() == null ? 0.0f : $$0.getMin().floatValue()));
+        double $$32 = net.minecraft.util.Mth.wrapDegrees((float)($$0.getMax() == null ? 359.0f : $$0.getMax().floatValue()));
         return $$3 -> {
-            double $$4 = net.minecraft.util.Mth.wrapDegrees((double)angleFunction.applyAsDouble($$3));
-            if (d > d2) {
-                return $$4 >= d || $$4 <= d2;
+            double $$4 = net.minecraft.util.Mth.wrapDegrees((double)$$1.applyAsDouble($$3));
+            if ($$2 > $$32) {
+                return $$4 >= $$2 || $$4 <= $$32;
             }
-            return $$4 >= d && $$4 <= d2;
+            return $$4 >= $$2 && $$4 <= $$32;
         };
     }
 
@@ -274,8 +274,8 @@
         return this.reader;
     }
 
-    public void addPredicate(java.util.function.Predicate<net.minecraft.world.entity.Entity> predicate) {
-        this.predicate = this.predicate.and(predicate);
+    public void addPredicate(java.util.function.Predicate<net.minecraft.world.entity.Entity> $$0) {
+        this.predicate = this.predicate.and($$0);
     }
 
     public void setWorldLimited() {
@@ -294,24 +294,24 @@
         return this.level;
     }
 
-    public void setLevel(net.minecraft.advancements.critereon.MinMaxBounds$Ints level) {
-        this.level = level;
+    public void setLevel(net.minecraft.advancements.critereon.MinMaxBounds$Ints $$0) {
+        this.level = $$0;
     }
 
     public net.minecraft.advancements.critereon.WrappedMinMaxBounds getRotX() {
         return this.rotX;
     }
 
-    public void setRotX(net.minecraft.advancements.critereon.WrappedMinMaxBounds rotX) {
-        this.rotX = rotX;
+    public void setRotX(net.minecraft.advancements.critereon.WrappedMinMaxBounds $$0) {
+        this.rotX = $$0;
     }
 
     public net.minecraft.advancements.critereon.WrappedMinMaxBounds getRotY() {
         return this.rotY;
     }
 
-    public void setRotY(net.minecraft.advancements.critereon.WrappedMinMaxBounds rotY) {
-        this.rotY = rotY;
+    public void setRotY(net.minecraft.advancements.critereon.WrappedMinMaxBounds $$0) {
+        this.rotY = $$0;
     }
 
     @javax.annotation.Nullable
@@ -329,28 +329,28 @@
         return this.z;
     }
 
-    public void setX(double x) {
-        this.x = x;
+    public void setX(double $$0) {
+        this.x = $$0;
     }
 
-    public void setY(double y) {
-        this.y = y;
+    public void setY(double $$0) {
+        this.y = $$0;
     }
 
-    public void setZ(double z) {
-        this.z = z;
+    public void setZ(double $$0) {
+        this.z = $$0;
     }
 
-    public void setDeltaX(double deltaX) {
-        this.deltaX = deltaX;
+    public void setDeltaX(double $$0) {
+        this.deltaX = $$0;
     }
 
-    public void setDeltaY(double deltaY) {
-        this.deltaY = deltaY;
+    public void setDeltaY(double $$0) {
+        this.deltaY = $$0;
     }
 
-    public void setDeltaZ(double deltaZ) {
-        this.deltaZ = deltaZ;
+    public void setDeltaZ(double $$0) {
+        this.deltaZ = $$0;
     }
 
     @javax.annotation.Nullable
@@ -368,20 +368,20 @@
         return this.deltaZ;
     }
 
-    public void setMaxResults(int maxResults) {
-        this.maxResults = maxResults;
+    public void setMaxResults(int $$0) {
+        this.maxResults = $$0;
     }
 
-    public void setIncludesEntities(boolean includesEntities) {
-        this.includesEntities = includesEntities;
+    public void setIncludesEntities(boolean $$0) {
+        this.includesEntities = $$0;
     }
 
     public java.util.function.BiConsumer<net.minecraft.world.phys.Vec3, java.util.List<? extends net.minecraft.world.entity.Entity>> getOrder() {
         return this.order;
     }
 
-    public void setOrder(java.util.function.BiConsumer<net.minecraft.world.phys.Vec3, java.util.List<? extends net.minecraft.world.entity.Entity>> order) {
-        this.order = order;
+    public void setOrder(java.util.function.BiConsumer<net.minecraft.world.phys.Vec3, java.util.List<? extends net.minecraft.world.entity.Entity>> $$0) {
+        this.order = $$0;
     }
 
     public net.minecraft.commands.arguments.selector.EntitySelector parse() throws com.mojang.brigadier.exceptions.CommandSyntaxException {
@@ -400,55 +400,55 @@
         return this.getSelector();
     }
 
-    public static void fillSelectorSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder builder) {
-        builder.suggest("@p", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.nearestPlayer"));
-        builder.suggest("@a", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.allPlayers"));
-        builder.suggest("@r", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.randomPlayer"));
-        builder.suggest("@s", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.self"));
-        builder.suggest("@e", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.allEntities"));
+    public static void fillSelectorSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0) {
+        $$0.suggest("@p", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.nearestPlayer"));
+        $$0.suggest("@a", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.allPlayers"));
+        $$0.suggest("@r", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.randomPlayer"));
+        $$0.suggest("@s", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.self"));
+        $$0.suggest("@e", (com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.allEntities"));
     }
 
-    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestNameOrSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer) {
-        consumer.accept((java.lang.Object)builder);
+    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestNameOrSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
+        $$1.accept((java.lang.Object)$$0);
         if (this.allowSelectors) {
-            net.minecraft.commands.arguments.selector.EntitySelectorParser.fillSelectorSuggestions((com.mojang.brigadier.suggestion.SuggestionsBuilder)builder);
+            net.minecraft.commands.arguments.selector.EntitySelectorParser.fillSelectorSuggestions((com.mojang.brigadier.suggestion.SuggestionsBuilder)$$0);
         }
-        return builder.buildFuture();
+        return $$0.buildFuture();
     }
 
-    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestName(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer) {
-        com.mojang.brigadier.suggestion.SuggestionsBuilder suggestionsBuilder = builder.createOffset(this.startPosition);
-        consumer.accept((java.lang.Object)suggestionsBuilder);
-        return builder.add(suggestionsBuilder).buildFuture();
+    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestName(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
+        com.mojang.brigadier.suggestion.SuggestionsBuilder $$2 = $$0.createOffset(this.startPosition);
+        $$1.accept((java.lang.Object)$$2);
+        return $$0.add($$2).buildFuture();
     }
 
-    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer) {
-        com.mojang.brigadier.suggestion.SuggestionsBuilder suggestionsBuilder = builder.createOffset(builder.getStart() - 1);
-        net.minecraft.commands.arguments.selector.EntitySelectorParser.fillSelectorSuggestions((com.mojang.brigadier.suggestion.SuggestionsBuilder)suggestionsBuilder);
-        builder.add(suggestionsBuilder);
-        return builder.buildFuture();
+    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
+        com.mojang.brigadier.suggestion.SuggestionsBuilder $$2 = $$0.createOffset($$0.getStart() - 1);
+        net.minecraft.commands.arguments.selector.EntitySelectorParser.fillSelectorSuggestions((com.mojang.brigadier.suggestion.SuggestionsBuilder)$$2);
+        $$0.add($$2);
+        return $$0.buildFuture();
     }
 
-    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestOpenOptions(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer) {
-        builder.suggest(java.lang.String.valueOf((char)'['));
-        return builder.buildFuture();
+    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestOpenOptions(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
+        $$0.suggest(java.lang.String.valueOf((char)'['));
+        return $$0.buildFuture();
     }
 
-    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestOptionsKeyOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer) {
-        builder.suggest(java.lang.String.valueOf((char)']'));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.suggestNames((net.minecraft.commands.arguments.selector.EntitySelectorParser)this, (com.mojang.brigadier.suggestion.SuggestionsBuilder)builder);
-        return builder.buildFuture();
+    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestOptionsKeyOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
+        $$0.suggest(java.lang.String.valueOf((char)']'));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.suggestNames((net.minecraft.commands.arguments.selector.EntitySelectorParser)this, (com.mojang.brigadier.suggestion.SuggestionsBuilder)$$0);
+        return $$0.buildFuture();
     }
 
-    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestOptionsKey(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer) {
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.suggestNames((net.minecraft.commands.arguments.selector.EntitySelectorParser)this, (com.mojang.brigadier.suggestion.SuggestionsBuilder)builder);
-        return builder.buildFuture();
+    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestOptionsKey(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.suggestNames((net.minecraft.commands.arguments.selector.EntitySelectorParser)this, (com.mojang.brigadier.suggestion.SuggestionsBuilder)$$0);
+        return $$0.buildFuture();
     }
 
-    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestOptionsNextOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer) {
-        builder.suggest(java.lang.String.valueOf((char)','));
-        builder.suggest(java.lang.String.valueOf((char)']'));
-        return builder.buildFuture();
+    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestOptionsNextOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
+        $$0.suggest(java.lang.String.valueOf((char)','));
+        $$0.suggest(java.lang.String.valueOf((char)']'));
+        return $$0.buildFuture();
     }
 
     public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> suggestEquals(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
@@ -460,80 +460,80 @@
         return this.currentEntity;
     }
 
-    public void setSuggestions(java.util.function.BiFunction<com.mojang.brigadier.suggestion.SuggestionsBuilder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder>, java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions>> suggestionHandler) {
-        this.suggestions = suggestionHandler;
+    public void setSuggestions(java.util.function.BiFunction<com.mojang.brigadier.suggestion.SuggestionsBuilder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder>, java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions>> $$0) {
+        this.suggestions = $$0;
     }
 
-    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> fillSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> consumer) {
-        return (java.util.concurrent.CompletableFuture)this.suggestions.apply((java.lang.Object)builder.createOffset(this.reader.getCursor()), consumer);
+    public java.util.concurrent.CompletableFuture<com.mojang.brigadier.suggestion.Suggestions> fillSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer<com.mojang.brigadier.suggestion.SuggestionsBuilder> $$1) {
+        return (java.util.concurrent.CompletableFuture)this.suggestions.apply((java.lang.Object)$$0.createOffset(this.reader.getCursor()), $$1);
     }
 
     public boolean hasNameEquals() {
         return this.hasNameEquals;
     }
 
-    public void setHasNameEquals(boolean hasNameEquals) {
-        this.hasNameEquals = hasNameEquals;
+    public void setHasNameEquals(boolean $$0) {
+        this.hasNameEquals = $$0;
     }
 
     public boolean hasNameNotEquals() {
         return this.hasNameNotEquals;
     }
 
-    public void setHasNameNotEquals(boolean hasNameNotEquals) {
-        this.hasNameNotEquals = hasNameNotEquals;
+    public void setHasNameNotEquals(boolean $$0) {
+        this.hasNameNotEquals = $$0;
     }
 
     public boolean isLimited() {
         return this.isLimited;
     }
 
-    public void setLimited(boolean isLimited) {
-        this.isLimited = isLimited;
+    public void setLimited(boolean $$0) {
+        this.isLimited = $$0;
     }
 
     public boolean isSorted() {
         return this.isSorted;
     }
 
-    public void setSorted(boolean isSorted) {
-        this.isSorted = isSorted;
+    public void setSorted(boolean $$0) {
+        this.isSorted = $$0;
     }
 
     public boolean hasGamemodeEquals() {
         return this.hasGamemodeEquals;
     }
 
-    public void setHasGamemodeEquals(boolean hasGamemodeEquals) {
-        this.hasGamemodeEquals = hasGamemodeEquals;
+    public void setHasGamemodeEquals(boolean $$0) {
+        this.hasGamemodeEquals = $$0;
     }
 
     public boolean hasGamemodeNotEquals() {
         return this.hasGamemodeNotEquals;
     }
 
-    public void setHasGamemodeNotEquals(boolean hasGamemodeNotEquals) {
-        this.hasGamemodeNotEquals = hasGamemodeNotEquals;
+    public void setHasGamemodeNotEquals(boolean $$0) {
+        this.hasGamemodeNotEquals = $$0;
     }
 
     public boolean hasTeamEquals() {
         return this.hasTeamEquals;
     }
 
-    public void setHasTeamEquals(boolean hasTeamEquals) {
-        this.hasTeamEquals = hasTeamEquals;
+    public void setHasTeamEquals(boolean $$0) {
+        this.hasTeamEquals = $$0;
     }
 
     public boolean hasTeamNotEquals() {
         return this.hasTeamNotEquals;
     }
 
-    public void setHasTeamNotEquals(boolean hasTeamNotEquals) {
-        this.hasTeamNotEquals = hasTeamNotEquals;
+    public void setHasTeamNotEquals(boolean $$0) {
+        this.hasTeamNotEquals = $$0;
     }
 
-    public void limitToType(net.minecraft.world.entity.EntityType<?> type) {
-        this.type = type;
+    public void limitToType(net.minecraft.world.entity.EntityType<?> $$0) {
+        this.type = $$0;
     }
 
     public void setTypeLimitedInversely() {
@@ -552,58 +552,58 @@
         return this.hasScores;
     }
 
-    public void setHasScores(boolean hasScores) {
-        this.hasScores = hasScores;
+    public void setHasScores(boolean $$0) {
+        this.hasScores = $$0;
     }
 
     public boolean hasAdvancements() {
         return this.hasAdvancements;
     }
 
-    public void setHasAdvancements(boolean hasAdvancements) {
-        this.hasAdvancements = hasAdvancements;
+    public void setHasAdvancements(boolean $$0) {
+        this.hasAdvancements = $$0;
     }
 
-    public static /* synthetic */ java.util.concurrent.CompletableFuture lambda$static$8(com.mojang.brigadier.suggestion.SuggestionsBuilder builder, java.util.function.Consumer consumer) {
-        return builder.buildFuture();
+    public static /* synthetic */ java.util.concurrent.CompletableFuture lambda$static$8(com.mojang.brigadier.suggestion.SuggestionsBuilder $$0, java.util.function.Consumer $$1) {
+        return $$0.buildFuture();
     }
 
-    public static /* synthetic */ void lambda$static$7(net.minecraft.world.phys.Vec3 vector, java.util.List entities) {
-        java.util.Collections.shuffle((java.util.List)entities);
+    public static /* synthetic */ void lambda$static$7(net.minecraft.world.phys.Vec3 $$0, java.util.List $$1) {
+        java.util.Collections.shuffle((java.util.List)$$1);
     }
 
-    public static /* synthetic */ void lambda$static$6(net.minecraft.world.phys.Vec3 vector, java.util.List entities) {
-        entities.sort(($$1, $$2) -> com.google.common.primitives.Doubles.compare((double)$$2.distanceToSqr(vector), (double)$$1.distanceToSqr(vector)));
+    public static /* synthetic */ void lambda$static$6(net.minecraft.world.phys.Vec3 $$0, java.util.List $$12) {
+        $$12.sort(($$1, $$2) -> com.google.common.primitives.Doubles.compare((double)$$2.distanceToSqr($$0), (double)$$1.distanceToSqr($$0)));
     }
 
-    public static /* synthetic */ void lambda$static$4(net.minecraft.world.phys.Vec3 pos, java.util.List entities) {
-        entities.sort(($$1, $$2) -> com.google.common.primitives.Doubles.compare((double)$$1.distanceToSqr(pos), (double)$$2.distanceToSqr(pos)));
+    public static /* synthetic */ void lambda$static$4(net.minecraft.world.phys.Vec3 $$0, java.util.List $$12) {
+        $$12.sort(($$1, $$2) -> com.google.common.primitives.Doubles.compare((double)$$1.distanceToSqr($$0), (double)$$2.distanceToSqr($$0)));
     }
 
-    public static /* synthetic */ void lambda$static$2(net.minecraft.world.phys.Vec3 pos, java.util.List entities) {
+    public static /* synthetic */ void lambda$static$2(net.minecraft.world.phys.Vec3 $$0, java.util.List $$1) {
     }
 
-    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$1(java.lang.Object value) {
-        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.valueless", (java.lang.Object[])new java.lang.Object[]{value});
+    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$1(java.lang.Object $$0) {
+        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.valueless", (java.lang.Object[])new java.lang.Object[]{$$0});
     }
 
-    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$0(java.lang.Object type) {
-        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.unknown", (java.lang.Object[])new java.lang.Object[]{type});
+    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$0(java.lang.Object $$0) {
+        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.unknown", (java.lang.Object[])new java.lang.Object[]{$$0});
     }
 
     static {
         ERROR_INVALID_NAME_OR_UUID = new com.mojang.brigadier.exceptions.SimpleCommandExceptionType((com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.invalid"));
-        ERROR_UNKNOWN_SELECTOR_TYPE = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType(type -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.unknown", (java.lang.Object[])new java.lang.Object[]{type}));
+        ERROR_UNKNOWN_SELECTOR_TYPE = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType($$0 -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.unknown", (java.lang.Object[])new java.lang.Object[]{$$0}));
         ERROR_SELECTORS_NOT_ALLOWED = new com.mojang.brigadier.exceptions.SimpleCommandExceptionType((com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.not_allowed"));
         ERROR_MISSING_SELECTOR_TYPE = new com.mojang.brigadier.exceptions.SimpleCommandExceptionType((com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.selector.missing"));
         ERROR_EXPECTED_END_OF_OPTIONS = new com.mojang.brigadier.exceptions.SimpleCommandExceptionType((com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.unterminated"));
-        ERROR_EXPECTED_OPTION_VALUE = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType(value -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.valueless", (java.lang.Object[])new java.lang.Object[]{value}));
-        ORDER_ARBITRARY = (pos, entities) -> {}
+        ERROR_EXPECTED_OPTION_VALUE = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType($$0 -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.valueless", (java.lang.Object[])new java.lang.Object[]{$$0}));
+        ORDER_ARBITRARY = ($$0, $$1) -> {}
 ;
-        ORDER_NEAREST = (pos, entities) -> entities.sort(($$1, $$2) -> com.google.common.primitives.Doubles.compare((double)$$1.distanceToSqr(pos), (double)$$2.distanceToSqr(pos)));
-        ORDER_FURTHEST = (vector, entities) -> entities.sort(($$1, $$2) -> com.google.common.primitives.Doubles.compare((double)$$2.distanceToSqr(vector), (double)$$1.distanceToSqr(vector)));
-        ORDER_RANDOM = (vector, entities) -> java.util.Collections.shuffle((java.util.List)entities);
-        SUGGEST_NOTHING = (builder, consumer) -> builder.buildFuture();
+        ORDER_NEAREST = ($$0, $$12) -> $$12.sort(($$1, $$2) -> com.google.common.primitives.Doubles.compare((double)$$1.distanceToSqr($$0), (double)$$2.distanceToSqr($$0)));
+        ORDER_FURTHEST = ($$0, $$12) -> $$12.sort(($$1, $$2) -> com.google.common.primitives.Doubles.compare((double)$$2.distanceToSqr($$0), (double)$$1.distanceToSqr($$0)));
+        ORDER_RANDOM = ($$0, $$1) -> java.util.Collections.shuffle((java.util.List)$$1);
+        SUGGEST_NOTHING = ($$0, $$1) -> $$0.buildFuture();
     }
 }
 