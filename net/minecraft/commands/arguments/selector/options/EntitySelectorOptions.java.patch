--- net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -18,86 +18,86 @@
     public net.minecraft.commands.arguments.selector.options.EntitySelectorOptions() {
     }
 
-    public static void register(java.lang.String id, net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier handler, java.util.function.Predicate<net.minecraft.commands.arguments.selector.EntitySelectorParser> predicate, net.minecraft.network.chat.Component tooltip) {
-        OPTIONS.put((java.lang.Object)id, (java.lang.Object)new net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option(handler, predicate, tooltip));
+    public static void register(java.lang.String $$0, net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier $$1, java.util.function.Predicate<net.minecraft.commands.arguments.selector.EntitySelectorParser> $$2, net.minecraft.network.chat.Component $$3) {
+        OPTIONS.put((java.lang.Object)$$0, (java.lang.Object)new net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option($$1, $$2, $$3));
     }
 
     public static void bootStrap() {
         if (!OPTIONS.isEmpty()) {
             return;
         }
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"name", parser -> {
-            int n = parser.getReader().getCursor();
-            boolean bl = parser.shouldInvertValue();
-            java.lang.String string = parser.getReader().readString();
-            if (parser.hasNameNotEquals() && !bl) {
-                parser.getReader().setCursor(n);
-                throw ERROR_INAPPLICABLE_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader(), (java.lang.Object)"name");
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"name", $$0 -> {
+            int $$1 = $$0.getReader().getCursor();
+            boolean $$22 = $$0.shouldInvertValue();
+            java.lang.String $$3 = $$0.getReader().readString();
+            if ($$0.hasNameNotEquals() && !$$22) {
+                $$0.getReader().setCursor($$1);
+                throw ERROR_INAPPLICABLE_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader(), (java.lang.Object)"name");
             }
-            if (bl) {
-                parser.setHasNameNotEquals(true);
+            if ($$22) {
+                $$0.setHasNameNotEquals(true);
             } else {
-                parser.setHasNameEquals(true);
+                $$0.setHasNameEquals(true);
             }
-            parser.addPredicate($$2 -> $$2.getName().getString().equals((java.lang.Object)string) != bl);
-        }, parser -> !parser.hasNameEquals(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.name.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"distance", parser -> {
-            int n = parser.getReader().getCursor();
-            net.minecraft.advancements.critereon.MinMaxBounds$Doubles doubles = net.minecraft.advancements.critereon.MinMaxBounds$Doubles.fromReader((com.mojang.brigadier.StringReader)parser.getReader());
-            if (doubles.getMin() != null && (java.lang.Double)doubles.getMin() < 0.0 || doubles.getMax() != null && (java.lang.Double)doubles.getMax() < 0.0) {
-                parser.getReader().setCursor(n);
-                throw ERROR_RANGE_NEGATIVE.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader());
+            $$0.addPredicate($$2 -> $$2.getName().getString().equals((java.lang.Object)$$3) != $$22);
+        }, $$0 -> !$$0.hasNameEquals(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.name.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"distance", $$0 -> {
+            int $$1 = $$0.getReader().getCursor();
+            net.minecraft.advancements.critereon.MinMaxBounds$Doubles $$2 = net.minecraft.advancements.critereon.MinMaxBounds$Doubles.fromReader((com.mojang.brigadier.StringReader)$$0.getReader());
+            if ($$2.getMin() != null && (java.lang.Double)$$2.getMin() < 0.0 || $$2.getMax() != null && (java.lang.Double)$$2.getMax() < 0.0) {
+                $$0.getReader().setCursor($$1);
+                throw ERROR_RANGE_NEGATIVE.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader());
             }
-            parser.setDistance(doubles);
-            parser.setWorldLimited();
-        }, parser -> parser.getDistance().isAny(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.distance.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"level", parser -> {
-            int n = parser.getReader().getCursor();
-            net.minecraft.advancements.critereon.MinMaxBounds$Ints ints = net.minecraft.advancements.critereon.MinMaxBounds$Ints.fromReader((com.mojang.brigadier.StringReader)parser.getReader());
-            if (ints.getMin() != null && (java.lang.Integer)ints.getMin() < 0 || ints.getMax() != null && (java.lang.Integer)ints.getMax() < 0) {
-                parser.getReader().setCursor(n);
-                throw ERROR_LEVEL_NEGATIVE.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader());
+            $$0.setDistance($$2);
+            $$0.setWorldLimited();
+        }, $$0 -> $$0.getDistance().isAny(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.distance.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"level", $$0 -> {
+            int $$1 = $$0.getReader().getCursor();
+            net.minecraft.advancements.critereon.MinMaxBounds$Ints $$2 = net.minecraft.advancements.critereon.MinMaxBounds$Ints.fromReader((com.mojang.brigadier.StringReader)$$0.getReader());
+            if ($$2.getMin() != null && (java.lang.Integer)$$2.getMin() < 0 || $$2.getMax() != null && (java.lang.Integer)$$2.getMax() < 0) {
+                $$0.getReader().setCursor($$1);
+                throw ERROR_LEVEL_NEGATIVE.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader());
             }
-            parser.setLevel(ints);
-            parser.setIncludesEntities(false);
-        }, parser -> parser.getLevel().isAny(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.level.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"x", parser -> {
-            parser.setWorldLimited();
-            parser.setX(parser.getReader().readDouble());
-        }, parser -> parser.getX() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.x.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"y", parser -> {
-            parser.setWorldLimited();
-            parser.setY(parser.getReader().readDouble());
-        }, parser -> parser.getY() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.y.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"z", parser -> {
-            parser.setWorldLimited();
-            parser.setZ(parser.getReader().readDouble());
-        }, parser -> parser.getZ() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.z.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"dx", parser -> {
-            parser.setWorldLimited();
-            parser.setDeltaX(parser.getReader().readDouble());
-        }, parser -> parser.getDeltaX() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.dx.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"dy", parser -> {
-            parser.setWorldLimited();
-            parser.setDeltaY(parser.getReader().readDouble());
-        }, parser -> parser.getDeltaY() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.dy.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"dz", parser -> {
-            parser.setWorldLimited();
-            parser.setDeltaZ(parser.getReader().readDouble());
-        }, parser -> parser.getDeltaZ() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.dz.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"x_rotation", parser -> parser.setRotX(net.minecraft.advancements.critereon.WrappedMinMaxBounds.fromReader((com.mojang.brigadier.StringReader)parser.getReader(), (boolean)true, net.minecraft.util.Mth::wrapDegrees)), $$0 -> $$0.getRotX() == net.minecraft.advancements.critereon.WrappedMinMaxBounds.ANY, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.x_rotation.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"y_rotation", parser -> parser.setRotY(net.minecraft.advancements.critereon.WrappedMinMaxBounds.fromReader((com.mojang.brigadier.StringReader)parser.getReader(), (boolean)true, net.minecraft.util.Mth::wrapDegrees)), $$0 -> $$0.getRotY() == net.minecraft.advancements.critereon.WrappedMinMaxBounds.ANY, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.y_rotation.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"limit", parser -> {
-            int n = parser.getReader().getCursor();
-            int n2 = parser.getReader().readInt();
-            if (n2 < 1) {
-                parser.getReader().setCursor(n);
-                throw ERROR_LIMIT_TOO_SMALL.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader());
+            $$0.setLevel($$2);
+            $$0.setIncludesEntities(false);
+        }, $$0 -> $$0.getLevel().isAny(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.level.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"x", $$0 -> {
+            $$0.setWorldLimited();
+            $$0.setX($$0.getReader().readDouble());
+        }, $$0 -> $$0.getX() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.x.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"y", $$0 -> {
+            $$0.setWorldLimited();
+            $$0.setY($$0.getReader().readDouble());
+        }, $$0 -> $$0.getY() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.y.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"z", $$0 -> {
+            $$0.setWorldLimited();
+            $$0.setZ($$0.getReader().readDouble());
+        }, $$0 -> $$0.getZ() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.z.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"dx", $$0 -> {
+            $$0.setWorldLimited();
+            $$0.setDeltaX($$0.getReader().readDouble());
+        }, $$0 -> $$0.getDeltaX() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.dx.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"dy", $$0 -> {
+            $$0.setWorldLimited();
+            $$0.setDeltaY($$0.getReader().readDouble());
+        }, $$0 -> $$0.getDeltaY() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.dy.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"dz", $$0 -> {
+            $$0.setWorldLimited();
+            $$0.setDeltaZ($$0.getReader().readDouble());
+        }, $$0 -> $$0.getDeltaZ() == null, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.dz.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"x_rotation", $$0 -> $$0.setRotX(net.minecraft.advancements.critereon.WrappedMinMaxBounds.fromReader((com.mojang.brigadier.StringReader)$$0.getReader(), (boolean)true, net.minecraft.util.Mth::wrapDegrees)), $$0 -> $$0.getRotX() == net.minecraft.advancements.critereon.WrappedMinMaxBounds.ANY, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.x_rotation.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"y_rotation", $$0 -> $$0.setRotY(net.minecraft.advancements.critereon.WrappedMinMaxBounds.fromReader((com.mojang.brigadier.StringReader)$$0.getReader(), (boolean)true, net.minecraft.util.Mth::wrapDegrees)), $$0 -> $$0.getRotY() == net.minecraft.advancements.critereon.WrappedMinMaxBounds.ANY, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.y_rotation.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"limit", $$0 -> {
+            int $$1 = $$0.getReader().getCursor();
+            int $$2 = $$0.getReader().readInt();
+            if ($$2 < 1) {
+                $$0.getReader().setCursor($$1);
+                throw ERROR_LIMIT_TOO_SMALL.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader());
             }
-            parser.setMaxResults(n2);
-            parser.setLimited(true);
-        }, parser -> !parser.isCurrentEntity() && !parser.isLimited(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.limit.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"sort", parser -> {
+            $$0.setMaxResults($$2);
+            $$0.setLimited(true);
+        }, $$0 -> !$$0.isCurrentEntity() && !$$0.isLimited(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.limit.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"sort", $$0 -> {
             /*
              * This method has failed to decompile.  When submitting a bug report, please provide this stack trace, and (if you hold appropriate legal rights) the relevant class file.
 
@@ -156,11 +156,11 @@
              *     at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
              */
             throw new IllegalStateException("Decompilation failed");
-        }, parser -> !parser.isCurrentEntity() && !parser.isSorted(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.sort.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"gamemode", parser -> {
-            parser.setSuggestions(($$1, $$2) -> {
+        }, $$0 -> !$$0.isCurrentEntity() && !$$0.isSorted(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.sort.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"gamemode", $$0 -> {
+            $$0.setSuggestions(($$1, $$2) -> {
                 java.lang.String $$3 = $$1.getRemaining().toLowerCase(java.util.Locale.ROOT);
-                boolean $$4 = !parser.hasGamemodeNotEquals();
+                boolean $$4 = !$$0.hasGamemodeNotEquals();
                 boolean $$5 = true;
                 if (!$$3.isEmpty()) {
                     if ($$3.charAt(0) == '!') {
@@ -180,213 +180,213 @@
                 }
                 return $$1.buildFuture();
             });
-            int n = parser.getReader().getCursor();
-            boolean bl = parser.shouldInvertValue();
-            if (parser.hasGamemodeNotEquals() && !bl) {
-                parser.getReader().setCursor(n);
-                throw ERROR_INAPPLICABLE_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader(), (java.lang.Object)"gamemode");
+            int $$12 = $$0.getReader().getCursor();
+            boolean $$22 = $$0.shouldInvertValue();
+            if ($$0.hasGamemodeNotEquals() && !$$22) {
+                $$0.getReader().setCursor($$12);
+                throw ERROR_INAPPLICABLE_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader(), (java.lang.Object)"gamemode");
             }
-            java.lang.String string = parser.getReader().readUnquotedString();
-            net.minecraft.world.level.GameType gameType = net.minecraft.world.level.GameType.byName((java.lang.String)string, null);
-            if (gameType == null) {
-                parser.getReader().setCursor(n);
-                throw ERROR_GAME_MODE_INVALID.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader(), (java.lang.Object)string);
+            java.lang.String $$3 = $$0.getReader().readUnquotedString();
+            net.minecraft.world.level.GameType $$4 = net.minecraft.world.level.GameType.byName((java.lang.String)$$3, null);
+            if ($$4 == null) {
+                $$0.getReader().setCursor($$12);
+                throw ERROR_GAME_MODE_INVALID.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader(), (java.lang.Object)$$3);
             }
-            parser.setIncludesEntities(false);
-            parser.addPredicate($$2 -> {
+            $$0.setIncludesEntities(false);
+            $$0.addPredicate($$2 -> {
                 if (!($$2 instanceof net.minecraft.server.level.ServerPlayer)) {
                     return false;
                 }
                 net.minecraft.world.level.GameType $$3 = ((net.minecraft.server.level.ServerPlayer)$$2).gameMode.getGameModeForPlayer();
-                return bl ? $$3 != gameType : $$3 == gameType;
+                return $$22 ? $$3 != $$4 : $$3 == $$4;
             });
-            if (bl) {
-                parser.setHasGamemodeNotEquals(true);
+            if ($$22) {
+                $$0.setHasGamemodeNotEquals(true);
             } else {
-                parser.setHasGamemodeEquals(true);
+                $$0.setHasGamemodeEquals(true);
             }
-        }, parser -> !parser.hasGamemodeEquals(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.gamemode.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"team", parser -> {
-            boolean bl = parser.shouldInvertValue();
-            java.lang.String string = parser.getReader().readUnquotedString();
-            parser.addPredicate($$2 -> {
+        }, $$0 -> !$$0.hasGamemodeEquals(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.gamemode.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"team", $$0 -> {
+            boolean $$1 = $$0.shouldInvertValue();
+            java.lang.String $$22 = $$0.getReader().readUnquotedString();
+            $$0.addPredicate($$2 -> {
                 if (!($$2 instanceof net.minecraft.world.entity.LivingEntity)) {
                     return false;
                 }
                 net.minecraft.world.scores.Team $$3 = $$2.getTeam();
                 java.lang.String $$4 = $$3 == null ? "" : $$3.getName();
-                return $$4.equals((java.lang.Object)string) != bl;
+                return $$4.equals((java.lang.Object)$$22) != $$1;
             });
-            if (bl) {
-                parser.setHasTeamNotEquals(true);
+            if ($$1) {
+                $$0.setHasTeamNotEquals(true);
             } else {
-                parser.setHasTeamEquals(true);
+                $$0.setHasTeamEquals(true);
             }
-        }, parser -> !parser.hasTeamEquals(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.team.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"type", parser -> {
-            parser.setSuggestions(($$1, $$2) -> {
+        }, $$0 -> !$$0.hasTeamEquals(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.team.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"type", $$0 -> {
+            $$0.setSuggestions(($$1, $$2) -> {
                 net.minecraft.commands.SharedSuggestionProvider.suggestResource((java.lang.Iterable)net.minecraft.core.Registry.ENTITY_TYPE.keySet(), (com.mojang.brigadier.suggestion.SuggestionsBuilder)$$1, (java.lang.String)java.lang.String.valueOf((char)'!'));
                 net.minecraft.commands.SharedSuggestionProvider.suggestResource((java.util.stream.Stream)net.minecraft.core.Registry.ENTITY_TYPE.getTagNames().map(net.minecraft.tags.TagKey::location), (com.mojang.brigadier.suggestion.SuggestionsBuilder)$$1, (java.lang.String)"!#");
-                if (!parser.isTypeLimitedInversely()) {
+                if (!$$0.isTypeLimitedInversely()) {
                     net.minecraft.commands.SharedSuggestionProvider.suggestResource((java.lang.Iterable)net.minecraft.core.Registry.ENTITY_TYPE.keySet(), (com.mojang.brigadier.suggestion.SuggestionsBuilder)$$1);
                     net.minecraft.commands.SharedSuggestionProvider.suggestResource((java.util.stream.Stream)net.minecraft.core.Registry.ENTITY_TYPE.getTagNames().map(net.minecraft.tags.TagKey::location), (com.mojang.brigadier.suggestion.SuggestionsBuilder)$$1, (java.lang.String)java.lang.String.valueOf((char)'#'));
                 }
                 return $$1.buildFuture();
             });
-            int n = parser.getReader().getCursor();
-            boolean bl = parser.shouldInvertValue();
-            if (parser.isTypeLimitedInversely() && !bl) {
-                parser.getReader().setCursor(n);
-                throw ERROR_INAPPLICABLE_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader(), (java.lang.Object)"type");
+            int $$12 = $$0.getReader().getCursor();
+            boolean $$22 = $$0.shouldInvertValue();
+            if ($$0.isTypeLimitedInversely() && !$$22) {
+                $$0.getReader().setCursor($$12);
+                throw ERROR_INAPPLICABLE_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader(), (java.lang.Object)"type");
             }
-            if (bl) {
-                parser.setTypeLimitedInversely();
+            if ($$22) {
+                $$0.setTypeLimitedInversely();
             }
-            if (parser.isTag()) {
-                net.minecraft.tags.TagKey tagKey = net.minecraft.tags.TagKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.ENTITY_TYPE_REGISTRY, (net.minecraft.resources.ResourceLocation)net.minecraft.resources.ResourceLocation.read((com.mojang.brigadier.StringReader)parser.getReader()));
-                parser.addPredicate($$2 -> $$2.getType().is(tagKey) != bl);
+            if ($$0.isTag()) {
+                net.minecraft.tags.TagKey $$3 = net.minecraft.tags.TagKey.create((net.minecraft.resources.ResourceKey)net.minecraft.core.Registry.ENTITY_TYPE_REGISTRY, (net.minecraft.resources.ResourceLocation)net.minecraft.resources.ResourceLocation.read((com.mojang.brigadier.StringReader)$$0.getReader()));
+                $$0.addPredicate($$2 -> $$2.getType().is($$3) != $$22);
             } else {
-                net.minecraft.resources.ResourceLocation resourceLocation = net.minecraft.resources.ResourceLocation.read((com.mojang.brigadier.StringReader)parser.getReader());
-                net.minecraft.world.entity.EntityType entityType = (net.minecraft.world.entity.EntityType)net.minecraft.core.Registry.ENTITY_TYPE.getOptional(resourceLocation).orElseThrow(() -> {
-                    parser.getReader().setCursor(n);
-                    return ERROR_ENTITY_TYPE_INVALID.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader(), (java.lang.Object)resourceLocation.toString());
+                net.minecraft.resources.ResourceLocation $$4 = net.minecraft.resources.ResourceLocation.read((com.mojang.brigadier.StringReader)$$0.getReader());
+                net.minecraft.world.entity.EntityType $$5 = (net.minecraft.world.entity.EntityType)net.minecraft.core.Registry.ENTITY_TYPE.getOptional($$4).orElseThrow(() -> {
+                    $$0.getReader().setCursor($$12);
+                    return ERROR_ENTITY_TYPE_INVALID.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader(), (java.lang.Object)$$4.toString());
                 });
-                if (java.util.Objects.equals((java.lang.Object)net.minecraft.world.entity.EntityType.PLAYER, (java.lang.Object)entityType) && !bl) {
-                    parser.setIncludesEntities(false);
+                if (java.util.Objects.equals((java.lang.Object)net.minecraft.world.entity.EntityType.PLAYER, (java.lang.Object)$$5) && !$$22) {
+                    $$0.setIncludesEntities(false);
                 }
-                parser.addPredicate($$2 -> java.util.Objects.equals((java.lang.Object)entityType, (java.lang.Object)$$2.getType()) != bl);
-                if (!bl) {
-                    parser.limitToType(entityType);
+                $$0.addPredicate($$2 -> java.util.Objects.equals((java.lang.Object)$$5, (java.lang.Object)$$2.getType()) != $$22);
+                if (!$$22) {
+                    $$0.limitToType($$5);
                 }
             }
-        }, parser -> !parser.isTypeLimited(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.type.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"tag", parser -> {
-            boolean bl = parser.shouldInvertValue();
-            java.lang.String string = parser.getReader().readUnquotedString();
-            parser.addPredicate($$2 -> {
-                if ("".equals((java.lang.Object)string)) {
-                    return $$2.getTags().isEmpty() != bl;
+        }, $$0 -> !$$0.isTypeLimited(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.type.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"tag", $$0 -> {
+            boolean $$1 = $$0.shouldInvertValue();
+            java.lang.String $$22 = $$0.getReader().readUnquotedString();
+            $$0.addPredicate($$2 -> {
+                if ("".equals((java.lang.Object)$$22)) {
+                    return $$2.getTags().isEmpty() != $$1;
                 }
-                return $$2.getTags().contains((java.lang.Object)string) != bl;
+                return $$2.getTags().contains((java.lang.Object)$$22) != $$1;
             });
-        }, parser -> true, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.tag.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"nbt", parser -> {
-            boolean bl = parser.shouldInvertValue();
-            net.minecraft.nbt.CompoundTag compoundTag = new net.minecraft.nbt.TagParser(parser.getReader()).readStruct();
-            parser.addPredicate($$2 -> {
+        }, $$0 -> true, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.tag.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"nbt", $$0 -> {
+            boolean $$1 = $$0.shouldInvertValue();
+            net.minecraft.nbt.CompoundTag $$22 = new net.minecraft.nbt.TagParser($$0.getReader()).readStruct();
+            $$0.addPredicate($$2 -> {
                 net.minecraft.world.item.ItemStack $$4;
                 net.minecraft.nbt.CompoundTag $$3 = $$2.saveWithoutId(new net.minecraft.nbt.CompoundTag());
                 if ($$2 instanceof net.minecraft.server.level.ServerPlayer && !($$4 = ((net.minecraft.server.level.ServerPlayer)$$2).getInventory().getSelected()).isEmpty()) {
                     $$3.put("SelectedItem", (net.minecraft.nbt.Tag)$$4.save(new net.minecraft.nbt.CompoundTag()));
                 }
-                return net.minecraft.nbt.NbtUtils.compareNbt((net.minecraft.nbt.Tag)compoundTag, (net.minecraft.nbt.Tag)$$3, (boolean)true) != bl;
+                return net.minecraft.nbt.NbtUtils.compareNbt((net.minecraft.nbt.Tag)$$22, (net.minecraft.nbt.Tag)$$3, (boolean)true) != $$1;
             });
-        }, parser -> true, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.nbt.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"scores", parser -> {
-            com.mojang.brigadier.StringReader stringReader = parser.getReader();
-            java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-            stringReader.expect('{');
-            stringReader.skipWhitespace();
-            while (stringReader.canRead() && stringReader.peek() != '}') {
-                stringReader.skipWhitespace();
-                java.lang.String string = stringReader.readUnquotedString();
-                stringReader.skipWhitespace();
-                stringReader.expect('=');
-                stringReader.skipWhitespace();
-                net.minecraft.advancements.critereon.MinMaxBounds$Ints ints = net.minecraft.advancements.critereon.MinMaxBounds$Ints.fromReader((com.mojang.brigadier.StringReader)stringReader);
-                hashMap.put((java.lang.Object)string, (java.lang.Object)ints);
-                stringReader.skipWhitespace();
-                if (!stringReader.canRead() || stringReader.peek() != ',') continue;
-                stringReader.skip();
+        }, $$0 -> true, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.nbt.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"scores", $$0 -> {
+            com.mojang.brigadier.StringReader $$1 = $$0.getReader();
+            java.util.HashMap $$2 = com.google.common.collect.Maps.newHashMap();
+            $$1.expect('{');
+            $$1.skipWhitespace();
+            while ($$1.canRead() && $$1.peek() != '}') {
+                $$1.skipWhitespace();
+                java.lang.String $$3 = $$1.readUnquotedString();
+                $$1.skipWhitespace();
+                $$1.expect('=');
+                $$1.skipWhitespace();
+                net.minecraft.advancements.critereon.MinMaxBounds$Ints $$4 = net.minecraft.advancements.critereon.MinMaxBounds$Ints.fromReader((com.mojang.brigadier.StringReader)$$1);
+                $$2.put((java.lang.Object)$$3, (java.lang.Object)$$4);
+                $$1.skipWhitespace();
+                if (!$$1.canRead() || $$1.peek() != ',') continue;
+                $$1.skip();
             }
-            stringReader.expect('}');
-            if (!hashMap.isEmpty()) {
-                parser.addPredicate(arg_0 -> net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.lambda$bootStrap$52((java.util.Map)hashMap, arg_0));
+            $$1.expect('}');
+            if (!$$2.isEmpty()) {
+                $$0.addPredicate(arg_0 -> net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.lambda$bootStrap$52((java.util.Map)$$2, arg_0));
             }
-            parser.setHasScores(true);
-        }, parser -> !parser.hasScores(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.scores.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"advancements", parser -> {
-            com.mojang.brigadier.StringReader stringReader = parser.getReader();
-            java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-            stringReader.expect('{');
-            stringReader.skipWhitespace();
-            while (stringReader.canRead() && stringReader.peek() != '}') {
-                stringReader.skipWhitespace();
-                net.minecraft.resources.ResourceLocation resourceLocation = net.minecraft.resources.ResourceLocation.read((com.mojang.brigadier.StringReader)stringReader);
-                stringReader.skipWhitespace();
-                stringReader.expect('=');
-                stringReader.skipWhitespace();
-                if (stringReader.canRead() && stringReader.peek() == '{') {
-                    java.util.HashMap hashMap2 = com.google.common.collect.Maps.newHashMap();
-                    stringReader.skipWhitespace();
-                    stringReader.expect('{');
-                    stringReader.skipWhitespace();
-                    while (stringReader.canRead() && stringReader.peek() != '}') {
-                        stringReader.skipWhitespace();
-                        java.lang.String string = stringReader.readUnquotedString();
-                        stringReader.skipWhitespace();
-                        stringReader.expect('=');
-                        stringReader.skipWhitespace();
-                        boolean bl = stringReader.readBoolean();
-                        hashMap2.put((java.lang.Object)string, $$1 -> $$1.isDone() == bl);
-                        stringReader.skipWhitespace();
-                        if (!stringReader.canRead() || stringReader.peek() != ',') continue;
-                        stringReader.skip();
+            $$0.setHasScores(true);
+        }, $$0 -> !$$0.hasScores(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.scores.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"advancements", $$0 -> {
+            com.mojang.brigadier.StringReader $$12 = $$0.getReader();
+            java.util.HashMap $$2 = com.google.common.collect.Maps.newHashMap();
+            $$12.expect('{');
+            $$12.skipWhitespace();
+            while ($$12.canRead() && $$12.peek() != '}') {
+                $$12.skipWhitespace();
+                net.minecraft.resources.ResourceLocation $$3 = net.minecraft.resources.ResourceLocation.read((com.mojang.brigadier.StringReader)$$12);
+                $$12.skipWhitespace();
+                $$12.expect('=');
+                $$12.skipWhitespace();
+                if ($$12.canRead() && $$12.peek() == '{') {
+                    java.util.HashMap $$4 = com.google.common.collect.Maps.newHashMap();
+                    $$12.skipWhitespace();
+                    $$12.expect('{');
+                    $$12.skipWhitespace();
+                    while ($$12.canRead() && $$12.peek() != '}') {
+                        $$12.skipWhitespace();
+                        java.lang.String $$5 = $$12.readUnquotedString();
+                        $$12.skipWhitespace();
+                        $$12.expect('=');
+                        $$12.skipWhitespace();
+                        boolean $$6 = $$12.readBoolean();
+                        $$4.put((java.lang.Object)$$5, $$1 -> $$1.isDone() == $$6);
+                        $$12.skipWhitespace();
+                        if (!$$12.canRead() || $$12.peek() != ',') continue;
+                        $$12.skip();
                     }
-                    stringReader.skipWhitespace();
-                    stringReader.expect('}');
-                    stringReader.skipWhitespace();
-                    hashMap.put((java.lang.Object)resourceLocation, arg_0 -> net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.lambda$bootStrap$56((java.util.Map)hashMap2, arg_0));
+                    $$12.skipWhitespace();
+                    $$12.expect('}');
+                    $$12.skipWhitespace();
+                    $$2.put((java.lang.Object)$$3, arg_0 -> net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.lambda$bootStrap$56((java.util.Map)$$4, arg_0));
                 } else {
-                    boolean bl = stringReader.readBoolean();
-                    hashMap.put((java.lang.Object)resourceLocation, $$1 -> $$1.isDone() == bl);
+                    boolean $$7 = $$12.readBoolean();
+                    $$2.put((java.lang.Object)$$3, $$1 -> $$1.isDone() == $$7);
                 }
-                stringReader.skipWhitespace();
-                if (!stringReader.canRead() || stringReader.peek() != ',') continue;
-                stringReader.skip();
+                $$12.skipWhitespace();
+                if (!$$12.canRead() || $$12.peek() != ',') continue;
+                $$12.skip();
             }
-            stringReader.expect('}');
-            if (!hashMap.isEmpty()) {
-                parser.addPredicate(arg_0 -> net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.lambda$bootStrap$58((java.util.Map)hashMap, arg_0));
-                parser.setIncludesEntities(false);
+            $$12.expect('}');
+            if (!$$2.isEmpty()) {
+                $$0.addPredicate(arg_0 -> net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.lambda$bootStrap$58((java.util.Map)$$2, arg_0));
+                $$0.setIncludesEntities(false);
             }
-            parser.setHasAdvancements(true);
-        }, parser -> !parser.hasAdvancements(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.advancements.description"));
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"predicate", parser -> {
-            boolean bl = parser.shouldInvertValue();
-            net.minecraft.resources.ResourceLocation resourceLocation = net.minecraft.resources.ResourceLocation.read((com.mojang.brigadier.StringReader)parser.getReader());
-            parser.addPredicate($$2 -> {
+            $$0.setHasAdvancements(true);
+        }, $$0 -> !$$0.hasAdvancements(), (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.advancements.description"));
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions.register((java.lang.String)"predicate", $$0 -> {
+            boolean $$1 = $$0.shouldInvertValue();
+            net.minecraft.resources.ResourceLocation $$22 = net.minecraft.resources.ResourceLocation.read((com.mojang.brigadier.StringReader)$$0.getReader());
+            $$0.addPredicate($$2 -> {
                 if (!($$2.level instanceof net.minecraft.server.level.ServerLevel)) {
                     return false;
                 }
                 net.minecraft.server.level.ServerLevel $$3 = (net.minecraft.server.level.ServerLevel)$$2.level;
-                net.minecraft.world.level.storage.loot.predicates.LootItemCondition $$4 = $$3.getServer().getPredicateManager().get(resourceLocation);
+                net.minecraft.world.level.storage.loot.predicates.LootItemCondition $$4 = $$3.getServer().getPredicateManager().get($$22);
                 if ($$4 == null) {
                     return false;
                 }
                 net.minecraft.world.level.storage.loot.LootContext $$5 = new net.minecraft.world.level.storage.loot.LootContext$Builder($$3).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.THIS_ENTITY, $$2).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.ORIGIN, (java.lang.Object)$$2.position()).create(net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.SELECTOR);
-                return bl ^ $$4.test((java.lang.Object)$$5);
+                return $$1 ^ $$4.test((java.lang.Object)$$5);
             });
-        }, parser -> true, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.predicate.description"));
+        }, $$0 -> true, (net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.predicate.description"));
     }
 
-    public static net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier get(net.minecraft.commands.arguments.selector.EntitySelectorParser parser, java.lang.String id, int cursor) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option option = (net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option)OPTIONS.get((java.lang.Object)id);
-        if (option != null) {
-            if (option.predicate.test((java.lang.Object)parser)) {
-                return option.modifier;
+    public static net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier get(net.minecraft.commands.arguments.selector.EntitySelectorParser $$0, java.lang.String $$1, int $$2) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option $$3 = (net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option)OPTIONS.get((java.lang.Object)$$1);
+        if ($$3 != null) {
+            if ($$3.canUse.test((java.lang.Object)$$0)) {
+                return $$3.modifier;
             }
-            throw ERROR_INAPPLICABLE_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader(), (java.lang.Object)id);
+            throw ERROR_INAPPLICABLE_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader(), (java.lang.Object)$$1);
         }
-        parser.getReader().setCursor(cursor);
-        throw ERROR_UNKNOWN_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)parser.getReader(), (java.lang.Object)id);
+        $$0.getReader().setCursor($$2);
+        throw ERROR_UNKNOWN_OPTION.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0.getReader(), (java.lang.Object)$$1);
     }
 
-    public static void suggestNames(net.minecraft.commands.arguments.selector.EntitySelectorParser parser, com.mojang.brigadier.suggestion.SuggestionsBuilder builder) {
-        java.lang.String string = builder.getRemaining().toLowerCase(java.util.Locale.ROOT);
-        for (java.util.Map$Entry entry : OPTIONS.entrySet()) {
-            if (!((net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option)entry.getValue()).predicate.test((java.lang.Object)parser) || !((java.lang.String)entry.getKey()).toLowerCase(java.util.Locale.ROOT).startsWith(string)) continue;
-            builder.suggest((java.lang.String)entry.getKey() + "=", (com.mojang.brigadier.Message)((net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option)entry.getValue()).description);
+    public static void suggestNames(net.minecraft.commands.arguments.selector.EntitySelectorParser $$0, com.mojang.brigadier.suggestion.SuggestionsBuilder $$1) {
+        java.lang.String $$2 = $$1.getRemaining().toLowerCase(java.util.Locale.ROOT);
+        for (java.util.Map$Entry $$3 : OPTIONS.entrySet()) {
+            if (!((net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option)$$3.getValue()).canUse.test((java.lang.Object)$$0) || !((java.lang.String)$$3.getKey()).toLowerCase(java.util.Locale.ROOT).startsWith($$2)) continue;
+            $$1.suggest((java.lang.String)$$3.getKey() + "=", (com.mojang.brigadier.Message)((net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option)$$3.getValue()).description);
         }
     }
 
@@ -437,36 +437,36 @@
         return net.minecraft.commands.SharedSuggestionProvider.suggest((java.lang.Iterable)java.util.Arrays.asList((java.lang.Object[])new java.lang.String[]{"nearest", "furthest", "random", "arbitrary"}), (com.mojang.brigadier.suggestion.SuggestionsBuilder)$$0);
     }
 
-    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$4(java.lang.Object type) {
-        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.type.invalid", (java.lang.Object[])new java.lang.Object[]{type});
+    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$4(java.lang.Object $$0) {
+        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.type.invalid", (java.lang.Object[])new java.lang.Object[]{$$0});
     }
 
-    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$3(java.lang.Object gameMode) {
-        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.mode.invalid", (java.lang.Object[])new java.lang.Object[]{gameMode});
+    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$3(java.lang.Object $$0) {
+        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.mode.invalid", (java.lang.Object[])new java.lang.Object[]{$$0});
     }
 
-    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$2(java.lang.Object sort) {
-        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.sort.irreversible", (java.lang.Object[])new java.lang.Object[]{sort});
+    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$2(java.lang.Object $$0) {
+        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.sort.irreversible", (java.lang.Object[])new java.lang.Object[]{$$0});
     }
 
-    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$1(java.lang.Object option) {
-        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.inapplicable", (java.lang.Object[])new java.lang.Object[]{option});
+    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$1(java.lang.Object $$0) {
+        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.inapplicable", (java.lang.Object[])new java.lang.Object[]{$$0});
     }
 
-    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$0(java.lang.Object option) {
-        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.unknown", (java.lang.Object[])new java.lang.Object[]{option});
+    public static /* synthetic */ com.mojang.brigadier.Message lambda$static$0(java.lang.Object $$0) {
+        return net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.unknown", (java.lang.Object[])new java.lang.Object[]{$$0});
     }
 
     static {
         OPTIONS = com.google.common.collect.Maps.newHashMap();
-        ERROR_UNKNOWN_OPTION = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType(option -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.unknown", (java.lang.Object[])new java.lang.Object[]{option}));
-        ERROR_INAPPLICABLE_OPTION = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType(option -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.inapplicable", (java.lang.Object[])new java.lang.Object[]{option}));
+        ERROR_UNKNOWN_OPTION = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType($$0 -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.unknown", (java.lang.Object[])new java.lang.Object[]{$$0}));
+        ERROR_INAPPLICABLE_OPTION = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType($$0 -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.inapplicable", (java.lang.Object[])new java.lang.Object[]{$$0}));
         ERROR_RANGE_NEGATIVE = new com.mojang.brigadier.exceptions.SimpleCommandExceptionType((com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.distance.negative"));
         ERROR_LEVEL_NEGATIVE = new com.mojang.brigadier.exceptions.SimpleCommandExceptionType((com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.level.negative"));
         ERROR_LIMIT_TOO_SMALL = new com.mojang.brigadier.exceptions.SimpleCommandExceptionType((com.mojang.brigadier.Message)net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.limit.toosmall"));
-        ERROR_SORT_UNKNOWN = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType(sort -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.sort.irreversible", (java.lang.Object[])new java.lang.Object[]{sort}));
-        ERROR_GAME_MODE_INVALID = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType(gameMode -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.mode.invalid", (java.lang.Object[])new java.lang.Object[]{gameMode}));
-        ERROR_ENTITY_TYPE_INVALID = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType(type -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.type.invalid", (java.lang.Object[])new java.lang.Object[]{type}));
+        ERROR_SORT_UNKNOWN = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType($$0 -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.sort.irreversible", (java.lang.Object[])new java.lang.Object[]{$$0}));
+        ERROR_GAME_MODE_INVALID = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType($$0 -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.mode.invalid", (java.lang.Object[])new java.lang.Object[]{$$0}));
+        ERROR_ENTITY_TYPE_INVALID = new com.mojang.brigadier.exceptions.DynamicCommandExceptionType($$0 -> net.minecraft.network.chat.Component.translatable((java.lang.String)"argument.entity.options.type.invalid", (java.lang.Object[])new java.lang.Object[]{$$0}));
     }
 }
 