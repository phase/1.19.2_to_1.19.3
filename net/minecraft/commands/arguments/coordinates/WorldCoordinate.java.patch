--- net/minecraft/commands/arguments/coordinates/WorldCoordinate.java
+++ net/minecraft/commands/arguments/coordinates/WorldCoordinate.java
@@ -11,73 +11,78 @@
     public boolean relative;
     public double value;
 
-    public net.minecraft.commands.arguments.coordinates.WorldCoordinate(boolean relative, double value) {
-        this.relative = relative;
-        this.value = value;
+    public net.minecraft.commands.arguments.coordinates.WorldCoordinate(boolean $$0, double $$1) {
+        this.relative = $$0;
+        this.value = $$1;
     }
 
-    public double get(double coord) {
+    public double get(double $$0) {
         if (this.relative) {
-            return this.value + coord;
+            return this.value + $$0;
         }
         return this.value;
     }
 
-    public static net.minecraft.commands.arguments.coordinates.WorldCoordinate parseDouble(com.mojang.brigadier.StringReader reader, boolean centerCorrect) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        if (reader.canRead() && reader.peek() == '^') {
-            throw net.minecraft.commands.arguments.coordinates.Vec3Argument.ERROR_MIXED_TYPE.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+    public static net.minecraft.commands.arguments.coordinates.WorldCoordinate parseDouble(com.mojang.brigadier.StringReader $$0, boolean $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        if ($$0.canRead() && $$0.peek() == '^') {
+            throw net.minecraft.commands.arguments.coordinates.Vec3Argument.ERROR_MIXED_TYPE.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
         }
-        if (!reader.canRead()) {
-            throw ERROR_EXPECTED_DOUBLE.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+        if (!$$0.canRead()) {
+            throw ERROR_EXPECTED_DOUBLE.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
         }
-        boolean bl = net.minecraft.commands.arguments.coordinates.WorldCoordinate.isRelative((com.mojang.brigadier.StringReader)reader);
-        int n = reader.getCursor();
-        double d = reader.canRead() && reader.peek() != ' ' ? reader.readDouble() : 0.0;
-        java.lang.String string = reader.getString().substring(n, reader.getCursor());
-        if (bl && string.isEmpty()) {
+        boolean $$2 = net.minecraft.commands.arguments.coordinates.WorldCoordinate.isRelative((com.mojang.brigadier.StringReader)$$0);
+        int $$3 = $$0.getCursor();
+        double $$4 = $$0.canRead() && $$0.peek() != ' ' ? $$0.readDouble() : 0.0;
+        java.lang.String $$5 = $$0.getString().substring($$3, $$0.getCursor());
+        if ($$2 && $$5.isEmpty()) {
             return new net.minecraft.commands.arguments.coordinates.WorldCoordinate(true, 0.0);
         }
-        if (!string.contains((java.lang.CharSequence)".") && !bl && centerCorrect) {
-            d += 0.5;
+        if (!$$5.contains((java.lang.CharSequence)".") && !$$2 && $$1) {
+            $$4 += 0.5;
         }
-        return new net.minecraft.commands.arguments.coordinates.WorldCoordinate(bl, d);
+        return new net.minecraft.commands.arguments.coordinates.WorldCoordinate($$2, $$4);
     }
 
-    public static net.minecraft.commands.arguments.coordinates.WorldCoordinate parseInt(com.mojang.brigadier.StringReader reader) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        if (reader.canRead() && reader.peek() == '^') {
-            throw net.minecraft.commands.arguments.coordinates.Vec3Argument.ERROR_MIXED_TYPE.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+    public static net.minecraft.commands.arguments.coordinates.WorldCoordinate parseInt(com.mojang.brigadier.StringReader $$0) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        double $$3;
+        if ($$0.canRead() && $$0.peek() == '^') {
+            throw net.minecraft.commands.arguments.coordinates.Vec3Argument.ERROR_MIXED_TYPE.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
         }
-        if (!reader.canRead()) {
-            throw ERROR_EXPECTED_INT.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+        if (!$$0.canRead()) {
+            throw ERROR_EXPECTED_INT.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
         }
-        boolean bl = net.minecraft.commands.arguments.coordinates.WorldCoordinate.isRelative((com.mojang.brigadier.StringReader)reader);
-        double d = reader.canRead() && reader.peek() != ' ' ? (bl ? reader.readDouble() : (double)reader.readInt()) : 0.0;
-        return new net.minecraft.commands.arguments.coordinates.WorldCoordinate(bl, d);
+        boolean $$1 = net.minecraft.commands.arguments.coordinates.WorldCoordinate.isRelative((com.mojang.brigadier.StringReader)$$0);
+        if ($$0.canRead() && $$0.peek() != ' ') {
+            double $$2 = $$1 ? $$0.readDouble() : (double)$$0.readInt();
+        } else {
+            $$3 = 0.0;
+        }
+        return new net.minecraft.commands.arguments.coordinates.WorldCoordinate($$1, $$3);
     }
 
-    public static boolean isRelative(com.mojang.brigadier.StringReader reader) {
-        boolean bl;
-        if (reader.peek() == '~') {
-            bl = true;
-            reader.skip();
+    public static boolean isRelative(com.mojang.brigadier.StringReader $$0) {
+        boolean $$2;
+        if ($$0.peek() == '~') {
+            boolean $$1 = true;
+            $$0.skip();
         } else {
-            bl = false;
+            $$2 = false;
         }
-        return bl;
+        return $$2;
     }
 
-    public boolean equals(java.lang.Object other) {
-        if (this == other) {
+    public boolean equals(java.lang.Object $$0) {
+        if (this == $$0) {
             return true;
         }
-        if (!(other instanceof net.minecraft.commands.arguments.coordinates.WorldCoordinate)) {
+        if (!($$0 instanceof net.minecraft.commands.arguments.coordinates.WorldCoordinate)) {
             return false;
         }
-        net.minecraft.commands.arguments.coordinates.WorldCoordinate worldCoordinate = (net.minecraft.commands.arguments.coordinates.WorldCoordinate)other;
-        if (this.relative != worldCoordinate.relative) {
+        net.minecraft.commands.arguments.coordinates.WorldCoordinate $$1 = (net.minecraft.commands.arguments.coordinates.WorldCoordinate)$$0;
+        if (this.relative != $$1.relative) {
             return false;
         }
-        return java.lang.Double.compare((double)worldCoordinate.value, (double)this.value) == 0;
+        return java.lang.Double.compare((double)$$1.value, (double)this.value) == 0;
     }
 
     public int hashCode() {