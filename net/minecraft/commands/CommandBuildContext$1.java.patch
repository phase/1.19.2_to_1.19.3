--- net/minecraft/commands/CommandBuildContext$1.java
+++ net/minecraft/commands/CommandBuildContext$1.java
@@ -13,14 +13,14 @@
         super($$1);
     }
 
-    public java.util.Optional<? extends net.minecraft.core.HolderSet<T>> get(net.minecraft.tags.TagKey<T> $$0) {
+    public java.util.Optional<net.minecraft.core.HolderSet$Named<T>> get(net.minecraft.tags.TagKey<T> $$0) {
         return switch (net.minecraft.commands.CommandBuildContext$2.$SwitchMap$net$minecraft$commands$CommandBuildContext$MissingTagAccessPolicy[this.this$0.missingTagAccessPolicy.ordinal()]) {
             default -> throw new java.lang.IncompatibleClassChangeError();
             case 1 -> this.registry.getTag($$0);
             case 2 -> java.util.Optional.of((java.lang.Object)this.registry.getOrCreateTag($$0));
             case 3 -> {
                 java.util.Optional $$1 = this.registry.getTag($$0);
-                yield java.util.Optional.of((java.lang.Object)($$1.isPresent() ? (net.minecraft.core.HolderSet)$$1.get() : net.minecraft.core.HolderSet.direct((net.minecraft.core.Holder[])new net.minecraft.core.Holder[0])));
+                yield java.util.Optional.of((java.lang.Object)((net.minecraft.core.HolderSet$Named)$$1.orElseGet(() -> net.minecraft.core.HolderSet.emptyNamed((net.minecraft.core.Registry)this.registry, (net.minecraft.tags.TagKey)$$0))));
             }
         };
     }