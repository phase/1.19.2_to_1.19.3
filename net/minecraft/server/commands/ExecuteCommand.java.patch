--- net/minecraft/server/commands/ExecuteCommand.java
+++ net/minecraft/server/commands/ExecuteCommand.java
@@ -51,39 +51,39 @@
         }))))).then(net.minecraft.commands.Commands.argument((java.lang.String)"pos", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.coordinates.Vec3Argument.vec3()).redirect((com.mojang.brigadier.tree.CommandNode)$$2, $$0 -> ((net.minecraft.commands.CommandSourceStack)$$0.getSource()).facing(net.minecraft.commands.arguments.coordinates.Vec3Argument.getVec3((com.mojang.brigadier.context.CommandContext)$$0, (java.lang.String)"pos")))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"align").then(net.minecraft.commands.Commands.argument((java.lang.String)"axes", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.coordinates.SwizzleArgument.swizzle()).redirect((com.mojang.brigadier.tree.CommandNode)$$2, $$0 -> ((net.minecraft.commands.CommandSourceStack)$$0.getSource()).withPosition(((net.minecraft.commands.CommandSourceStack)$$0.getSource()).getPosition().align(net.minecraft.commands.arguments.coordinates.SwizzleArgument.getSwizzle((com.mojang.brigadier.context.CommandContext)$$0, (java.lang.String)"axes"))))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"anchored").then(net.minecraft.commands.Commands.argument((java.lang.String)"anchor", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.EntityAnchorArgument.anchor()).redirect((com.mojang.brigadier.tree.CommandNode)$$2, $$0 -> ((net.minecraft.commands.CommandSourceStack)$$0.getSource()).withAnchor(net.minecraft.commands.arguments.EntityAnchorArgument.getAnchor((com.mojang.brigadier.context.CommandContext)$$0, (java.lang.String)"anchor")))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"in").then(net.minecraft.commands.Commands.argument((java.lang.String)"dimension", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.DimensionArgument.dimension()).redirect((com.mojang.brigadier.tree.CommandNode)$$2, $$0 -> ((net.minecraft.commands.CommandSourceStack)$$0.getSource()).withLevel(net.minecraft.commands.arguments.DimensionArgument.getDimension((com.mojang.brigadier.context.CommandContext)$$0, (java.lang.String)"dimension"))))));
     }
 
-    public static com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> wrapStores(com.mojang.brigadier.tree.LiteralCommandNode<net.minecraft.commands.CommandSourceStack> parent, com.mojang.brigadier.builder.LiteralArgumentBuilder<net.minecraft.commands.CommandSourceStack> literal, boolean storingResult) {
-        literal.then(net.minecraft.commands.Commands.literal((java.lang.String)"score").then(net.minecraft.commands.Commands.argument((java.lang.String)"targets", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.ScoreHolderArgument.scoreHolders()).suggests(net.minecraft.commands.arguments.ScoreHolderArgument.SUGGEST_SCORE_HOLDERS).then(net.minecraft.commands.Commands.argument((java.lang.String)"objective", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.ObjectiveArgument.objective()).redirect(parent, $$1 -> net.minecraft.server.commands.ExecuteCommand.storeValue((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$1.getSource()), (java.util.Collection)net.minecraft.commands.arguments.ScoreHolderArgument.getNamesWithDefaultWildcard((com.mojang.brigadier.context.CommandContext)$$1, (java.lang.String)"targets"), (net.minecraft.world.scores.Objective)net.minecraft.commands.arguments.ObjectiveArgument.getObjective((com.mojang.brigadier.context.CommandContext)$$1, (java.lang.String)"objective"), (boolean)storingResult)))));
-        literal.then(net.minecraft.commands.Commands.literal((java.lang.String)"bossbar").then(((com.mojang.brigadier.builder.RequiredArgumentBuilder)net.minecraft.commands.Commands.argument((java.lang.String)"id", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.ResourceLocationArgument.id()).suggests(net.minecraft.server.commands.BossBarCommands.SUGGEST_BOSS_BAR).then(net.minecraft.commands.Commands.literal((java.lang.String)"value").redirect(parent, $$1 -> net.minecraft.server.commands.ExecuteCommand.storeValue((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$1.getSource()), (net.minecraft.server.bossevents.CustomBossEvent)net.minecraft.server.commands.BossBarCommands.getBossBar((com.mojang.brigadier.context.CommandContext)$$1), (boolean)true, (boolean)storingResult)))).then(net.minecraft.commands.Commands.literal((java.lang.String)"max").redirect(parent, $$1 -> net.minecraft.server.commands.ExecuteCommand.storeValue((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$1.getSource()), (net.minecraft.server.bossevents.CustomBossEvent)net.minecraft.server.commands.BossBarCommands.getBossBar((com.mojang.brigadier.context.CommandContext)$$1), (boolean)false, (boolean)storingResult)))));
-        for (net.minecraft.server.commands.data.DataCommands$DataProvider dataProvider : net.minecraft.server.commands.data.DataCommands.TARGET_PROVIDERS) {
-            dataProvider.wrap(literal, $$3 -> $$3.then(((com.mojang.brigadier.builder.RequiredArgumentBuilder)((com.mojang.brigadier.builder.RequiredArgumentBuilder)((com.mojang.brigadier.builder.RequiredArgumentBuilder)((com.mojang.brigadier.builder.RequiredArgumentBuilder)((com.mojang.brigadier.builder.RequiredArgumentBuilder)net.minecraft.commands.Commands.argument((java.lang.String)"path", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.NbtPathArgument.nbtPath()).then(net.minecraft.commands.Commands.literal((java.lang.String)"int").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)parent, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)dataProvider.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.IntTag.valueOf((int)((int)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)storingResult))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"float").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)parent, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)dataProvider.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.FloatTag.valueOf((float)((float)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)storingResult))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"short").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)parent, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)dataProvider.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.ShortTag.valueOf((short)((short)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)storingResult))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"long").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)parent, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)dataProvider.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.LongTag.valueOf((long)((long)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)storingResult))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"double").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)parent, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)dataProvider.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.DoubleTag.valueOf((double)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale"))), (boolean)storingResult))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"byte").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)parent, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)dataProvider.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.ByteTag.valueOf((byte)((byte)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)storingResult))))));
+    public static com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> wrapStores(com.mojang.brigadier.tree.LiteralCommandNode<net.minecraft.commands.CommandSourceStack> $$0, com.mojang.brigadier.builder.LiteralArgumentBuilder<net.minecraft.commands.CommandSourceStack> $$12, boolean $$2) {
+        $$12.then(net.minecraft.commands.Commands.literal((java.lang.String)"score").then(net.minecraft.commands.Commands.argument((java.lang.String)"targets", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.ScoreHolderArgument.scoreHolders()).suggests(net.minecraft.commands.arguments.ScoreHolderArgument.SUGGEST_SCORE_HOLDERS).then(net.minecraft.commands.Commands.argument((java.lang.String)"objective", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.ObjectiveArgument.objective()).redirect($$0, $$1 -> net.minecraft.server.commands.ExecuteCommand.storeValue((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$1.getSource()), (java.util.Collection)net.minecraft.commands.arguments.ScoreHolderArgument.getNamesWithDefaultWildcard((com.mojang.brigadier.context.CommandContext)$$1, (java.lang.String)"targets"), (net.minecraft.world.scores.Objective)net.minecraft.commands.arguments.ObjectiveArgument.getObjective((com.mojang.brigadier.context.CommandContext)$$1, (java.lang.String)"objective"), (boolean)$$2)))));
+        $$12.then(net.minecraft.commands.Commands.literal((java.lang.String)"bossbar").then(((com.mojang.brigadier.builder.RequiredArgumentBuilder)net.minecraft.commands.Commands.argument((java.lang.String)"id", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.ResourceLocationArgument.id()).suggests(net.minecraft.server.commands.BossBarCommands.SUGGEST_BOSS_BAR).then(net.minecraft.commands.Commands.literal((java.lang.String)"value").redirect($$0, $$1 -> net.minecraft.server.commands.ExecuteCommand.storeValue((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$1.getSource()), (net.minecraft.server.bossevents.CustomBossEvent)net.minecraft.server.commands.BossBarCommands.getBossBar((com.mojang.brigadier.context.CommandContext)$$1), (boolean)true, (boolean)$$2)))).then(net.minecraft.commands.Commands.literal((java.lang.String)"max").redirect($$0, $$1 -> net.minecraft.server.commands.ExecuteCommand.storeValue((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$1.getSource()), (net.minecraft.server.bossevents.CustomBossEvent)net.minecraft.server.commands.BossBarCommands.getBossBar((com.mojang.brigadier.context.CommandContext)$$1), (boolean)false, (boolean)$$2)))));
+        for (net.minecraft.server.commands.data.DataCommands$DataProvider $$32 : net.minecraft.server.commands.data.DataCommands.TARGET_PROVIDERS) {
+            $$32.wrap($$12, $$3 -> $$3.then(((com.mojang.brigadier.builder.RequiredArgumentBuilder)((com.mojang.brigadier.builder.RequiredArgumentBuilder)((com.mojang.brigadier.builder.RequiredArgumentBuilder)((com.mojang.brigadier.builder.RequiredArgumentBuilder)((com.mojang.brigadier.builder.RequiredArgumentBuilder)net.minecraft.commands.Commands.argument((java.lang.String)"path", (com.mojang.brigadier.arguments.ArgumentType)net.minecraft.commands.arguments.NbtPathArgument.nbtPath()).then(net.minecraft.commands.Commands.literal((java.lang.String)"int").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)$$0, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)$$32.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.IntTag.valueOf((int)((int)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)$$2))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"float").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)$$0, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)$$32.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.FloatTag.valueOf((float)((float)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)$$2))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"short").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)$$0, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)$$32.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.ShortTag.valueOf((short)((short)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)$$2))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"long").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)$$0, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)$$32.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.LongTag.valueOf((long)((long)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)$$2))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"double").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)$$0, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)$$32.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.DoubleTag.valueOf((double)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale"))), (boolean)$$2))))).then(net.minecraft.commands.Commands.literal((java.lang.String)"byte").then(net.minecraft.commands.Commands.argument((java.lang.String)"scale", (com.mojang.brigadier.arguments.ArgumentType)com.mojang.brigadier.arguments.DoubleArgumentType.doubleArg()).redirect((com.mojang.brigadier.tree.CommandNode)$$0, $$2 -> net.minecraft.server.commands.ExecuteCommand.storeData((net.minecraft.commands.CommandSourceStack)((net.minecraft.commands.CommandSourceStack)$$2.getSource()), (net.minecraft.server.commands.data.DataAccessor)$$32.access($$2), (net.minecraft.commands.arguments.NbtPathArgument$NbtPath)net.minecraft.commands.arguments.NbtPathArgument.getPath((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"path"), $$1 -> net.minecraft.nbt.ByteTag.valueOf((byte)((byte)((double)$$1 * com.mojang.brigadier.arguments.DoubleArgumentType.getDouble((com.mojang.brigadier.context.CommandContext)$$2, (java.lang.String)"scale")))), (boolean)$$2))))));
         }
-        return literal;
+        return $$12;
     }
 
-    public static net.minecraft.commands.CommandSourceStack storeValue(net.minecraft.commands.CommandSourceStack source, java.util.Collection<java.lang.String> targets, net.minecraft.world.scores.Objective objective, boolean storingResult) {
-        net.minecraft.server.ServerScoreboard serverScoreboard = source.getServer().getScoreboard();
-        return source.withCallback((arg_0, arg_1, arg_2) -> net.minecraft.server.commands.ExecuteCommand.lambda$storeValue$34(targets, (net.minecraft.world.scores.Scoreboard)serverScoreboard, objective, storingResult, arg_0, arg_1, arg_2), CALLBACK_CHAINER);
+    public static net.minecraft.commands.CommandSourceStack storeValue(net.minecraft.commands.CommandSourceStack $$0, java.util.Collection<java.lang.String> $$1, net.minecraft.world.scores.Objective $$2, boolean $$3) {
+        net.minecraft.server.ServerScoreboard $$4 = $$0.getServer().getScoreboard();
+        return $$0.withCallback((arg_0, arg_1, arg_2) -> net.minecraft.server.commands.ExecuteCommand.lambda$storeValue$34($$1, (net.minecraft.world.scores.Scoreboard)$$4, $$2, $$3, arg_0, arg_1, arg_2), CALLBACK_CHAINER);
     }
 
-    public static net.minecraft.commands.CommandSourceStack storeValue(net.minecraft.commands.CommandSourceStack source, net.minecraft.server.bossevents.CustomBossEvent bar, boolean storingValue, boolean storingResult) {
-        return source.withCallback(($$3, $$4, $$5) -> {
+    public static net.minecraft.commands.CommandSourceStack storeValue(net.minecraft.commands.CommandSourceStack $$0, net.minecraft.server.bossevents.CustomBossEvent $$1, boolean $$2, boolean $$32) {
+        return $$0.withCallback(($$3, $$4, $$5) -> {
             int $$6;
-            int n = storingResult ? $$5 : ($$6 = $$4 ? 1 : 0);
-            if (storingValue) {
-                bar.setValue($$6);
+            int n = $$32 ? $$5 : ($$6 = $$4 ? 1 : 0);
+            if ($$2) {
+                $$1.setValue($$6);
             } else {
-                bar.setMax($$6);
+                $$1.setMax($$6);
             }
         }, CALLBACK_CHAINER);
     }
 
-    public static net.minecraft.commands.CommandSourceStack storeData(net.minecraft.commands.CommandSourceStack source, net.minecraft.server.commands.data.DataAccessor accessor, net.minecraft.commands.arguments.NbtPathArgument$NbtPath path, java.util.function.IntFunction<net.minecraft.nbt.Tag> tagConverter, boolean storingResult) {
-        return source.withCallback(($$4, $$5, $$6) -> {
+    public static net.minecraft.commands.CommandSourceStack storeData(net.minecraft.commands.CommandSourceStack $$0, net.minecraft.server.commands.data.DataAccessor $$1, net.minecraft.commands.arguments.NbtPathArgument$NbtPath $$2, java.util.function.IntFunction<net.minecraft.nbt.Tag> $$3, boolean $$42) {
+        return $$0.withCallback(($$4, $$5, $$6) -> {
             try {
-                net.minecraft.nbt.CompoundTag $$7 = accessor.getData();
-                int $$8 = storingResult ? $$6 : ($$5 ? 1 : 0);
-                path.set((net.minecraft.nbt.Tag)$$7, () -> (net.minecraft.nbt.Tag)tagConverter.apply($$8));
-                accessor.setData($$7);
+                net.minecraft.nbt.CompoundTag $$7 = $$1.getData();
+                int $$8 = $$42 ? $$6 : ($$5 ? 1 : 0);
+                $$2.set((net.minecraft.nbt.Tag)$$7, () -> (net.minecraft.nbt.Tag)$$3.apply($$8));
+                $$1.setData($$7);
             }
             catch (com.mojang.brigadier.exceptions.CommandSyntaxException commandSyntaxException) {
                 // empty catch block
@@ -124,28 +124,28 @@
         return $$1.countMatching((net.minecraft.nbt.Tag)$$0.getData());
     }
 
-    public static boolean checkScore(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> context, java.util.function.BiPredicate<java.lang.Integer, java.lang.Integer> comparison) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.lang.String string = net.minecraft.commands.arguments.ScoreHolderArgument.getName(context, (java.lang.String)"target");
-        net.minecraft.world.scores.Objective objective = net.minecraft.commands.arguments.ObjectiveArgument.getObjective(context, (java.lang.String)"targetObjective");
-        java.lang.String string2 = net.minecraft.commands.arguments.ScoreHolderArgument.getName(context, (java.lang.String)"source");
-        net.minecraft.world.scores.Objective objective2 = net.minecraft.commands.arguments.ObjectiveArgument.getObjective(context, (java.lang.String)"sourceObjective");
-        net.minecraft.server.ServerScoreboard serverScoreboard = ((net.minecraft.commands.CommandSourceStack)context.getSource()).getServer().getScoreboard();
-        if (!serverScoreboard.hasPlayerScore(string, objective) || !serverScoreboard.hasPlayerScore(string2, objective2)) {
+    public static boolean checkScore(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> $$0, java.util.function.BiPredicate<java.lang.Integer, java.lang.Integer> $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.lang.String $$2 = net.minecraft.commands.arguments.ScoreHolderArgument.getName($$0, (java.lang.String)"target");
+        net.minecraft.world.scores.Objective $$3 = net.minecraft.commands.arguments.ObjectiveArgument.getObjective($$0, (java.lang.String)"targetObjective");
+        java.lang.String $$4 = net.minecraft.commands.arguments.ScoreHolderArgument.getName($$0, (java.lang.String)"source");
+        net.minecraft.world.scores.Objective $$5 = net.minecraft.commands.arguments.ObjectiveArgument.getObjective($$0, (java.lang.String)"sourceObjective");
+        net.minecraft.server.ServerScoreboard $$6 = ((net.minecraft.commands.CommandSourceStack)$$0.getSource()).getServer().getScoreboard();
+        if (!$$6.hasPlayerScore($$2, $$3) || !$$6.hasPlayerScore($$4, $$5)) {
             return false;
         }
-        net.minecraft.world.scores.Score score = serverScoreboard.getOrCreatePlayerScore(string, objective);
-        net.minecraft.world.scores.Score score2 = serverScoreboard.getOrCreatePlayerScore(string2, objective2);
-        return comparison.test((java.lang.Object)score.getScore(), (java.lang.Object)score2.getScore());
+        net.minecraft.world.scores.Score $$7 = $$6.getOrCreatePlayerScore($$2, $$3);
+        net.minecraft.world.scores.Score $$8 = $$6.getOrCreatePlayerScore($$4, $$5);
+        return $$1.test((java.lang.Object)$$7.getScore(), (java.lang.Object)$$8.getScore());
     }
 
-    public static boolean checkScore(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> context, net.minecraft.advancements.critereon.MinMaxBounds$Ints bounds) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.lang.String string = net.minecraft.commands.arguments.ScoreHolderArgument.getName(context, (java.lang.String)"target");
-        net.minecraft.world.scores.Objective objective = net.minecraft.commands.arguments.ObjectiveArgument.getObjective(context, (java.lang.String)"targetObjective");
-        net.minecraft.server.ServerScoreboard serverScoreboard = ((net.minecraft.commands.CommandSourceStack)context.getSource()).getServer().getScoreboard();
-        if (!serverScoreboard.hasPlayerScore(string, objective)) {
+    public static boolean checkScore(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> $$0, net.minecraft.advancements.critereon.MinMaxBounds$Ints $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.lang.String $$2 = net.minecraft.commands.arguments.ScoreHolderArgument.getName($$0, (java.lang.String)"target");
+        net.minecraft.world.scores.Objective $$3 = net.minecraft.commands.arguments.ObjectiveArgument.getObjective($$0, (java.lang.String)"targetObjective");
+        net.minecraft.server.ServerScoreboard $$4 = ((net.minecraft.commands.CommandSourceStack)$$0.getSource()).getServer().getScoreboard();
+        if (!$$4.hasPlayerScore($$2, $$3)) {
             return false;
         }
-        return bounds.matches(serverScoreboard.getOrCreatePlayerScore(string, objective).getScore());
+        return $$1.matches($$4.getOrCreatePlayerScore($$2, $$3).getScore());
     }
 
     public static boolean checkCustomPredicate(net.minecraft.commands.CommandSourceStack $$0, net.minecraft.world.level.storage.loot.predicates.LootItemCondition $$1) {
@@ -154,16 +154,16 @@
         return $$1.test((java.lang.Object)$$3.create(net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.COMMAND));
     }
 
-    public static java.util.Collection<net.minecraft.commands.CommandSourceStack> expect(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> context, boolean actual, boolean expected) {
-        if (expected == actual) {
-            return java.util.Collections.singleton((java.lang.Object)((net.minecraft.commands.CommandSourceStack)context.getSource()));
+    public static java.util.Collection<net.minecraft.commands.CommandSourceStack> expect(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> $$0, boolean $$1, boolean $$2) {
+        if ($$2 == $$1) {
+            return java.util.Collections.singleton((java.lang.Object)((net.minecraft.commands.CommandSourceStack)$$0.getSource()));
         }
         return java.util.Collections.emptyList();
     }
 
-    public static com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> addConditional(com.mojang.brigadier.tree.CommandNode<net.minecraft.commands.CommandSourceStack> context, com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> builder, boolean value, net.minecraft.server.commands.ExecuteCommand$CommandPredicate test) {
-        return builder.fork(context, $$2 -> net.minecraft.server.commands.ExecuteCommand.expect((com.mojang.brigadier.context.CommandContext)$$2, (boolean)value, (boolean)test.test($$2))).executes($$2 -> {
-            if (value == test.test($$2)) {
+    public static com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> addConditional(com.mojang.brigadier.tree.CommandNode<net.minecraft.commands.CommandSourceStack> $$0, com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> $$1, boolean $$22, net.minecraft.server.commands.ExecuteCommand$CommandPredicate $$3) {
+        return $$1.fork($$0, $$2 -> net.minecraft.server.commands.ExecuteCommand.expect((com.mojang.brigadier.context.CommandContext)$$2, (boolean)$$22, (boolean)$$3.test($$2))).executes($$2 -> {
+            if ($$22 == $$3.test($$2)) {
                 ((net.minecraft.commands.CommandSourceStack)$$2.getSource()).sendSuccess((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"commands.execute.conditional.pass"), false);
                 return 1;
             }
@@ -171,71 +171,71 @@
         });
     }
 
-    public static com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> addIfBlocksConditional(com.mojang.brigadier.tree.CommandNode<net.minecraft.commands.CommandSourceStack> parent, com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> literal, boolean isIf, boolean isMasked) {
-        return literal.fork(parent, $$2 -> net.minecraft.server.commands.ExecuteCommand.expect((com.mojang.brigadier.context.CommandContext)$$2, (boolean)isIf, (boolean)net.minecraft.server.commands.ExecuteCommand.checkRegions((com.mojang.brigadier.context.CommandContext)$$2, (boolean)isMasked).isPresent())).executes(isIf ? $$1 -> net.minecraft.server.commands.ExecuteCommand.checkIfRegions((com.mojang.brigadier.context.CommandContext)$$1, (boolean)isMasked) : $$1 -> net.minecraft.server.commands.ExecuteCommand.checkUnlessRegions((com.mojang.brigadier.context.CommandContext)$$1, (boolean)isMasked));
+    public static com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> addIfBlocksConditional(com.mojang.brigadier.tree.CommandNode<net.minecraft.commands.CommandSourceStack> $$0, com.mojang.brigadier.builder.ArgumentBuilder<net.minecraft.commands.CommandSourceStack, ?> $$12, boolean $$22, boolean $$3) {
+        return $$12.fork($$0, $$2 -> net.minecraft.server.commands.ExecuteCommand.expect((com.mojang.brigadier.context.CommandContext)$$2, (boolean)$$22, (boolean)net.minecraft.server.commands.ExecuteCommand.checkRegions((com.mojang.brigadier.context.CommandContext)$$2, (boolean)$$3).isPresent())).executes($$22 ? $$1 -> net.minecraft.server.commands.ExecuteCommand.checkIfRegions((com.mojang.brigadier.context.CommandContext)$$1, (boolean)$$3) : $$1 -> net.minecraft.server.commands.ExecuteCommand.checkUnlessRegions((com.mojang.brigadier.context.CommandContext)$$1, (boolean)$$3));
     }
 
-    public static int checkIfRegions(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> context, boolean isMasked) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.util.OptionalInt optionalInt = net.minecraft.server.commands.ExecuteCommand.checkRegions(context, (boolean)isMasked);
-        if (optionalInt.isPresent()) {
-            ((net.minecraft.commands.CommandSourceStack)context.getSource()).sendSuccess((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"commands.execute.conditional.pass_count", (java.lang.Object[])new java.lang.Object[]{optionalInt.getAsInt()}), false);
-            return optionalInt.getAsInt();
+    public static int checkIfRegions(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> $$0, boolean $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.util.OptionalInt $$2 = net.minecraft.server.commands.ExecuteCommand.checkRegions($$0, (boolean)$$1);
+        if ($$2.isPresent()) {
+            ((net.minecraft.commands.CommandSourceStack)$$0.getSource()).sendSuccess((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"commands.execute.conditional.pass_count", (java.lang.Object[])new java.lang.Object[]{$$2.getAsInt()}), false);
+            return $$2.getAsInt();
         }
         throw ERROR_CONDITIONAL_FAILED.create();
     }
 
-    public static int checkUnlessRegions(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> context, boolean isMasked) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.util.OptionalInt optionalInt = net.minecraft.server.commands.ExecuteCommand.checkRegions(context, (boolean)isMasked);
-        if (optionalInt.isPresent()) {
-            throw ERROR_CONDITIONAL_FAILED_COUNT.create((java.lang.Object)optionalInt.getAsInt());
+    public static int checkUnlessRegions(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> $$0, boolean $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.util.OptionalInt $$2 = net.minecraft.server.commands.ExecuteCommand.checkRegions($$0, (boolean)$$1);
+        if ($$2.isPresent()) {
+            throw ERROR_CONDITIONAL_FAILED_COUNT.create((java.lang.Object)$$2.getAsInt());
         }
-        ((net.minecraft.commands.CommandSourceStack)context.getSource()).sendSuccess((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"commands.execute.conditional.pass"), false);
+        ((net.minecraft.commands.CommandSourceStack)$$0.getSource()).sendSuccess((net.minecraft.network.chat.Component)net.minecraft.network.chat.Component.translatable((java.lang.String)"commands.execute.conditional.pass"), false);
         return 1;
     }
 
-    public static java.util.OptionalInt checkRegions(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> context, boolean isMasked) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        return net.minecraft.server.commands.ExecuteCommand.checkRegions((net.minecraft.server.level.ServerLevel)((net.minecraft.commands.CommandSourceStack)context.getSource()).getLevel(), (net.minecraft.core.BlockPos)net.minecraft.commands.arguments.coordinates.BlockPosArgument.getLoadedBlockPos(context, (java.lang.String)"start"), (net.minecraft.core.BlockPos)net.minecraft.commands.arguments.coordinates.BlockPosArgument.getLoadedBlockPos(context, (java.lang.String)"end"), (net.minecraft.core.BlockPos)net.minecraft.commands.arguments.coordinates.BlockPosArgument.getLoadedBlockPos(context, (java.lang.String)"destination"), (boolean)isMasked);
+    public static java.util.OptionalInt checkRegions(com.mojang.brigadier.context.CommandContext<net.minecraft.commands.CommandSourceStack> $$0, boolean $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        return net.minecraft.server.commands.ExecuteCommand.checkRegions((net.minecraft.server.level.ServerLevel)((net.minecraft.commands.CommandSourceStack)$$0.getSource()).getLevel(), (net.minecraft.core.BlockPos)net.minecraft.commands.arguments.coordinates.BlockPosArgument.getLoadedBlockPos($$0, (java.lang.String)"start"), (net.minecraft.core.BlockPos)net.minecraft.commands.arguments.coordinates.BlockPosArgument.getLoadedBlockPos($$0, (java.lang.String)"end"), (net.minecraft.core.BlockPos)net.minecraft.commands.arguments.coordinates.BlockPosArgument.getLoadedBlockPos($$0, (java.lang.String)"destination"), (boolean)$$1);
     }
 
-    public static java.util.OptionalInt checkRegions(net.minecraft.server.level.ServerLevel level, net.minecraft.core.BlockPos begin, net.minecraft.core.BlockPos end, net.minecraft.core.BlockPos destination, boolean isMasked) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        net.minecraft.world.level.levelgen.structure.BoundingBox boundingBox = net.minecraft.world.level.levelgen.structure.BoundingBox.fromCorners((net.minecraft.core.Vec3i)begin, (net.minecraft.core.Vec3i)end);
-        net.minecraft.world.level.levelgen.structure.BoundingBox boundingBox2 = net.minecraft.world.level.levelgen.structure.BoundingBox.fromCorners((net.minecraft.core.Vec3i)destination, (net.minecraft.core.Vec3i)destination.offset(boundingBox.getLength()));
-        net.minecraft.core.BlockPos blockPos = new net.minecraft.core.BlockPos(boundingBox2.minX() - boundingBox.minX(), boundingBox2.minY() - boundingBox.minY(), boundingBox2.minZ() - boundingBox.minZ());
-        int n = boundingBox.getXSpan() * boundingBox.getYSpan() * boundingBox.getZSpan();
-        if (n > 32768) {
-            throw ERROR_AREA_TOO_LARGE.create((java.lang.Object)32768, (java.lang.Object)n);
+    public static java.util.OptionalInt checkRegions(net.minecraft.server.level.ServerLevel $$0, net.minecraft.core.BlockPos $$1, net.minecraft.core.BlockPos $$2, net.minecraft.core.BlockPos $$3, boolean $$4) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        net.minecraft.world.level.levelgen.structure.BoundingBox $$5 = net.minecraft.world.level.levelgen.structure.BoundingBox.fromCorners((net.minecraft.core.Vec3i)$$1, (net.minecraft.core.Vec3i)$$2);
+        net.minecraft.world.level.levelgen.structure.BoundingBox $$6 = net.minecraft.world.level.levelgen.structure.BoundingBox.fromCorners((net.minecraft.core.Vec3i)$$3, (net.minecraft.core.Vec3i)$$3.offset($$5.getLength()));
+        net.minecraft.core.BlockPos $$7 = new net.minecraft.core.BlockPos($$6.minX() - $$5.minX(), $$6.minY() - $$5.minY(), $$6.minZ() - $$5.minZ());
+        int $$8 = $$5.getXSpan() * $$5.getYSpan() * $$5.getZSpan();
+        if ($$8 > 32768) {
+            throw ERROR_AREA_TOO_LARGE.create((java.lang.Object)32768, (java.lang.Object)$$8);
         }
-        int n2 = 0;
-        for (int i = boundingBox.minZ(); i <= boundingBox.maxZ(); ++i) {
-            for (int j = boundingBox.minY(); j <= boundingBox.maxY(); ++j) {
-                for (int k = boundingBox.minX(); k <= boundingBox.maxX(); ++k) {
-                    net.minecraft.core.BlockPos blockPos2 = new net.minecraft.core.BlockPos(k, j, i);
-                    net.minecraft.core.BlockPos blockPos3 = blockPos2.offset((net.minecraft.core.Vec3i)blockPos);
-                    net.minecraft.world.level.block.state.BlockState blockState = level.getBlockState(blockPos2);
-                    if (isMasked && blockState.is(net.minecraft.world.level.block.Blocks.AIR)) continue;
-                    if (blockState != level.getBlockState(blockPos3)) {
+        int $$9 = 0;
+        for (int $$10 = $$5.minZ(); $$10 <= $$5.maxZ(); ++$$10) {
+            for (int $$11 = $$5.minY(); $$11 <= $$5.maxY(); ++$$11) {
+                for (int $$12 = $$5.minX(); $$12 <= $$5.maxX(); ++$$12) {
+                    net.minecraft.core.BlockPos $$13 = new net.minecraft.core.BlockPos($$12, $$11, $$10);
+                    net.minecraft.core.BlockPos $$14 = $$13.offset((net.minecraft.core.Vec3i)$$7);
+                    net.minecraft.world.level.block.state.BlockState $$15 = $$0.getBlockState($$13);
+                    if ($$4 && $$15.is(net.minecraft.world.level.block.Blocks.AIR)) continue;
+                    if ($$15 != $$0.getBlockState($$14)) {
                         return java.util.OptionalInt.empty();
                     }
-                    net.minecraft.world.level.block.entity.BlockEntity blockEntity = level.getBlockEntity(blockPos2);
-                    net.minecraft.world.level.block.entity.BlockEntity blockEntity2 = level.getBlockEntity(blockPos3);
-                    if (blockEntity != null) {
-                        net.minecraft.nbt.CompoundTag compoundTag;
-                        if (blockEntity2 == null) {
+                    net.minecraft.world.level.block.entity.BlockEntity $$16 = $$0.getBlockEntity($$13);
+                    net.minecraft.world.level.block.entity.BlockEntity $$17 = $$0.getBlockEntity($$14);
+                    if ($$16 != null) {
+                        net.minecraft.nbt.CompoundTag $$19;
+                        if ($$17 == null) {
                             return java.util.OptionalInt.empty();
                         }
-                        if (blockEntity2.getType() != blockEntity.getType()) {
+                        if ($$17.getType() != $$16.getType()) {
                             return java.util.OptionalInt.empty();
                         }
-                        net.minecraft.nbt.CompoundTag compoundTag2 = blockEntity.saveWithoutMetadata();
-                        if (!compoundTag2.equals((java.lang.Object)(compoundTag = blockEntity2.saveWithoutMetadata()))) {
+                        net.minecraft.nbt.CompoundTag $$18 = $$16.saveWithoutMetadata();
+                        if (!$$18.equals((java.lang.Object)($$19 = $$17.saveWithoutMetadata()))) {
                             return java.util.OptionalInt.empty();
                         }
                     }
-                    ++n2;
+                    ++$$9;
                 }
             }
         }
-        return java.util.OptionalInt.of((int)n2);
+        return java.util.OptionalInt.of((int)$$9);
     }
 
     public static /* synthetic */ void lambda$storeValue$34(java.util.Collection $$0, net.minecraft.world.scores.Scoreboard $$1, net.minecraft.world.scores.Objective $$2, boolean $$3, com.mojang.brigadier.context.CommandContext $$4, boolean $$5, int $$6) {