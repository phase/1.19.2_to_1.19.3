--- net/minecraft/server/level/ServerChunkCache.java
+++ net/minecraft/server/level/ServerChunkCache.java
@@ -69,56 +69,56 @@
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.chunk.ChunkAccess getChunk(int chunkX, int chunkZ, net.minecraft.world.level.chunk.ChunkStatus requiredStatus, boolean load) {
-        net.minecraft.world.level.chunk.ChunkAccess chunkAccess;
+    public net.minecraft.world.level.chunk.ChunkAccess getChunk(int $$02, int $$12, net.minecraft.world.level.chunk.ChunkStatus $$2, boolean $$3) {
         if (java.lang.Thread.currentThread() != this.mainThread) {
-            return (net.minecraft.world.level.chunk.ChunkAccess)java.util.concurrent.CompletableFuture.supplyAsync(() -> this.getChunk(chunkX, chunkZ, requiredStatus, load), (java.util.concurrent.Executor)this.mainThreadProcessor).join();
+            return (net.minecraft.world.level.chunk.ChunkAccess)java.util.concurrent.CompletableFuture.supplyAsync(() -> this.getChunk($$02, $$12, $$2, $$3), (java.util.concurrent.Executor)this.mainThreadProcessor).join();
         }
-        net.minecraft.util.profiling.ProfilerFiller profilerFiller = this.level.getProfiler();
-        profilerFiller.incrementCounter("getChunk");
-        long l = net.minecraft.world.level.ChunkPos.asLong((int)chunkX, (int)chunkZ);
-        for (int i = 0; i < 4; ++i) {
-            if (l != this.lastChunkPos[i] || requiredStatus != this.lastChunkStatus[i] || (chunkAccess = this.lastChunk[i]) == null && load) continue;
-            return chunkAccess;
+        net.minecraft.util.profiling.ProfilerFiller $$4 = this.level.getProfiler();
+        $$4.incrementCounter("getChunk");
+        long $$5 = net.minecraft.world.level.ChunkPos.asLong((int)$$02, (int)$$12);
+        for (int $$6 = 0; $$6 < 4; ++$$6) {
+            net.minecraft.world.level.chunk.ChunkAccess $$7;
+            if ($$5 != this.lastChunkPos[$$6] || $$2 != this.lastChunkStatus[$$6] || ($$7 = this.lastChunk[$$6]) == null && $$3) continue;
+            return $$7;
         }
-        profilerFiller.incrementCounter("getChunkCacheMiss");
-        java.util.concurrent.CompletableFuture completableFuture = this.getChunkFutureMainThread(chunkX, chunkZ, requiredStatus, load);
-        this.mainThreadProcessor.managedBlock(() -> ((java.util.concurrent.CompletableFuture)completableFuture).isDone());
-        chunkAccess = (net.minecraft.world.level.chunk.ChunkAccess)((com.mojang.datafixers.util.Either)completableFuture.join()).map($$0 -> $$0, $$1 -> {
-            if (load) {
+        $$4.incrementCounter("getChunkCacheMiss");
+        java.util.concurrent.CompletableFuture $$8 = this.getChunkFutureMainThread($$02, $$12, $$2, $$3);
+        this.mainThreadProcessor.managedBlock(() -> ((java.util.concurrent.CompletableFuture)$$8).isDone());
+        net.minecraft.world.level.chunk.ChunkAccess $$9 = (net.minecraft.world.level.chunk.ChunkAccess)((com.mojang.datafixers.util.Either)$$8.join()).map($$0 -> $$0, $$1 -> {
+            if ($$3) {
                 throw (java.lang.IllegalStateException)net.minecraft.Util.pauseInIde((java.lang.Throwable)new java.lang.IllegalStateException("Chunk not there when requested: " + $$1));
             }
             return null;
         });
-        this.storeInCache(l, chunkAccess, requiredStatus);
-        return chunkAccess;
+        this.storeInCache($$5, $$9, $$2);
+        return $$9;
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.chunk.LevelChunk getChunkNow(int chunkX, int chunkZ) {
+    public net.minecraft.world.level.chunk.LevelChunk getChunkNow(int $$0, int $$1) {
         if (java.lang.Thread.currentThread() != this.mainThread) {
             return null;
         }
         this.level.getProfiler().incrementCounter("getChunkNow");
-        long l = net.minecraft.world.level.ChunkPos.asLong((int)chunkX, (int)chunkZ);
-        for (int i = 0; i < 4; ++i) {
-            if (l != this.lastChunkPos[i] || this.lastChunkStatus[i] != net.minecraft.world.level.chunk.ChunkStatus.FULL) continue;
-            net.minecraft.world.level.chunk.ChunkAccess chunkAccess = this.lastChunk[i];
-            return chunkAccess instanceof net.minecraft.world.level.chunk.LevelChunk ? (net.minecraft.world.level.chunk.LevelChunk)chunkAccess : null;
+        long $$2 = net.minecraft.world.level.ChunkPos.asLong((int)$$0, (int)$$1);
+        for (int $$3 = 0; $$3 < 4; ++$$3) {
+            if ($$2 != this.lastChunkPos[$$3] || this.lastChunkStatus[$$3] != net.minecraft.world.level.chunk.ChunkStatus.FULL) continue;
+            net.minecraft.world.level.chunk.ChunkAccess $$4 = this.lastChunk[$$3];
+            return $$4 instanceof net.minecraft.world.level.chunk.LevelChunk ? (net.minecraft.world.level.chunk.LevelChunk)$$4 : null;
         }
-        net.minecraft.server.level.ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(l);
-        if (chunkHolder == null) {
+        net.minecraft.server.level.ChunkHolder $$5 = this.getVisibleChunkIfPresent($$2);
+        if ($$5 == null) {
             return null;
         }
-        com.mojang.datafixers.util.Either either = (com.mojang.datafixers.util.Either)chunkHolder.getFutureIfPresent(net.minecraft.world.level.chunk.ChunkStatus.FULL).getNow(null);
-        if (either == null) {
+        com.mojang.datafixers.util.Either $$6 = (com.mojang.datafixers.util.Either)$$5.getFutureIfPresent(net.minecraft.world.level.chunk.ChunkStatus.FULL).getNow(null);
+        if ($$6 == null) {
             return null;
         }
-        net.minecraft.world.level.chunk.ChunkAccess chunkAccess = (net.minecraft.world.level.chunk.ChunkAccess)either.left().orElse(null);
-        if (chunkAccess != null) {
-            this.storeInCache(l, chunkAccess, net.minecraft.world.level.chunk.ChunkStatus.FULL);
-            if (chunkAccess instanceof net.minecraft.world.level.chunk.LevelChunk) {
-                return (net.minecraft.world.level.chunk.LevelChunk)chunkAccess;
+        net.minecraft.world.level.chunk.ChunkAccess $$7 = (net.minecraft.world.level.chunk.ChunkAccess)$$6.left().orElse(null);
+        if ($$7 != null) {
+            this.storeInCache($$2, $$7, net.minecraft.world.level.chunk.ChunkStatus.FULL);
+            if ($$7 instanceof net.minecraft.world.level.chunk.LevelChunk) {
+                return (net.minecraft.world.level.chunk.LevelChunk)$$7;
             }
         }
         return null;
@@ -171,27 +171,27 @@
         return $$0 == null || $$0.getTicketLevel() > $$1;
     }
 
-    public boolean hasChunk(int x, int z) {
-        int n;
-        net.minecraft.server.level.ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(new net.minecraft.world.level.ChunkPos(x, z).toLong());
-        return !this.chunkAbsent(chunkHolder, n = 33 + net.minecraft.world.level.chunk.ChunkStatus.getDistance((net.minecraft.world.level.chunk.ChunkStatus)net.minecraft.world.level.chunk.ChunkStatus.FULL));
+    public boolean hasChunk(int $$0, int $$1) {
+        int $$3;
+        net.minecraft.server.level.ChunkHolder $$2 = this.getVisibleChunkIfPresent(new net.minecraft.world.level.ChunkPos($$0, $$1).toLong());
+        return !this.chunkAbsent($$2, $$3 = 33 + net.minecraft.world.level.chunk.ChunkStatus.getDistance((net.minecraft.world.level.chunk.ChunkStatus)net.minecraft.world.level.chunk.ChunkStatus.FULL));
     }
 
-    public net.minecraft.world.level.BlockGetter getChunkForLighting(int chunkX, int chunkZ) {
-        long l = net.minecraft.world.level.ChunkPos.asLong((int)chunkX, (int)chunkZ);
-        net.minecraft.server.level.ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(l);
-        if (chunkHolder == null) {
+    public net.minecraft.world.level.BlockGetter getChunkForLighting(int $$0, int $$1) {
+        long $$2 = net.minecraft.world.level.ChunkPos.asLong((int)$$0, (int)$$1);
+        net.minecraft.server.level.ChunkHolder $$3 = this.getVisibleChunkIfPresent($$2);
+        if ($$3 == null) {
             return null;
         }
-        int n = CHUNK_STATUSES.size() - 1;
+        int $$4 = CHUNK_STATUSES.size() - 1;
         while (true) {
-            net.minecraft.world.level.chunk.ChunkStatus chunkStatus;
-            java.util.Optional optional;
-            if ((optional = ((com.mojang.datafixers.util.Either)chunkHolder.getFutureIfPresentUnchecked(chunkStatus = (net.minecraft.world.level.chunk.ChunkStatus)CHUNK_STATUSES.get(n)).getNow((java.lang.Object)net.minecraft.server.level.ChunkHolder.UNLOADED_CHUNK)).left()).isPresent()) {
-                return (net.minecraft.world.level.BlockGetter)optional.get();
+            net.minecraft.world.level.chunk.ChunkStatus $$5;
+            java.util.Optional $$6;
+            if (($$6 = ((com.mojang.datafixers.util.Either)$$3.getFutureIfPresentUnchecked($$5 = (net.minecraft.world.level.chunk.ChunkStatus)CHUNK_STATUSES.get($$4)).getNow((java.lang.Object)net.minecraft.server.level.ChunkHolder.UNLOADED_CHUNK)).left()).isPresent()) {
+                return (net.minecraft.world.level.BlockGetter)$$6.get();
             }
-            if (chunkStatus == net.minecraft.world.level.chunk.ChunkStatus.LIGHT.getParent()) break;
-            --n;
+            if ($$5 == net.minecraft.world.level.chunk.ChunkStatus.LIGHT.getParent()) break;
+            --$$4;
         }
         return null;
     }
@@ -226,9 +226,9 @@
         return $$2 != null && $$2.left().isPresent();
     }
 
-    public void save(boolean flush) {
+    public void save(boolean $$0) {
         this.runDistanceManagerUpdates();
-        this.chunkMap.saveAllChunks(flush);
+        this.chunkMap.saveAllChunks($$0);
     }
 
     public void close() throws java.io.IOException {
@@ -329,73 +329,73 @@
         return this.chunkMap.size();
     }
 
-    public void blockChanged(net.minecraft.core.BlockPos pos) {
-        int n;
-        int n2 = net.minecraft.core.SectionPos.blockToSectionCoord((int)pos.getX());
-        net.minecraft.server.level.ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(net.minecraft.world.level.ChunkPos.asLong((int)n2, (int)(n = net.minecraft.core.SectionPos.blockToSectionCoord((int)pos.getZ()))));
-        if (chunkHolder != null) {
-            chunkHolder.blockChanged(pos);
+    public void blockChanged(net.minecraft.core.BlockPos $$0) {
+        int $$2;
+        int $$1 = net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getX());
+        net.minecraft.server.level.ChunkHolder $$3 = this.getVisibleChunkIfPresent(net.minecraft.world.level.ChunkPos.asLong((int)$$1, (int)($$2 = net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getZ()))));
+        if ($$3 != null) {
+            $$3.blockChanged($$0);
         }
     }
 
-    public void onLightUpdate(net.minecraft.world.level.LightLayer type, net.minecraft.core.SectionPos pos) {
+    public void onLightUpdate(net.minecraft.world.level.LightLayer $$0, net.minecraft.core.SectionPos $$1) {
         this.mainThreadProcessor.execute(() -> {
-            net.minecraft.server.level.ChunkHolder $$2 = this.getVisibleChunkIfPresent(pos.chunk().toLong());
+            net.minecraft.server.level.ChunkHolder $$2 = this.getVisibleChunkIfPresent($$1.chunk().toLong());
             if ($$2 != null) {
-                $$2.sectionLightChanged(type, pos.y());
+                $$2.sectionLightChanged($$0, $$1.y());
             }
         });
     }
 
-    public <T> void addRegionTicket(net.minecraft.server.level.TicketType<T> type, net.minecraft.world.level.ChunkPos pos, int distance, T value) {
-        this.distanceManager.addRegionTicket(type, pos, distance, value);
+    public <T> void addRegionTicket(net.minecraft.server.level.TicketType<T> $$0, net.minecraft.world.level.ChunkPos $$1, int $$2, T $$3) {
+        this.distanceManager.addRegionTicket($$0, $$1, $$2, $$3);
     }
 
-    public <T> void removeRegionTicket(net.minecraft.server.level.TicketType<T> type, net.minecraft.world.level.ChunkPos pos, int distance, T value) {
-        this.distanceManager.removeRegionTicket(type, pos, distance, value);
+    public <T> void removeRegionTicket(net.minecraft.server.level.TicketType<T> $$0, net.minecraft.world.level.ChunkPos $$1, int $$2, T $$3) {
+        this.distanceManager.removeRegionTicket($$0, $$1, $$2, $$3);
     }
 
-    public void updateChunkForced(net.minecraft.world.level.ChunkPos pos, boolean add) {
-        this.distanceManager.updateChunkForced(pos, add);
+    public void updateChunkForced(net.minecraft.world.level.ChunkPos $$0, boolean $$1) {
+        this.distanceManager.updateChunkForced($$0, $$1);
     }
 
-    public void move(net.minecraft.server.level.ServerPlayer player) {
-        if (!player.isRemoved()) {
-            this.chunkMap.move(player);
+    public void move(net.minecraft.server.level.ServerPlayer $$0) {
+        if (!$$0.isRemoved()) {
+            this.chunkMap.move($$0);
         }
     }
 
-    public void removeEntity(net.minecraft.world.entity.Entity entity) {
-        this.chunkMap.removeEntity(entity);
+    public void removeEntity(net.minecraft.world.entity.Entity $$0) {
+        this.chunkMap.removeEntity($$0);
     }
 
-    public void addEntity(net.minecraft.world.entity.Entity entity) {
-        this.chunkMap.addEntity(entity);
+    public void addEntity(net.minecraft.world.entity.Entity $$0) {
+        this.chunkMap.addEntity($$0);
     }
 
-    public void broadcastAndSend(net.minecraft.world.entity.Entity entity, net.minecraft.network.protocol.Packet<?> packet) {
-        this.chunkMap.broadcastAndSend(entity, packet);
+    public void broadcastAndSend(net.minecraft.world.entity.Entity $$0, net.minecraft.network.protocol.Packet<?> $$1) {
+        this.chunkMap.broadcastAndSend($$0, $$1);
     }
 
-    public void broadcast(net.minecraft.world.entity.Entity entity, net.minecraft.network.protocol.Packet<?> packet) {
-        this.chunkMap.broadcast(entity, packet);
+    public void broadcast(net.minecraft.world.entity.Entity $$0, net.minecraft.network.protocol.Packet<?> $$1) {
+        this.chunkMap.broadcast($$0, $$1);
     }
 
-    public void setViewDistance(int viewDistance) {
-        this.chunkMap.setViewDistance(viewDistance);
+    public void setViewDistance(int $$0) {
+        this.chunkMap.setViewDistance($$0);
     }
 
     public void setSimulationDistance(int $$0) {
         this.distanceManager.updateSimulationDistance($$0);
     }
 
-    public void setSpawnSettings(boolean hostile, boolean peaceful) {
-        this.spawnEnemies = hostile;
-        this.spawnFriendlies = peaceful;
+    public void setSpawnSettings(boolean $$0, boolean $$1) {
+        this.spawnEnemies = $$0;
+        this.spawnFriendlies = $$1;
     }
 
-    public java.lang.String getChunkDebugData(net.minecraft.world.level.ChunkPos chunkPos) {
-        return this.chunkMap.getChunkDebugData(chunkPos);
+    public java.lang.String getChunkDebugData(net.minecraft.world.level.ChunkPos $$0) {
+        return this.chunkMap.getChunkDebugData($$0);
     }
 
     public net.minecraft.world.level.storage.DimensionDataStorage getDataStorage() {