--- net/minecraft/server/level/WorldGenRegion.java
+++ net/minecraft/server/level/WorldGenRegion.java
@@ -64,48 +64,48 @@
         this.currentlyGenerating = $$0;
     }
 
-    public net.minecraft.world.level.chunk.ChunkAccess getChunk(int chunkX, int chunkZ) {
-        return this.getChunk(chunkX, chunkZ, net.minecraft.world.level.chunk.ChunkStatus.EMPTY);
+    public net.minecraft.world.level.chunk.ChunkAccess getChunk(int $$0, int $$1) {
+        return this.getChunk($$0, $$1, net.minecraft.world.level.chunk.ChunkStatus.EMPTY);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.chunk.ChunkAccess getChunk(int x, int z, net.minecraft.world.level.chunk.ChunkStatus requiredStatus, boolean nonnull) {
-        net.minecraft.world.level.chunk.ChunkAccess chunkAccess;
-        if (this.hasChunk(x, z)) {
-            int n = x - this.firstPos.x;
-            int n2 = z - this.firstPos.z;
-            chunkAccess = (net.minecraft.world.level.chunk.ChunkAccess)this.cache.get(n + n2 * this.size);
-            if (chunkAccess.getStatus().isOrAfter(requiredStatus)) {
-                return chunkAccess;
+    public net.minecraft.world.level.chunk.ChunkAccess getChunk(int $$0, int $$1, net.minecraft.world.level.chunk.ChunkStatus $$2, boolean $$3) {
+        java.lang.Object $$7;
+        if (this.hasChunk($$0, $$1)) {
+            int $$4 = $$0 - this.firstPos.x;
+            int $$5 = $$1 - this.firstPos.z;
+            net.minecraft.world.level.chunk.ChunkAccess $$6 = (net.minecraft.world.level.chunk.ChunkAccess)this.cache.get($$4 + $$5 * this.size);
+            if ($$6.getStatus().isOrAfter($$2)) {
+                return $$6;
             }
         } else {
-            chunkAccess = null;
+            $$7 = null;
         }
-        if (!nonnull) {
+        if (!$$3) {
             return null;
         }
-        LOGGER.error("Requested chunk : {} {}", (java.lang.Object)x, (java.lang.Object)z);
+        LOGGER.error("Requested chunk : {} {}", (java.lang.Object)$$0, (java.lang.Object)$$1);
         LOGGER.error("Region bounds : {} {} | {} {}", new java.lang.Object[]{this.firstPos.x, this.firstPos.z, this.lastPos.x, this.lastPos.z});
-        if (chunkAccess != null) {
-            throw (java.lang.RuntimeException)net.minecraft.Util.pauseInIde((java.lang.Throwable)new java.lang.RuntimeException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Chunk is not of correct status. Expecting %s, got %s | %s %s", (java.lang.Object[])new java.lang.Object[]{requiredStatus, chunkAccess.getStatus(), x, z})));
+        if ($$7 != null) {
+            throw (java.lang.RuntimeException)net.minecraft.Util.pauseInIde((java.lang.Throwable)new java.lang.RuntimeException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Chunk is not of correct status. Expecting %s, got %s | %s %s", (java.lang.Object[])new java.lang.Object[]{$$2, $$7.getStatus(), $$0, $$1})));
         }
-        throw (java.lang.RuntimeException)net.minecraft.Util.pauseInIde((java.lang.Throwable)new java.lang.RuntimeException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"We are asking a region for a chunk out of bound | %s %s", (java.lang.Object[])new java.lang.Object[]{x, z})));
+        throw (java.lang.RuntimeException)net.minecraft.Util.pauseInIde((java.lang.Throwable)new java.lang.RuntimeException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"We are asking a region for a chunk out of bound | %s %s", (java.lang.Object[])new java.lang.Object[]{$$0, $$1})));
     }
 
-    public boolean hasChunk(int chunkX, int chunkZ) {
-        return chunkX >= this.firstPos.x && chunkX <= this.lastPos.x && chunkZ >= this.firstPos.z && chunkZ <= this.lastPos.z;
+    public boolean hasChunk(int $$0, int $$1) {
+        return $$0 >= this.firstPos.x && $$0 <= this.lastPos.x && $$1 >= this.firstPos.z && $$1 <= this.lastPos.z;
     }
 
-    public net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos pos) {
-        return this.getChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)pos.getX()), net.minecraft.core.SectionPos.blockToSectionCoord((int)pos.getZ())).getBlockState(pos);
+    public net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos $$0) {
+        return this.getChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getX()), net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getZ())).getBlockState($$0);
     }
 
-    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos pos) {
-        return this.getChunk(pos).getFluidState(pos);
+    public net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos $$0) {
+        return this.getChunk($$0).getFluidState($$0);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.entity.player.Player getNearestPlayer(double x, double y, double z, double distance, java.util.function.Predicate<net.minecraft.world.entity.Entity> predicate) {
+    public net.minecraft.world.entity.player.Player getNearestPlayer(double $$0, double $$1, double $$2, double $$3, java.util.function.Predicate<net.minecraft.world.entity.Entity> $$4) {
         return null;
     }
 
@@ -121,7 +121,7 @@
         return this.level.getUncachedNoiseBiome($$0, $$1, $$2);
     }
 
-    public float getShade(net.minecraft.core.Direction direction, boolean isShade) {
+    public float getShade(net.minecraft.core.Direction $$0, boolean $$1) {
         return 1.0f;
     }
 
@@ -129,43 +129,43 @@
         return this.level.getLightEngine();
     }
 
-    public boolean destroyBlock(net.minecraft.core.BlockPos pos, boolean dropBlock, @javax.annotation.Nullable net.minecraft.world.entity.Entity entity, int recursionLeft) {
-        net.minecraft.world.level.block.state.BlockState blockState = this.getBlockState(pos);
-        if (blockState.isAir()) {
+    public boolean destroyBlock(net.minecraft.core.BlockPos $$0, boolean $$1, @javax.annotation.Nullable net.minecraft.world.entity.Entity $$2, int $$3) {
+        net.minecraft.world.level.block.state.BlockState $$4 = this.getBlockState($$0);
+        if ($$4.isAir()) {
             return false;
         }
-        if (dropBlock) {
-            net.minecraft.world.level.block.entity.BlockEntity blockEntity = blockState.hasBlockEntity() ? this.getBlockEntity(pos) : null;
-            net.minecraft.world.level.block.Block.dropResources((net.minecraft.world.level.block.state.BlockState)blockState, (net.minecraft.world.level.Level)this.level, (net.minecraft.core.BlockPos)pos, (net.minecraft.world.level.block.entity.BlockEntity)blockEntity, (net.minecraft.world.entity.Entity)entity, (net.minecraft.world.item.ItemStack)net.minecraft.world.item.ItemStack.EMPTY);
+        if ($$1) {
+            net.minecraft.world.level.block.entity.BlockEntity $$5 = $$4.hasBlockEntity() ? this.getBlockEntity($$0) : null;
+            net.minecraft.world.level.block.Block.dropResources((net.minecraft.world.level.block.state.BlockState)$$4, (net.minecraft.world.level.Level)this.level, (net.minecraft.core.BlockPos)$$0, (net.minecraft.world.level.block.entity.BlockEntity)$$5, (net.minecraft.world.entity.Entity)$$2, (net.minecraft.world.item.ItemStack)net.minecraft.world.item.ItemStack.EMPTY);
         }
-        return this.setBlock(pos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), 3, recursionLeft);
+        return this.setBlock($$0, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), 3, $$3);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos pos) {
-        net.minecraft.world.level.chunk.ChunkAccess chunkAccess = this.getChunk(pos);
-        net.minecraft.world.level.block.entity.BlockEntity blockEntity = chunkAccess.getBlockEntity(pos);
-        if (blockEntity != null) {
-            return blockEntity;
+    public net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos $$0) {
+        net.minecraft.world.level.chunk.ChunkAccess $$1 = this.getChunk($$0);
+        net.minecraft.world.level.block.entity.BlockEntity $$2 = $$1.getBlockEntity($$0);
+        if ($$2 != null) {
+            return $$2;
         }
-        net.minecraft.nbt.CompoundTag compoundTag = chunkAccess.getBlockEntityNbt(pos);
-        net.minecraft.world.level.block.state.BlockState blockState = chunkAccess.getBlockState(pos);
-        if (compoundTag != null) {
-            if ("DUMMY".equals((java.lang.Object)compoundTag.getString("id"))) {
-                if (!blockState.hasBlockEntity()) {
+        net.minecraft.nbt.CompoundTag $$3 = $$1.getBlockEntityNbt($$0);
+        net.minecraft.world.level.block.state.BlockState $$4 = $$1.getBlockState($$0);
+        if ($$3 != null) {
+            if ("DUMMY".equals((java.lang.Object)$$3.getString("id"))) {
+                if (!$$4.hasBlockEntity()) {
                     return null;
                 }
-                blockEntity = ((net.minecraft.world.level.block.EntityBlock)blockState.getBlock()).newBlockEntity(pos, blockState);
+                $$2 = ((net.minecraft.world.level.block.EntityBlock)$$4.getBlock()).newBlockEntity($$0, $$4);
             } else {
-                blockEntity = net.minecraft.world.level.block.entity.BlockEntity.loadStatic((net.minecraft.core.BlockPos)pos, (net.minecraft.world.level.block.state.BlockState)blockState, (net.minecraft.nbt.CompoundTag)compoundTag);
+                $$2 = net.minecraft.world.level.block.entity.BlockEntity.loadStatic((net.minecraft.core.BlockPos)$$0, (net.minecraft.world.level.block.state.BlockState)$$4, (net.minecraft.nbt.CompoundTag)$$3);
             }
-            if (blockEntity != null) {
-                chunkAccess.setBlockEntity(blockEntity);
-                return blockEntity;
+            if ($$2 != null) {
+                $$1.setBlockEntity($$2);
+                return $$2;
             }
         }
-        if (blockState.hasBlockEntity()) {
-            LOGGER.warn("Tried to access a block entity before it was created. {}", (java.lang.Object)pos);
+        if ($$4.hasBlockEntity()) {
+            LOGGER.warn("Tried to access a block entity before it was created. {}", (java.lang.Object)$$0);
         }
         return null;
     }
@@ -189,53 +189,53 @@
         return true;
     }
 
-    public boolean setBlock(net.minecraft.core.BlockPos pos, net.minecraft.world.level.block.state.BlockState state, int flags, int recursionLeft) {
-        if (!this.ensureCanWrite(pos)) {
+    public boolean setBlock(net.minecraft.core.BlockPos $$0, net.minecraft.world.level.block.state.BlockState $$1, int $$2, int $$3) {
+        if (!this.ensureCanWrite($$0)) {
             return false;
         }
-        net.minecraft.world.level.chunk.ChunkAccess chunkAccess = this.getChunk(pos);
-        net.minecraft.world.level.block.state.BlockState blockState = chunkAccess.setBlockState(pos, state, false);
-        if (blockState != null) {
-            this.level.onBlockStateChange(pos, blockState, state);
+        net.minecraft.world.level.chunk.ChunkAccess $$4 = this.getChunk($$0);
+        net.minecraft.world.level.block.state.BlockState $$5 = $$4.setBlockState($$0, $$1, false);
+        if ($$5 != null) {
+            this.level.onBlockStateChange($$0, $$5, $$1);
         }
-        if (state.hasBlockEntity()) {
-            if (chunkAccess.getStatus().getChunkType() == net.minecraft.world.level.chunk.ChunkStatus$ChunkType.LEVELCHUNK) {
-                net.minecraft.world.level.block.entity.BlockEntity blockEntity = ((net.minecraft.world.level.block.EntityBlock)state.getBlock()).newBlockEntity(pos, state);
-                if (blockEntity != null) {
-                    chunkAccess.setBlockEntity(blockEntity);
+        if ($$1.hasBlockEntity()) {
+            if ($$4.getStatus().getChunkType() == net.minecraft.world.level.chunk.ChunkStatus$ChunkType.LEVELCHUNK) {
+                net.minecraft.world.level.block.entity.BlockEntity $$6 = ((net.minecraft.world.level.block.EntityBlock)$$1.getBlock()).newBlockEntity($$0, $$1);
+                if ($$6 != null) {
+                    $$4.setBlockEntity($$6);
                 } else {
-                    chunkAccess.removeBlockEntity(pos);
+                    $$4.removeBlockEntity($$0);
                 }
             } else {
-                net.minecraft.nbt.CompoundTag compoundTag = new net.minecraft.nbt.CompoundTag();
-                compoundTag.putInt("x", pos.getX());
-                compoundTag.putInt("y", pos.getY());
-                compoundTag.putInt("z", pos.getZ());
-                compoundTag.putString("id", "DUMMY");
-                chunkAccess.setBlockEntityNbt(compoundTag);
+                net.minecraft.nbt.CompoundTag $$7 = new net.minecraft.nbt.CompoundTag();
+                $$7.putInt("x", $$0.getX());
+                $$7.putInt("y", $$0.getY());
+                $$7.putInt("z", $$0.getZ());
+                $$7.putString("id", "DUMMY");
+                $$4.setBlockEntityNbt($$7);
             }
-        } else if (blockState != null && blockState.hasBlockEntity()) {
-            chunkAccess.removeBlockEntity(pos);
+        } else if ($$5 != null && $$5.hasBlockEntity()) {
+            $$4.removeBlockEntity($$0);
         }
-        if (state.hasPostProcess((net.minecraft.world.level.BlockGetter)this, pos)) {
-            this.markPosForPostprocessing(pos);
+        if ($$1.hasPostProcess((net.minecraft.world.level.BlockGetter)this, $$0)) {
+            this.markPosForPostprocessing($$0);
         }
         return true;
     }
 
-    public void markPosForPostprocessing(net.minecraft.core.BlockPos pos) {
-        this.getChunk(pos).markPosForPostprocessing(pos);
+    public void markPosForPostprocessing(net.minecraft.core.BlockPos $$0) {
+        this.getChunk($$0).markPosForPostprocessing($$0);
     }
 
-    public boolean addFreshEntity(net.minecraft.world.entity.Entity entity) {
-        int n = net.minecraft.core.SectionPos.blockToSectionCoord((int)entity.getBlockX());
-        int n2 = net.minecraft.core.SectionPos.blockToSectionCoord((int)entity.getBlockZ());
-        this.getChunk(n, n2).addEntity(entity);
+    public boolean addFreshEntity(net.minecraft.world.entity.Entity $$0) {
+        int $$1 = net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getBlockX());
+        int $$2 = net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getBlockZ());
+        this.getChunk($$1, $$2).addEntity($$0);
         return true;
     }
 
-    public boolean removeBlock(net.minecraft.core.BlockPos pos, boolean isMoving) {
-        return this.setBlock(pos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), 3);
+    public boolean removeBlock(net.minecraft.core.BlockPos $$0, boolean $$1) {
+        return this.setBlock($$0, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), 3);
     }
 
     public net.minecraft.world.level.border.WorldBorder getWorldBorder() {
@@ -255,12 +255,16 @@
         return this.level.registryAccess();
     }
 
+    public net.minecraft.world.flag.FeatureFlagSet enabledFeatures() {
+        return this.level.enabledFeatures();
+    }
+
     public net.minecraft.world.level.storage.LevelData getLevelData() {
         return this.levelData;
     }
 
-    public net.minecraft.world.DifficultyInstance getCurrentDifficultyAt(net.minecraft.core.BlockPos pos) {
-        if (!this.hasChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)pos.getX()), net.minecraft.core.SectionPos.blockToSectionCoord((int)pos.getZ()))) {
+    public net.minecraft.world.DifficultyInstance getCurrentDifficultyAt(net.minecraft.core.BlockPos $$0) {
+        if (!this.hasChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getX()), net.minecraft.core.SectionPos.blockToSectionCoord((int)$$0.getZ()))) {
             throw new java.lang.RuntimeException("We are asking a region for a chunk out of bound");
         }
         return new net.minecraft.world.DifficultyInstance(this.level.getDifficulty(), this.level.getDayTime(), 0L, this.level.getMoonBrightness());
@@ -295,17 +299,17 @@
         return this.random;
     }
 
-    public int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types heightmapType, int x, int z) {
-        return this.getChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)x), net.minecraft.core.SectionPos.blockToSectionCoord((int)z)).getHeight(heightmapType, x & 0xF, z & 0xF) + 1;
+    public int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types $$0, int $$1, int $$2) {
+        return this.getChunk(net.minecraft.core.SectionPos.blockToSectionCoord((int)$$1), net.minecraft.core.SectionPos.blockToSectionCoord((int)$$2)).getHeight($$0, $$1 & 0xF, $$2 & 0xF) + 1;
     }
 
-    public void playSound(@javax.annotation.Nullable net.minecraft.world.entity.player.Player player, net.minecraft.core.BlockPos pos, net.minecraft.sounds.SoundEvent sound, net.minecraft.sounds.SoundSource category, float volume, float pitch) {
+    public void playSound(@javax.annotation.Nullable net.minecraft.world.entity.player.Player $$0, net.minecraft.core.BlockPos $$1, net.minecraft.sounds.SoundEvent $$2, net.minecraft.sounds.SoundSource $$3, float $$4, float $$5) {
     }
 
-    public void addParticle(net.minecraft.core.particles.ParticleOptions particleData, double x, double y, double z, double xSpeed, double ySpeed, double zSpeed) {
+    public void addParticle(net.minecraft.core.particles.ParticleOptions $$0, double $$1, double $$2, double $$3, double $$4, double $$5, double $$6) {
     }
 
-    public void levelEvent(@javax.annotation.Nullable net.minecraft.world.entity.player.Player player, int type, net.minecraft.core.BlockPos pos, int data) {
+    public void levelEvent(@javax.annotation.Nullable net.minecraft.world.entity.player.Player $$0, int $$1, net.minecraft.core.BlockPos $$2, int $$3) {
     }
 
     public void gameEvent(net.minecraft.world.level.gameevent.GameEvent $$0, net.minecraft.world.phys.Vec3 $$1, net.minecraft.world.level.gameevent.GameEvent$Context $$2) {
@@ -315,8 +319,8 @@
         return this.dimensionType;
     }
 
-    public boolean isStateAtPosition(net.minecraft.core.BlockPos pos, java.util.function.Predicate<net.minecraft.world.level.block.state.BlockState> state) {
-        return state.test((java.lang.Object)this.getBlockState(pos));
+    public boolean isStateAtPosition(net.minecraft.core.BlockPos $$0, java.util.function.Predicate<net.minecraft.world.level.block.state.BlockState> $$1) {
+        return $$1.test((java.lang.Object)this.getBlockState($$0));
     }
 
     public boolean isFluidAtPosition(net.minecraft.core.BlockPos $$0, java.util.function.Predicate<net.minecraft.world.level.material.FluidState> $$1) {
@@ -327,7 +331,7 @@
         return java.util.Collections.emptyList();
     }
 
-    public java.util.List<net.minecraft.world.entity.Entity> getEntities(@javax.annotation.Nullable net.minecraft.world.entity.Entity entity, net.minecraft.world.phys.AABB boundingBox, @javax.annotation.Nullable java.util.function.Predicate<? super net.minecraft.world.entity.Entity> predicate) {
+    public java.util.List<net.minecraft.world.entity.Entity> getEntities(@javax.annotation.Nullable net.minecraft.world.entity.Entity $$0, net.minecraft.world.phys.AABB $$1, @javax.annotation.Nullable java.util.function.Predicate<? super net.minecraft.world.entity.Entity> $$2) {
         return java.util.Collections.emptyList();
     }
 