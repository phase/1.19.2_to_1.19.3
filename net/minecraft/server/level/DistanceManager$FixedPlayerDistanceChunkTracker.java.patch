--- net/minecraft/server/level/DistanceManager$FixedPlayerDistanceChunkTracker.java
+++ net/minecraft/server/level/DistanceManager$FixedPlayerDistanceChunkTracker.java
@@ -18,25 +18,30 @@
         this.chunks.defaultReturnValue((byte)($$0 + 2));
     }
 
-    public int getLevel(long sectionPos) {
-        return this.chunks.get(sectionPos);
+    public int getLevel(long $$0) {
+        return this.chunks.get($$0);
     }
 
-    public void setLevel(long sectionPos, int level) {
-        byte by = level > this.maxDistance ? this.chunks.remove(sectionPos) : this.chunks.put(sectionPos, (byte)level);
-        this.onLevelChange(sectionPos, (int)by, level);
+    public void setLevel(long $$0, int $$1) {
+        byte $$3;
+        if ($$1 > this.maxDistance) {
+            byte $$2 = this.chunks.remove($$0);
+        } else {
+            $$3 = this.chunks.put($$0, (byte)$$1);
+        }
+        this.onLevelChange($$0, (int)$$3, $$1);
     }
 
-    public void onLevelChange(long chunkPos, int oldLevel, int newLevel) {
+    public void onLevelChange(long $$0, int $$1, int $$2) {
     }
 
-    public int getLevelFromSource(long pos) {
-        return this.havePlayer(pos) ? 0 : java.lang.Integer.MAX_VALUE;
+    public int getLevelFromSource(long $$0) {
+        return this.havePlayer($$0) ? 0 : java.lang.Integer.MAX_VALUE;
     }
 
-    public boolean havePlayer(long chunkPos) {
-        it.unimi.dsi.fastutil.objects.ObjectSet objectSet = (it.unimi.dsi.fastutil.objects.ObjectSet)this.this$0.playersPerChunk.get(chunkPos);
-        return objectSet != null && !objectSet.isEmpty();
+    public boolean havePlayer(long $$0) {
+        it.unimi.dsi.fastutil.objects.ObjectSet $$1 = (it.unimi.dsi.fastutil.objects.ObjectSet)this.this$0.playersPerChunk.get($$0);
+        return $$1 != null && !$$1.isEmpty();
     }
 
     public void runAllUpdates() {