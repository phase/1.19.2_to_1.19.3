--- net/minecraft/server/level/DistanceManager$ChunkTicketTracker.java
+++ net/minecraft/server/level/DistanceManager$ChunkTicketTracker.java
@@ -13,34 +13,34 @@
         super(net.minecraft.server.level.ChunkMap.MAX_CHUNK_DISTANCE + 2, 16, 256);
     }
 
-    public int getLevelFromSource(long pos) {
-        net.minecraft.util.SortedArraySet sortedArraySet = (net.minecraft.util.SortedArraySet)this.this$0.tickets.get(pos);
-        if (sortedArraySet == null) {
+    public int getLevelFromSource(long $$0) {
+        net.minecraft.util.SortedArraySet $$1 = (net.minecraft.util.SortedArraySet)this.this$0.tickets.get($$0);
+        if ($$1 == null) {
             return java.lang.Integer.MAX_VALUE;
         }
-        if (sortedArraySet.isEmpty()) {
+        if ($$1.isEmpty()) {
             return java.lang.Integer.MAX_VALUE;
         }
-        return ((net.minecraft.server.level.Ticket)sortedArraySet.first()).getTicketLevel();
+        return ((net.minecraft.server.level.Ticket)$$1.first()).getTicketLevel();
     }
 
-    public int getLevel(long sectionPos) {
-        net.minecraft.server.level.ChunkHolder chunkHolder;
-        if (!this.this$0.isChunkToRemove(sectionPos) && (chunkHolder = this.this$0.getChunk(sectionPos)) != null) {
-            return chunkHolder.getTicketLevel();
+    public int getLevel(long $$0) {
+        net.minecraft.server.level.ChunkHolder $$1;
+        if (!this.this$0.isChunkToRemove($$0) && ($$1 = this.this$0.getChunk($$0)) != null) {
+            return $$1.getTicketLevel();
         }
         return net.minecraft.server.level.ChunkMap.MAX_CHUNK_DISTANCE + 1;
     }
 
-    public void setLevel(long sectionPos, int level) {
-        int n;
-        net.minecraft.server.level.ChunkHolder chunkHolder = this.this$0.getChunk(sectionPos);
-        int n2 = n = chunkHolder == null ? net.minecraft.server.level.ChunkMap.MAX_CHUNK_DISTANCE + 1 : chunkHolder.getTicketLevel();
-        if (n == level) {
+    public void setLevel(long $$0, int $$1) {
+        int $$3;
+        net.minecraft.server.level.ChunkHolder $$2 = this.this$0.getChunk($$0);
+        int n = $$3 = $$2 == null ? net.minecraft.server.level.ChunkMap.MAX_CHUNK_DISTANCE + 1 : $$2.getTicketLevel();
+        if ($$3 == $$1) {
             return;
         }
-        if ((chunkHolder = this.this$0.updateChunkScheduling(sectionPos, level, chunkHolder, n)) != null) {
-            this.this$0.chunksToUpdateFutures.add((java.lang.Object)chunkHolder);
+        if (($$2 = this.this$0.updateChunkScheduling($$0, $$1, $$2, $$3)) != null) {
+            this.this$0.chunksToUpdateFutures.add((java.lang.Object)$$2);
         }
     }
 