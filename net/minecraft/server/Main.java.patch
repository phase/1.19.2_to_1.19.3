--- net/minecraft/server/Main.java
+++ net/minecraft/server/Main.java
@@ -10,104 +10,116 @@
     public net.minecraft.server.Main() {
     }
 
+    /*
+     * WARNING - void declaration
+     */
     @net.minecraft.obfuscate.DontObfuscate
-    public static void main(java.lang.String[] args) {
+    public static void main(java.lang.String[] $$0) {
         net.minecraft.SharedConstants.tryDetectVersion();
-        joptsimple.OptionParser optionParser = new joptsimple.OptionParser();
-        joptsimple.OptionSpecBuilder optionSpecBuilder = optionParser.accepts("nogui");
-        joptsimple.OptionSpecBuilder optionSpecBuilder2 = optionParser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
-        joptsimple.OptionSpecBuilder optionSpecBuilder3 = optionParser.accepts("demo");
-        joptsimple.OptionSpecBuilder optionSpecBuilder4 = optionParser.accepts("bonusChest");
-        joptsimple.OptionSpecBuilder optionSpecBuilder5 = optionParser.accepts("forceUpgrade");
-        joptsimple.OptionSpecBuilder optionSpecBuilder6 = optionParser.accepts("eraseCache");
-        joptsimple.OptionSpecBuilder optionSpecBuilder7 = optionParser.accepts("safeMode", "Loads level with vanilla datapack only");
-        joptsimple.AbstractOptionSpec abstractOptionSpec = optionParser.accepts("help").forHelp();
-        joptsimple.ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec = optionParser.accepts("singleplayer").withRequiredArg();
-        joptsimple.ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec2 = optionParser.accepts("universe").withRequiredArg().defaultsTo((java.lang.Object)".", (java.lang.Object[])new java.lang.String[0]);
-        joptsimple.ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec3 = optionParser.accepts("world").withRequiredArg();
-        joptsimple.ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec4 = optionParser.accepts("port").withRequiredArg().ofType(java.lang.Integer.class).defaultsTo((java.lang.Object)-1, (java.lang.Object[])new java.lang.Integer[0]);
-        joptsimple.ArgumentAcceptingOptionSpec argumentAcceptingOptionSpec5 = optionParser.accepts("serverId").withRequiredArg();
-        joptsimple.OptionSpecBuilder optionSpecBuilder8 = optionParser.accepts("jfrProfile");
-        joptsimple.NonOptionArgumentSpec nonOptionArgumentSpec = optionParser.nonOptions();
+        joptsimple.OptionParser $$1 = new joptsimple.OptionParser();
+        joptsimple.OptionSpecBuilder $$2 = $$1.accepts("nogui");
+        joptsimple.OptionSpecBuilder $$3 = $$1.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
+        joptsimple.OptionSpecBuilder $$4 = $$1.accepts("demo");
+        joptsimple.OptionSpecBuilder $$5 = $$1.accepts("bonusChest");
+        joptsimple.OptionSpecBuilder $$6 = $$1.accepts("forceUpgrade");
+        joptsimple.OptionSpecBuilder $$7 = $$1.accepts("eraseCache");
+        joptsimple.OptionSpecBuilder $$8 = $$1.accepts("safeMode", "Loads level with vanilla datapack only");
+        joptsimple.AbstractOptionSpec $$9 = $$1.accepts("help").forHelp();
+        joptsimple.ArgumentAcceptingOptionSpec $$10 = $$1.accepts("singleplayer").withRequiredArg();
+        joptsimple.ArgumentAcceptingOptionSpec $$11 = $$1.accepts("universe").withRequiredArg().defaultsTo((java.lang.Object)".", (java.lang.Object[])new java.lang.String[0]);
+        joptsimple.ArgumentAcceptingOptionSpec $$12 = $$1.accepts("world").withRequiredArg();
+        joptsimple.ArgumentAcceptingOptionSpec $$13 = $$1.accepts("port").withRequiredArg().ofType(java.lang.Integer.class).defaultsTo((java.lang.Object)-1, (java.lang.Object[])new java.lang.Integer[0]);
+        joptsimple.ArgumentAcceptingOptionSpec $$14 = $$1.accepts("serverId").withRequiredArg();
+        joptsimple.OptionSpecBuilder $$15 = $$1.accepts("jfrProfile");
+        joptsimple.NonOptionArgumentSpec $$16 = $$1.nonOptions();
         try {
-            net.minecraft.server.WorldStem worldStem;
-            net.minecraft.server.WorldLoader$InitConfig initConfig;
-            net.minecraft.server.WorldLoader$PackConfig packConfig;
-            net.minecraft.world.level.DataPackConfig dataPackConfig;
-            boolean bl;
-            joptsimple.OptionSet optionSet = optionParser.parse(args);
-            if (optionSet.has((joptsimple.OptionSpec)abstractOptionSpec)) {
-                optionParser.printHelpOn((java.io.OutputStream)java.lang.System.err);
+            void $$33;
+            boolean $$28;
+            joptsimple.OptionSet $$17 = $$1.parse($$0);
+            if ($$17.has((joptsimple.OptionSpec)$$9)) {
+                $$1.printHelpOn((java.io.OutputStream)java.lang.System.err);
                 return;
             }
             net.minecraft.CrashReport.preload();
-            if (optionSet.has((joptsimple.OptionSpec)optionSpecBuilder8)) {
+            if ($$17.has((joptsimple.OptionSpec)$$15)) {
                 net.minecraft.util.profiling.jfr.JvmProfiler.INSTANCE.start(net.minecraft.util.profiling.jfr.Environment.SERVER);
             }
             net.minecraft.server.Bootstrap.bootStrap();
             net.minecraft.server.Bootstrap.validate();
             net.minecraft.Util.startTimerHackThread();
-            java.nio.file.Path path = java.nio.file.Paths.get((java.lang.String)"server.properties", (java.lang.String[])new java.lang.String[0]);
-            net.minecraft.server.dedicated.DedicatedServerSettings dedicatedServerSettings = new net.minecraft.server.dedicated.DedicatedServerSettings(path);
-            dedicatedServerSettings.forceSave();
-            java.nio.file.Path path2 = java.nio.file.Paths.get((java.lang.String)"eula.txt", (java.lang.String[])new java.lang.String[0]);
-            net.minecraft.server.Eula eula = new net.minecraft.server.Eula(path2);
-            if (optionSet.has((joptsimple.OptionSpec)optionSpecBuilder2)) {
-                LOGGER.info("Initialized '{}' and '{}'", (java.lang.Object)path.toAbsolutePath(), (java.lang.Object)path2.toAbsolutePath());
+            java.nio.file.Path $$18 = java.nio.file.Paths.get((java.lang.String)"server.properties", (java.lang.String[])new java.lang.String[0]);
+            net.minecraft.server.dedicated.DedicatedServerSettings $$19 = new net.minecraft.server.dedicated.DedicatedServerSettings($$18);
+            $$19.forceSave();
+            java.nio.file.Path $$20 = java.nio.file.Paths.get((java.lang.String)"eula.txt", (java.lang.String[])new java.lang.String[0]);
+            net.minecraft.server.Eula $$21 = new net.minecraft.server.Eula($$20);
+            if ($$17.has((joptsimple.OptionSpec)$$3)) {
+                LOGGER.info("Initialized '{}' and '{}'", (java.lang.Object)$$18.toAbsolutePath(), (java.lang.Object)$$20.toAbsolutePath());
                 return;
             }
-            if (!eula.hasAgreedToEULA()) {
+            if (!$$21.hasAgreedToEULA()) {
                 LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
                 return;
             }
-            java.io.File file = new java.io.File((java.lang.String)optionSet.valueOf((joptsimple.OptionSpec)argumentAcceptingOptionSpec2));
-            net.minecraft.server.Services services = net.minecraft.server.Services.create((com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService)new com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService(java.net.Proxy.NO_PROXY), (java.io.File)file);
-            java.lang.String string = (java.lang.String)java.util.Optional.ofNullable((java.lang.Object)((java.lang.String)optionSet.valueOf((joptsimple.OptionSpec)argumentAcceptingOptionSpec3))).orElse((java.lang.Object)dedicatedServerSettings.getProperties().levelName);
-            net.minecraft.world.level.storage.LevelStorageSource levelStorageSource = net.minecraft.world.level.storage.LevelStorageSource.createDefault((java.nio.file.Path)file.toPath());
-            net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess levelStorageAccess = levelStorageSource.createAccess(string);
-            net.minecraft.world.level.storage.LevelSummary levelSummary = levelStorageAccess.getSummary();
-            if (levelSummary != null) {
-                if (levelSummary.requiresManualConversion()) {
+            java.io.File $$22 = new java.io.File((java.lang.String)$$17.valueOf((joptsimple.OptionSpec)$$11));
+            net.minecraft.server.Services $$23 = net.minecraft.server.Services.create((com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService)new com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService(java.net.Proxy.NO_PROXY), (java.io.File)$$22);
+            java.lang.String $$24 = (java.lang.String)java.util.Optional.ofNullable((java.lang.Object)((java.lang.String)$$17.valueOf((joptsimple.OptionSpec)$$12))).orElse((java.lang.Object)$$19.getProperties().levelName);
+            net.minecraft.world.level.storage.LevelStorageSource $$25 = net.minecraft.world.level.storage.LevelStorageSource.createDefault((java.nio.file.Path)$$22.toPath());
+            net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess $$26 = $$25.createAccess($$24);
+            net.minecraft.world.level.storage.LevelSummary $$27 = $$26.getSummary();
+            if ($$27 != null) {
+                if ($$27.requiresManualConversion()) {
                     LOGGER.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
                     return;
                 }
-                if (!levelSummary.isCompatible()) {
+                if (!$$27.isCompatible()) {
                     LOGGER.info("This world was created by an incompatible version.");
                     return;
                 }
             }
-            if (bl = optionSet.has((joptsimple.OptionSpec)optionSpecBuilder7)) {
+            if ($$28 = $$17.has((joptsimple.OptionSpec)$$8)) {
                 LOGGER.warn("Safe mode active, only vanilla datapack will be loaded");
             }
-            net.minecraft.server.packs.repository.PackRepository packRepository = new net.minecraft.server.packs.repository.PackRepository(net.minecraft.server.packs.PackType.SERVER_DATA, new net.minecraft.server.packs.repository.RepositorySource[]{new net.minecraft.server.packs.repository.ServerPacksSource(), new net.minecraft.server.packs.repository.FolderRepositorySource(levelStorageAccess.getLevelPath(net.minecraft.world.level.storage.LevelResource.DATAPACK_DIR).toFile(), net.minecraft.server.packs.repository.PackSource.WORLD)});
+            net.minecraft.server.packs.repository.PackRepository $$29 = net.minecraft.server.packs.repository.ServerPacksSource.createPackRepository((java.nio.file.Path)$$26.getLevelPath(net.minecraft.world.level.storage.LevelResource.DATAPACK_DIR));
             try {
-                dataPackConfig = (net.minecraft.world.level.DataPackConfig)java.util.Objects.requireNonNullElse((java.lang.Object)levelStorageAccess.getDataPacks(), (java.lang.Object)net.minecraft.world.level.DataPackConfig.DEFAULT);
-                packConfig = new net.minecraft.server.WorldLoader$PackConfig(packRepository, dataPackConfig, bl);
-                initConfig = new net.minecraft.server.WorldLoader$InitConfig(packConfig, net.minecraft.commands.Commands$CommandSelection.DEDICATED, dedicatedServerSettings.getProperties().functionPermissionLevel);
-                worldStem = (net.minecraft.server.WorldStem)net.minecraft.Util.blockUntilDone(arg_0 -> net.minecraft.server.Main.lambda$main$1(initConfig, levelStorageAccess, optionSet, (joptsimple.OptionSpec)optionSpecBuilder3, dedicatedServerSettings, (joptsimple.OptionSpec)optionSpecBuilder4, arg_0)).get();
+                net.minecraft.server.WorldLoader$InitConfig $$30 = net.minecraft.server.Main.loadOrCreateConfig((net.minecraft.server.dedicated.DedicatedServerProperties)$$19.getProperties(), (net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess)$$26, (boolean)$$28, (net.minecraft.server.packs.repository.PackRepository)$$29);
+                net.minecraft.server.WorldStem $$31 = (net.minecraft.server.WorldStem)net.minecraft.Util.blockUntilDone(arg_0 -> net.minecraft.server.Main.lambda$main$1($$30, $$26, $$17, (joptsimple.OptionSpec)$$4, $$19, (joptsimple.OptionSpec)$$5, arg_0)).get();
             }
-            catch (java.lang.Exception exception) {
-                LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", (java.lang.Throwable)exception);
+            catch (java.lang.Exception $$32) {
+                LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", (java.lang.Throwable)$$32);
                 return;
             }
-            dataPackConfig = worldStem.registryAccess();
-            dedicatedServerSettings.getProperties().getWorldGenSettings((net.minecraft.core.RegistryAccess)dataPackConfig);
-            packConfig = worldStem.worldData();
-            if (optionSet.has((joptsimple.OptionSpec)optionSpecBuilder5)) {
-                net.minecraft.server.Main.forceUpgrade((net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess)levelStorageAccess, (com.mojang.datafixers.DataFixer)net.minecraft.util.datafix.DataFixers.getDataFixer(), (boolean)optionSet.has((joptsimple.OptionSpec)optionSpecBuilder6), () -> true, (net.minecraft.world.level.levelgen.WorldGenSettings)packConfig.worldGenSettings());
+            net.minecraft.core.RegistryAccess$Frozen $$34 = $$33.registries().compositeAccess();
+            if ($$17.has((joptsimple.OptionSpec)$$6)) {
+                net.minecraft.server.Main.forceUpgrade((net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess)$$26, (com.mojang.datafixers.DataFixer)net.minecraft.util.datafix.DataFixers.getDataFixer(), (boolean)$$17.has((joptsimple.OptionSpec)$$7), () -> true, (net.minecraft.core.Registry)$$34.registryOrThrow(net.minecraft.core.Registry.LEVEL_STEM_REGISTRY));
             }
-            levelStorageAccess.saveDataTag((net.minecraft.core.RegistryAccess)dataPackConfig, (net.minecraft.world.level.storage.WorldData)packConfig);
-            initConfig = (net.minecraft.server.dedicated.DedicatedServer)net.minecraft.server.MinecraftServer.spin(arg_0 -> net.minecraft.server.Main.lambda$main$3(levelStorageAccess, packRepository, worldStem, dedicatedServerSettings, services, optionSet, (joptsimple.OptionSpec)argumentAcceptingOptionSpec, (joptsimple.OptionSpec)argumentAcceptingOptionSpec4, (joptsimple.OptionSpec)optionSpecBuilder3, (joptsimple.OptionSpec)argumentAcceptingOptionSpec5, (joptsimple.OptionSpec)optionSpecBuilder, (joptsimple.OptionSpec)nonOptionArgumentSpec, arg_0));
-            net.minecraft.server.Main$1 var34_36 = new /* Unavailable Anonymous Inner Class!! */;
-            var34_36.setUncaughtExceptionHandler((java.lang.Thread$UncaughtExceptionHandler)new net.minecraft.DefaultUncaughtExceptionHandler(LOGGER));
-            java.lang.Runtime.getRuntime().addShutdownHook((java.lang.Thread)var34_36);
+            net.minecraft.world.level.storage.WorldData $$35 = $$33.worldData();
+            $$26.saveDataTag((net.minecraft.core.RegistryAccess)$$34, $$35);
+            net.minecraft.server.dedicated.DedicatedServer $$36 = (net.minecraft.server.dedicated.DedicatedServer)net.minecraft.server.MinecraftServer.spin(arg_0 -> net.minecraft.server.Main.lambda$main$3($$26, $$29, (net.minecraft.server.WorldStem)$$33, $$19, $$23, $$17, (joptsimple.OptionSpec)$$10, (joptsimple.OptionSpec)$$13, (joptsimple.OptionSpec)$$4, (joptsimple.OptionSpec)$$14, (joptsimple.OptionSpec)$$2, (joptsimple.OptionSpec)$$16, arg_0));
+            net.minecraft.server.Main$1 $$37 = new /* Unavailable Anonymous Inner Class!! */;
+            $$37.setUncaughtExceptionHandler((java.lang.Thread$UncaughtExceptionHandler)new net.minecraft.DefaultUncaughtExceptionHandler(LOGGER));
+            java.lang.Runtime.getRuntime().addShutdownHook((java.lang.Thread)$$37);
         }
-        catch (java.lang.Exception exception) {
-            LOGGER.error(com.mojang.logging.LogUtils.FATAL_MARKER, "Failed to start the minecraft server", (java.lang.Throwable)exception);
+        catch (java.lang.Exception $$38) {
+            LOGGER.error(com.mojang.logging.LogUtils.FATAL_MARKER, "Failed to start the minecraft server", (java.lang.Throwable)$$38);
         }
     }
 
-    public static void forceUpgrade(net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess $$0, com.mojang.datafixers.DataFixer $$1, boolean $$2, java.util.function.BooleanSupplier $$3, net.minecraft.world.level.levelgen.WorldGenSettings $$4) {
+    public static net.minecraft.server.WorldLoader$InitConfig loadOrCreateConfig(net.minecraft.server.dedicated.DedicatedServerProperties $$0, net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess $$1, boolean $$2, net.minecraft.server.packs.repository.PackRepository $$3) {
+        net.minecraft.world.level.WorldDataConfiguration $$8;
+        boolean $$7;
+        net.minecraft.world.level.WorldDataConfiguration $$4 = $$1.getDataConfiguration();
+        if ($$4 != null) {
+            boolean $$5 = false;
+            net.minecraft.world.level.WorldDataConfiguration $$6 = $$4;
+        } else {
+            $$7 = true;
+            $$8 = new net.minecraft.world.level.WorldDataConfiguration($$0.initialDataPackConfiguration, net.minecraft.world.flag.FeatureFlags.DEFAULT_FLAGS);
+        }
+        net.minecraft.server.WorldLoader$PackConfig $$9 = new net.minecraft.server.WorldLoader$PackConfig($$3, $$8, $$2, $$7);
+        return new net.minecraft.server.WorldLoader$InitConfig($$9, net.minecraft.commands.Commands$CommandSelection.DEDICATED, $$0.functionPermissionLevel);
+    }
+
+    public static void forceUpgrade(net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess $$0, com.mojang.datafixers.DataFixer $$1, boolean $$2, java.util.function.BooleanSupplier $$3, net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> $$4) {
         LOGGER.info("Forcing world upgrade!");
         net.minecraft.util.worldupdate.WorldUpgrader $$5 = new net.minecraft.util.worldupdate.WorldUpgrader($$0, $$1, $$4, $$2);
         net.minecraft.network.chat.Component $$6 = null;
@@ -147,27 +159,31 @@
         return $$13;
     }
 
-    public static /* synthetic */ java.util.concurrent.CompletableFuture lambda$main$1(net.minecraft.server.WorldLoader$InitConfig $$0, net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess $$1, joptsimple.OptionSet $$2, joptsimple.OptionSpec $$3, net.minecraft.server.dedicated.DedicatedServerSettings $$4, joptsimple.OptionSpec $$52, java.util.concurrent.Executor $$62) {
-        return net.minecraft.server.WorldStem.load((net.minecraft.server.WorldLoader$InitConfig)$$0, ($$5, $$6) -> {
-            net.minecraft.world.level.levelgen.WorldGenSettings $$14;
+    public static /* synthetic */ java.util.concurrent.CompletableFuture lambda$main$1(net.minecraft.server.WorldLoader$InitConfig $$0, net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess $$1, joptsimple.OptionSet $$2, joptsimple.OptionSpec $$3, net.minecraft.server.dedicated.DedicatedServerSettings $$4, joptsimple.OptionSpec $$52, java.util.concurrent.Executor $$6) {
+        return net.minecraft.server.WorldLoader.load((net.minecraft.server.WorldLoader$InitConfig)$$0, $$5 -> {
+            net.minecraft.world.level.levelgen.WorldDimensions $$15;
+            net.minecraft.world.level.levelgen.WorldOptions $$14;
             net.minecraft.world.level.LevelSettings $$13;
-            net.minecraft.core.RegistryAccess$Writable $$7 = net.minecraft.core.RegistryAccess.builtinCopy();
-            net.minecraft.resources.RegistryOps $$8 = net.minecraft.resources.RegistryOps.createAndLoad((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE, (net.minecraft.core.RegistryAccess$Writable)$$7, (net.minecraft.server.packs.resources.ResourceManager)$$5);
-            net.minecraft.world.level.storage.WorldData $$9 = $$1.getDataTag((com.mojang.serialization.DynamicOps)$$8, $$6, $$7.allElementsLifecycle());
-            if ($$9 != null) {
-                return com.mojang.datafixers.util.Pair.of((java.lang.Object)$$9, (java.lang.Object)$$7.freeze());
+            net.minecraft.core.Registry $$6 = $$5.datapackDimensions().registryOrThrow(net.minecraft.core.Registry.LEVEL_STEM_REGISTRY);
+            net.minecraft.resources.RegistryOps $$7 = net.minecraft.resources.RegistryOps.create((com.mojang.serialization.DynamicOps)net.minecraft.nbt.NbtOps.INSTANCE, (net.minecraft.core.RegistryAccess)$$5.datapackWorldgen());
+            com.mojang.datafixers.util.Pair $$8 = $$1.getDataTag((com.mojang.serialization.DynamicOps)$$7, $$5.dataConfiguration(), $$6, $$5.datapackWorldgen().allElementsLifecycle());
+            if ($$8 != null) {
+                return new net.minecraft.server.WorldLoader$DataLoadOutput((java.lang.Object)((net.minecraft.world.level.storage.WorldData)$$8.getFirst()), ((net.minecraft.world.level.levelgen.WorldDimensions$Complete)$$8.getSecond()).dimensionsRegistryAccess());
             }
             if ($$2.has($$3)) {
-                net.minecraft.world.level.LevelSettings $$10 = net.minecraft.server.MinecraftServer.DEMO_SETTINGS;
-                net.minecraft.world.level.levelgen.WorldGenSettings $$11 = net.minecraft.world.level.levelgen.presets.WorldPresets.demoSettings((net.minecraft.core.RegistryAccess)$$7);
+                net.minecraft.world.level.LevelSettings $$9 = net.minecraft.server.MinecraftServer.DEMO_SETTINGS;
+                net.minecraft.world.level.levelgen.WorldOptions $$10 = net.minecraft.world.level.levelgen.WorldOptions.DEMO_OPTIONS;
+                net.minecraft.world.level.levelgen.WorldDimensions $$11 = net.minecraft.world.level.levelgen.presets.WorldPresets.createNormalWorldDimensions((net.minecraft.core.RegistryAccess)$$5.datapackWorldgen());
             } else {
                 net.minecraft.server.dedicated.DedicatedServerProperties $$12 = $$4.getProperties();
-                $$13 = new net.minecraft.world.level.LevelSettings($$12.levelName, $$12.gamemode, $$12.hardcore, $$12.difficulty, false, new net.minecraft.world.level.GameRules(), $$6);
-                $$14 = $$2.has($$52) ? $$12.getWorldGenSettings((net.minecraft.core.RegistryAccess)$$7).withBonusChest() : $$12.getWorldGenSettings((net.minecraft.core.RegistryAccess)$$7);
+                $$13 = new net.minecraft.world.level.LevelSettings($$12.levelName, $$12.gamemode, $$12.hardcore, $$12.difficulty, false, new net.minecraft.world.level.GameRules(), $$5.dataConfiguration());
+                $$14 = $$2.has($$52) ? $$12.worldOptions.withBonusChest(true) : $$12.worldOptions;
+                $$15 = $$12.createDimensions((net.minecraft.core.RegistryAccess)$$5.datapackWorldgen());
             }
-            net.minecraft.world.level.storage.PrimaryLevelData $$15 = new net.minecraft.world.level.storage.PrimaryLevelData($$13, $$14, com.mojang.serialization.Lifecycle.stable());
-            return com.mojang.datafixers.util.Pair.of((java.lang.Object)$$15, (java.lang.Object)$$7.freeze());
-        }, (java.util.concurrent.Executor)net.minecraft.Util.backgroundExecutor(), (java.util.concurrent.Executor)$$62);
+            net.minecraft.world.level.levelgen.WorldDimensions$Complete $$16 = $$15.bake($$6);
+            com.mojang.serialization.Lifecycle $$17 = $$16.lifecycle().add($$5.datapackWorldgen().allElementsLifecycle());
+            return new net.minecraft.server.WorldLoader$DataLoadOutput((java.lang.Object)new net.minecraft.world.level.storage.PrimaryLevelData($$13, $$14, $$16.specialWorldProperty(), $$17), $$16.dimensionsRegistryAccess());
+        }, net.minecraft.server.WorldStem::new, (java.util.concurrent.Executor)net.minecraft.Util.backgroundExecutor(), (java.util.concurrent.Executor)$$6);
     }
 
     static {