--- net/minecraft/server/packs/PathPackResources.java
+++ net/minecraft/server/packs/PathPackResources.java
@@ -1,0 +1,112 @@
+/*
+ * Decompiled with CFR 0.151.
+ */
+package net.minecraft.server.packs;
+
+public class net.minecraft.server.packs.PathPackResources
+extends net.minecraft.server.packs.AbstractPackResources
+ {
+    public static org.slf4j.Logger LOGGER;
+    public static com.google.common.base.Joiner PATH_JOINER;
+    public java.nio.file.Path root;
+
+    public net.minecraft.server.packs.PathPackResources(java.lang.String $$0, java.nio.file.Path $$1) {
+        super($$0);
+        this.root = $$1;
+    }
+
+    @javax.annotation.Nullable
+    public net.minecraft.server.packs.resources.IoSupplier<java.io.InputStream> getRootResource(java.lang.String ... $$0) {
+        net.minecraft.FileUtil.validatePath((java.lang.String[])$$0);
+        java.nio.file.Path $$1 = net.minecraft.FileUtil.resolvePath((java.nio.file.Path)this.root, (java.util.List)java.util.List.of((java.lang.Object[])$$0));
+        if (java.nio.file.Files.exists((java.nio.file.Path)$$1, (java.nio.file.LinkOption[])new java.nio.file.LinkOption[0])) {
+            return net.minecraft.server.packs.resources.IoSupplier.create((java.nio.file.Path)$$1);
+        }
+        return null;
+    }
+
+    public static boolean validatePath(java.nio.file.Path $$0) {
+        return true;
+    }
+
+    @javax.annotation.Nullable
+    public net.minecraft.server.packs.resources.IoSupplier<java.io.InputStream> getResource(net.minecraft.server.packs.PackType $$0, net.minecraft.resources.ResourceLocation $$1) {
+        java.nio.file.Path $$2 = this.root.resolve($$0.getDirectory()).resolve($$1.getNamespace());
+        return net.minecraft.server.packs.PathPackResources.getResource((net.minecraft.resources.ResourceLocation)$$1, (java.nio.file.Path)$$2);
+    }
+
+    public static net.minecraft.server.packs.resources.IoSupplier<java.io.InputStream> getResource(net.minecraft.resources.ResourceLocation $$0, java.nio.file.Path $$12) {
+        return (net.minecraft.server.packs.resources.IoSupplier)net.minecraft.FileUtil.decomposePath((java.lang.String)$$0.getPath()).get().map($$1 -> {
+            java.nio.file.Path $$2 = net.minecraft.FileUtil.resolvePath((java.nio.file.Path)$$12, (java.util.List)$$1);
+            return net.minecraft.server.packs.PathPackResources.returnFileIfExists((java.nio.file.Path)$$2);
+        }, $$1 -> {
+            LOGGER.error("Invalid path {}: {}", (java.lang.Object)$$0, (java.lang.Object)$$1.message());
+            return null;
+        });
+    }
+
+    @javax.annotation.Nullable
+    public static net.minecraft.server.packs.resources.IoSupplier<java.io.InputStream> returnFileIfExists(java.nio.file.Path $$0) {
+        if (java.nio.file.Files.exists((java.nio.file.Path)$$0, (java.nio.file.LinkOption[])new java.nio.file.LinkOption[0]) && net.minecraft.server.packs.PathPackResources.validatePath((java.nio.file.Path)$$0)) {
+            return net.minecraft.server.packs.resources.IoSupplier.create((java.nio.file.Path)$$0);
+        }
+        return null;
+    }
+
+    public void listResources(net.minecraft.server.packs.PackType $$0, java.lang.String $$12, java.lang.String $$2, net.minecraft.server.packs.PackResources$ResourceOutput $$32) {
+        net.minecraft.FileUtil.decomposePath((java.lang.String)$$2).get().ifLeft($$3 -> {
+            java.nio.file.Path $$4 = this.root.resolve($$0.getDirectory()).resolve($$12);
+            net.minecraft.server.packs.PathPackResources.listPath((java.lang.String)$$12, (java.nio.file.Path)$$4, (java.util.List)$$3, (net.minecraft.server.packs.PackResources$ResourceOutput)$$32);
+        }).ifRight($$1 -> LOGGER.error("Invalid path {}: {}", (java.lang.Object)$$2, (java.lang.Object)$$1.message()));
+    }
+
+    public static void listPath(java.lang.String $$02, java.nio.file.Path $$12, java.util.List<java.lang.String> $$2, net.minecraft.server.packs.PackResources$ResourceOutput $$32) {
+        java.nio.file.Path $$4 = net.minecraft.FileUtil.resolvePath((java.nio.file.Path)$$12, $$2);
+        try (java.util.stream.Stream $$52 = java.nio.file.Files.find((java.nio.file.Path)$$4, (int)java.lang.Integer.MAX_VALUE, ($$0, $$1) -> $$1.isRegularFile(), (java.nio.file.FileVisitOption[])new java.nio.file.FileVisitOption[0]);
+){
+            $$52.forEach($$3 -> {
+                java.lang.String $$4 = PATH_JOINER.join((java.lang.Iterable)$$12.relativize($$3));
+                net.minecraft.resources.ResourceLocation $$5 = net.minecraft.resources.ResourceLocation.tryBuild((java.lang.String)$$02, (java.lang.String)$$4);
+                if ($$5 == null) {
+                    net.minecraft.Util.logAndPauseIfInIde((java.lang.String)java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Invalid path in pack: %s:%s, ignoring", (java.lang.Object[])new java.lang.Object[]{$$02, $$4}));
+                } else {
+                    $$32.accept((java.lang.Object)$$5, (java.lang.Object)net.minecraft.server.packs.resources.IoSupplier.create((java.nio.file.Path)$$3));
+                }
+            });
+        }
+        catch (java.nio.file.NoSuchFileException $$52) {
+        }
+        catch (java.io.IOException $$6) {
+            LOGGER.error("Failed to list path {}", (java.lang.Object)$$4, (java.lang.Object)((java.lang.Object)$$6));
+        }
+    }
+
+    public java.util.Set<java.lang.String> getNamespaces(net.minecraft.server.packs.PackType $$0) {
+        java.util.HashSet $$1 = com.google.common.collect.Sets.newHashSet();
+        java.nio.file.Path $$2 = this.root.resolve($$0.getDirectory());
+        try (java.nio.file.DirectoryStream $$3 = java.nio.file.Files.newDirectoryStream((java.nio.file.Path)$$2);
+){
+            for (java.nio.file.Path $$4 : $$3) {
+                java.lang.String $$5 = $$4.getFileName().toString();
+                if ($$5.equals((java.lang.Object)$$5.toLowerCase(java.util.Locale.ROOT))) {
+                    $$1.add((java.lang.Object)$$5);
+                    continue;
+                }
+                LOGGER.warn("Ignored non-lowercase namespace: {} in {}", (java.lang.Object)$$5, (java.lang.Object)this.root);
+            }
+        }
+        catch (java.io.IOException $$6) {
+            LOGGER.error("Failed to list path {}", (java.lang.Object)$$2, (java.lang.Object)((java.lang.Object)$$6));
+        }
+        return $$1;
+    }
+
+    public void close() {
+    }
+
+    static {
+        LOGGER = com.mojang.logging.LogUtils.getLogger();
+        PATH_JOINER = com.google.common.base.Joiner.on((java.lang.String)"/");
+    }
+}
+