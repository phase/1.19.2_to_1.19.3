--- net/minecraft/core/dispenser/DispenseItemBehavior$19.java
+++ net/minecraft/core/dispenser/DispenseItemBehavior$19.java
@@ -9,19 +9,19 @@
     public net.minecraft.core.dispenser.DispenseItemBehavior$19() {
     }
 
-    public net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource source, net.minecraft.world.item.ItemStack stack) {
-        net.minecraft.core.BlockPos blockPos = source.getPos().relative((net.minecraft.core.Direction)source.getBlockState().getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.DispenserBlock.FACING));
-        net.minecraft.server.level.ServerLevel serverLevel = source.getLevel();
-        net.minecraft.world.level.block.state.BlockState blockState = serverLevel.getBlockState(blockPos);
-        java.util.Optional optional = net.minecraft.world.item.HoneycombItem.getWaxed((net.minecraft.world.level.block.state.BlockState)blockState);
-        if (optional.isPresent()) {
-            serverLevel.setBlockAndUpdate(blockPos, (net.minecraft.world.level.block.state.BlockState)optional.get());
-            serverLevel.levelEvent(3003, blockPos, 0);
-            stack.shrink(1);
+    public net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource $$0, net.minecraft.world.item.ItemStack $$1) {
+        net.minecraft.core.BlockPos $$2 = $$0.getPos().relative((net.minecraft.core.Direction)$$0.getBlockState().getValue((net.minecraft.world.level.block.state.properties.Property)net.minecraft.world.level.block.DispenserBlock.FACING));
+        net.minecraft.server.level.ServerLevel $$3 = $$0.getLevel();
+        net.minecraft.world.level.block.state.BlockState $$4 = $$3.getBlockState($$2);
+        java.util.Optional $$5 = net.minecraft.world.item.HoneycombItem.getWaxed((net.minecraft.world.level.block.state.BlockState)$$4);
+        if ($$5.isPresent()) {
+            $$3.setBlockAndUpdate($$2, (net.minecraft.world.level.block.state.BlockState)$$5.get());
+            $$3.levelEvent(3003, $$2, 0);
+            $$1.shrink(1);
             this.setSuccess(true);
-            return stack;
+            return $$1;
         }
-        return super.execute(source, stack);
+        return super.execute($$0, $$1);
     }
 }
 