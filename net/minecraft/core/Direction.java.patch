--- net/minecraft/core/Direction.java
+++ net/minecraft/core/Direction.java
@@ -36,63 +36,63 @@
         return (net.minecraft.core.Direction)java.lang.Enum.valueOf(net.minecraft.core.Direction.class, (java.lang.String)$$0);
     }
 
-    public net.minecraft.core.Direction(int data3d, int oppositeIndex, int data2d, java.lang.String name, net.minecraft.core.Direction$AxisDirection axisDirection, net.minecraft.core.Direction$Axis axis, net.minecraft.core.Vec3i normal) {
+    public net.minecraft.core.Direction(int $$0, int $$1, int $$2, java.lang.String $$3, net.minecraft.core.Direction$AxisDirection $$4, net.minecraft.core.Direction$Axis $$5, net.minecraft.core.Vec3i $$6) {
         super(string, n);
-        this.data3d = data3d;
-        this.data2d = data2d;
-        this.oppositeIndex = oppositeIndex;
-        this.name = name;
-        this.axis = axis;
-        this.axisDirection = axisDirection;
-        this.normal = normal;
+        this.data3d = $$0;
+        this.data2d = $$2;
+        this.oppositeIndex = $$1;
+        this.name = $$3;
+        this.axis = $$5;
+        this.axisDirection = $$4;
+        this.normal = $$6;
     }
 
-    public static net.minecraft.core.Direction[] orderedByNearest(net.minecraft.world.entity.Entity entity) {
-        net.minecraft.core.Direction direction;
-        float f = entity.getViewXRot(1.0f) * ((float)java.lang.Math.PI / 180);
-        float f2 = -entity.getViewYRot(1.0f) * ((float)java.lang.Math.PI / 180);
-        float f3 = net.minecraft.util.Mth.sin((float)f);
-        float f4 = net.minecraft.util.Mth.cos((float)f);
-        float f5 = net.minecraft.util.Mth.sin((float)f2);
-        float f6 = net.minecraft.util.Mth.cos((float)f2);
-        boolean bl = f5 > 0.0f;
-        boolean bl2 = f3 < 0.0f;
-        boolean bl3 = f6 > 0.0f;
-        float f7 = bl ? f5 : -f5;
-        float f8 = bl2 ? -f3 : f3;
-        float f9 = bl3 ? f6 : -f6;
-        float f10 = f7 * f4;
-        float f11 = f9 * f4;
-        net.minecraft.core.Direction direction2 = bl ? EAST : WEST;
-        net.minecraft.core.Direction direction3 = bl2 ? UP : DOWN;
-        net.minecraft.core.Direction direction4 = direction = bl3 ? SOUTH : NORTH;
-        if (f7 > f9) {
-            if (f8 > f10) {
-                return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)direction3, (net.minecraft.core.Direction)direction2, (net.minecraft.core.Direction)direction);
+    public static net.minecraft.core.Direction[] orderedByNearest(net.minecraft.world.entity.Entity $$0) {
+        net.minecraft.core.Direction $$17;
+        float $$1 = $$0.getViewXRot(1.0f) * ((float)java.lang.Math.PI / 180);
+        float $$2 = -$$0.getViewYRot(1.0f) * ((float)java.lang.Math.PI / 180);
+        float $$3 = net.minecraft.util.Mth.sin((float)$$1);
+        float $$4 = net.minecraft.util.Mth.cos((float)$$1);
+        float $$5 = net.minecraft.util.Mth.sin((float)$$2);
+        float $$6 = net.minecraft.util.Mth.cos((float)$$2);
+        boolean $$7 = $$5 > 0.0f;
+        boolean $$8 = $$3 < 0.0f;
+        boolean $$9 = $$6 > 0.0f;
+        float $$10 = $$7 ? $$5 : -$$5;
+        float $$11 = $$8 ? -$$3 : $$3;
+        float $$12 = $$9 ? $$6 : -$$6;
+        float $$13 = $$10 * $$4;
+        float $$14 = $$12 * $$4;
+        net.minecraft.core.Direction $$15 = $$7 ? EAST : WEST;
+        net.minecraft.core.Direction $$16 = $$8 ? UP : DOWN;
+        net.minecraft.core.Direction direction = $$17 = $$9 ? SOUTH : NORTH;
+        if ($$10 > $$12) {
+            if ($$11 > $$13) {
+                return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)$$16, (net.minecraft.core.Direction)$$15, (net.minecraft.core.Direction)$$17);
             }
-            if (f11 > f8) {
-                return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)direction2, (net.minecraft.core.Direction)direction, (net.minecraft.core.Direction)direction3);
+            if ($$14 > $$11) {
+                return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)$$15, (net.minecraft.core.Direction)$$17, (net.minecraft.core.Direction)$$16);
             }
-            return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)direction2, (net.minecraft.core.Direction)direction3, (net.minecraft.core.Direction)direction);
+            return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)$$15, (net.minecraft.core.Direction)$$16, (net.minecraft.core.Direction)$$17);
         }
-        if (f8 > f11) {
-            return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)direction3, (net.minecraft.core.Direction)direction, (net.minecraft.core.Direction)direction2);
+        if ($$11 > $$14) {
+            return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)$$16, (net.minecraft.core.Direction)$$17, (net.minecraft.core.Direction)$$15);
         }
-        if (f10 > f8) {
-            return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)direction, (net.minecraft.core.Direction)direction2, (net.minecraft.core.Direction)direction3);
+        if ($$13 > $$11) {
+            return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)$$17, (net.minecraft.core.Direction)$$15, (net.minecraft.core.Direction)$$16);
         }
-        return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)direction, (net.minecraft.core.Direction)direction3, (net.minecraft.core.Direction)direction2);
+        return net.minecraft.core.Direction.makeDirectionArray((net.minecraft.core.Direction)$$17, (net.minecraft.core.Direction)$$16, (net.minecraft.core.Direction)$$15);
     }
 
-    public static net.minecraft.core.Direction[] makeDirectionArray(net.minecraft.core.Direction first, net.minecraft.core.Direction second, net.minecraft.core.Direction third) {
-        return new net.minecraft.core.Direction[]{first, second, third, third.getOpposite(), second.getOpposite(), first.getOpposite()};
+    public static net.minecraft.core.Direction[] makeDirectionArray(net.minecraft.core.Direction $$0, net.minecraft.core.Direction $$1, net.minecraft.core.Direction $$2) {
+        return new net.minecraft.core.Direction[]{$$0, $$1, $$2, $$2.getOpposite(), $$1.getOpposite(), $$0.getOpposite()};
     }
 
-    public static net.minecraft.core.Direction rotate(com.mojang.math.Matrix4f matrix, net.minecraft.core.Direction direction) {
-        net.minecraft.core.Vec3i vec3i = direction.getNormal();
-        com.mojang.math.Vector4f vector4f = new com.mojang.math.Vector4f((float)vec3i.getX(), (float)vec3i.getY(), (float)vec3i.getZ(), 0.0f);
-        vector4f.transform(matrix);
-        return net.minecraft.core.Direction.getNearest((float)vector4f.x(), (float)vector4f.y(), (float)vector4f.z());
+    public static net.minecraft.core.Direction rotate(com.mojang.math.Matrix4f $$0, net.minecraft.core.Direction $$1) {
+        net.minecraft.core.Vec3i $$2 = $$1.getNormal();
+        com.mojang.math.Vector4f $$3 = new com.mojang.math.Vector4f((float)$$2.getX(), (float)$$2.getY(), (float)$$2.getZ(), 0.0f);
+        $$3.transform($$0);
+        return net.minecraft.core.Direction.getNearest((float)$$3.x(), (float)$$3.y(), (float)$$3.z());
     }
 
     public static java.util.Collection<net.minecraft.core.Direction> allShuffled(net.minecraft.util.RandomSource $$0) {
@@ -283,16 +283,16 @@
     }
 
     @javax.annotation.Nullable
-    public static net.minecraft.core.Direction byName(@javax.annotation.Nullable java.lang.String name) {
-        return (net.minecraft.core.Direction)CODEC.byName(name);
+    public static net.minecraft.core.Direction byName(@javax.annotation.Nullable java.lang.String $$0) {
+        return (net.minecraft.core.Direction)CODEC.byName($$0);
     }
 
-    public static net.minecraft.core.Direction from3DDataValue(int index) {
-        return BY_3D_DATA[net.minecraft.util.Mth.abs((int)(index % BY_3D_DATA.length))];
+    public static net.minecraft.core.Direction from3DDataValue(int $$0) {
+        return BY_3D_DATA[net.minecraft.util.Mth.abs((int)($$0 % BY_3D_DATA.length))];
     }
 
-    public static net.minecraft.core.Direction from2DDataValue(int horizontalIndex) {
-        return BY_2D_DATA[net.minecraft.util.Mth.abs((int)(horizontalIndex % BY_2D_DATA.length))];
+    public static net.minecraft.core.Direction from2DDataValue(int $$0) {
+        return BY_2D_DATA[net.minecraft.util.Mth.abs((int)($$0 % BY_2D_DATA.length))];
     }
 
     @javax.annotation.Nullable
@@ -301,30 +301,30 @@
     }
 
     @javax.annotation.Nullable
-    public static net.minecraft.core.Direction fromNormal(int x, int y, int z) {
-        return (net.minecraft.core.Direction)BY_NORMAL.get(net.minecraft.core.BlockPos.asLong((int)x, (int)y, (int)z));
+    public static net.minecraft.core.Direction fromNormal(int $$0, int $$1, int $$2) {
+        return (net.minecraft.core.Direction)BY_NORMAL.get(net.minecraft.core.BlockPos.asLong((int)$$0, (int)$$1, (int)$$2));
     }
 
-    public static net.minecraft.core.Direction fromYRot(double angle) {
-        return net.minecraft.core.Direction.from2DDataValue((int)(net.minecraft.util.Mth.floor((double)(angle / 90.0 + 0.5)) & 3));
+    public static net.minecraft.core.Direction fromYRot(double $$0) {
+        return net.minecraft.core.Direction.from2DDataValue((int)(net.minecraft.util.Mth.floor((double)($$0 / 90.0 + 0.5)) & 3));
     }
 
-    public static net.minecraft.core.Direction fromAxisAndDirection(net.minecraft.core.Direction$Axis axis, net.minecraft.core.Direction$AxisDirection axisDirection) {
-        return switch (net.minecraft.core.Direction$1.$SwitchMap$net$minecraft$core$Direction$Axis[axis.ordinal()]) {
+    public static net.minecraft.core.Direction fromAxisAndDirection(net.minecraft.core.Direction$Axis $$0, net.minecraft.core.Direction$AxisDirection $$1) {
+        return switch (net.minecraft.core.Direction$1.$SwitchMap$net$minecraft$core$Direction$Axis[$$0.ordinal()]) {
             default -> throw new java.lang.IncompatibleClassChangeError();
             case 1 -> {
-                if (axisDirection == net.minecraft.core.Direction$AxisDirection.POSITIVE) {
+                if ($$1 == net.minecraft.core.Direction$AxisDirection.POSITIVE) {
                     yield EAST;
                 }
                 yield WEST;
             }
             case 3 -> {
-                if (axisDirection == net.minecraft.core.Direction$AxisDirection.POSITIVE) {
+                if ($$1 == net.minecraft.core.Direction$AxisDirection.POSITIVE) {
                     yield UP;
                 }
                 yield DOWN;
             }
-            case 2 -> axisDirection == net.minecraft.core.Direction$AxisDirection.POSITIVE ? SOUTH : NORTH;
+            case 2 -> $$1 == net.minecraft.core.Direction$AxisDirection.POSITIVE ? SOUTH : NORTH;
         };
     }
 
@@ -336,20 +336,20 @@
         return (net.minecraft.core.Direction)net.minecraft.Util.getRandom((java.lang.Object[])VALUES, (net.minecraft.util.RandomSource)$$0);
     }
 
-    public static net.minecraft.core.Direction getNearest(double x, double y, double z) {
-        return net.minecraft.core.Direction.getNearest((float)((float)x), (float)((float)y), (float)((float)z));
+    public static net.minecraft.core.Direction getNearest(double $$0, double $$1, double $$2) {
+        return net.minecraft.core.Direction.getNearest((float)((float)$$0), (float)((float)$$1), (float)((float)$$2));
     }
 
-    public static net.minecraft.core.Direction getNearest(float x, float y, float z) {
-        net.minecraft.core.Direction direction = NORTH;
-        float f = java.lang.Float.MIN_VALUE;
-        for (net.minecraft.core.Direction direction2 : VALUES) {
-            float f2 = x * (float)direction2.normal.getX() + y * (float)direction2.normal.getY() + z * (float)direction2.normal.getZ();
-            if (!(f2 > f)) continue;
-            f = f2;
-            direction = direction2;
+    public static net.minecraft.core.Direction getNearest(float $$0, float $$1, float $$2) {
+        net.minecraft.core.Direction $$3 = NORTH;
+        float $$4 = java.lang.Float.MIN_VALUE;
+        for (net.minecraft.core.Direction $$5 : VALUES) {
+            float $$6 = $$0 * (float)$$5.normal.getX() + $$1 * (float)$$5.normal.getY() + $$2 * (float)$$5.normal.getZ();
+            if (!($$6 > $$4)) continue;
+            $$4 = $$6;
+            $$3 = $$5;
         }
-        return direction;
+        return $$3;
     }
 
     public java.lang.String toString() {
@@ -364,23 +364,23 @@
         return $$0.getAxis().isVertical() ? com.mojang.serialization.DataResult.success((java.lang.Object)$$0) : com.mojang.serialization.DataResult.error((java.lang.String)"Expected a vertical direction");
     }
 
-    public static net.minecraft.core.Direction get(net.minecraft.core.Direction$AxisDirection axisDirection, net.minecraft.core.Direction$Axis axis) {
-        for (net.minecraft.core.Direction direction : VALUES) {
-            if (direction.getAxisDirection() != axisDirection || direction.getAxis() != axis) continue;
-            return direction;
+    public static net.minecraft.core.Direction get(net.minecraft.core.Direction$AxisDirection $$0, net.minecraft.core.Direction$Axis $$1) {
+        for (net.minecraft.core.Direction $$2 : VALUES) {
+            if ($$2.getAxisDirection() != $$0 || $$2.getAxis() != $$1) continue;
+            return $$2;
         }
-        throw new java.lang.IllegalArgumentException("No such direction: " + axisDirection + " " + axis);
+        throw new java.lang.IllegalArgumentException("No such direction: " + $$0 + " " + $$1);
     }
 
     public net.minecraft.core.Vec3i getNormal() {
         return this.normal;
     }
 
-    public boolean isFacingAngle(float degrees) {
-        float f = degrees * ((float)java.lang.Math.PI / 180);
-        float f2 = -net.minecraft.util.Mth.sin((float)f);
-        float f3 = net.minecraft.util.Mth.cos((float)f);
-        return (float)this.normal.getX() * f2 + (float)this.normal.getZ() * f3 > 0.0f;
+    public boolean isFacingAngle(float $$0) {
+        float $$1 = $$0 * ((float)java.lang.Math.PI / 180);
+        float $$2 = -net.minecraft.util.Mth.sin((float)$$1);
+        float $$3 = net.minecraft.util.Mth.cos((float)$$1);
+        return (float)this.normal.getX() * $$2 + (float)this.normal.getZ() * $$3 > 0.0f;
     }
 
     public static /* synthetic */ net.minecraft.core.Direction lambda$static$7(net.minecraft.core.Direction $$0, net.minecraft.core.Direction $$1) {