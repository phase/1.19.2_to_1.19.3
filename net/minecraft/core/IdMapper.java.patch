--- net/minecraft/core/IdMapper.java
+++ net/minecraft/core/IdMapper.java
@@ -14,35 +14,35 @@
         this(512);
     }
 
-    public net.minecraft.core.IdMapper(int expectedSize) {
-        this.idToT = com.google.common.collect.Lists.newArrayListWithExpectedSize((int)expectedSize);
-        this.tToId = new it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap(expectedSize, net.minecraft.Util.identityStrategy());
+    public net.minecraft.core.IdMapper(int $$0) {
+        this.idToT = com.google.common.collect.Lists.newArrayListWithExpectedSize((int)$$0);
+        this.tToId = new it.unimi.dsi.fastutil.objects.Object2IntOpenCustomHashMap($$0, net.minecraft.Util.identityStrategy());
         this.tToId.defaultReturnValue(-1);
     }
 
-    public void addMapping(T key, int value) {
-        this.tToId.put(key, value);
-        while (this.idToT.size() <= value) {
+    public void addMapping(T $$0, int $$1) {
+        this.tToId.put($$0, $$1);
+        while (this.idToT.size() <= $$1) {
             this.idToT.add(null);
         }
-        this.idToT.set(value, key);
-        if (this.nextId <= value) {
-            this.nextId = value + 1;
+        this.idToT.set($$1, $$0);
+        if (this.nextId <= $$1) {
+            this.nextId = $$1 + 1;
         }
     }
 
-    public void add(T key) {
-        this.addMapping(key, this.nextId);
+    public void add(T $$0) {
+        this.addMapping($$0, this.nextId);
     }
 
-    public int getId(T value) {
-        return this.tToId.getInt(value);
+    public int getId(T $$0) {
+        return this.tToId.getInt($$0);
     }
 
     @javax.annotation.Nullable
-    public T byId(int value) {
-        if (value >= 0 && value < this.idToT.size()) {
-            return (T)this.idToT.get(value);
+    public T byId(int $$0) {
+        if ($$0 >= 0 && $$0 < this.idToT.size()) {
+            return (T)this.idToT.get($$0);
         }
         return null;
     }