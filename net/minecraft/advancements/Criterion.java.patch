--- net/minecraft/advancements/Criterion.java
+++ net/minecraft/advancements/Criterion.java
@@ -8,45 +8,45 @@
     @javax.annotation.Nullable
     public net.minecraft.advancements.CriterionTriggerInstance trigger;
 
-    public net.minecraft.advancements.Criterion(net.minecraft.advancements.CriterionTriggerInstance trigger) {
-        this.trigger = trigger;
+    public net.minecraft.advancements.Criterion(net.minecraft.advancements.CriterionTriggerInstance $$0) {
+        this.trigger = $$0;
     }
 
     public net.minecraft.advancements.Criterion() {
         this.trigger = null;
     }
 
-    public void serializeToNetwork(net.minecraft.network.FriendlyByteBuf buffer) {
+    public void serializeToNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
     }
 
-    public static net.minecraft.advancements.Criterion criterionFromJson(com.google.gson.JsonObject json, net.minecraft.advancements.critereon.DeserializationContext conditionParser) {
-        net.minecraft.resources.ResourceLocation resourceLocation = new net.minecraft.resources.ResourceLocation(net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)json, (java.lang.String)"trigger"));
-        net.minecraft.advancements.CriterionTrigger criterionTrigger = net.minecraft.advancements.CriteriaTriggers.getCriterion((net.minecraft.resources.ResourceLocation)resourceLocation);
-        if (criterionTrigger == null) {
-            throw new com.google.gson.JsonSyntaxException("Invalid criterion trigger: " + resourceLocation);
+    public static net.minecraft.advancements.Criterion criterionFromJson(com.google.gson.JsonObject $$0, net.minecraft.advancements.critereon.DeserializationContext $$1) {
+        net.minecraft.resources.ResourceLocation $$2 = new net.minecraft.resources.ResourceLocation(net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"trigger"));
+        net.minecraft.advancements.CriterionTrigger $$3 = net.minecraft.advancements.CriteriaTriggers.getCriterion((net.minecraft.resources.ResourceLocation)$$2);
+        if ($$3 == null) {
+            throw new com.google.gson.JsonSyntaxException("Invalid criterion trigger: " + $$2);
         }
-        net.minecraft.advancements.CriterionTriggerInstance criterionTriggerInstance = criterionTrigger.createInstance(net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)json, (java.lang.String)"conditions", (com.google.gson.JsonObject)new com.google.gson.JsonObject()), conditionParser);
-        return new net.minecraft.advancements.Criterion(criterionTriggerInstance);
+        net.minecraft.advancements.CriterionTriggerInstance $$4 = $$3.createInstance(net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)$$0, (java.lang.String)"conditions", (com.google.gson.JsonObject)new com.google.gson.JsonObject()), $$1);
+        return new net.minecraft.advancements.Criterion($$4);
     }
 
-    public static net.minecraft.advancements.Criterion criterionFromNetwork(net.minecraft.network.FriendlyByteBuf buffer) {
+    public static net.minecraft.advancements.Criterion criterionFromNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
         return new net.minecraft.advancements.Criterion();
     }
 
-    public static java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> criteriaFromJson(com.google.gson.JsonObject json, net.minecraft.advancements.critereon.DeserializationContext conditionParser) {
-        java.util.HashMap hashMap = com.google.common.collect.Maps.newHashMap();
-        for (java.util.Map$Entry entry : json.entrySet()) {
-            hashMap.put((java.lang.Object)((java.lang.String)entry.getKey()), (java.lang.Object)net.minecraft.advancements.Criterion.criterionFromJson((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.convertToJsonObject((com.google.gson.JsonElement)((com.google.gson.JsonElement)entry.getValue()), (java.lang.String)"criterion"), (net.minecraft.advancements.critereon.DeserializationContext)conditionParser));
+    public static java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> criteriaFromJson(com.google.gson.JsonObject $$0, net.minecraft.advancements.critereon.DeserializationContext $$1) {
+        java.util.HashMap $$2 = com.google.common.collect.Maps.newHashMap();
+        for (java.util.Map$Entry $$3 : $$0.entrySet()) {
+            $$2.put((java.lang.Object)((java.lang.String)$$3.getKey()), (java.lang.Object)net.minecraft.advancements.Criterion.criterionFromJson((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.convertToJsonObject((com.google.gson.JsonElement)((com.google.gson.JsonElement)$$3.getValue()), (java.lang.String)"criterion"), (net.minecraft.advancements.critereon.DeserializationContext)$$1));
         }
-        return hashMap;
+        return $$2;
     }
 
-    public static java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> criteriaFromNetwork(net.minecraft.network.FriendlyByteBuf bus) {
-        return bus.readMap(net.minecraft.network.FriendlyByteBuf::readUtf, net.minecraft.advancements.Criterion::criterionFromNetwork);
+    public static java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> criteriaFromNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
+        return $$0.readMap(net.minecraft.network.FriendlyByteBuf::readUtf, net.minecraft.advancements.Criterion::criterionFromNetwork);
     }
 
-    public static void serializeToNetwork(java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> criteria, net.minecraft.network.FriendlyByteBuf buf) {
-        buf.writeMap(criteria, net.minecraft.network.FriendlyByteBuf::writeUtf, ($$0, $$1) -> $$1.serializeToNetwork($$0));
+    public static void serializeToNetwork(java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> $$02, net.minecraft.network.FriendlyByteBuf $$12) {
+        $$12.writeMap($$02, net.minecraft.network.FriendlyByteBuf::writeUtf, ($$0, $$1) -> $$1.serializeToNetwork($$0));
     }
 
     @javax.annotation.Nullable