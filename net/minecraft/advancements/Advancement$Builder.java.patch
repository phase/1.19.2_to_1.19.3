--- net/minecraft/advancements/Advancement$Builder.java
+++ net/minecraft/advancements/Advancement$Builder.java
@@ -17,15 +17,15 @@
     public java.lang.String[][] requirements;
     public net.minecraft.advancements.RequirementsStrategy requirementsStrategy;
 
-    public net.minecraft.advancements.Advancement$Builder(@javax.annotation.Nullable net.minecraft.resources.ResourceLocation parentId, @javax.annotation.Nullable net.minecraft.advancements.DisplayInfo display, net.minecraft.advancements.AdvancementRewards rewards, java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> criteria, java.lang.String[][] requirements) {
+    public net.minecraft.advancements.Advancement$Builder(@javax.annotation.Nullable net.minecraft.resources.ResourceLocation $$0, @javax.annotation.Nullable net.minecraft.advancements.DisplayInfo $$1, net.minecraft.advancements.AdvancementRewards $$2, java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> $$3, java.lang.String[][] $$4) {
         this.rewards = net.minecraft.advancements.AdvancementRewards.EMPTY;
         this.criteria = com.google.common.collect.Maps.newLinkedHashMap();
         this.requirementsStrategy = net.minecraft.advancements.RequirementsStrategy.AND;
-        this.parentId = parentId;
-        this.display = display;
-        this.rewards = rewards;
-        this.criteria = criteria;
-        this.requirements = requirements;
+        this.parentId = $$0;
+        this.display = $$1;
+        this.rewards = $$2;
+        this.criteria = $$3;
+        this.requirements = $$4;
     }
 
     public net.minecraft.advancements.Advancement$Builder() {
@@ -38,52 +38,52 @@
         return new net.minecraft.advancements.Advancement$Builder();
     }
 
-    public net.minecraft.advancements.Advancement$Builder parent(net.minecraft.advancements.Advancement parent) {
-        this.parent = parent;
+    public net.minecraft.advancements.Advancement$Builder parent(net.minecraft.advancements.Advancement $$0) {
+        this.parent = $$0;
         return this;
     }
 
-    public net.minecraft.advancements.Advancement$Builder parent(net.minecraft.resources.ResourceLocation parentId) {
-        this.parentId = parentId;
+    public net.minecraft.advancements.Advancement$Builder parent(net.minecraft.resources.ResourceLocation $$0) {
+        this.parentId = $$0;
         return this;
     }
 
-    public net.minecraft.advancements.Advancement$Builder display(net.minecraft.world.item.ItemStack stack, net.minecraft.network.chat.Component title, net.minecraft.network.chat.Component description, @javax.annotation.Nullable net.minecraft.resources.ResourceLocation background, net.minecraft.advancements.FrameType frame, boolean showToast, boolean announceToChat, boolean hidden) {
-        return this.display(new net.minecraft.advancements.DisplayInfo(stack, title, description, background, frame, showToast, announceToChat, hidden));
+    public net.minecraft.advancements.Advancement$Builder display(net.minecraft.world.item.ItemStack $$0, net.minecraft.network.chat.Component $$1, net.minecraft.network.chat.Component $$2, @javax.annotation.Nullable net.minecraft.resources.ResourceLocation $$3, net.minecraft.advancements.FrameType $$4, boolean $$5, boolean $$6, boolean $$7) {
+        return this.display(new net.minecraft.advancements.DisplayInfo($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7));
     }
 
-    public net.minecraft.advancements.Advancement$Builder display(net.minecraft.world.level.ItemLike item, net.minecraft.network.chat.Component title, net.minecraft.network.chat.Component description, @javax.annotation.Nullable net.minecraft.resources.ResourceLocation background, net.minecraft.advancements.FrameType frame, boolean showToast, boolean announceToChat, boolean hidden) {
-        return this.display(new net.minecraft.advancements.DisplayInfo(new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)item.asItem()), title, description, background, frame, showToast, announceToChat, hidden));
+    public net.minecraft.advancements.Advancement$Builder display(net.minecraft.world.level.ItemLike $$0, net.minecraft.network.chat.Component $$1, net.minecraft.network.chat.Component $$2, @javax.annotation.Nullable net.minecraft.resources.ResourceLocation $$3, net.minecraft.advancements.FrameType $$4, boolean $$5, boolean $$6, boolean $$7) {
+        return this.display(new net.minecraft.advancements.DisplayInfo(new net.minecraft.world.item.ItemStack((net.minecraft.world.level.ItemLike)$$0.asItem()), $$1, $$2, $$3, $$4, $$5, $$6, $$7));
     }
 
-    public net.minecraft.advancements.Advancement$Builder display(net.minecraft.advancements.DisplayInfo display) {
-        this.display = display;
+    public net.minecraft.advancements.Advancement$Builder display(net.minecraft.advancements.DisplayInfo $$0) {
+        this.display = $$0;
         return this;
     }
 
-    public net.minecraft.advancements.Advancement$Builder rewards(net.minecraft.advancements.AdvancementRewards$Builder rewardsBuilder) {
-        return this.rewards(rewardsBuilder.build());
+    public net.minecraft.advancements.Advancement$Builder rewards(net.minecraft.advancements.AdvancementRewards$Builder $$0) {
+        return this.rewards($$0.build());
     }
 
-    public net.minecraft.advancements.Advancement$Builder rewards(net.minecraft.advancements.AdvancementRewards rewards) {
-        this.rewards = rewards;
+    public net.minecraft.advancements.Advancement$Builder rewards(net.minecraft.advancements.AdvancementRewards $$0) {
+        this.rewards = $$0;
         return this;
     }
 
-    public net.minecraft.advancements.Advancement$Builder addCriterion(java.lang.String key, net.minecraft.advancements.CriterionTriggerInstance criterion) {
-        return this.addCriterion(key, new net.minecraft.advancements.Criterion(criterion));
+    public net.minecraft.advancements.Advancement$Builder addCriterion(java.lang.String $$0, net.minecraft.advancements.CriterionTriggerInstance $$1) {
+        return this.addCriterion($$0, new net.minecraft.advancements.Criterion($$1));
     }
 
-    public net.minecraft.advancements.Advancement$Builder addCriterion(java.lang.String key, net.minecraft.advancements.Criterion criterion) {
-        if (this.criteria.containsKey((java.lang.Object)key)) {
-            throw new java.lang.IllegalArgumentException("Duplicate criterion " + key);
+    public net.minecraft.advancements.Advancement$Builder addCriterion(java.lang.String $$0, net.minecraft.advancements.Criterion $$1) {
+        if (this.criteria.containsKey((java.lang.Object)$$0)) {
+            throw new java.lang.IllegalArgumentException("Duplicate criterion " + $$0);
         }
-        this.criteria.put((java.lang.Object)key, (java.lang.Object)criterion);
+        this.criteria.put((java.lang.Object)$$0, (java.lang.Object)$$1);
         return this;
     }
 
-    public net.minecraft.advancements.Advancement$Builder requirements(net.minecraft.advancements.RequirementsStrategy strategy) {
-        this.requirementsStrategy = strategy;
+    public net.minecraft.advancements.Advancement$Builder requirements(net.minecraft.advancements.RequirementsStrategy $$0) {
+        this.requirementsStrategy = $$0;
         return this;
     }
 
@@ -92,30 +92,30 @@
         return this;
     }
 
-    public boolean canBuild(java.util.function.Function<net.minecraft.resources.ResourceLocation, net.minecraft.advancements.Advancement> lookup) {
+    public boolean canBuild(java.util.function.Function<net.minecraft.resources.ResourceLocation, net.minecraft.advancements.Advancement> $$0) {
         if (this.parentId == null) {
             return true;
         }
         if (this.parent == null) {
-            this.parent = (net.minecraft.advancements.Advancement)lookup.apply((java.lang.Object)this.parentId);
+            this.parent = (net.minecraft.advancements.Advancement)$$0.apply((java.lang.Object)this.parentId);
         }
         return this.parent != null;
     }
 
-    public net.minecraft.advancements.Advancement build(net.minecraft.resources.ResourceLocation id) {
+    public net.minecraft.advancements.Advancement build(net.minecraft.resources.ResourceLocation $$02) {
         if (!this.canBuild($$0 -> null)) {
             throw new java.lang.IllegalStateException("Tried to build incomplete advancement!");
         }
         if (this.requirements == null) {
             this.requirements = this.requirementsStrategy.createRequirements((java.util.Collection)this.criteria.keySet());
         }
-        return new net.minecraft.advancements.Advancement(id, this.parent, this.display, this.rewards, this.criteria, this.requirements);
+        return new net.minecraft.advancements.Advancement($$02, this.parent, this.display, this.rewards, this.criteria, this.requirements);
     }
 
-    public net.minecraft.advancements.Advancement save(java.util.function.Consumer<net.minecraft.advancements.Advancement> consumer, java.lang.String id) {
-        net.minecraft.advancements.Advancement advancement = this.build(new net.minecraft.resources.ResourceLocation(id));
-        consumer.accept((java.lang.Object)advancement);
-        return advancement;
+    public net.minecraft.advancements.Advancement save(java.util.function.Consumer<net.minecraft.advancements.Advancement> $$0, java.lang.String $$1) {
+        net.minecraft.advancements.Advancement $$2 = this.build(new net.minecraft.resources.ResourceLocation($$1));
+        $$0.accept((java.lang.Object)$$2);
+        return $$2;
     }
 
     public com.google.gson.JsonObject serializeToJson() {
@@ -149,18 +149,18 @@
         return $$0;
     }
 
-    public void serializeToNetwork(net.minecraft.network.FriendlyByteBuf buf) {
+    public void serializeToNetwork(net.minecraft.network.FriendlyByteBuf $$02) {
         if (this.requirements == null) {
             this.requirements = this.requirementsStrategy.createRequirements((java.util.Collection)this.criteria.keySet());
         }
-        buf.writeNullable((java.lang.Object)this.parentId, net.minecraft.network.FriendlyByteBuf::writeResourceLocation);
-        buf.writeNullable((java.lang.Object)this.display, ($$0, $$1) -> $$1.serializeToNetwork($$0));
-        net.minecraft.advancements.Criterion.serializeToNetwork((java.util.Map)this.criteria, (net.minecraft.network.FriendlyByteBuf)buf);
-        buf.writeVarInt(this.requirements.length);
-        for (java.lang.String[] stringArray : this.requirements) {
-            buf.writeVarInt(stringArray.length);
-            for (java.lang.String string : stringArray) {
-                buf.writeUtf(string);
+        $$02.writeNullable((java.lang.Object)this.parentId, net.minecraft.network.FriendlyByteBuf::writeResourceLocation);
+        $$02.writeNullable((java.lang.Object)this.display, ($$0, $$1) -> $$1.serializeToNetwork($$0));
+        net.minecraft.advancements.Criterion.serializeToNetwork((java.util.Map)this.criteria, (net.minecraft.network.FriendlyByteBuf)$$02);
+        $$02.writeVarInt(this.requirements.length);
+        for (java.lang.String[] $$12 : this.requirements) {
+            $$02.writeVarInt($$12.length);
+            for (java.lang.String $$2 : $$12) {
+                $$02.writeUtf($$2);
             }
         }
     }
@@ -169,69 +169,67 @@
         return "Task Advancement{parentId=" + this.parentId + ", display=" + this.display + ", rewards=" + this.rewards + ", criteria=" + this.criteria + ", requirements=" + java.util.Arrays.deepToString((java.lang.Object[])this.requirements) + "}";
     }
 
-    public static net.minecraft.advancements.Advancement$Builder fromJson(com.google.gson.JsonObject json, net.minecraft.advancements.critereon.DeserializationContext conditionParser) {
-        int n;
-        net.minecraft.resources.ResourceLocation resourceLocation = json.has("parent") ? new net.minecraft.resources.ResourceLocation(net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)json, (java.lang.String)"parent")) : null;
-        net.minecraft.advancements.DisplayInfo displayInfo = json.has("display") ? net.minecraft.advancements.DisplayInfo.fromJson((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)json, (java.lang.String)"display")) : null;
-        net.minecraft.advancements.AdvancementRewards advancementRewards = json.has("rewards") ? net.minecraft.advancements.AdvancementRewards.deserialize((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)json, (java.lang.String)"rewards")) : net.minecraft.advancements.AdvancementRewards.EMPTY;
-        java.util.Map map = net.minecraft.advancements.Criterion.criteriaFromJson((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)json, (java.lang.String)"criteria"), (net.minecraft.advancements.critereon.DeserializationContext)conditionParser);
-        if (map.isEmpty()) {
+    public static net.minecraft.advancements.Advancement$Builder fromJson(com.google.gson.JsonObject $$0, net.minecraft.advancements.critereon.DeserializationContext $$1) {
+        net.minecraft.resources.ResourceLocation $$2 = $$0.has("parent") ? new net.minecraft.resources.ResourceLocation(net.minecraft.util.GsonHelper.getAsString((com.google.gson.JsonObject)$$0, (java.lang.String)"parent")) : null;
+        net.minecraft.advancements.DisplayInfo $$3 = $$0.has("display") ? net.minecraft.advancements.DisplayInfo.fromJson((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)$$0, (java.lang.String)"display")) : null;
+        net.minecraft.advancements.AdvancementRewards $$4 = $$0.has("rewards") ? net.minecraft.advancements.AdvancementRewards.deserialize((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)$$0, (java.lang.String)"rewards")) : net.minecraft.advancements.AdvancementRewards.EMPTY;
+        java.util.Map $$5 = net.minecraft.advancements.Criterion.criteriaFromJson((com.google.gson.JsonObject)net.minecraft.util.GsonHelper.getAsJsonObject((com.google.gson.JsonObject)$$0, (java.lang.String)"criteria"), (net.minecraft.advancements.critereon.DeserializationContext)$$1);
+        if ($$5.isEmpty()) {
             throw new com.google.gson.JsonSyntaxException("Advancement criteria cannot be empty");
         }
-        com.google.gson.JsonArray jsonArray = net.minecraft.util.GsonHelper.getAsJsonArray((com.google.gson.JsonObject)json, (java.lang.String)"requirements", (com.google.gson.JsonArray)new com.google.gson.JsonArray());
-        java.util.Iterator iterator = new java.lang.String[jsonArray.size()][];
-        for (n = 0;
- n < jsonArray.size(); ++n) {
-            com.google.gson.JsonArray jsonArray2 = net.minecraft.util.GsonHelper.convertToJsonArray((com.google.gson.JsonElement)jsonArray.get(n), (java.lang.String)("requirements[" + n + "]"));
-            iterator[n] = new java.lang.String[jsonArray2.size()];
-            for (int i = 0; i < jsonArray2.size(); ++i) {
-                iterator[n][i] = net.minecraft.util.GsonHelper.convertToString((com.google.gson.JsonElement)jsonArray2.get(i), (java.lang.String)("requirements[" + n + "][" + i + "]"));
+        com.google.gson.JsonArray $$6 = net.minecraft.util.GsonHelper.getAsJsonArray((com.google.gson.JsonObject)$$0, (java.lang.String)"requirements", (com.google.gson.JsonArray)new com.google.gson.JsonArray());
+        java.util.Iterator $$7 = new java.lang.String[$$6.size()][];
+        for (int $$8 = 0; $$8 < $$6.size(); ++$$8) {
+            com.google.gson.JsonArray $$9 = net.minecraft.util.GsonHelper.convertToJsonArray((com.google.gson.JsonElement)$$6.get($$8), (java.lang.String)("requirements[" + $$8 + "]"));
+            $$7[$$8] = new java.lang.String[$$9.size()];
+            for (int $$10 = 0; $$10 < $$9.size(); ++$$10) {
+                $$7[$$8][$$10] = net.minecraft.util.GsonHelper.convertToString((com.google.gson.JsonElement)$$9.get($$10), (java.lang.String)("requirements[" + $$8 + "][" + $$10 + "]"));
             }
         }
-        if (((java.lang.String[][])iterator).length == 0) {
-            iterator = new java.lang.String[map.size()][];
-            n = 0;
-            for (java.lang.String string : map.keySet()) {
-                iterator[n++] = new java.lang.String[]{string};
+        if (((java.lang.String[][])$$7).length == 0) {
+            $$7 = new java.lang.String[$$5.size()][];
+            int $$11 = 0;
+            for (java.lang.String $$12 : $$5.keySet()) {
+                $$7[$$11++] = new java.lang.String[]{$$12};
             }
         }
-        for (java.util.Iterator iterator2 : iterator) {
-            if (((java.lang.String[])iterator2).length == 0 && map.isEmpty()) {
+        for (java.lang.String[] $$13 : $$7) {
+            if ($$13.length == 0 && $$5.isEmpty()) {
                 throw new com.google.gson.JsonSyntaxException("Requirement entry cannot be empty");
             }
-            java.util.Iterator iterator3 = iterator2;
-            int n2 = ((java.lang.String[])iterator3).length;
-            for (int i = 0; i < n2; ++i) {
-                java.util.Iterator iterator4 = iterator3[i];
-                if (map.containsKey((java.lang.Object)iterator4)) continue;
-                throw new com.google.gson.JsonSyntaxException("Unknown required criterion '" + (java.lang.String)iterator4 + "'");
+            java.lang.String[] stringArray = $$13;
+            int n = stringArray.length;
+            for (int i = 0; i < n; ++i) {
+                java.lang.String $$14 = stringArray[i];
+                if ($$5.containsKey((java.lang.Object)$$14)) continue;
+                throw new com.google.gson.JsonSyntaxException("Unknown required criterion '" + $$14 + "'");
             }
         }
-        for (java.lang.String string : map.keySet()) {
-            int n3 = 0;
-            for (java.util.Iterator iterator5 : iterator) {
-                if (!org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[])iterator5, (java.lang.Object)string)) continue;
-                n3 = 1;
+        for (java.lang.String $$15 : $$5.keySet()) {
+            boolean $$16 = false;
+            for (java.util.Iterator $$17 : $$7) {
+                if (!org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[])$$17, (java.lang.Object)$$15)) continue;
+                $$16 = true;
                 break;
             }
-            if (n3 != 0) continue;
-            throw new com.google.gson.JsonSyntaxException("Criterion '" + string + "' isn't a requirement for completion. This isn't supported behaviour, all criteria must be required.");
+            if ($$16) continue;
+            throw new com.google.gson.JsonSyntaxException("Criterion '" + $$15 + "' isn't a requirement for completion. This isn't supported behaviour, all criteria must be required.");
         }
-        return new net.minecraft.advancements.Advancement$Builder(resourceLocation, displayInfo, advancementRewards, map, (java.lang.String[][])iterator);
+        return new net.minecraft.advancements.Advancement$Builder($$2, $$3, $$4, $$5, (java.lang.String[][])$$7);
     }
 
-    public static net.minecraft.advancements.Advancement$Builder fromNetwork(net.minecraft.network.FriendlyByteBuf buf) {
-        net.minecraft.resources.ResourceLocation resourceLocation = (net.minecraft.resources.ResourceLocation)buf.readNullable(net.minecraft.network.FriendlyByteBuf::readResourceLocation);
-        net.minecraft.advancements.DisplayInfo displayInfo = (net.minecraft.advancements.DisplayInfo)buf.readNullable(net.minecraft.advancements.DisplayInfo::fromNetwork);
-        java.util.Map map = net.minecraft.advancements.Criterion.criteriaFromNetwork((net.minecraft.network.FriendlyByteBuf)buf);
-        java.lang.String[][] stringArray = new java.lang.String[buf.readVarInt()][];
-        for (int i = 0; i < stringArray.length; ++i) {
-            stringArray[i] = new java.lang.String[buf.readVarInt()];
-            for (int j = 0; j < stringArray[i].length; ++j) {
-                stringArray[i][j] = buf.readUtf();
+    public static net.minecraft.advancements.Advancement$Builder fromNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
+        net.minecraft.resources.ResourceLocation $$1 = (net.minecraft.resources.ResourceLocation)$$0.readNullable(net.minecraft.network.FriendlyByteBuf::readResourceLocation);
+        net.minecraft.advancements.DisplayInfo $$2 = (net.minecraft.advancements.DisplayInfo)$$0.readNullable(net.minecraft.advancements.DisplayInfo::fromNetwork);
+        java.util.Map $$3 = net.minecraft.advancements.Criterion.criteriaFromNetwork((net.minecraft.network.FriendlyByteBuf)$$0);
+        java.lang.String[][] $$4 = new java.lang.String[$$0.readVarInt()][];
+        for (int $$5 = 0; $$5 < $$4.length; ++$$5) {
+            $$4[$$5] = new java.lang.String[$$0.readVarInt()];
+            for (int $$6 = 0; $$6 < $$4[$$5].length; ++$$6) {
+                $$4[$$5][$$6] = $$0.readUtf();
             }
         }
-        return new net.minecraft.advancements.Advancement$Builder(resourceLocation, displayInfo, net.minecraft.advancements.AdvancementRewards.EMPTY, map, stringArray);
+        return new net.minecraft.advancements.Advancement$Builder($$1, $$2, net.minecraft.advancements.AdvancementRewards.EMPTY, $$3, $$4);
     }
 
     public java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> getCriteria() {