--- net/minecraft/advancements/CriterionProgress.java
+++ net/minecraft/advancements/CriterionProgress.java
@@ -33,8 +33,8 @@
         return "CriterionProgress{obtained=" + (java.io.Serializable)(this.obtained == null ? "false" : this.obtained) + "}";
     }
 
-    public void serializeToNetwork(net.minecraft.network.FriendlyByteBuf buf) {
-        buf.writeNullable((java.lang.Object)this.obtained, net.minecraft.network.FriendlyByteBuf::writeDate);
+    public void serializeToNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
+        $$0.writeNullable((java.lang.Object)this.obtained, net.minecraft.network.FriendlyByteBuf::writeDate);
     }
 
     public com.google.gson.JsonElement serializeToJson() {
@@ -44,21 +44,21 @@
         return com.google.gson.JsonNull.INSTANCE;
     }
 
-    public static net.minecraft.advancements.CriterionProgress fromNetwork(net.minecraft.network.FriendlyByteBuf buf) {
-        net.minecraft.advancements.CriterionProgress criterionProgress = new net.minecraft.advancements.CriterionProgress();
-        criterionProgress.obtained = (java.util.Date)buf.readNullable(net.minecraft.network.FriendlyByteBuf::readDate);
-        return criterionProgress;
+    public static net.minecraft.advancements.CriterionProgress fromNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
+        net.minecraft.advancements.CriterionProgress $$1 = new net.minecraft.advancements.CriterionProgress();
+        $$1.obtained = (java.util.Date)$$0.readNullable(net.minecraft.network.FriendlyByteBuf::readDate);
+        return $$1;
     }
 
-    public static net.minecraft.advancements.CriterionProgress fromJson(java.lang.String dateTime) {
-        net.minecraft.advancements.CriterionProgress criterionProgress = new net.minecraft.advancements.CriterionProgress();
+    public static net.minecraft.advancements.CriterionProgress fromJson(java.lang.String $$0) {
+        net.minecraft.advancements.CriterionProgress $$1 = new net.minecraft.advancements.CriterionProgress();
         try {
-            criterionProgress.obtained = DATE_FORMAT.parse(dateTime);
+            $$1.obtained = DATE_FORMAT.parse($$0);
         }
-        catch (java.text.ParseException parseException) {
-            throw new com.google.gson.JsonSyntaxException("Invalid datetime: " + dateTime, (java.lang.Throwable)parseException);
+        catch (java.text.ParseException $$2) {
+            throw new com.google.gson.JsonSyntaxException("Invalid datetime: " + $$0, (java.lang.Throwable)$$2);
         }
-        return criterionProgress;
+        return $$1;
     }
 
     static {