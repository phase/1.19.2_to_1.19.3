--- net/minecraft/advancements/critereon/WrappedMinMaxBounds.java
+++ net/minecraft/advancements/critereon/WrappedMinMaxBounds.java
@@ -12,9 +12,9 @@
     @javax.annotation.Nullable
     public java.lang.Float max;
 
-    public net.minecraft.advancements.critereon.WrappedMinMaxBounds(@javax.annotation.Nullable java.lang.Float min, @javax.annotation.Nullable java.lang.Float max) {
-        this.min = min;
-        this.max = max;
+    public net.minecraft.advancements.critereon.WrappedMinMaxBounds(@javax.annotation.Nullable java.lang.Float $$0, @javax.annotation.Nullable java.lang.Float $$1) {
+        this.min = $$0;
+        this.max = $$1;
     }
 
     public static net.minecraft.advancements.critereon.WrappedMinMaxBounds exactly(float $$0) {
@@ -98,70 +98,70 @@
         return net.minecraft.advancements.critereon.WrappedMinMaxBounds.fromReader((com.mojang.brigadier.StringReader)$$02, (boolean)$$1, $$0 -> $$0);
     }
 
-    public static net.minecraft.advancements.critereon.WrappedMinMaxBounds fromReader(com.mojang.brigadier.StringReader reader, boolean isFloatingPoint, java.util.function.Function<java.lang.Float, java.lang.Float> valueFunction) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        java.lang.Float f;
-        if (!reader.canRead()) {
-            throw net.minecraft.advancements.critereon.MinMaxBounds.ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+    public static net.minecraft.advancements.critereon.WrappedMinMaxBounds fromReader(com.mojang.brigadier.StringReader $$0, boolean $$1, java.util.function.Function<java.lang.Float, java.lang.Float> $$2) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        java.lang.Float $$6;
+        if (!$$0.canRead()) {
+            throw net.minecraft.advancements.critereon.MinMaxBounds.ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
         }
-        int n = reader.getCursor();
-        java.lang.Float f2 = net.minecraft.advancements.critereon.WrappedMinMaxBounds.optionallyFormat((java.lang.Float)net.minecraft.advancements.critereon.WrappedMinMaxBounds.readNumber((com.mojang.brigadier.StringReader)reader, (boolean)isFloatingPoint), valueFunction);
-        if (reader.canRead(2) && reader.peek() == '.' && reader.peek(1) == '.') {
-            reader.skip();
-            reader.skip();
-            f = net.minecraft.advancements.critereon.WrappedMinMaxBounds.optionallyFormat((java.lang.Float)net.minecraft.advancements.critereon.WrappedMinMaxBounds.readNumber((com.mojang.brigadier.StringReader)reader, (boolean)isFloatingPoint), valueFunction);
-            if (f2 == null && f == null) {
-                reader.setCursor(n);
-                throw net.minecraft.advancements.critereon.MinMaxBounds.ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+        int $$3 = $$0.getCursor();
+        java.lang.Float $$4 = net.minecraft.advancements.critereon.WrappedMinMaxBounds.optionallyFormat((java.lang.Float)net.minecraft.advancements.critereon.WrappedMinMaxBounds.readNumber((com.mojang.brigadier.StringReader)$$0, (boolean)$$1), $$2);
+        if ($$0.canRead(2) && $$0.peek() == '.' && $$0.peek(1) == '.') {
+            $$0.skip();
+            $$0.skip();
+            java.lang.Float $$5 = net.minecraft.advancements.critereon.WrappedMinMaxBounds.optionallyFormat((java.lang.Float)net.minecraft.advancements.critereon.WrappedMinMaxBounds.readNumber((com.mojang.brigadier.StringReader)$$0, (boolean)$$1), $$2);
+            if ($$4 == null && $$5 == null) {
+                $$0.setCursor($$3);
+                throw net.minecraft.advancements.critereon.MinMaxBounds.ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
             }
         } else {
-            if (!isFloatingPoint && reader.canRead() && reader.peek() == '.') {
-                reader.setCursor(n);
-                throw ERROR_INTS_ONLY.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+            if (!$$1 && $$0.canRead() && $$0.peek() == '.') {
+                $$0.setCursor($$3);
+                throw ERROR_INTS_ONLY.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
             }
-            f = f2;
+            $$6 = $$4;
         }
-        if (f2 == null && f == null) {
-            reader.setCursor(n);
-            throw net.minecraft.advancements.critereon.MinMaxBounds.ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+        if ($$4 == null && $$6 == null) {
+            $$0.setCursor($$3);
+            throw net.minecraft.advancements.critereon.MinMaxBounds.ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
         }
-        return new net.minecraft.advancements.critereon.WrappedMinMaxBounds(f2, f);
+        return new net.minecraft.advancements.critereon.WrappedMinMaxBounds($$4, $$6);
     }
 
     @javax.annotation.Nullable
-    public static java.lang.Float readNumber(com.mojang.brigadier.StringReader reader, boolean isFloatingPoint) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        int n = reader.getCursor();
-        while (reader.canRead() && net.minecraft.advancements.critereon.WrappedMinMaxBounds.isAllowedNumber((com.mojang.brigadier.StringReader)reader, (boolean)isFloatingPoint)) {
-            reader.skip();
+    public static java.lang.Float readNumber(com.mojang.brigadier.StringReader $$0, boolean $$1) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        int $$2 = $$0.getCursor();
+        while ($$0.canRead() && net.minecraft.advancements.critereon.WrappedMinMaxBounds.isAllowedNumber((com.mojang.brigadier.StringReader)$$0, (boolean)$$1)) {
+            $$0.skip();
         }
-        java.lang.String string = reader.getString().substring(n, reader.getCursor());
-        if (string.isEmpty()) {
+        java.lang.String $$3 = $$0.getString().substring($$2, $$0.getCursor());
+        if ($$3.isEmpty()) {
             return null;
         }
         try {
-            return java.lang.Float.valueOf((float)java.lang.Float.parseFloat((java.lang.String)string));
+            return java.lang.Float.valueOf((float)java.lang.Float.parseFloat((java.lang.String)$$3));
         }
-        catch (java.lang.NumberFormatException numberFormatException) {
-            if (isFloatingPoint) {
-                throw com.mojang.brigadier.exceptions.CommandSyntaxException.BUILT_IN_EXCEPTIONS.readerInvalidDouble().createWithContext((com.mojang.brigadier.ImmutableStringReader)reader, (java.lang.Object)string);
+        catch (java.lang.NumberFormatException $$4) {
+            if ($$1) {
+                throw com.mojang.brigadier.exceptions.CommandSyntaxException.BUILT_IN_EXCEPTIONS.readerInvalidDouble().createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0, (java.lang.Object)$$3);
             }
-            throw com.mojang.brigadier.exceptions.CommandSyntaxException.BUILT_IN_EXCEPTIONS.readerInvalidInt().createWithContext((com.mojang.brigadier.ImmutableStringReader)reader, (java.lang.Object)string);
+            throw com.mojang.brigadier.exceptions.CommandSyntaxException.BUILT_IN_EXCEPTIONS.readerInvalidInt().createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0, (java.lang.Object)$$3);
         }
     }
 
-    public static boolean isAllowedNumber(com.mojang.brigadier.StringReader reader, boolean isFloatingPoint) {
-        char c = reader.peek();
-        if (c >= '0' && c <= '9' || c == '-') {
+    public static boolean isAllowedNumber(com.mojang.brigadier.StringReader $$0, boolean $$1) {
+        char $$2 = $$0.peek();
+        if ($$2 >= '0' && $$2 <= '9' || $$2 == '-') {
             return true;
         }
-        if (isFloatingPoint && c == '.') {
-            return !reader.canRead(2) || reader.peek(1) != '.';
+        if ($$1 && $$2 == '.') {
+            return !$$0.canRead(2) || $$0.peek(1) != '.';
         }
         return false;
     }
 
     @javax.annotation.Nullable
-    public static java.lang.Float optionallyFormat(@javax.annotation.Nullable java.lang.Float value, java.util.function.Function<java.lang.Float, java.lang.Float> valueFunction) {
-        return value == null ? null : (java.lang.Float)valueFunction.apply((java.lang.Object)value);
+    public static java.lang.Float optionallyFormat(@javax.annotation.Nullable java.lang.Float $$0, java.util.function.Function<java.lang.Float, java.lang.Float> $$1) {
+        return $$0 == null ? null : (java.lang.Float)$$1.apply((java.lang.Object)$$0);
     }
 
     static {