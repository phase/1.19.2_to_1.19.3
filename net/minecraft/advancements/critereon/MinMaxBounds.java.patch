--- net/minecraft/advancements/critereon/MinMaxBounds.java
+++ net/minecraft/advancements/critereon/MinMaxBounds.java
@@ -48,81 +48,81 @@
         return $$0;
     }
 
-    public static <T extends java.lang.Number, R extends net.minecraft.advancements.critereon.MinMaxBounds<T>> R fromJson(@javax.annotation.Nullable com.google.gson.JsonElement element, R defaultValue, java.util.function.BiFunction<com.google.gson.JsonElement, java.lang.String, T> biFunction, net.minecraft.advancements.critereon.MinMaxBounds$BoundsFactory<T, R> boundedFactory) {
-        if (element == null || element.isJsonNull()) {
-            return defaultValue;
+    public static <T extends java.lang.Number, R extends net.minecraft.advancements.critereon.MinMaxBounds<T>> R fromJson(@javax.annotation.Nullable com.google.gson.JsonElement $$0, R $$1, java.util.function.BiFunction<com.google.gson.JsonElement, java.lang.String, T> $$2, net.minecraft.advancements.critereon.MinMaxBounds$BoundsFactory<T, R> $$3) {
+        if ($$0 == null || $$0.isJsonNull()) {
+            return $$1;
         }
-        if (net.minecraft.util.GsonHelper.isNumberValue((com.google.gson.JsonElement)element)) {
-            java.lang.Number number = (java.lang.Number)biFunction.apply((java.lang.Object)element, (java.lang.Object)"value");
-            return (R)boundedFactory.create(number, number);
+        if (net.minecraft.util.GsonHelper.isNumberValue((com.google.gson.JsonElement)$$0)) {
+            java.lang.Number $$4 = (java.lang.Number)$$2.apply((java.lang.Object)$$0, (java.lang.Object)"value");
+            return (R)$$3.create($$4, $$4);
         }
-        com.google.gson.JsonObject jsonObject = net.minecraft.util.GsonHelper.convertToJsonObject((com.google.gson.JsonElement)element, (java.lang.String)"value");
-        java.lang.Number number = jsonObject.has("min") ? (java.lang.Number)((java.lang.Number)biFunction.apply((java.lang.Object)jsonObject.get("min"), (java.lang.Object)"min")) : (java.lang.Number)null;
-        java.lang.Number number2 = jsonObject.has("max") ? (java.lang.Number)((java.lang.Number)biFunction.apply((java.lang.Object)jsonObject.get("max"), (java.lang.Object)"max")) : (java.lang.Number)null;
-        return (R)boundedFactory.create(number, number2);
+        com.google.gson.JsonObject $$5 = net.minecraft.util.GsonHelper.convertToJsonObject((com.google.gson.JsonElement)$$0, (java.lang.String)"value");
+        java.lang.Number $$6 = $$5.has("min") ? (java.lang.Number)((java.lang.Number)$$2.apply((java.lang.Object)$$5.get("min"), (java.lang.Object)"min")) : (java.lang.Number)null;
+        java.lang.Number $$7 = $$5.has("max") ? (java.lang.Number)((java.lang.Number)$$2.apply((java.lang.Object)$$5.get("max"), (java.lang.Object)"max")) : (java.lang.Number)null;
+        return (R)$$3.create($$6, $$7);
     }
 
-    public static <T extends java.lang.Number, R extends net.minecraft.advancements.critereon.MinMaxBounds<T>> R fromReader(com.mojang.brigadier.StringReader reader, net.minecraft.advancements.critereon.MinMaxBounds$BoundsFromReaderFactory<T, R> minMaxReader, java.util.function.Function<java.lang.String, T> valueFunction, java.util.function.Supplier<com.mojang.brigadier.exceptions.DynamicCommandExceptionType> commandExceptionSupplier, java.util.function.Function<T, T> function) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        if (!reader.canRead()) {
-            throw ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+    public static <T extends java.lang.Number, R extends net.minecraft.advancements.critereon.MinMaxBounds<T>> R fromReader(com.mojang.brigadier.StringReader $$0, net.minecraft.advancements.critereon.MinMaxBounds$BoundsFromReaderFactory<T, R> $$1, java.util.function.Function<java.lang.String, T> $$2, java.util.function.Supplier<com.mojang.brigadier.exceptions.DynamicCommandExceptionType> $$3, java.util.function.Function<T, T> $$4) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        if (!$$0.canRead()) {
+            throw ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
         }
-        int n = reader.getCursor();
+        int $$5 = $$0.getCursor();
         try {
-            java.lang.Number number;
-            java.lang.Number number2 = (java.lang.Number)net.minecraft.advancements.critereon.MinMaxBounds.optionallyFormat((java.lang.Object)net.minecraft.advancements.critereon.MinMaxBounds.readNumber((com.mojang.brigadier.StringReader)reader, valueFunction, commandExceptionSupplier), function);
-            if (reader.canRead(2) && reader.peek() == '.' && reader.peek(1) == '.') {
-                reader.skip();
-                reader.skip();
-                number = (java.lang.Number)net.minecraft.advancements.critereon.MinMaxBounds.optionallyFormat((java.lang.Object)net.minecraft.advancements.critereon.MinMaxBounds.readNumber((com.mojang.brigadier.StringReader)reader, valueFunction, commandExceptionSupplier), function);
-                if (number2 == null && number == null) {
-                    throw ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+            java.lang.Number $$8;
+            java.lang.Number $$6 = (java.lang.Number)net.minecraft.advancements.critereon.MinMaxBounds.optionallyFormat((java.lang.Object)net.minecraft.advancements.critereon.MinMaxBounds.readNumber((com.mojang.brigadier.StringReader)$$0, $$2, $$3), $$4);
+            if ($$0.canRead(2) && $$0.peek() == '.' && $$0.peek(1) == '.') {
+                $$0.skip();
+                $$0.skip();
+                java.lang.Number $$7 = (java.lang.Number)net.minecraft.advancements.critereon.MinMaxBounds.optionallyFormat((java.lang.Object)net.minecraft.advancements.critereon.MinMaxBounds.readNumber((com.mojang.brigadier.StringReader)$$0, $$2, $$3), $$4);
+                if ($$6 == null && $$7 == null) {
+                    throw ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
                 }
             } else {
-                number = number2;
+                $$8 = $$6;
             }
-            if (number2 == null && number == null) {
-                throw ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)reader);
+            if ($$6 == null && $$8 == null) {
+                throw ERROR_EMPTY.createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0);
             }
-            return (R)minMaxReader.create(reader, number2, number);
+            return (R)$$1.create($$0, $$6, $$8);
         }
-        catch (com.mojang.brigadier.exceptions.CommandSyntaxException commandSyntaxException) {
-            reader.setCursor(n);
-            throw new com.mojang.brigadier.exceptions.CommandSyntaxException(commandSyntaxException.getType(), commandSyntaxException.getRawMessage(), commandSyntaxException.getInput(), n);
+        catch (com.mojang.brigadier.exceptions.CommandSyntaxException $$9) {
+            $$0.setCursor($$5);
+            throw new com.mojang.brigadier.exceptions.CommandSyntaxException($$9.getType(), $$9.getRawMessage(), $$9.getInput(), $$5);
         }
     }
 
     @javax.annotation.Nullable
-    public static <T extends java.lang.Number> T readNumber(com.mojang.brigadier.StringReader reader, java.util.function.Function<java.lang.String, T> stringToValueFunction, java.util.function.Supplier<com.mojang.brigadier.exceptions.DynamicCommandExceptionType> commandExceptionSupplier) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
-        int n = reader.getCursor();
-        while (reader.canRead() && net.minecraft.advancements.critereon.MinMaxBounds.isAllowedInputChat((com.mojang.brigadier.StringReader)reader)) {
-            reader.skip();
+    public static <T extends java.lang.Number> T readNumber(com.mojang.brigadier.StringReader $$0, java.util.function.Function<java.lang.String, T> $$1, java.util.function.Supplier<com.mojang.brigadier.exceptions.DynamicCommandExceptionType> $$2) throws com.mojang.brigadier.exceptions.CommandSyntaxException {
+        int $$3 = $$0.getCursor();
+        while ($$0.canRead() && net.minecraft.advancements.critereon.MinMaxBounds.isAllowedInputChat((com.mojang.brigadier.StringReader)$$0)) {
+            $$0.skip();
         }
-        java.lang.String string = reader.getString().substring(n, reader.getCursor());
-        if (string.isEmpty()) {
+        java.lang.String $$4 = $$0.getString().substring($$3, $$0.getCursor());
+        if ($$4.isEmpty()) {
             return null;
         }
         try {
-            return (T)((java.lang.Number)stringToValueFunction.apply((java.lang.Object)string));
+            return (T)((java.lang.Number)$$1.apply((java.lang.Object)$$4));
         }
-        catch (java.lang.NumberFormatException numberFormatException) {
-            throw ((com.mojang.brigadier.exceptions.DynamicCommandExceptionType)commandExceptionSupplier.get()).createWithContext((com.mojang.brigadier.ImmutableStringReader)reader, (java.lang.Object)string);
+        catch (java.lang.NumberFormatException $$5) {
+            throw ((com.mojang.brigadier.exceptions.DynamicCommandExceptionType)$$2.get()).createWithContext((com.mojang.brigadier.ImmutableStringReader)$$0, (java.lang.Object)$$4);
         }
     }
 
-    public static boolean isAllowedInputChat(com.mojang.brigadier.StringReader reader) {
-        char c = reader.peek();
-        if (c >= '0' && c <= '9' || c == '-') {
+    public static boolean isAllowedInputChat(com.mojang.brigadier.StringReader $$0) {
+        char $$1 = $$0.peek();
+        if ($$1 >= '0' && $$1 <= '9' || $$1 == '-') {
             return true;
         }
-        if (c == '.') {
-            return !reader.canRead(2) || reader.peek(1) != '.';
+        if ($$1 == '.') {
+            return !$$0.canRead(2) || $$0.peek(1) != '.';
         }
         return false;
     }
 
     @javax.annotation.Nullable
-    public static <T> T optionallyFormat(@javax.annotation.Nullable T value, java.util.function.Function<T, T> formatterFunction) {
-        return (T)(value == null ? null : formatterFunction.apply(value));
+    public static <T> T optionallyFormat(@javax.annotation.Nullable T $$0, java.util.function.Function<T, T> $$1) {
+        return (T)($$0 == null ? null : $$1.apply($$0));
     }
 
     static {