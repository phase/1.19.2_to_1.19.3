--- net/minecraft/advancements/critereon/PlayerPredicate.java
+++ net/minecraft/advancements/critereon/PlayerPredicate.java
@@ -15,15 +15,15 @@
     public java.util.Map<net.minecraft.resources.ResourceLocation, net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate> advancements;
     public net.minecraft.advancements.critereon.EntityPredicate lookingAt;
 
-    public static net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate advancementPredicateFromJson(com.google.gson.JsonElement element) {
-        if (element.isJsonPrimitive()) {
-            boolean bl = element.getAsBoolean();
-            return new net.minecraft.advancements.critereon.PlayerPredicate$AdvancementDonePredicate(bl);
+    public static net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate advancementPredicateFromJson(com.google.gson.JsonElement $$0) {
+        if ($$0.isJsonPrimitive()) {
+            boolean $$1 = $$0.getAsBoolean();
+            return new net.minecraft.advancements.critereon.PlayerPredicate$AdvancementDonePredicate($$1);
         }
-        it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap object2BooleanOpenHashMap = new it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap();
-        com.google.gson.JsonObject jsonObject = net.minecraft.util.GsonHelper.convertToJsonObject((com.google.gson.JsonElement)element, (java.lang.String)"criterion data");
-        jsonObject.entrySet().forEach(arg_0 -> net.minecraft.advancements.critereon.PlayerPredicate.lambda$advancementPredicateFromJson$0((it.unimi.dsi.fastutil.objects.Object2BooleanMap)object2BooleanOpenHashMap, arg_0));
-        return new net.minecraft.advancements.critereon.PlayerPredicate$AdvancementCriterionsPredicate((it.unimi.dsi.fastutil.objects.Object2BooleanMap)object2BooleanOpenHashMap);
+        it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap $$2 = new it.unimi.dsi.fastutil.objects.Object2BooleanOpenHashMap();
+        com.google.gson.JsonObject $$3 = net.minecraft.util.GsonHelper.convertToJsonObject((com.google.gson.JsonElement)$$0, (java.lang.String)"criterion data");
+        $$3.entrySet().forEach(arg_0 -> net.minecraft.advancements.critereon.PlayerPredicate.lambda$advancementPredicateFromJson$0((it.unimi.dsi.fastutil.objects.Object2BooleanMap)$$2, arg_0));
+        return new net.minecraft.advancements.critereon.PlayerPredicate$AdvancementCriterionsPredicate((it.unimi.dsi.fastutil.objects.Object2BooleanMap)$$2);
     }
 
     public net.minecraft.advancements.critereon.PlayerPredicate(net.minecraft.advancements.critereon.MinMaxBounds$Ints $$0, @javax.annotation.Nullable net.minecraft.world.level.GameType $$1, java.util.Map<net.minecraft.stats.Stat<?>, net.minecraft.advancements.critereon.MinMaxBounds$Ints> $$2, it.unimi.dsi.fastutil.objects.Object2BooleanMap<net.minecraft.resources.ResourceLocation> $$3, java.util.Map<net.minecraft.resources.ResourceLocation, net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate> $$4, net.minecraft.advancements.critereon.EntityPredicate $$5) {
@@ -120,17 +120,17 @@
         return new net.minecraft.advancements.critereon.PlayerPredicate($$1, $$3, (java.util.Map)$$4, (it.unimi.dsi.fastutil.objects.Object2BooleanMap)$$13, (java.util.Map)$$18, $$23);
     }
 
-    public static <T> net.minecraft.stats.Stat<T> getStat(net.minecraft.stats.StatType<T> type, net.minecraft.resources.ResourceLocation identifier) {
-        net.minecraft.core.Registry registry = type.getRegistry();
-        java.lang.Object object = registry.get(identifier);
-        if (object == null) {
-            throw new com.google.gson.JsonParseException("Unknown object " + identifier + " for stat type " + net.minecraft.core.Registry.STAT_TYPE.getKey(type));
+    public static <T> net.minecraft.stats.Stat<T> getStat(net.minecraft.stats.StatType<T> $$0, net.minecraft.resources.ResourceLocation $$1) {
+        net.minecraft.core.Registry $$2 = $$0.getRegistry();
+        java.lang.Object $$3 = $$2.get($$1);
+        if ($$3 == null) {
+            throw new com.google.gson.JsonParseException("Unknown object " + $$1 + " for stat type " + net.minecraft.core.Registry.STAT_TYPE.getKey($$0));
         }
-        return type.get(object);
+        return $$0.get($$3);
     }
 
-    public static <T> net.minecraft.resources.ResourceLocation getStatValueId(net.minecraft.stats.Stat<T> stat) {
-        return stat.getType().getRegistry().getKey(stat.getValue());
+    public static <T> net.minecraft.resources.ResourceLocation getStatValueId(net.minecraft.stats.Stat<T> $$0) {
+        return $$0.getType().getRegistry().getKey($$0.getValue());
     }
 
     public com.google.gson.JsonObject serializeCustomData() {