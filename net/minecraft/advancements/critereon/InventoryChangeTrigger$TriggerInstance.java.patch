--- net/minecraft/advancements/critereon/InventoryChangeTrigger$TriggerInstance.java
+++ net/minecraft/advancements/critereon/InventoryChangeTrigger$TriggerInstance.java
@@ -19,66 +19,65 @@
         this.predicates = $$4;
     }
 
-    public static net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance hasItems(net.minecraft.advancements.critereon.ItemPredicate ... itemConditions) {
-        return new net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance(net.minecraft.advancements.critereon.EntityPredicate$Composite.ANY, net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, itemConditions);
+    public static net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance hasItems(net.minecraft.advancements.critereon.ItemPredicate ... $$0) {
+        return new net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance(net.minecraft.advancements.critereon.EntityPredicate$Composite.ANY, net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, $$0);
     }
 
-    public static net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance hasItems(net.minecraft.world.level.ItemLike ... items) {
-        net.minecraft.advancements.critereon.ItemPredicate[] itemPredicateArray = new net.minecraft.advancements.critereon.ItemPredicate[items.length];
-        for (int i = 0; i < items.length; ++i) {
-            itemPredicateArray[i] = new net.minecraft.advancements.critereon.ItemPredicate(null, (java.util.Set)com.google.common.collect.ImmutableSet.of((java.lang.Object)items[i].asItem()), net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, net.minecraft.advancements.critereon.EnchantmentPredicate.NONE, net.minecraft.advancements.critereon.EnchantmentPredicate.NONE, null, net.minecraft.advancements.critereon.NbtPredicate.ANY);
+    public static net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance hasItems(net.minecraft.world.level.ItemLike ... $$0) {
+        net.minecraft.advancements.critereon.ItemPredicate[] $$1 = new net.minecraft.advancements.critereon.ItemPredicate[$$0.length];
+        for (int $$2 = 0; $$2 < $$0.length; ++$$2) {
+            $$1[$$2] = new net.minecraft.advancements.critereon.ItemPredicate(null, (java.util.Set)com.google.common.collect.ImmutableSet.of((java.lang.Object)$$0[$$2].asItem()), net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, net.minecraft.advancements.critereon.MinMaxBounds$Ints.ANY, net.minecraft.advancements.critereon.EnchantmentPredicate.NONE, net.minecraft.advancements.critereon.EnchantmentPredicate.NONE, null, net.minecraft.advancements.critereon.NbtPredicate.ANY);
         }
-        return net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance.hasItems((net.minecraft.advancements.critereon.ItemPredicate[])itemPredicateArray);
+        return net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance.hasItems((net.minecraft.advancements.critereon.ItemPredicate[])$$1);
     }
 
-    public com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.SerializationContext conditions) {
-        com.google.gson.JsonObject jsonObject;
-        com.google.gson.JsonObject jsonObject2 = super.serializeToJson(conditions);
+    public com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.SerializationContext $$0) {
+        com.google.gson.JsonObject $$1 = super.serializeToJson($$0);
         if (!(this.slotsOccupied.isAny() && this.slotsFull.isAny() && this.slotsEmpty.isAny())) {
-            jsonObject = new com.google.gson.JsonObject();
-            jsonObject.add("occupied", this.slotsOccupied.serializeToJson());
-            jsonObject.add("full", this.slotsFull.serializeToJson());
-            jsonObject.add("empty", this.slotsEmpty.serializeToJson());
-            jsonObject2.add("slots", (com.google.gson.JsonElement)jsonObject);
+            com.google.gson.JsonObject $$2 = new com.google.gson.JsonObject();
+            $$2.add("occupied", this.slotsOccupied.serializeToJson());
+            $$2.add("full", this.slotsFull.serializeToJson());
+            $$2.add("empty", this.slotsEmpty.serializeToJson());
+            $$1.add("slots", (com.google.gson.JsonElement)$$2);
         }
         if (this.predicates.length > 0) {
-            jsonObject = new com.google.gson.JsonArray();
-            for (net.minecraft.advancements.critereon.ItemPredicate itemPredicate : this.predicates) {
-                jsonObject.add(itemPredicate.serializeToJson());
+            com.google.gson.JsonArray $$3 = new com.google.gson.JsonArray();
+            for (net.minecraft.advancements.critereon.ItemPredicate $$4 : this.predicates) {
+                $$3.add($$4.serializeToJson());
             }
-            jsonObject2.add("items", (com.google.gson.JsonElement)jsonObject);
+            $$1.add("items", (com.google.gson.JsonElement)$$3);
         }
-        return jsonObject2;
+        return $$1;
     }
 
-    public boolean matches(net.minecraft.world.entity.player.Inventory inventory, net.minecraft.world.item.ItemStack stack, int full, int empty, int occupied) {
-        if (!this.slotsFull.matches(full)) {
+    public boolean matches(net.minecraft.world.entity.player.Inventory $$0, net.minecraft.world.item.ItemStack $$12, int $$2, int $$3, int $$4) {
+        if (!this.slotsFull.matches($$2)) {
             return false;
         }
-        if (!this.slotsEmpty.matches(empty)) {
+        if (!this.slotsEmpty.matches($$3)) {
             return false;
         }
-        if (!this.slotsOccupied.matches(occupied)) {
+        if (!this.slotsOccupied.matches($$4)) {
             return false;
         }
-        int n = this.predicates.length;
-        if (n == 0) {
+        int $$5 = this.predicates.length;
+        if ($$5 == 0) {
             return true;
         }
-        if (n == 1) {
-            return !stack.isEmpty() && this.predicates[0].matches(stack);
+        if ($$5 == 1) {
+            return !$$12.isEmpty() && this.predicates[0].matches($$12);
         }
-        it.unimi.dsi.fastutil.objects.ObjectArrayList objectArrayList = new it.unimi.dsi.fastutil.objects.ObjectArrayList((java.lang.Object[])this.predicates);
-        int n2 = inventory.getContainerSize();
-        for (int i = 0; i < n2; ++i) {
-            if (objectArrayList.isEmpty()) {
+        it.unimi.dsi.fastutil.objects.ObjectArrayList $$6 = new it.unimi.dsi.fastutil.objects.ObjectArrayList((java.lang.Object[])this.predicates);
+        int $$7 = $$0.getContainerSize();
+        for (int $$8 = 0; $$8 < $$7; ++$$8) {
+            if ($$6.isEmpty()) {
                 return true;
             }
-            net.minecraft.world.item.ItemStack itemStack = inventory.getItem(i);
-            if (itemStack.isEmpty()) continue;
-            objectArrayList.removeIf($$1 -> $$1.matches(itemStack));
+            net.minecraft.world.item.ItemStack $$9 = $$0.getItem($$8);
+            if ($$9.isEmpty()) continue;
+            $$6.removeIf($$1 -> $$1.matches($$9));
         }
-        return objectArrayList.isEmpty();
+        return $$6.isEmpty();
     }
 }
 