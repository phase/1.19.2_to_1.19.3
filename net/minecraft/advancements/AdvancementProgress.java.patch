--- net/minecraft/advancements/AdvancementProgress.java
+++ net/minecraft/advancements/AdvancementProgress.java
@@ -19,14 +19,14 @@
         this.criteria = com.google.common.collect.Maps.newHashMap();
     }
 
-    public void update(java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> criteria, java.lang.String[][] requirements) {
-        java.util.Set set = criteria.keySet();
-        this.criteria.entrySet().removeIf($$1 -> !set.contains($$1.getKey()));
-        for (java.lang.String string : set) {
-            if (this.criteria.containsKey((java.lang.Object)string)) continue;
-            this.criteria.put((java.lang.Object)string, (java.lang.Object)new net.minecraft.advancements.CriterionProgress());
+    public void update(java.util.Map<java.lang.String, net.minecraft.advancements.Criterion> $$0, java.lang.String[][] $$12) {
+        java.util.Set $$2 = $$0.keySet();
+        this.criteria.entrySet().removeIf($$1 -> !$$2.contains($$1.getKey()));
+        for (java.lang.String $$3 : $$2) {
+            if (this.criteria.containsKey((java.lang.Object)$$3)) continue;
+            this.criteria.put((java.lang.Object)$$3, (java.lang.Object)new net.minecraft.advancements.CriterionProgress());
         }
-        this.requirements = requirements;
+        this.requirements = $$12;
     }
 
     public boolean isDone() {
@@ -55,19 +55,19 @@
         return false;
     }
 
-    public boolean grantProgress(java.lang.String criterion) {
-        net.minecraft.advancements.CriterionProgress criterionProgress = (net.minecraft.advancements.CriterionProgress)this.criteria.get((java.lang.Object)criterion);
-        if (criterionProgress != null && !criterionProgress.isDone()) {
-            criterionProgress.grant();
+    public boolean grantProgress(java.lang.String $$0) {
+        net.minecraft.advancements.CriterionProgress $$1 = (net.minecraft.advancements.CriterionProgress)this.criteria.get((java.lang.Object)$$0);
+        if ($$1 != null && !$$1.isDone()) {
+            $$1.grant();
             return true;
         }
         return false;
     }
 
-    public boolean revokeProgress(java.lang.String criterion) {
-        net.minecraft.advancements.CriterionProgress criterionProgress = (net.minecraft.advancements.CriterionProgress)this.criteria.get((java.lang.Object)criterion);
-        if (criterionProgress != null && criterionProgress.isDone()) {
-            criterionProgress.revoke();
+    public boolean revokeProgress(java.lang.String $$0) {
+        net.minecraft.advancements.CriterionProgress $$1 = (net.minecraft.advancements.CriterionProgress)this.criteria.get((java.lang.Object)$$0);
+        if ($$1 != null && $$1.isDone()) {
+            $$1.revoke();
             return true;
         }
         return false;
@@ -77,18 +77,18 @@
         return "AdvancementProgress{criteria=" + this.criteria + ", requirements=" + java.util.Arrays.deepToString((java.lang.Object[])this.requirements) + "}";
     }
 
-    public void serializeToNetwork(net.minecraft.network.FriendlyByteBuf buffer) {
-        buffer.writeMap(this.criteria, net.minecraft.network.FriendlyByteBuf::writeUtf, ($$0, $$1) -> $$1.serializeToNetwork($$0));
+    public void serializeToNetwork(net.minecraft.network.FriendlyByteBuf $$02) {
+        $$02.writeMap(this.criteria, net.minecraft.network.FriendlyByteBuf::writeUtf, ($$0, $$1) -> $$1.serializeToNetwork($$0));
     }
 
-    public static net.minecraft.advancements.AdvancementProgress fromNetwork(net.minecraft.network.FriendlyByteBuf buffer) {
-        java.util.Map map = buffer.readMap(net.minecraft.network.FriendlyByteBuf::readUtf, net.minecraft.advancements.CriterionProgress::fromNetwork);
-        return new net.minecraft.advancements.AdvancementProgress(map);
+    public static net.minecraft.advancements.AdvancementProgress fromNetwork(net.minecraft.network.FriendlyByteBuf $$0) {
+        java.util.Map $$1 = $$0.readMap(net.minecraft.network.FriendlyByteBuf::readUtf, net.minecraft.advancements.CriterionProgress::fromNetwork);
+        return new net.minecraft.advancements.AdvancementProgress($$1);
     }
 
     @javax.annotation.Nullable
-    public net.minecraft.advancements.CriterionProgress getCriterion(java.lang.String criterion) {
-        return (net.minecraft.advancements.CriterionProgress)this.criteria.get((java.lang.Object)criterion);
+    public net.minecraft.advancements.CriterionProgress getCriterion(java.lang.String $$0) {
+        return (net.minecraft.advancements.CriterionProgress)this.criteria.get((java.lang.Object)$$0);
     }
 
     public float getPercent() {