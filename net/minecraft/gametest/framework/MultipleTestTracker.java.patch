--- net/minecraft/gametest/framework/MultipleTestTracker.java
+++ net/minecraft/gametest/framework/MultipleTestTracker.java
@@ -19,20 +19,20 @@
         this.listeners = com.google.common.collect.Lists.newArrayList();
     }
 
-    public net.minecraft.gametest.framework.MultipleTestTracker(java.util.Collection<net.minecraft.gametest.framework.GameTestInfo> testInfos) {
+    public net.minecraft.gametest.framework.MultipleTestTracker(java.util.Collection<net.minecraft.gametest.framework.GameTestInfo> $$0) {
         this.tests = com.google.common.collect.Lists.newArrayList();
         this.listeners = com.google.common.collect.Lists.newArrayList();
-        this.tests.addAll(testInfos);
+        this.tests.addAll($$0);
     }
 
-    public void addTestToTrack(net.minecraft.gametest.framework.GameTestInfo testInfo) {
-        this.tests.add((java.lang.Object)testInfo);
-        this.listeners.forEach(arg_0 -> ((net.minecraft.gametest.framework.GameTestInfo)testInfo).addListener(arg_0));
+    public void addTestToTrack(net.minecraft.gametest.framework.GameTestInfo $$0) {
+        this.tests.add((java.lang.Object)$$0);
+        this.listeners.forEach(arg_0 -> ((net.minecraft.gametest.framework.GameTestInfo)$$0).addListener(arg_0));
     }
 
-    public void addListener(net.minecraft.gametest.framework.GameTestListener testListener) {
-        this.listeners.add((java.lang.Object)testListener);
-        this.tests.forEach(testInfo -> testInfo.addListener(testListener));
+    public void addListener(net.minecraft.gametest.framework.GameTestListener $$0) {
+        this.listeners.add((java.lang.Object)$$0);
+        this.tests.forEach($$1 -> $$1.addListener($$0));
     }
 
     public void addFailureListener(java.util.function.Consumer<net.minecraft.gametest.framework.GameTestInfo> $$0) {
@@ -78,13 +78,13 @@
     public java.lang.String getProgressBar() {
         java.lang.StringBuffer $$0 = new java.lang.StringBuffer();
         $$0.append('[');
-        this.tests.forEach(testInfo -> {
-            if (!testInfo.hasStarted()) {
+        this.tests.forEach($$1 -> {
+            if (!$$1.hasStarted()) {
                 $$0.append(' ');
-            } else if (testInfo.hasSucceeded()) {
+            } else if ($$1.hasSucceeded()) {
                 $$0.append('+');
-            } else if (testInfo.hasFailed()) {
-                $$0.append(testInfo.isRequired() ? (char)'X' : (char)'x');
+            } else if ($$1.hasFailed()) {
+                $$0.append($$1.isRequired() ? (char)'X' : (char)'x');
             } else {
                 $$0.append('_');
             }