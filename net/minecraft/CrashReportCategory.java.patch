--- net/minecraft/CrashReportCategory.java
+++ net/minecraft/CrashReportCategory.java
@@ -72,73 +72,73 @@
         return $$4.toString();
     }
 
-    public net.minecraft.CrashReportCategory setDetail(java.lang.String name, net.minecraft.CrashReportDetail<java.lang.String> detail) {
+    public net.minecraft.CrashReportCategory setDetail(java.lang.String $$0, net.minecraft.CrashReportDetail<java.lang.String> $$1) {
         try {
-            this.setDetail(name, detail.call());
+            this.setDetail($$0, $$1.call());
         }
-        catch (java.lang.Throwable throwable) {
-            this.setDetailError(name, throwable);
+        catch (java.lang.Throwable $$2) {
+            this.setDetailError($$0, $$2);
         }
         return this;
     }
 
-    public net.minecraft.CrashReportCategory setDetail(java.lang.String sectionName, java.lang.Object value) {
-        this.entries.add((java.lang.Object)new net.minecraft.CrashReportCategory$Entry(sectionName, value));
+    public net.minecraft.CrashReportCategory setDetail(java.lang.String $$0, java.lang.Object $$1) {
+        this.entries.add((java.lang.Object)new net.minecraft.CrashReportCategory$Entry($$0, $$1));
         return this;
     }
 
-    public void setDetailError(java.lang.String sectionName, java.lang.Throwable throwable) {
-        this.setDetail(sectionName, (java.lang.Object)((java.lang.Object)throwable));
+    public void setDetailError(java.lang.String $$0, java.lang.Throwable $$1) {
+        this.setDetail($$0, (java.lang.Object)((java.lang.Object)$$1));
     }
 
-    public int fillInStackTrace(int size) {
-        java.lang.StackTraceElement[] stackTraceElementArray = java.lang.Thread.currentThread().getStackTrace();
-        if (stackTraceElementArray.length <= 0) {
+    public int fillInStackTrace(int $$0) {
+        java.lang.StackTraceElement[] $$1 = java.lang.Thread.currentThread().getStackTrace();
+        if ($$1.length <= 0) {
             return 0;
         }
-        this.stackTrace = new java.lang.StackTraceElement[stackTraceElementArray.length - 3 - size];
-        java.lang.System.arraycopy((java.lang.Object)stackTraceElementArray, (int)(3 + size), (java.lang.Object)this.stackTrace, (int)0, (int)this.stackTrace.length);
+        this.stackTrace = new java.lang.StackTraceElement[$$1.length - 3 - $$0];
+        java.lang.System.arraycopy((java.lang.Object)$$1, (int)(3 + $$0), (java.lang.Object)this.stackTrace, (int)0, (int)this.stackTrace.length);
         return this.stackTrace.length;
     }
 
-    public boolean validateStackTrace(java.lang.StackTraceElement s1, java.lang.StackTraceElement s2) {
-        if (this.stackTrace.length == 0 || s1 == null) {
+    public boolean validateStackTrace(java.lang.StackTraceElement $$0, java.lang.StackTraceElement $$1) {
+        if (this.stackTrace.length == 0 || $$0 == null) {
             return false;
         }
-        java.lang.StackTraceElement stackTraceElement = this.stackTrace[0];
-        if (!(stackTraceElement.isNativeMethod() == s1.isNativeMethod() && stackTraceElement.getClassName().equals((java.lang.Object)s1.getClassName()) && stackTraceElement.getFileName().equals((java.lang.Object)s1.getFileName()) && stackTraceElement.getMethodName().equals((java.lang.Object)s1.getMethodName()))) {
+        java.lang.StackTraceElement $$2 = this.stackTrace[0];
+        if (!($$2.isNativeMethod() == $$0.isNativeMethod() && $$2.getClassName().equals((java.lang.Object)$$0.getClassName()) && $$2.getFileName().equals((java.lang.Object)$$0.getFileName()) && $$2.getMethodName().equals((java.lang.Object)$$0.getMethodName()))) {
             return false;
         }
-        if (s2 != null != this.stackTrace.length > 1) {
+        if ($$1 != null != this.stackTrace.length > 1) {
             return false;
         }
-        if (s2 != null && !this.stackTrace[1].equals((java.lang.Object)s2)) {
+        if ($$1 != null && !this.stackTrace[1].equals((java.lang.Object)$$1)) {
             return false;
         }
-        this.stackTrace[0] = s1;
+        this.stackTrace[0] = $$0;
         return true;
     }
 
-    public void trimStacktrace(int amount) {
-        java.lang.StackTraceElement[] stackTraceElementArray = new java.lang.StackTraceElement[this.stackTrace.length - amount];
-        java.lang.System.arraycopy((java.lang.Object)this.stackTrace, (int)0, (java.lang.Object)stackTraceElementArray, (int)0, (int)stackTraceElementArray.length);
-        this.stackTrace = stackTraceElementArray;
+    public void trimStacktrace(int $$0) {
+        java.lang.StackTraceElement[] $$1 = new java.lang.StackTraceElement[this.stackTrace.length - $$0];
+        java.lang.System.arraycopy((java.lang.Object)this.stackTrace, (int)0, (java.lang.Object)$$1, (int)0, (int)$$1.length);
+        this.stackTrace = $$1;
     }
 
-    public void getDetails(java.lang.StringBuilder builder) {
-        builder.append("-- ").append(this.title).append(" --\n");
-        builder.append("Details:");
-        for (net.minecraft.CrashReportCategory$Entry entry : this.entries) {
-            builder.append("\n\t");
-            builder.append(entry.getKey());
-            builder.append(": ");
-            builder.append(entry.getValue());
+    public void getDetails(java.lang.StringBuilder $$0) {
+        $$0.append("-- ").append(this.title).append(" --\n");
+        $$0.append("Details:");
+        for (net.minecraft.CrashReportCategory$Entry $$1 : this.entries) {
+            $$0.append("\n\t");
+            $$0.append($$1.getKey());
+            $$0.append(": ");
+            $$0.append($$1.getValue());
         }
         if (this.stackTrace != null && this.stackTrace.length > 0) {
-            builder.append("\nStacktrace:");
-            for (java.lang.StackTraceElement stackTraceElement : this.stackTrace) {
-                builder.append("\n\tat ");
-                builder.append((java.lang.Object)stackTraceElement);
+            $$0.append("\nStacktrace:");
+            for (java.lang.StackTraceElement $$2 : this.stackTrace) {
+                $$0.append("\n\tat ");
+                $$0.append((java.lang.Object)$$2);
             }
         }
     }