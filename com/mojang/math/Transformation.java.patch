--- com/mojang/math/Transformation.java
+++ com/mojang/math/Transformation.java
@@ -34,10 +34,10 @@
         return IDENTITY;
     }
 
-    public com.mojang.math.Transformation compose(com.mojang.math.Transformation other) {
-        com.mojang.math.Matrix4f matrix4f = this.getMatrix();
-        matrix4f.multiply(other.getMatrix());
-        return new com.mojang.math.Transformation(matrix4f);
+    public com.mojang.math.Transformation compose(com.mojang.math.Transformation $$0) {
+        com.mojang.math.Matrix4f $$1 = this.getMatrix();
+        $$1.multiply($$0.getMatrix());
+        return new com.mojang.math.Transformation($$1);
     }
 
     @javax.annotation.Nullable
@@ -64,31 +64,31 @@
         }
     }
 
-    public static com.mojang.math.Matrix4f compose(@javax.annotation.Nullable com.mojang.math.Vector3f translation, @javax.annotation.Nullable com.mojang.math.Quaternion rotationLeft, @javax.annotation.Nullable com.mojang.math.Vector3f scale, @javax.annotation.Nullable com.mojang.math.Quaternion rotationRight) {
-        com.mojang.math.Matrix4f matrix4f = new com.mojang.math.Matrix4f();
-        matrix4f.setIdentity();
-        if (rotationLeft != null) {
-            matrix4f.multiply(new com.mojang.math.Matrix4f(rotationLeft));
+    public static com.mojang.math.Matrix4f compose(@javax.annotation.Nullable com.mojang.math.Vector3f $$0, @javax.annotation.Nullable com.mojang.math.Quaternion $$1, @javax.annotation.Nullable com.mojang.math.Vector3f $$2, @javax.annotation.Nullable com.mojang.math.Quaternion $$3) {
+        com.mojang.math.Matrix4f $$4 = new com.mojang.math.Matrix4f();
+        $$4.setIdentity();
+        if ($$1 != null) {
+            $$4.multiply(new com.mojang.math.Matrix4f($$1));
         }
-        if (scale != null) {
-            matrix4f.multiply(com.mojang.math.Matrix4f.createScaleMatrix((float)scale.x(), (float)scale.y(), (float)scale.z()));
+        if ($$2 != null) {
+            $$4.multiply(com.mojang.math.Matrix4f.createScaleMatrix((float)$$2.x(), (float)$$2.y(), (float)$$2.z()));
         }
-        if (rotationRight != null) {
-            matrix4f.multiply(new com.mojang.math.Matrix4f(rotationRight));
+        if ($$3 != null) {
+            $$4.multiply(new com.mojang.math.Matrix4f($$3));
         }
-        if (translation != null) {
-            matrix4f.m03 = translation.x();
-            matrix4f.m13 = translation.y();
-            matrix4f.m23 = translation.z();
+        if ($$0 != null) {
+            $$4.m03 = $$0.x();
+            $$4.m13 = $$0.y();
+            $$4.m23 = $$0.z();
         }
-        return matrix4f;
+        return $$4;
     }
 
-    public static com.mojang.datafixers.util.Pair<com.mojang.math.Matrix3f, com.mojang.math.Vector3f> toAffine(com.mojang.math.Matrix4f matrix) {
-        matrix.multiply(1.0f / matrix.m33);
-        com.mojang.math.Vector3f vector3f = new com.mojang.math.Vector3f(matrix.m03, matrix.m13, matrix.m23);
-        com.mojang.math.Matrix3f matrix3f = new com.mojang.math.Matrix3f(matrix);
-        return com.mojang.datafixers.util.Pair.of((java.lang.Object)matrix3f, (java.lang.Object)vector3f);
+    public static com.mojang.datafixers.util.Pair<com.mojang.math.Matrix3f, com.mojang.math.Vector3f> toAffine(com.mojang.math.Matrix4f $$0) {
+        $$0.multiply(1.0f / $$0.m33);
+        com.mojang.math.Vector3f $$1 = new com.mojang.math.Vector3f($$0.m03, $$0.m13, $$0.m23);
+        com.mojang.math.Matrix3f $$2 = new com.mojang.math.Matrix3f($$0);
+        return com.mojang.datafixers.util.Pair.of((java.lang.Object)$$2, (java.lang.Object)$$1);
     }
 
     public com.mojang.math.Matrix4f getMatrix() {
@@ -115,15 +115,15 @@
         return this.rightRotation.copy();
     }
 
-    public boolean equals(java.lang.Object other) {
-        if (this == other) {
+    public boolean equals(java.lang.Object $$0) {
+        if (this == $$0) {
             return true;
         }
-        if (other == null || this.getClass() != other.getClass()) {
+        if ($$0 == null || this.getClass() != $$0.getClass()) {
             return false;
         }
-        com.mojang.math.Transformation transformation = (com.mojang.math.Transformation)other;
-        return java.util.Objects.equals((java.lang.Object)this.matrix, (java.lang.Object)transformation.matrix);
+        com.mojang.math.Transformation $$1 = (com.mojang.math.Transformation)$$0;
+        return java.util.Objects.equals((java.lang.Object)this.matrix, (java.lang.Object)$$1.matrix);
     }
 
     public int hashCode() {