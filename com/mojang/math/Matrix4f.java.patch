--- com/mojang/math/Matrix4f.java
+++ com/mojang/math/Matrix4f.java
@@ -26,49 +26,49 @@
     public com.mojang.math.Matrix4f() {
     }
 
-    public com.mojang.math.Matrix4f(com.mojang.math.Matrix4f other) {
-        this.m00 = other.m00;
-        this.m01 = other.m01;
-        this.m02 = other.m02;
-        this.m03 = other.m03;
-        this.m10 = other.m10;
-        this.m11 = other.m11;
-        this.m12 = other.m12;
-        this.m13 = other.m13;
-        this.m20 = other.m20;
-        this.m21 = other.m21;
-        this.m22 = other.m22;
-        this.m23 = other.m23;
-        this.m30 = other.m30;
-        this.m31 = other.m31;
-        this.m32 = other.m32;
-        this.m33 = other.m33;
+    public com.mojang.math.Matrix4f(com.mojang.math.Matrix4f $$0) {
+        this.m00 = $$0.m00;
+        this.m01 = $$0.m01;
+        this.m02 = $$0.m02;
+        this.m03 = $$0.m03;
+        this.m10 = $$0.m10;
+        this.m11 = $$0.m11;
+        this.m12 = $$0.m12;
+        this.m13 = $$0.m13;
+        this.m20 = $$0.m20;
+        this.m21 = $$0.m21;
+        this.m22 = $$0.m22;
+        this.m23 = $$0.m23;
+        this.m30 = $$0.m30;
+        this.m31 = $$0.m31;
+        this.m32 = $$0.m32;
+        this.m33 = $$0.m33;
     }
 
-    public com.mojang.math.Matrix4f(com.mojang.math.Quaternion quaternion) {
-        float f = quaternion.i();
-        float f2 = quaternion.j();
-        float f3 = quaternion.k();
-        float f4 = quaternion.r();
-        float f5 = 2.0f * f * f;
-        float f6 = 2.0f * f2 * f2;
-        float f7 = 2.0f * f3 * f3;
-        this.m00 = 1.0f - f6 - f7;
-        this.m11 = 1.0f - f7 - f5;
-        this.m22 = 1.0f - f5 - f6;
+    public com.mojang.math.Matrix4f(com.mojang.math.Quaternion $$0) {
+        float $$1 = $$0.i();
+        float $$2 = $$0.j();
+        float $$3 = $$0.k();
+        float $$4 = $$0.r();
+        float $$5 = 2.0f * $$1 * $$1;
+        float $$6 = 2.0f * $$2 * $$2;
+        float $$7 = 2.0f * $$3 * $$3;
+        this.m00 = 1.0f - $$6 - $$7;
+        this.m11 = 1.0f - $$7 - $$5;
+        this.m22 = 1.0f - $$5 - $$6;
         this.m33 = 1.0f;
-        float f8 = f * f2;
-        float f9 = f2 * f3;
-        float f10 = f3 * f;
-        float f11 = f * f4;
-        float f12 = f2 * f4;
-        float f13 = f3 * f4;
-        this.m10 = 2.0f * (f8 + f13);
-        this.m01 = 2.0f * (f8 - f13);
-        this.m20 = 2.0f * (f10 - f12);
-        this.m02 = 2.0f * (f10 + f12);
-        this.m21 = 2.0f * (f9 + f11);
-        this.m12 = 2.0f * (f9 - f11);
+        float $$8 = $$1 * $$2;
+        float $$9 = $$2 * $$3;
+        float $$10 = $$3 * $$1;
+        float $$11 = $$1 * $$4;
+        float $$12 = $$2 * $$4;
+        float $$13 = $$3 * $$4;
+        this.m10 = 2.0f * ($$8 + $$13);
+        this.m01 = 2.0f * ($$8 - $$13);
+        this.m20 = 2.0f * ($$10 - $$12);
+        this.m02 = 2.0f * ($$10 + $$12);
+        this.m21 = 2.0f * ($$9 + $$11);
+        this.m12 = 2.0f * ($$9 - $$11);
     }
 
     public boolean isInteger() {
@@ -86,15 +86,15 @@
         return (double)java.lang.Math.abs((float)($$0 - (float)java.lang.Math.round((float)$$0))) <= 1.0E-5;
     }
 
-    public boolean equals(java.lang.Object other) {
-        if (this == other) {
+    public boolean equals(java.lang.Object $$0) {
+        if (this == $$0) {
             return true;
         }
-        if (other == null || this.getClass() != other.getClass()) {
+        if ($$0 == null || this.getClass() != $$0.getClass()) {
             return false;
         }
-        com.mojang.math.Matrix4f matrix4f = (com.mojang.math.Matrix4f)other;
-        return java.lang.Float.compare((float)matrix4f.m00, (float)this.m00) == 0 && java.lang.Float.compare((float)matrix4f.m01, (float)this.m01) == 0 && java.lang.Float.compare((float)matrix4f.m02, (float)this.m02) == 0 && java.lang.Float.compare((float)matrix4f.m03, (float)this.m03) == 0 && java.lang.Float.compare((float)matrix4f.m10, (float)this.m10) == 0 && java.lang.Float.compare((float)matrix4f.m11, (float)this.m11) == 0 && java.lang.Float.compare((float)matrix4f.m12, (float)this.m12) == 0 && java.lang.Float.compare((float)matrix4f.m13, (float)this.m13) == 0 && java.lang.Float.compare((float)matrix4f.m20, (float)this.m20) == 0 && java.lang.Float.compare((float)matrix4f.m21, (float)this.m21) == 0 && java.lang.Float.compare((float)matrix4f.m22, (float)this.m22) == 0 && java.lang.Float.compare((float)matrix4f.m23, (float)this.m23) == 0 && java.lang.Float.compare((float)matrix4f.m30, (float)this.m30) == 0 && java.lang.Float.compare((float)matrix4f.m31, (float)this.m31) == 0 && java.lang.Float.compare((float)matrix4f.m32, (float)this.m32) == 0 && java.lang.Float.compare((float)matrix4f.m33, (float)this.m33) == 0;
+        com.mojang.math.Matrix4f $$1 = (com.mojang.math.Matrix4f)$$0;
+        return java.lang.Float.compare((float)$$1.m00, (float)this.m00) == 0 && java.lang.Float.compare((float)$$1.m01, (float)this.m01) == 0 && java.lang.Float.compare((float)$$1.m02, (float)this.m02) == 0 && java.lang.Float.compare((float)$$1.m03, (float)this.m03) == 0 && java.lang.Float.compare((float)$$1.m10, (float)this.m10) == 0 && java.lang.Float.compare((float)$$1.m11, (float)this.m11) == 0 && java.lang.Float.compare((float)$$1.m12, (float)this.m12) == 0 && java.lang.Float.compare((float)$$1.m13, (float)this.m13) == 0 && java.lang.Float.compare((float)$$1.m20, (float)this.m20) == 0 && java.lang.Float.compare((float)$$1.m21, (float)this.m21) == 0 && java.lang.Float.compare((float)$$1.m22, (float)this.m22) == 0 && java.lang.Float.compare((float)$$1.m23, (float)this.m23) == 0 && java.lang.Float.compare((float)$$1.m30, (float)this.m30) == 0 && java.lang.Float.compare((float)$$1.m31, (float)this.m31) == 0 && java.lang.Float.compare((float)$$1.m32, (float)this.m32) == 0 && java.lang.Float.compare((float)$$1.m33, (float)this.m33) == 0;
     }
 
     public int hashCode() {
@@ -224,23 +224,23 @@
         return $$0.toString();
     }
 
-    public void store(java.nio.FloatBuffer buffer) {
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)0, (int)0), this.m00);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)0, (int)1), this.m01);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)0, (int)2), this.m02);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)0, (int)3), this.m03);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)1, (int)0), this.m10);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)1, (int)1), this.m11);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)1, (int)2), this.m12);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)1, (int)3), this.m13);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)2, (int)0), this.m20);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)2, (int)1), this.m21);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)2, (int)2), this.m22);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)2, (int)3), this.m23);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)3, (int)0), this.m30);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)3, (int)1), this.m31);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)3, (int)2), this.m32);
-        buffer.put(com.mojang.math.Matrix4f.bufferIndex((int)3, (int)3), this.m33);
+    public void store(java.nio.FloatBuffer $$0) {
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)0, (int)0), this.m00);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)0, (int)1), this.m01);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)0, (int)2), this.m02);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)0, (int)3), this.m03);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)1, (int)0), this.m10);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)1, (int)1), this.m11);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)1, (int)2), this.m12);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)1, (int)3), this.m13);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)2, (int)0), this.m20);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)2, (int)1), this.m21);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)2, (int)2), this.m22);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)2, (int)3), this.m23);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)3, (int)0), this.m30);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)3, (int)1), this.m31);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)3, (int)2), this.m32);
+        $$0.put(com.mojang.math.Matrix4f.bufferIndex((int)3, (int)3), this.m33);
     }
 
     public void storeTransposed(java.nio.FloatBuffer $$0) {
@@ -383,62 +383,62 @@
         return false;
     }
 
-    public void multiply(com.mojang.math.Matrix4f other) {
-        float f = this.m00 * other.m00 + this.m01 * other.m10 + this.m02 * other.m20 + this.m03 * other.m30;
-        float f2 = this.m00 * other.m01 + this.m01 * other.m11 + this.m02 * other.m21 + this.m03 * other.m31;
-        float f3 = this.m00 * other.m02 + this.m01 * other.m12 + this.m02 * other.m22 + this.m03 * other.m32;
-        float f4 = this.m00 * other.m03 + this.m01 * other.m13 + this.m02 * other.m23 + this.m03 * other.m33;
-        float f5 = this.m10 * other.m00 + this.m11 * other.m10 + this.m12 * other.m20 + this.m13 * other.m30;
-        float f6 = this.m10 * other.m01 + this.m11 * other.m11 + this.m12 * other.m21 + this.m13 * other.m31;
-        float f7 = this.m10 * other.m02 + this.m11 * other.m12 + this.m12 * other.m22 + this.m13 * other.m32;
-        float f8 = this.m10 * other.m03 + this.m11 * other.m13 + this.m12 * other.m23 + this.m13 * other.m33;
-        float f9 = this.m20 * other.m00 + this.m21 * other.m10 + this.m22 * other.m20 + this.m23 * other.m30;
-        float f10 = this.m20 * other.m01 + this.m21 * other.m11 + this.m22 * other.m21 + this.m23 * other.m31;
-        float f11 = this.m20 * other.m02 + this.m21 * other.m12 + this.m22 * other.m22 + this.m23 * other.m32;
-        float f12 = this.m20 * other.m03 + this.m21 * other.m13 + this.m22 * other.m23 + this.m23 * other.m33;
-        float f13 = this.m30 * other.m00 + this.m31 * other.m10 + this.m32 * other.m20 + this.m33 * other.m30;
-        float f14 = this.m30 * other.m01 + this.m31 * other.m11 + this.m32 * other.m21 + this.m33 * other.m31;
-        float f15 = this.m30 * other.m02 + this.m31 * other.m12 + this.m32 * other.m22 + this.m33 * other.m32;
-        float f16 = this.m30 * other.m03 + this.m31 * other.m13 + this.m32 * other.m23 + this.m33 * other.m33;
-        this.m00 = f;
-        this.m01 = f2;
-        this.m02 = f3;
-        this.m03 = f4;
-        this.m10 = f5;
-        this.m11 = f6;
-        this.m12 = f7;
-        this.m13 = f8;
-        this.m20 = f9;
-        this.m21 = f10;
-        this.m22 = f11;
-        this.m23 = f12;
-        this.m30 = f13;
-        this.m31 = f14;
-        this.m32 = f15;
-        this.m33 = f16;
+    public void multiply(com.mojang.math.Matrix4f $$0) {
+        float $$1 = this.m00 * $$0.m00 + this.m01 * $$0.m10 + this.m02 * $$0.m20 + this.m03 * $$0.m30;
+        float $$2 = this.m00 * $$0.m01 + this.m01 * $$0.m11 + this.m02 * $$0.m21 + this.m03 * $$0.m31;
+        float $$3 = this.m00 * $$0.m02 + this.m01 * $$0.m12 + this.m02 * $$0.m22 + this.m03 * $$0.m32;
+        float $$4 = this.m00 * $$0.m03 + this.m01 * $$0.m13 + this.m02 * $$0.m23 + this.m03 * $$0.m33;
+        float $$5 = this.m10 * $$0.m00 + this.m11 * $$0.m10 + this.m12 * $$0.m20 + this.m13 * $$0.m30;
+        float $$6 = this.m10 * $$0.m01 + this.m11 * $$0.m11 + this.m12 * $$0.m21 + this.m13 * $$0.m31;
+        float $$7 = this.m10 * $$0.m02 + this.m11 * $$0.m12 + this.m12 * $$0.m22 + this.m13 * $$0.m32;
+        float $$8 = this.m10 * $$0.m03 + this.m11 * $$0.m13 + this.m12 * $$0.m23 + this.m13 * $$0.m33;
+        float $$9 = this.m20 * $$0.m00 + this.m21 * $$0.m10 + this.m22 * $$0.m20 + this.m23 * $$0.m30;
+        float $$10 = this.m20 * $$0.m01 + this.m21 * $$0.m11 + this.m22 * $$0.m21 + this.m23 * $$0.m31;
+        float $$11 = this.m20 * $$0.m02 + this.m21 * $$0.m12 + this.m22 * $$0.m22 + this.m23 * $$0.m32;
+        float $$12 = this.m20 * $$0.m03 + this.m21 * $$0.m13 + this.m22 * $$0.m23 + this.m23 * $$0.m33;
+        float $$13 = this.m30 * $$0.m00 + this.m31 * $$0.m10 + this.m32 * $$0.m20 + this.m33 * $$0.m30;
+        float $$14 = this.m30 * $$0.m01 + this.m31 * $$0.m11 + this.m32 * $$0.m21 + this.m33 * $$0.m31;
+        float $$15 = this.m30 * $$0.m02 + this.m31 * $$0.m12 + this.m32 * $$0.m22 + this.m33 * $$0.m32;
+        float $$16 = this.m30 * $$0.m03 + this.m31 * $$0.m13 + this.m32 * $$0.m23 + this.m33 * $$0.m33;
+        this.m00 = $$1;
+        this.m01 = $$2;
+        this.m02 = $$3;
+        this.m03 = $$4;
+        this.m10 = $$5;
+        this.m11 = $$6;
+        this.m12 = $$7;
+        this.m13 = $$8;
+        this.m20 = $$9;
+        this.m21 = $$10;
+        this.m22 = $$11;
+        this.m23 = $$12;
+        this.m30 = $$13;
+        this.m31 = $$14;
+        this.m32 = $$15;
+        this.m33 = $$16;
     }
 
-    public void multiply(com.mojang.math.Quaternion quaternion) {
-        this.multiply(new com.mojang.math.Matrix4f(quaternion));
+    public void multiply(com.mojang.math.Quaternion $$0) {
+        this.multiply(new com.mojang.math.Matrix4f($$0));
     }
 
-    public void multiply(float multiplier) {
-        this.m00 *= multiplier;
-        this.m01 *= multiplier;
-        this.m02 *= multiplier;
-        this.m03 *= multiplier;
-        this.m10 *= multiplier;
-        this.m11 *= multiplier;
-        this.m12 *= multiplier;
-        this.m13 *= multiplier;
-        this.m20 *= multiplier;
-        this.m21 *= multiplier;
-        this.m22 *= multiplier;
-        this.m23 *= multiplier;
-        this.m30 *= multiplier;
-        this.m31 *= multiplier;
-        this.m32 *= multiplier;
-        this.m33 *= multiplier;
+    public void multiply(float $$0) {
+        this.m00 *= $$0;
+        this.m01 *= $$0;
+        this.m02 *= $$0;
+        this.m03 *= $$0;
+        this.m10 *= $$0;
+        this.m11 *= $$0;
+        this.m12 *= $$0;
+        this.m13 *= $$0;
+        this.m20 *= $$0;
+        this.m21 *= $$0;
+        this.m22 *= $$0;
+        this.m23 *= $$0;
+        this.m30 *= $$0;
+        this.m31 *= $$0;
+        this.m32 *= $$0;
+        this.m33 *= $$0;
     }
 
     public void add(com.mojang.math.Matrix4f $$0) {
@@ -483,28 +483,28 @@
         return this.m00 + this.m11 + this.m22 + this.m33;
     }
 
-    public static com.mojang.math.Matrix4f perspective(double fov, float aspectRatio, float nearPlane, float farPlane) {
-        float f = (float)(1.0 / java.lang.Math.tan((double)(fov * 0.01745329238474369 / 2.0)));
-        com.mojang.math.Matrix4f matrix4f = new com.mojang.math.Matrix4f();
-        matrix4f.m00 = f / aspectRatio;
-        matrix4f.m11 = f;
-        matrix4f.m22 = (farPlane + nearPlane) / (nearPlane - farPlane);
-        matrix4f.m32 = -1.0f;
-        matrix4f.m23 = 2.0f * farPlane * nearPlane / (nearPlane - farPlane);
-        return matrix4f;
+    public static com.mojang.math.Matrix4f perspective(double $$0, float $$1, float $$2, float $$3) {
+        float $$4 = (float)(1.0 / java.lang.Math.tan((double)($$0 * 0.01745329238474369 / 2.0)));
+        com.mojang.math.Matrix4f $$5 = new com.mojang.math.Matrix4f();
+        $$5.m00 = $$4 / $$1;
+        $$5.m11 = $$4;
+        $$5.m22 = ($$3 + $$2) / ($$2 - $$3);
+        $$5.m32 = -1.0f;
+        $$5.m23 = 2.0f * $$3 * $$2 / ($$2 - $$3);
+        return $$5;
     }
 
-    public static com.mojang.math.Matrix4f orthographic(float width, float height, float nearPlane, float farPlane) {
-        com.mojang.math.Matrix4f matrix4f = new com.mojang.math.Matrix4f();
-        matrix4f.m00 = 2.0f / width;
-        matrix4f.m11 = 2.0f / height;
-        float f = farPlane - nearPlane;
-        matrix4f.m22 = -2.0f / f;
-        matrix4f.m33 = 1.0f;
-        matrix4f.m03 = -1.0f;
-        matrix4f.m13 = 1.0f;
-        matrix4f.m23 = -(farPlane + nearPlane) / f;
-        return matrix4f;
+    public static com.mojang.math.Matrix4f orthographic(float $$0, float $$1, float $$2, float $$3) {
+        com.mojang.math.Matrix4f $$4 = new com.mojang.math.Matrix4f();
+        $$4.m00 = 2.0f / $$0;
+        $$4.m11 = 2.0f / $$1;
+        float $$5 = $$3 - $$2;
+        $$4.m22 = -2.0f / $$5;
+        $$4.m33 = 1.0f;
+        $$4.m03 = -1.0f;
+        $$4.m13 = 1.0f;
+        $$4.m23 = -($$3 + $$2) / $$5;
+        return $$4;
     }
 
     public static com.mojang.math.Matrix4f orthographic(float $$0, float $$1, float $$2, float $$3, float $$4, float $$5) {
@@ -522,10 +522,10 @@
         return $$6;
     }
 
-    public void translate(com.mojang.math.Vector3f vector) {
-        this.m03 += vector.x();
-        this.m13 += vector.y();
-        this.m23 += vector.z();
+    public void translate(com.mojang.math.Vector3f $$0) {
+        this.m03 += $$0.x();
+        this.m13 += $$0.y();
+        this.m23 += $$0.z();
     }
 
     public com.mojang.math.Matrix4f copy() {