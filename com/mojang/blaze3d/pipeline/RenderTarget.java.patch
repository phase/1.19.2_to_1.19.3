--- com/mojang/blaze3d/pipeline/RenderTarget.java
+++ com/mojang/blaze3d/pipeline/RenderTarget.java
@@ -31,21 +31,21 @@
         this.depthBufferId = -1;
     }
 
-    public void resize(int width, int height, boolean clearError) {
+    public void resize(int $$0, int $$1, boolean $$2) {
         if (!com.mojang.blaze3d.systems.RenderSystem.isOnRenderThread()) {
-            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> this._resize(width, height, clearError));
+            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> this._resize($$0, $$1, $$2));
         } else {
-            this._resize(width, height, clearError);
+            this._resize($$0, $$1, $$2);
         }
     }
 
-    public void _resize(int width, int height, boolean clearError) {
+    public void _resize(int $$0, int $$1, boolean $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
         com.mojang.blaze3d.platform.GlStateManager._enableDepthTest();
         if (this.frameBufferId >= 0) {
             this.destroyBuffers();
         }
-        this.createBuffers(width, height, clearError);
+        this.createBuffers($$0, $$1, $$2);
         com.mojang.blaze3d.platform.GlStateManager._glBindFramebuffer((int)36160, (int)0);
     }
 
@@ -68,24 +68,24 @@
         }
     }
 
-    public void copyDepthFrom(com.mojang.blaze3d.pipeline.RenderTarget otherTarget) {
+    public void copyDepthFrom(com.mojang.blaze3d.pipeline.RenderTarget $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._glBindFramebuffer((int)36008, (int)otherTarget.frameBufferId);
+        com.mojang.blaze3d.platform.GlStateManager._glBindFramebuffer((int)36008, (int)$$0.frameBufferId);
         com.mojang.blaze3d.platform.GlStateManager._glBindFramebuffer((int)36009, (int)this.frameBufferId);
-        com.mojang.blaze3d.platform.GlStateManager._glBlitFrameBuffer((int)0, (int)0, (int)otherTarget.width, (int)otherTarget.height, (int)0, (int)0, (int)this.width, (int)this.height, (int)256, (int)9728);
+        com.mojang.blaze3d.platform.GlStateManager._glBlitFrameBuffer((int)0, (int)0, (int)$$0.width, (int)$$0.height, (int)0, (int)0, (int)this.width, (int)this.height, (int)256, (int)9728);
         com.mojang.blaze3d.platform.GlStateManager._glBindFramebuffer((int)36160, (int)0);
     }
 
-    public void createBuffers(int width, int height, boolean clearError) {
+    public void createBuffers(int $$0, int $$1, boolean $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        int n = com.mojang.blaze3d.systems.RenderSystem.maxSupportedTextureSize();
-        if (width <= 0 || width > n || height <= 0 || height > n) {
-            throw new java.lang.IllegalArgumentException("Window " + width + "x" + height + " size out of bounds (max. size: " + n + ")");
+        int $$3 = com.mojang.blaze3d.systems.RenderSystem.maxSupportedTextureSize();
+        if ($$0 <= 0 || $$0 > $$3 || $$1 <= 0 || $$1 > $$3) {
+            throw new java.lang.IllegalArgumentException("Window " + $$0 + "x" + $$1 + " size out of bounds (max. size: " + $$3 + ")");
         }
-        this.viewWidth = width;
-        this.viewHeight = height;
-        this.width = width;
-        this.height = height;
+        this.viewWidth = $$0;
+        this.viewHeight = $$1;
+        this.width = $$0;
+        this.height = $$1;
         this.frameBufferId = com.mojang.blaze3d.platform.GlStateManager.glGenFramebuffers();
         this.colorTextureId = com.mojang.blaze3d.platform.TextureUtil.generateTextureId();
         if (this.useDepth) {
@@ -109,16 +109,16 @@
             com.mojang.blaze3d.platform.GlStateManager._glFramebufferTexture2D((int)36160, (int)36096, (int)3553, (int)this.depthBufferId, (int)0);
         }
         this.checkStatus();
-        this.clear(clearError);
+        this.clear($$2);
         this.unbindRead();
     }
 
-    public void setFilterMode(int filterMode) {
+    public void setFilterMode(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        this.filterMode = filterMode;
+        this.filterMode = $$0;
         com.mojang.blaze3d.platform.GlStateManager._bindTexture((int)this.colorTextureId);
-        com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10241, (int)filterMode);
-        com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10240, (int)filterMode);
+        com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10241, (int)$$0);
+        com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10240, (int)$$0);
         com.mojang.blaze3d.platform.GlStateManager._bindTexture((int)0);
     }
 
@@ -159,18 +159,18 @@
         com.mojang.blaze3d.platform.GlStateManager._bindTexture((int)0);
     }
 
-    public void bindWrite(boolean setViewport) {
+    public void bindWrite(boolean $$0) {
         if (!com.mojang.blaze3d.systems.RenderSystem.isOnRenderThread()) {
-            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> this._bindWrite(setViewport));
+            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> this._bindWrite($$0));
         } else {
-            this._bindWrite(setViewport);
+            this._bindWrite($$0);
         }
     }
 
-    public void _bindWrite(boolean setViewport) {
+    public void _bindWrite(boolean $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
         com.mojang.blaze3d.platform.GlStateManager._glBindFramebuffer((int)36160, (int)this.frameBufferId);
-        if (setViewport) {
+        if ($$0) {
             com.mojang.blaze3d.platform.GlStateManager._viewport((int)0, (int)0, (int)this.viewWidth, (int)this.viewHeight);
         }
     }
@@ -183,74 +183,74 @@
         }
     }
 
-    public void setClearColor(float red, float green, float blue, float alpha) {
-        this.clearChannels[0] = red;
-        this.clearChannels[1] = green;
-        this.clearChannels[2] = blue;
-        this.clearChannels[3] = alpha;
+    public void setClearColor(float $$0, float $$1, float $$2, float $$3) {
+        this.clearChannels[0] = $$0;
+        this.clearChannels[1] = $$1;
+        this.clearChannels[2] = $$2;
+        this.clearChannels[3] = $$3;
     }
 
-    public void blitToScreen(int width, int height) {
-        this.blitToScreen(width, height, true);
+    public void blitToScreen(int $$0, int $$1) {
+        this.blitToScreen($$0, $$1, true);
     }
 
-    public void blitToScreen(int width, int height, boolean disableBlend) {
+    public void blitToScreen(int $$0, int $$1, boolean $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnGameThreadOrInit();
         if (!com.mojang.blaze3d.systems.RenderSystem.isInInitPhase()) {
-            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> this._blitToScreen(width, height, disableBlend));
+            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> this._blitToScreen($$0, $$1, $$2));
         } else {
-            this._blitToScreen(width, height, disableBlend);
+            this._blitToScreen($$0, $$1, $$2);
         }
     }
 
-    public void _blitToScreen(int width, int height, boolean disableBlend) {
+    public void _blitToScreen(int $$0, int $$1, boolean $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
         com.mojang.blaze3d.platform.GlStateManager._colorMask((boolean)true, (boolean)true, (boolean)true, (boolean)false);
         com.mojang.blaze3d.platform.GlStateManager._disableDepthTest();
         com.mojang.blaze3d.platform.GlStateManager._depthMask((boolean)false);
-        com.mojang.blaze3d.platform.GlStateManager._viewport((int)0, (int)0, (int)width, (int)height);
-        if (disableBlend) {
+        com.mojang.blaze3d.platform.GlStateManager._viewport((int)0, (int)0, (int)$$0, (int)$$1);
+        if ($$2) {
             com.mojang.blaze3d.platform.GlStateManager._disableBlend();
         }
-        net.minecraft.client.Minecraft minecraft = net.minecraft.client.Minecraft.getInstance();
-        net.minecraft.client.renderer.ShaderInstance shaderInstance = minecraft.gameRenderer.blitShader;
-        shaderInstance.setSampler("DiffuseSampler", (java.lang.Object)this.colorTextureId);
-        com.mojang.math.Matrix4f matrix4f = com.mojang.math.Matrix4f.orthographic((float)width, (float)(-height), (float)1000.0f, (float)3000.0f);
-        com.mojang.blaze3d.systems.RenderSystem.setProjectionMatrix((com.mojang.math.Matrix4f)matrix4f);
-        if (shaderInstance.MODEL_VIEW_MATRIX != null) {
-            shaderInstance.MODEL_VIEW_MATRIX.set(com.mojang.math.Matrix4f.createTranslateMatrix((float)0.0f, (float)0.0f, (float)-2000.0f));
+        net.minecraft.client.Minecraft $$3 = net.minecraft.client.Minecraft.getInstance();
+        net.minecraft.client.renderer.ShaderInstance $$4 = $$3.gameRenderer.blitShader;
+        $$4.setSampler("DiffuseSampler", (java.lang.Object)this.colorTextureId);
+        com.mojang.math.Matrix4f $$5 = com.mojang.math.Matrix4f.orthographic((float)$$0, (float)(-$$1), (float)1000.0f, (float)3000.0f);
+        com.mojang.blaze3d.systems.RenderSystem.setProjectionMatrix((com.mojang.math.Matrix4f)$$5);
+        if ($$4.MODEL_VIEW_MATRIX != null) {
+            $$4.MODEL_VIEW_MATRIX.set(com.mojang.math.Matrix4f.createTranslateMatrix((float)0.0f, (float)0.0f, (float)-2000.0f));
         }
-        if (shaderInstance.PROJECTION_MATRIX != null) {
-            shaderInstance.PROJECTION_MATRIX.set(matrix4f);
+        if ($$4.PROJECTION_MATRIX != null) {
+            $$4.PROJECTION_MATRIX.set($$5);
         }
-        shaderInstance.apply();
-        float f = width;
-        float f2 = height;
-        float f3 = (float)this.viewWidth / (float)this.width;
-        float f4 = (float)this.viewHeight / (float)this.height;
-        com.mojang.blaze3d.vertex.Tesselator tesselator = com.mojang.blaze3d.systems.RenderSystem.renderThreadTesselator();
-        com.mojang.blaze3d.vertex.BufferBuilder bufferBuilder = tesselator.getBuilder();
-        bufferBuilder.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.QUADS, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_COLOR);
-        bufferBuilder.vertex(0.0, (double)f2, 0.0).uv(0.0f, 0.0f).color(255, 255, 255, 255).endVertex();
-        bufferBuilder.vertex((double)f, (double)f2, 0.0).uv(f3, 0.0f).color(255, 255, 255, 255).endVertex();
-        bufferBuilder.vertex((double)f, 0.0, 0.0).uv(f3, f4).color(255, 255, 255, 255).endVertex();
-        bufferBuilder.vertex(0.0, 0.0, 0.0).uv(0.0f, f4).color(255, 255, 255, 255).endVertex();
-        com.mojang.blaze3d.vertex.BufferUploader.draw((com.mojang.blaze3d.vertex.BufferBuilder$RenderedBuffer)bufferBuilder.end());
-        shaderInstance.clear();
+        $$4.apply();
+        float $$6 = $$0;
+        float $$7 = $$1;
+        float $$8 = (float)this.viewWidth / (float)this.width;
+        float $$9 = (float)this.viewHeight / (float)this.height;
+        com.mojang.blaze3d.vertex.Tesselator $$10 = com.mojang.blaze3d.systems.RenderSystem.renderThreadTesselator();
+        com.mojang.blaze3d.vertex.BufferBuilder $$11 = $$10.getBuilder();
+        $$11.begin(com.mojang.blaze3d.vertex.VertexFormat$Mode.QUADS, com.mojang.blaze3d.vertex.DefaultVertexFormat.POSITION_TEX_COLOR);
+        $$11.vertex(0.0, (double)$$7, 0.0).uv(0.0f, 0.0f).color(255, 255, 255, 255).endVertex();
+        $$11.vertex((double)$$6, (double)$$7, 0.0).uv($$8, 0.0f).color(255, 255, 255, 255).endVertex();
+        $$11.vertex((double)$$6, 0.0, 0.0).uv($$8, $$9).color(255, 255, 255, 255).endVertex();
+        $$11.vertex(0.0, 0.0, 0.0).uv(0.0f, $$9).color(255, 255, 255, 255).endVertex();
+        com.mojang.blaze3d.vertex.BufferUploader.draw((com.mojang.blaze3d.vertex.BufferBuilder$RenderedBuffer)$$11.end());
+        $$4.clear();
         com.mojang.blaze3d.platform.GlStateManager._depthMask((boolean)true);
         com.mojang.blaze3d.platform.GlStateManager._colorMask((boolean)true, (boolean)true, (boolean)true, (boolean)true);
     }
 
-    public void clear(boolean clearError) {
+    public void clear(boolean $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
         this.bindWrite(true);
         com.mojang.blaze3d.platform.GlStateManager._clearColor((float)this.clearChannels[0], (float)this.clearChannels[1], (float)this.clearChannels[2], (float)this.clearChannels[3]);
-        int n = 16384;
+        int $$1 = 16384;
         if (this.useDepth) {
             com.mojang.blaze3d.platform.GlStateManager._clearDepth((double)1.0);
-            n |= 0x100;
+            $$1 |= 0x100;
         }
-        com.mojang.blaze3d.platform.GlStateManager._clear((int)n, (boolean)clearError);
+        com.mojang.blaze3d.platform.GlStateManager._clear((int)$$1, (boolean)$$0);
         this.unbindWrite();
     }
 