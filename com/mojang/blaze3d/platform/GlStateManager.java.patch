--- com/mojang/blaze3d/platform/GlStateManager.java
+++ com/mojang/blaze3d/platform/GlStateManager.java
@@ -32,9 +32,9 @@
         com.mojang.blaze3d.platform.GlStateManager.SCISSOR.mode.enable();
     }
 
-    public static void _scissorBox(int x, int y, int width, int height) {
+    public static void _scissorBox(int $$0, int $$1, int $$2, int $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL20.glScissor((int)x, (int)y, (int)width, (int)height);
+        org.lwjgl.opengl.GL20.glScissor((int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
     public static void _disableDepthTest() {
@@ -47,19 +47,19 @@
         com.mojang.blaze3d.platform.GlStateManager.DEPTH.mode.enable();
     }
 
-    public static void _depthFunc(int depthFunc) {
+    public static void _depthFunc(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        if (depthFunc != com.mojang.blaze3d.platform.GlStateManager.DEPTH.func) {
-            com.mojang.blaze3d.platform.GlStateManager.DEPTH.func = depthFunc;
-            org.lwjgl.opengl.GL11.glDepthFunc((int)depthFunc);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.DEPTH.func) {
+            com.mojang.blaze3d.platform.GlStateManager.DEPTH.func = $$0;
+            org.lwjgl.opengl.GL11.glDepthFunc((int)$$0);
         }
     }
 
-    public static void _depthMask(boolean flag) {
+    public static void _depthMask(boolean $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (flag != com.mojang.blaze3d.platform.GlStateManager.DEPTH.mask) {
-            com.mojang.blaze3d.platform.GlStateManager.DEPTH.mask = flag;
-            org.lwjgl.opengl.GL11.glDepthMask((boolean)flag);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.DEPTH.mask) {
+            com.mojang.blaze3d.platform.GlStateManager.DEPTH.mask = $$0;
+            org.lwjgl.opengl.GL11.glDepthMask((boolean)$$0);
         }
     }
 
@@ -73,49 +73,49 @@
         com.mojang.blaze3d.platform.GlStateManager.BLEND.mode.enable();
     }
 
-    public static void _blendFunc(int sourceFactor, int destFactor) {
+    public static void _blendFunc(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (sourceFactor != com.mojang.blaze3d.platform.GlStateManager.BLEND.srcRgb || destFactor != com.mojang.blaze3d.platform.GlStateManager.BLEND.dstRgb) {
-            com.mojang.blaze3d.platform.GlStateManager.BLEND.srcRgb = sourceFactor;
-            com.mojang.blaze3d.platform.GlStateManager.BLEND.dstRgb = destFactor;
-            org.lwjgl.opengl.GL11.glBlendFunc((int)sourceFactor, (int)destFactor);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.BLEND.srcRgb || $$1 != com.mojang.blaze3d.platform.GlStateManager.BLEND.dstRgb) {
+            com.mojang.blaze3d.platform.GlStateManager.BLEND.srcRgb = $$0;
+            com.mojang.blaze3d.platform.GlStateManager.BLEND.dstRgb = $$1;
+            org.lwjgl.opengl.GL11.glBlendFunc((int)$$0, (int)$$1);
         }
     }
 
-    public static void _blendFuncSeparate(int srcFactor, int dstFactor, int srcFactorAlpha, int dstFactorAlpha) {
+    public static void _blendFuncSeparate(int $$0, int $$1, int $$2, int $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (srcFactor != com.mojang.blaze3d.platform.GlStateManager.BLEND.srcRgb || dstFactor != com.mojang.blaze3d.platform.GlStateManager.BLEND.dstRgb || srcFactorAlpha != com.mojang.blaze3d.platform.GlStateManager.BLEND.srcAlpha || dstFactorAlpha != com.mojang.blaze3d.platform.GlStateManager.BLEND.dstAlpha) {
-            com.mojang.blaze3d.platform.GlStateManager.BLEND.srcRgb = srcFactor;
-            com.mojang.blaze3d.platform.GlStateManager.BLEND.dstRgb = dstFactor;
-            com.mojang.blaze3d.platform.GlStateManager.BLEND.srcAlpha = srcFactorAlpha;
-            com.mojang.blaze3d.platform.GlStateManager.BLEND.dstAlpha = dstFactorAlpha;
-            com.mojang.blaze3d.platform.GlStateManager.glBlendFuncSeparate((int)srcFactor, (int)dstFactor, (int)srcFactorAlpha, (int)dstFactorAlpha);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.BLEND.srcRgb || $$1 != com.mojang.blaze3d.platform.GlStateManager.BLEND.dstRgb || $$2 != com.mojang.blaze3d.platform.GlStateManager.BLEND.srcAlpha || $$3 != com.mojang.blaze3d.platform.GlStateManager.BLEND.dstAlpha) {
+            com.mojang.blaze3d.platform.GlStateManager.BLEND.srcRgb = $$0;
+            com.mojang.blaze3d.platform.GlStateManager.BLEND.dstRgb = $$1;
+            com.mojang.blaze3d.platform.GlStateManager.BLEND.srcAlpha = $$2;
+            com.mojang.blaze3d.platform.GlStateManager.BLEND.dstAlpha = $$3;
+            com.mojang.blaze3d.platform.GlStateManager.glBlendFuncSeparate((int)$$0, (int)$$1, (int)$$2, (int)$$3);
         }
     }
 
-    public static void _blendEquation(int mode) {
+    public static void _blendEquation(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL14.glBlendEquation((int)mode);
+        org.lwjgl.opengl.GL14.glBlendEquation((int)$$0);
     }
 
-    public static int glGetProgrami(int program, int pname) {
+    public static int glGetProgrami(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        return org.lwjgl.opengl.GL20.glGetProgrami((int)program, (int)pname);
+        return org.lwjgl.opengl.GL20.glGetProgrami((int)$$0, (int)$$1);
     }
 
-    public static void glAttachShader(int program, int shader) {
+    public static void glAttachShader(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glAttachShader((int)program, (int)shader);
+        org.lwjgl.opengl.GL20.glAttachShader((int)$$0, (int)$$1);
     }
 
-    public static void glDeleteShader(int shader) {
+    public static void glDeleteShader(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glDeleteShader((int)shader);
+        org.lwjgl.opengl.GL20.glDeleteShader((int)$$0);
     }
 
-    public static int glCreateShader(int type) {
+    public static int glCreateShader(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        return org.lwjgl.opengl.GL20.glCreateShader((int)type);
+        return org.lwjgl.opengl.GL20.glCreateShader((int)$$0);
     }
 
     /*
@@ -143,19 +143,19 @@
         }
     }
 
-    public static void glCompileShader(int shader) {
+    public static void glCompileShader(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glCompileShader((int)shader);
+        org.lwjgl.opengl.GL20.glCompileShader((int)$$0);
     }
 
-    public static int glGetShaderi(int shader, int pname) {
+    public static int glGetShaderi(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        return org.lwjgl.opengl.GL20.glGetShaderi((int)shader, (int)pname);
+        return org.lwjgl.opengl.GL20.glGetShaderi((int)$$0, (int)$$1);
     }
 
-    public static void _glUseProgram(int program) {
+    public static void _glUseProgram(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUseProgram((int)program);
+        org.lwjgl.opengl.GL20.glUseProgram((int)$$0);
     }
 
     public static int glCreateProgram() {
@@ -163,84 +163,84 @@
         return org.lwjgl.opengl.GL20.glCreateProgram();
     }
 
-    public static void glDeleteProgram(int program) {
+    public static void glDeleteProgram(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glDeleteProgram((int)program);
+        org.lwjgl.opengl.GL20.glDeleteProgram((int)$$0);
     }
 
-    public static void glLinkProgram(int program) {
+    public static void glLinkProgram(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glLinkProgram((int)program);
+        org.lwjgl.opengl.GL20.glLinkProgram((int)$$0);
     }
 
-    public static int _glGetUniformLocation(int program, java.lang.CharSequence name) {
+    public static int _glGetUniformLocation(int $$0, java.lang.CharSequence $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        return org.lwjgl.opengl.GL20.glGetUniformLocation((int)program, (java.lang.CharSequence)name);
+        return org.lwjgl.opengl.GL20.glGetUniformLocation((int)$$0, (java.lang.CharSequence)$$1);
     }
 
-    public static void _glUniform1(int location, java.nio.IntBuffer value) {
+    public static void _glUniform1(int $$0, java.nio.IntBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform1iv((int)location, (java.nio.IntBuffer)value);
+        org.lwjgl.opengl.GL20.glUniform1iv((int)$$0, (java.nio.IntBuffer)$$1);
     }
 
-    public static void _glUniform1i(int location, int value) {
+    public static void _glUniform1i(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform1i((int)location, (int)value);
+        org.lwjgl.opengl.GL20.glUniform1i((int)$$0, (int)$$1);
     }
 
-    public static void _glUniform1(int location, java.nio.FloatBuffer value) {
+    public static void _glUniform1(int $$0, java.nio.FloatBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform1fv((int)location, (java.nio.FloatBuffer)value);
+        org.lwjgl.opengl.GL20.glUniform1fv((int)$$0, (java.nio.FloatBuffer)$$1);
     }
 
-    public static void _glUniform2(int location, java.nio.IntBuffer value) {
+    public static void _glUniform2(int $$0, java.nio.IntBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform2iv((int)location, (java.nio.IntBuffer)value);
+        org.lwjgl.opengl.GL20.glUniform2iv((int)$$0, (java.nio.IntBuffer)$$1);
     }
 
-    public static void _glUniform2(int location, java.nio.FloatBuffer value) {
+    public static void _glUniform2(int $$0, java.nio.FloatBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform2fv((int)location, (java.nio.FloatBuffer)value);
+        org.lwjgl.opengl.GL20.glUniform2fv((int)$$0, (java.nio.FloatBuffer)$$1);
     }
 
-    public static void _glUniform3(int location, java.nio.IntBuffer value) {
+    public static void _glUniform3(int $$0, java.nio.IntBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform3iv((int)location, (java.nio.IntBuffer)value);
+        org.lwjgl.opengl.GL20.glUniform3iv((int)$$0, (java.nio.IntBuffer)$$1);
     }
 
-    public static void _glUniform3(int location, java.nio.FloatBuffer value) {
+    public static void _glUniform3(int $$0, java.nio.FloatBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform3fv((int)location, (java.nio.FloatBuffer)value);
+        org.lwjgl.opengl.GL20.glUniform3fv((int)$$0, (java.nio.FloatBuffer)$$1);
     }
 
-    public static void _glUniform4(int location, java.nio.IntBuffer value) {
+    public static void _glUniform4(int $$0, java.nio.IntBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform4iv((int)location, (java.nio.IntBuffer)value);
+        org.lwjgl.opengl.GL20.glUniform4iv((int)$$0, (java.nio.IntBuffer)$$1);
     }
 
-    public static void _glUniform4(int location, java.nio.FloatBuffer value) {
+    public static void _glUniform4(int $$0, java.nio.FloatBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniform4fv((int)location, (java.nio.FloatBuffer)value);
+        org.lwjgl.opengl.GL20.glUniform4fv((int)$$0, (java.nio.FloatBuffer)$$1);
     }
 
-    public static void _glUniformMatrix2(int location, boolean transpose, java.nio.FloatBuffer value) {
+    public static void _glUniformMatrix2(int $$0, boolean $$1, java.nio.FloatBuffer $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniformMatrix2fv((int)location, (boolean)transpose, (java.nio.FloatBuffer)value);
+        org.lwjgl.opengl.GL20.glUniformMatrix2fv((int)$$0, (boolean)$$1, (java.nio.FloatBuffer)$$2);
     }
 
-    public static void _glUniformMatrix3(int location, boolean transpose, java.nio.FloatBuffer value) {
+    public static void _glUniformMatrix3(int $$0, boolean $$1, java.nio.FloatBuffer $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniformMatrix3fv((int)location, (boolean)transpose, (java.nio.FloatBuffer)value);
+        org.lwjgl.opengl.GL20.glUniformMatrix3fv((int)$$0, (boolean)$$1, (java.nio.FloatBuffer)$$2);
     }
 
-    public static void _glUniformMatrix4(int location, boolean transpose, java.nio.FloatBuffer value) {
+    public static void _glUniformMatrix4(int $$0, boolean $$1, java.nio.FloatBuffer $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glUniformMatrix4fv((int)location, (boolean)transpose, (java.nio.FloatBuffer)value);
+        org.lwjgl.opengl.GL20.glUniformMatrix4fv((int)$$0, (boolean)$$1, (java.nio.FloatBuffer)$$2);
     }
 
-    public static int _glGetAttribLocation(int program, java.lang.CharSequence name) {
+    public static int _glGetAttribLocation(int $$0, java.lang.CharSequence $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        return org.lwjgl.opengl.GL20.glGetAttribLocation((int)program, (java.lang.CharSequence)name);
+        return org.lwjgl.opengl.GL20.glGetAttribLocation((int)$$0, (java.lang.CharSequence)$$1);
     }
 
     public static void _glBindAttribLocation(int $$0, int $$1, java.lang.CharSequence $$2) {
@@ -258,9 +258,9 @@
         return org.lwjgl.opengl.GL30.glGenVertexArrays();
     }
 
-    public static void _glBindBuffer(int target, int buffer) {
+    public static void _glBindBuffer(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL15.glBindBuffer((int)target, (int)buffer);
+        org.lwjgl.opengl.GL15.glBindBuffer((int)$$0, (int)$$1);
     }
 
     public static void _glBindVertexArray(int $$0) {
@@ -268,9 +268,9 @@
         org.lwjgl.opengl.GL30.glBindVertexArray((int)$$0);
     }
 
-    public static void _glBufferData(int target, java.nio.ByteBuffer data, int usage) {
+    public static void _glBufferData(int $$0, java.nio.ByteBuffer $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL15.glBufferData((int)target, (java.nio.ByteBuffer)data, (int)usage);
+        org.lwjgl.opengl.GL15.glBufferData((int)$$0, (java.nio.ByteBuffer)$$1, (int)$$2);
     }
 
     public static void _glBufferData(int $$0, long $$1, int $$2) {
@@ -289,19 +289,19 @@
         org.lwjgl.opengl.GL15.glUnmapBuffer((int)$$0);
     }
 
-    public static void _glDeleteBuffers(int buffer) {
+    public static void _glDeleteBuffers(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
         if (ON_LINUX) {
-            org.lwjgl.opengl.GL32C.glBindBuffer((int)34962, (int)buffer);
+            org.lwjgl.opengl.GL32C.glBindBuffer((int)34962, (int)$$0);
             org.lwjgl.opengl.GL32C.glBufferData((int)34962, (long)0L, (int)35048);
             org.lwjgl.opengl.GL32C.glBindBuffer((int)34962, (int)0);
         }
-        org.lwjgl.opengl.GL15.glDeleteBuffers((int)buffer);
+        org.lwjgl.opengl.GL15.glDeleteBuffers((int)$$0);
     }
 
-    public static void _glCopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height) {
+    public static void _glCopyTexSubImage2D(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, int $$6, int $$7) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL20.glCopyTexSubImage2D((int)target, (int)level, (int)xOffset, (int)yOffset, (int)x, (int)y, (int)width, (int)height);
+        org.lwjgl.opengl.GL20.glCopyTexSubImage2D((int)$$0, (int)$$1, (int)$$2, (int)$$3, (int)$$4, (int)$$5, (int)$$6, (int)$$7);
     }
 
     public static void _glDeleteVertexArrays(int $$0) {
@@ -309,14 +309,14 @@
         org.lwjgl.opengl.GL30.glDeleteVertexArrays((int)$$0);
     }
 
-    public static void _glBindFramebuffer(int target, int framebuffer) {
+    public static void _glBindFramebuffer(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL30.glBindFramebuffer((int)target, (int)framebuffer);
+        org.lwjgl.opengl.GL30.glBindFramebuffer((int)$$0, (int)$$1);
     }
 
-    public static void _glBlitFrameBuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
+    public static void _glBlitFrameBuffer(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, int $$6, int $$7, int $$8, int $$9) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL30.glBlitFramebuffer((int)srcX0, (int)srcY0, (int)srcX1, (int)srcY1, (int)dstX0, (int)dstY0, (int)dstX1, (int)dstY1, (int)mask, (int)filter);
+        org.lwjgl.opengl.GL30.glBlitFramebuffer((int)$$0, (int)$$1, (int)$$2, (int)$$3, (int)$$4, (int)$$5, (int)$$6, (int)$$7, (int)$$8, (int)$$9);
     }
 
     public static void _glBindRenderbuffer(int $$0, int $$1) {
@@ -329,9 +329,9 @@
         org.lwjgl.opengl.GL30.glDeleteRenderbuffers((int)$$0);
     }
 
-    public static void _glDeleteFramebuffers(int frameBuffer) {
+    public static void _glDeleteFramebuffers(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL30.glDeleteFramebuffers((int)frameBuffer);
+        org.lwjgl.opengl.GL30.glDeleteFramebuffers((int)$$0);
     }
 
     public static int glGenFramebuffers() {
@@ -354,14 +354,14 @@
         org.lwjgl.opengl.GL30.glFramebufferRenderbuffer((int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
-    public static int glCheckFramebufferStatus(int target) {
+    public static int glCheckFramebufferStatus(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        return org.lwjgl.opengl.GL30.glCheckFramebufferStatus((int)target);
+        return org.lwjgl.opengl.GL30.glCheckFramebufferStatus((int)$$0);
     }
 
-    public static void _glFramebufferTexture2D(int target, int attachment, int texTarget, int texture, int level) {
+    public static void _glFramebufferTexture2D(int $$0, int $$1, int $$2, int $$3, int $$4) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL30.glFramebufferTexture2D((int)target, (int)attachment, (int)texTarget, (int)texture, (int)level);
+        org.lwjgl.opengl.GL30.glFramebufferTexture2D((int)$$0, (int)$$1, (int)$$2, (int)$$3, (int)$$4);
     }
 
     public static int getBoundFramebuffer() {
@@ -369,54 +369,54 @@
         return com.mojang.blaze3d.platform.GlStateManager._getInteger((int)36006);
     }
 
-    public static void glActiveTexture(int texture) {
+    public static void glActiveTexture(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL13.glActiveTexture((int)texture);
+        org.lwjgl.opengl.GL13.glActiveTexture((int)$$0);
     }
 
-    public static void glBlendFuncSeparate(int sFactorRGB, int dFactorRGB, int sFactorAlpha, int dFactorAlpha) {
+    public static void glBlendFuncSeparate(int $$0, int $$1, int $$2, int $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL14.glBlendFuncSeparate((int)sFactorRGB, (int)dFactorRGB, (int)sFactorAlpha, (int)dFactorAlpha);
+        org.lwjgl.opengl.GL14.glBlendFuncSeparate((int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
-    public static java.lang.String glGetShaderInfoLog(int shader, int maxLength) {
+    public static java.lang.String glGetShaderInfoLog(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        return org.lwjgl.opengl.GL20.glGetShaderInfoLog((int)shader, (int)maxLength);
+        return org.lwjgl.opengl.GL20.glGetShaderInfoLog((int)$$0, (int)$$1);
     }
 
-    public static java.lang.String glGetProgramInfoLog(int program, int maxLength) {
+    public static java.lang.String glGetProgramInfoLog(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        return org.lwjgl.opengl.GL20.glGetProgramInfoLog((int)program, (int)maxLength);
+        return org.lwjgl.opengl.GL20.glGetProgramInfoLog((int)$$0, (int)$$1);
     }
 
-    public static void setupLevelDiffuseLighting(com.mojang.math.Vector3f lightingVector1, com.mojang.math.Vector3f lightingVector2, com.mojang.math.Matrix4f matrix) {
+    public static void setupLevelDiffuseLighting(com.mojang.math.Vector3f $$0, com.mojang.math.Vector3f $$1, com.mojang.math.Matrix4f $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.math.Vector4f vector4f = new com.mojang.math.Vector4f(lightingVector1);
-        vector4f.transform(matrix);
-        com.mojang.math.Vector4f vector4f2 = new com.mojang.math.Vector4f(lightingVector2);
-        vector4f2.transform(matrix);
-        com.mojang.blaze3d.systems.RenderSystem.setShaderLights((com.mojang.math.Vector3f)new com.mojang.math.Vector3f(vector4f), (com.mojang.math.Vector3f)new com.mojang.math.Vector3f(vector4f2));
+        com.mojang.math.Vector4f $$3 = new com.mojang.math.Vector4f($$0);
+        $$3.transform($$2);
+        com.mojang.math.Vector4f $$4 = new com.mojang.math.Vector4f($$1);
+        $$4.transform($$2);
+        com.mojang.blaze3d.systems.RenderSystem.setShaderLights((com.mojang.math.Vector3f)new com.mojang.math.Vector3f($$3), (com.mojang.math.Vector3f)new com.mojang.math.Vector3f($$4));
     }
 
-    public static void setupGuiFlatDiffuseLighting(com.mojang.math.Vector3f lighting1, com.mojang.math.Vector3f lighting2) {
+    public static void setupGuiFlatDiffuseLighting(com.mojang.math.Vector3f $$0, com.mojang.math.Vector3f $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.math.Matrix4f matrix4f = new com.mojang.math.Matrix4f();
-        matrix4f.setIdentity();
-        matrix4f.multiply(com.mojang.math.Matrix4f.createScaleMatrix((float)1.0f, (float)-1.0f, (float)1.0f));
-        matrix4f.multiply(com.mojang.math.Vector3f.YP.rotationDegrees(-22.5f));
-        matrix4f.multiply(com.mojang.math.Vector3f.XP.rotationDegrees(135.0f));
-        com.mojang.blaze3d.platform.GlStateManager.setupLevelDiffuseLighting((com.mojang.math.Vector3f)lighting1, (com.mojang.math.Vector3f)lighting2, (com.mojang.math.Matrix4f)matrix4f);
+        com.mojang.math.Matrix4f $$2 = new com.mojang.math.Matrix4f();
+        $$2.setIdentity();
+        $$2.multiply(com.mojang.math.Matrix4f.createScaleMatrix((float)1.0f, (float)-1.0f, (float)1.0f));
+        $$2.multiply(com.mojang.math.Vector3f.YP.rotationDegrees(-22.5f));
+        $$2.multiply(com.mojang.math.Vector3f.XP.rotationDegrees(135.0f));
+        com.mojang.blaze3d.platform.GlStateManager.setupLevelDiffuseLighting((com.mojang.math.Vector3f)$$0, (com.mojang.math.Vector3f)$$1, (com.mojang.math.Matrix4f)$$2);
     }
 
-    public static void setupGui3DDiffuseLighting(com.mojang.math.Vector3f lightingVector1, com.mojang.math.Vector3f lightingVector2) {
+    public static void setupGui3DDiffuseLighting(com.mojang.math.Vector3f $$0, com.mojang.math.Vector3f $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.math.Matrix4f matrix4f = new com.mojang.math.Matrix4f();
-        matrix4f.setIdentity();
-        matrix4f.multiply(com.mojang.math.Vector3f.YP.rotationDegrees(62.0f));
-        matrix4f.multiply(com.mojang.math.Vector3f.XP.rotationDegrees(185.5f));
-        matrix4f.multiply(com.mojang.math.Vector3f.YP.rotationDegrees(-22.5f));
-        matrix4f.multiply(com.mojang.math.Vector3f.XP.rotationDegrees(135.0f));
-        com.mojang.blaze3d.platform.GlStateManager.setupLevelDiffuseLighting((com.mojang.math.Vector3f)lightingVector1, (com.mojang.math.Vector3f)lightingVector2, (com.mojang.math.Matrix4f)matrix4f);
+        com.mojang.math.Matrix4f $$2 = new com.mojang.math.Matrix4f();
+        $$2.setIdentity();
+        $$2.multiply(com.mojang.math.Vector3f.YP.rotationDegrees(62.0f));
+        $$2.multiply(com.mojang.math.Vector3f.XP.rotationDegrees(185.5f));
+        $$2.multiply(com.mojang.math.Vector3f.YP.rotationDegrees(-22.5f));
+        $$2.multiply(com.mojang.math.Vector3f.XP.rotationDegrees(135.0f));
+        com.mojang.blaze3d.platform.GlStateManager.setupLevelDiffuseLighting((com.mojang.math.Vector3f)$$0, (com.mojang.math.Vector3f)$$1, (com.mojang.math.Matrix4f)$$2);
     }
 
     public static void _enableCull() {
@@ -429,9 +429,9 @@
         com.mojang.blaze3d.platform.GlStateManager.CULL.enable.disable();
     }
 
-    public static void _polygonMode(int face, int mode) {
+    public static void _polygonMode(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL11.glPolygonMode((int)face, (int)mode);
+        org.lwjgl.opengl.GL11.glPolygonMode((int)$$0, (int)$$1);
     }
 
     public static void _enablePolygonOffset() {
@@ -444,12 +444,12 @@
         com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.fill.disable();
     }
 
-    public static void _polygonOffset(float factor, float units) {
+    public static void _polygonOffset(float $$0, float $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (factor != com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.factor || units != com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.units) {
-            com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.factor = factor;
-            com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.units = units;
-            org.lwjgl.opengl.GL11.glPolygonOffset((float)factor, (float)units);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.factor || $$1 != com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.units) {
+            com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.factor = $$0;
+            com.mojang.blaze3d.platform.GlStateManager.POLY_OFFSET.units = $$1;
+            org.lwjgl.opengl.GL11.glPolygonOffset((float)$$0, (float)$$1);
         }
     }
 
@@ -463,19 +463,19 @@
         com.mojang.blaze3d.platform.GlStateManager.COLOR_LOGIC.enable.disable();
     }
 
-    public static void _logicOp(int logicOperation) {
+    public static void _logicOp(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (logicOperation != com.mojang.blaze3d.platform.GlStateManager.COLOR_LOGIC.op) {
-            com.mojang.blaze3d.platform.GlStateManager.COLOR_LOGIC.op = logicOperation;
-            org.lwjgl.opengl.GL11.glLogicOp((int)logicOperation);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.COLOR_LOGIC.op) {
+            com.mojang.blaze3d.platform.GlStateManager.COLOR_LOGIC.op = $$0;
+            org.lwjgl.opengl.GL11.glLogicOp((int)$$0);
         }
     }
 
-    public static void _activeTexture(int texture) {
+    public static void _activeTexture(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (activeTexture != texture - 33984) {
-            activeTexture = texture - 33984;
-            com.mojang.blaze3d.platform.GlStateManager.glActiveTexture((int)texture);
+        if (activeTexture != $$0 - 33984) {
+            activeTexture = $$0 - 33984;
+            com.mojang.blaze3d.platform.GlStateManager.glActiveTexture((int)$$0);
         }
     }
 
@@ -489,19 +489,19 @@
         com.mojang.blaze3d.platform.GlStateManager.TEXTURES[com.mojang.blaze3d.platform.GlStateManager.activeTexture].enable = false;
     }
 
-    public static void _texParameter(int target, int parameterName, float parameter) {
+    public static void _texParameter(int $$0, int $$1, float $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glTexParameterf((int)target, (int)parameterName, (float)parameter);
+        org.lwjgl.opengl.GL11.glTexParameterf((int)$$0, (int)$$1, (float)$$2);
     }
 
-    public static void _texParameter(int target, int parameterName, int parameter) {
+    public static void _texParameter(int $$0, int $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glTexParameteri((int)target, (int)parameterName, (int)parameter);
+        org.lwjgl.opengl.GL11.glTexParameteri((int)$$0, (int)$$1, (int)$$2);
     }
 
-    public static int _getTexLevelParameter(int target, int level, int parameterName) {
+    public static int _getTexLevelParameter(int $$0, int $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertInInitPhase();
-        return org.lwjgl.opengl.GL11.glGetTexLevelParameteri((int)target, (int)level, (int)parameterName);
+        return org.lwjgl.opengl.GL11.glGetTexLevelParameteri((int)$$0, (int)$$1, (int)$$2);
     }
 
     public static int _genTexture() {
@@ -509,36 +509,36 @@
         return org.lwjgl.opengl.GL11.glGenTextures();
     }
 
-    public static void _genTextures(int[] textures) {
+    public static void _genTextures(int[] $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glGenTextures((int[])textures);
+        org.lwjgl.opengl.GL11.glGenTextures((int[])$$0);
     }
 
-    public static void _deleteTexture(int texture) {
+    public static void _deleteTexture(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glDeleteTextures((int)texture);
-        for (com.mojang.blaze3d.platform.GlStateManager$TextureState textureState : TEXTURES) {
-            if (textureState.binding != texture) continue;
-            textureState.binding = -1;
+        org.lwjgl.opengl.GL11.glDeleteTextures((int)$$0);
+        for (com.mojang.blaze3d.platform.GlStateManager$TextureState $$1 : TEXTURES) {
+            if ($$1.binding != $$0) continue;
+            $$1.binding = -1;
         }
     }
 
-    public static void _deleteTextures(int[] textures) {
+    public static void _deleteTextures(int[] $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        for (com.mojang.blaze3d.platform.GlStateManager$TextureState textureState : TEXTURES) {
-            for (int n : textures) {
-                if (textureState.binding != n) continue;
-                textureState.binding = -1;
+        for (com.mojang.blaze3d.platform.GlStateManager$TextureState $$1 : TEXTURES) {
+            for (int $$2 : $$0) {
+                if ($$1.binding != $$2) continue;
+                $$1.binding = -1;
             }
         }
-        org.lwjgl.opengl.GL11.glDeleteTextures((int[])textures);
+        org.lwjgl.opengl.GL11.glDeleteTextures((int[])$$0);
     }
 
-    public static void _bindTexture(int texture) {
+    public static void _bindTexture(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        if (texture != com.mojang.blaze3d.platform.GlStateManager.TEXTURES[com.mojang.blaze3d.platform.GlStateManager.activeTexture].binding) {
-            com.mojang.blaze3d.platform.GlStateManager.TEXTURES[com.mojang.blaze3d.platform.GlStateManager.activeTexture].binding = texture;
-            org.lwjgl.opengl.GL11.glBindTexture((int)3553, (int)texture);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.TEXTURES[com.mojang.blaze3d.platform.GlStateManager.activeTexture].binding) {
+            com.mojang.blaze3d.platform.GlStateManager.TEXTURES[com.mojang.blaze3d.platform.GlStateManager.activeTexture].binding = $$0;
+            org.lwjgl.opengl.GL11.glBindTexture((int)3553, (int)$$0);
         }
     }
 
@@ -553,88 +553,88 @@
         return activeTexture + 33984;
     }
 
-    public static void _texImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, @javax.annotation.Nullable java.nio.IntBuffer pixels) {
+    public static void _texImage2D(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, int $$6, int $$7, @javax.annotation.Nullable java.nio.IntBuffer $$8) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glTexImage2D((int)target, (int)level, (int)internalFormat, (int)width, (int)height, (int)border, (int)format, (int)type, (java.nio.IntBuffer)pixels);
+        org.lwjgl.opengl.GL11.glTexImage2D((int)$$0, (int)$$1, (int)$$2, (int)$$3, (int)$$4, (int)$$5, (int)$$6, (int)$$7, (java.nio.IntBuffer)$$8);
     }
 
-    public static void _texSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int type, long pixels) {
+    public static void _texSubImage2D(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, int $$6, int $$7, long $$8) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glTexSubImage2D((int)target, (int)level, (int)xOffset, (int)yOffset, (int)width, (int)height, (int)format, (int)type, (long)pixels);
+        org.lwjgl.opengl.GL11.glTexSubImage2D((int)$$0, (int)$$1, (int)$$2, (int)$$3, (int)$$4, (int)$$5, (int)$$6, (int)$$7, (long)$$8);
     }
 
-    public static void _getTexImage(int tex, int level, int format, int type, long pixels) {
+    public static void _getTexImage(int $$0, int $$1, int $$2, int $$3, long $$4) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL11.glGetTexImage((int)tex, (int)level, (int)format, (int)type, (long)pixels);
+        org.lwjgl.opengl.GL11.glGetTexImage((int)$$0, (int)$$1, (int)$$2, (int)$$3, (long)$$4);
     }
 
-    public static void _viewport(int x, int y, int width, int height) {
+    public static void _viewport(int $$0, int $$1, int $$2, int $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager$Viewport.INSTANCE.x = x;
-        com.mojang.blaze3d.platform.GlStateManager$Viewport.INSTANCE.y = y;
-        com.mojang.blaze3d.platform.GlStateManager$Viewport.INSTANCE.width = width;
-        com.mojang.blaze3d.platform.GlStateManager$Viewport.INSTANCE.height = height;
-        org.lwjgl.opengl.GL11.glViewport((int)x, (int)y, (int)width, (int)height);
+        com.mojang.blaze3d.platform.GlStateManager$Viewport.INSTANCE.x = $$0;
+        com.mojang.blaze3d.platform.GlStateManager$Viewport.INSTANCE.y = $$1;
+        com.mojang.blaze3d.platform.GlStateManager$Viewport.INSTANCE.width = $$2;
+        com.mojang.blaze3d.platform.GlStateManager$Viewport.INSTANCE.height = $$3;
+        org.lwjgl.opengl.GL11.glViewport((int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
-    public static void _colorMask(boolean red, boolean green, boolean blue, boolean alpha) {
+    public static void _colorMask(boolean $$0, boolean $$1, boolean $$2, boolean $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (red != com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.red || green != com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.green || blue != com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.blue || alpha != com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.alpha) {
-            com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.red = red;
-            com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.green = green;
-            com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.blue = blue;
-            com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.alpha = alpha;
-            org.lwjgl.opengl.GL11.glColorMask((boolean)red, (boolean)green, (boolean)blue, (boolean)alpha);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.red || $$1 != com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.green || $$2 != com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.blue || $$3 != com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.alpha) {
+            com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.red = $$0;
+            com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.green = $$1;
+            com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.blue = $$2;
+            com.mojang.blaze3d.platform.GlStateManager.COLOR_MASK.alpha = $$3;
+            org.lwjgl.opengl.GL11.glColorMask((boolean)$$0, (boolean)$$1, (boolean)$$2, (boolean)$$3);
         }
     }
 
-    public static void _stencilFunc(int func, int ref, int mask) {
+    public static void _stencilFunc(int $$0, int $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (func != com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.func || func != com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.ref || func != com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.mask) {
-            com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.func = func;
-            com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.ref = ref;
-            com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.mask = mask;
-            org.lwjgl.opengl.GL11.glStencilFunc((int)func, (int)ref, (int)mask);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.func || $$0 != com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.ref || $$0 != com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.mask) {
+            com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.func = $$0;
+            com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.ref = $$1;
+            com.mojang.blaze3d.platform.GlStateManager.STENCIL.func.mask = $$2;
+            org.lwjgl.opengl.GL11.glStencilFunc((int)$$0, (int)$$1, (int)$$2);
         }
     }
 
-    public static void _stencilMask(int mask) {
+    public static void _stencilMask(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (mask != com.mojang.blaze3d.platform.GlStateManager.STENCIL.mask) {
-            com.mojang.blaze3d.platform.GlStateManager.STENCIL.mask = mask;
-            org.lwjgl.opengl.GL11.glStencilMask((int)mask);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.STENCIL.mask) {
+            com.mojang.blaze3d.platform.GlStateManager.STENCIL.mask = $$0;
+            org.lwjgl.opengl.GL11.glStencilMask((int)$$0);
         }
     }
 
-    public static void _stencilOp(int sfail, int dpfail, int dppass) {
+    public static void _stencilOp(int $$0, int $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        if (sfail != com.mojang.blaze3d.platform.GlStateManager.STENCIL.fail || dpfail != com.mojang.blaze3d.platform.GlStateManager.STENCIL.zfail || dppass != com.mojang.blaze3d.platform.GlStateManager.STENCIL.zpass) {
-            com.mojang.blaze3d.platform.GlStateManager.STENCIL.fail = sfail;
-            com.mojang.blaze3d.platform.GlStateManager.STENCIL.zfail = dpfail;
-            com.mojang.blaze3d.platform.GlStateManager.STENCIL.zpass = dppass;
-            org.lwjgl.opengl.GL11.glStencilOp((int)sfail, (int)dpfail, (int)dppass);
+        if ($$0 != com.mojang.blaze3d.platform.GlStateManager.STENCIL.fail || $$1 != com.mojang.blaze3d.platform.GlStateManager.STENCIL.zfail || $$2 != com.mojang.blaze3d.platform.GlStateManager.STENCIL.zpass) {
+            com.mojang.blaze3d.platform.GlStateManager.STENCIL.fail = $$0;
+            com.mojang.blaze3d.platform.GlStateManager.STENCIL.zfail = $$1;
+            com.mojang.blaze3d.platform.GlStateManager.STENCIL.zpass = $$2;
+            org.lwjgl.opengl.GL11.glStencilOp((int)$$0, (int)$$1, (int)$$2);
         }
     }
 
-    public static void _clearDepth(double depth) {
+    public static void _clearDepth(double $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glClearDepth((double)depth);
+        org.lwjgl.opengl.GL11.glClearDepth((double)$$0);
     }
 
-    public static void _clearColor(float red, float green, float blue, float alpha) {
+    public static void _clearColor(float $$0, float $$1, float $$2, float $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glClearColor((float)red, (float)green, (float)blue, (float)alpha);
+        org.lwjgl.opengl.GL11.glClearColor((float)$$0, (float)$$1, (float)$$2, (float)$$3);
     }
 
-    public static void _clearStencil(int index) {
+    public static void _clearStencil(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL11.glClearStencil((int)index);
+        org.lwjgl.opengl.GL11.glClearStencil((int)$$0);
     }
 
-    public static void _clear(int mask, boolean checkError) {
+    public static void _clear(int $$0, boolean $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glClear((int)mask);
-        if (checkError) {
+        org.lwjgl.opengl.GL11.glClear((int)$$0);
+        if ($$1) {
             com.mojang.blaze3d.platform.GlStateManager._getError();
         }
     }
@@ -644,9 +644,9 @@
         org.lwjgl.opengl.GL11.glDrawPixels((int)$$0, (int)$$1, (int)$$2, (int)$$3, (long)$$4);
     }
 
-    public static void _vertexAttribPointer(int index, int size, int type, boolean normalized, int stride, long pointer) {
+    public static void _vertexAttribPointer(int $$0, int $$1, int $$2, boolean $$3, int $$4, long $$5) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glVertexAttribPointer((int)index, (int)size, (int)type, (boolean)normalized, (int)stride, (long)pointer);
+        org.lwjgl.opengl.GL20.glVertexAttribPointer((int)$$0, (int)$$1, (int)$$2, (boolean)$$3, (int)$$4, (long)$$5);
     }
 
     public static void _vertexAttribIPointer(int $$0, int $$1, int $$2, int $$3, long $$4) {
@@ -654,14 +654,14 @@
         org.lwjgl.opengl.GL30.glVertexAttribIPointer((int)$$0, (int)$$1, (int)$$2, (int)$$3, (long)$$4);
     }
 
-    public static void _enableVertexAttribArray(int index) {
+    public static void _enableVertexAttribArray(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glEnableVertexAttribArray((int)index);
+        org.lwjgl.opengl.GL20.glEnableVertexAttribArray((int)$$0);
     }
 
-    public static void _disableVertexAttribArray(int index) {
+    public static void _disableVertexAttribArray(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL20.glDisableVertexAttribArray((int)index);
+        org.lwjgl.opengl.GL20.glDisableVertexAttribArray((int)$$0);
     }
 
     public static void _drawElements(int $$0, int $$1, int $$2, long $$3) {
@@ -669,14 +669,14 @@
         org.lwjgl.opengl.GL11.glDrawElements((int)$$0, (int)$$1, (int)$$2, (long)$$3);
     }
 
-    public static void _pixelStore(int parameterName, int param) {
+    public static void _pixelStore(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        org.lwjgl.opengl.GL11.glPixelStorei((int)parameterName, (int)param);
+        org.lwjgl.opengl.GL11.glPixelStorei((int)$$0, (int)$$1);
     }
 
-    public static void _readPixels(int x, int y, int width, int height, int format, int type, java.nio.ByteBuffer pixels) {
+    public static void _readPixels(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, java.nio.ByteBuffer $$6) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        org.lwjgl.opengl.GL11.glReadPixels((int)x, (int)y, (int)width, (int)height, (int)format, (int)type, (java.nio.ByteBuffer)pixels);
+        org.lwjgl.opengl.GL11.glReadPixels((int)$$0, (int)$$1, (int)$$2, (int)$$3, (int)$$4, (int)$$5, (java.nio.ByteBuffer)$$6);
     }
 
     public static void _readPixels(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, long $$6) {
@@ -689,14 +689,14 @@
         return org.lwjgl.opengl.GL11.glGetError();
     }
 
-    public static java.lang.String _getString(int name) {
+    public static java.lang.String _getString(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        return org.lwjgl.opengl.GL11.glGetString((int)name);
+        return org.lwjgl.opengl.GL11.glGetString((int)$$0);
     }
 
-    public static int _getInteger(int pname) {
+    public static int _getInteger(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        return org.lwjgl.opengl.GL11.glGetInteger((int)pname);
+        return org.lwjgl.opengl.GL11.glGetInteger((int)$$0);
     }
 
     public static /* synthetic */ com.mojang.blaze3d.platform.GlStateManager$TextureState[] lambda$static$1(int $$0) {