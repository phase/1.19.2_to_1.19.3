--- com/mojang/blaze3d/platform/NativeImage.java
+++ com/mojang/blaze3d/platform/NativeImage.java
@@ -19,32 +19,32 @@
     public long pixels;
     public long size;
 
-    public com.mojang.blaze3d.platform.NativeImage(int width, int height, boolean bl) {
-        this(com.mojang.blaze3d.platform.NativeImage$Format.RGBA, width, height, bl);
+    public com.mojang.blaze3d.platform.NativeImage(int $$0, int $$1, boolean $$2) {
+        this(com.mojang.blaze3d.platform.NativeImage$Format.RGBA, $$0, $$1, $$2);
     }
 
-    public com.mojang.blaze3d.platform.NativeImage(com.mojang.blaze3d.platform.NativeImage$Format format, int width, int height, boolean bl) {
-        if (width <= 0 || height <= 0) {
-            throw new java.lang.IllegalArgumentException("Invalid texture size: " + width + "x" + height);
+    public com.mojang.blaze3d.platform.NativeImage(com.mojang.blaze3d.platform.NativeImage$Format $$0, int $$1, int $$2, boolean $$3) {
+        if ($$1 <= 0 || $$2 <= 0) {
+            throw new java.lang.IllegalArgumentException("Invalid texture size: " + $$1 + "x" + $$2);
         }
-        this.format = format;
-        this.width = width;
-        this.height = height;
-        this.size = (long)width * (long)height * (long)format.components();
+        this.format = $$0;
+        this.width = $$1;
+        this.height = $$2;
+        this.size = (long)$$1 * (long)$$2 * (long)$$0.components();
         this.useStbFree = false;
-        this.pixels = bl ? org.lwjgl.system.MemoryUtil.nmemCalloc((long)1L, (long)this.size) : org.lwjgl.system.MemoryUtil.nmemAlloc((long)this.size);
+        this.pixels = $$3 ? org.lwjgl.system.MemoryUtil.nmemCalloc((long)1L, (long)this.size) : org.lwjgl.system.MemoryUtil.nmemAlloc((long)this.size);
     }
 
-    public com.mojang.blaze3d.platform.NativeImage(com.mojang.blaze3d.platform.NativeImage$Format format, int width, int height, boolean useStbFree, long pixels) {
-        if (width <= 0 || height <= 0) {
-            throw new java.lang.IllegalArgumentException("Invalid texture size: " + width + "x" + height);
+    public com.mojang.blaze3d.platform.NativeImage(com.mojang.blaze3d.platform.NativeImage$Format $$0, int $$1, int $$2, boolean $$3, long $$4) {
+        if ($$1 <= 0 || $$2 <= 0) {
+            throw new java.lang.IllegalArgumentException("Invalid texture size: " + $$1 + "x" + $$2);
         }
-        this.format = format;
-        this.width = width;
-        this.height = height;
-        this.useStbFree = useStbFree;
-        this.pixels = pixels;
-        this.size = (long)width * (long)height * (long)format.components();
+        this.format = $$0;
+        this.width = $$1;
+        this.height = $$2;
+        this.useStbFree = $$3;
+        this.pixels = $$4;
+        this.size = (long)$$1 * (long)$$2 * (long)$$0.components();
     }
 
     public java.lang.String toString() {
@@ -55,59 +55,59 @@
         return $$0 < 0 || $$0 >= this.width || $$1 < 0 || $$1 >= this.height;
     }
 
-    public static com.mojang.blaze3d.platform.NativeImage read(java.io.InputStream textureStream) throws java.io.IOException {
-        return com.mojang.blaze3d.platform.NativeImage.read((com.mojang.blaze3d.platform.NativeImage$Format)com.mojang.blaze3d.platform.NativeImage$Format.RGBA, (java.io.InputStream)textureStream);
+    public static com.mojang.blaze3d.platform.NativeImage read(java.io.InputStream $$0) throws java.io.IOException {
+        return com.mojang.blaze3d.platform.NativeImage.read((com.mojang.blaze3d.platform.NativeImage$Format)com.mojang.blaze3d.platform.NativeImage$Format.RGBA, (java.io.InputStream)$$0);
     }
 
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
-    public static com.mojang.blaze3d.platform.NativeImage read(@javax.annotation.Nullable com.mojang.blaze3d.platform.NativeImage$Format format, java.io.InputStream textureStream) throws java.io.IOException {
-        java.nio.ByteBuffer byteBuffer = null;
+    public static com.mojang.blaze3d.platform.NativeImage read(@javax.annotation.Nullable com.mojang.blaze3d.platform.NativeImage$Format $$0, java.io.InputStream $$1) throws java.io.IOException {
+        java.nio.ByteBuffer $$2 = null;
         try {
-            byteBuffer = com.mojang.blaze3d.platform.TextureUtil.readResource((java.io.InputStream)textureStream);
-            byteBuffer.rewind();
-            com.mojang.blaze3d.platform.NativeImage nativeImage = com.mojang.blaze3d.platform.NativeImage.read((com.mojang.blaze3d.platform.NativeImage$Format)format, (java.nio.ByteBuffer)byteBuffer);
+            $$2 = com.mojang.blaze3d.platform.TextureUtil.readResource((java.io.InputStream)$$1);
+            $$2.rewind();
+            com.mojang.blaze3d.platform.NativeImage nativeImage = com.mojang.blaze3d.platform.NativeImage.read((com.mojang.blaze3d.platform.NativeImage$Format)$$0, (java.nio.ByteBuffer)$$2);
             return nativeImage;
         }
         finally {
-            org.lwjgl.system.MemoryUtil.memFree((java.nio.Buffer)byteBuffer);
-            org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream)textureStream);
+            org.lwjgl.system.MemoryUtil.memFree((java.nio.Buffer)$$2);
+            org.apache.commons.io.IOUtils.closeQuietly((java.io.InputStream)$$1);
         }
     }
 
-    public static com.mojang.blaze3d.platform.NativeImage read(java.nio.ByteBuffer textureData) throws java.io.IOException {
-        return com.mojang.blaze3d.platform.NativeImage.read((com.mojang.blaze3d.platform.NativeImage$Format)com.mojang.blaze3d.platform.NativeImage$Format.RGBA, (java.nio.ByteBuffer)textureData);
+    public static com.mojang.blaze3d.platform.NativeImage read(java.nio.ByteBuffer $$0) throws java.io.IOException {
+        return com.mojang.blaze3d.platform.NativeImage.read((com.mojang.blaze3d.platform.NativeImage$Format)com.mojang.blaze3d.platform.NativeImage$Format.RGBA, (java.nio.ByteBuffer)$$0);
     }
 
-    public static com.mojang.blaze3d.platform.NativeImage read(@javax.annotation.Nullable com.mojang.blaze3d.platform.NativeImage$Format format, java.nio.ByteBuffer textureData) throws java.io.IOException {
-        if (format != null && !format.supportedByStb()) {
-            throw new java.lang.UnsupportedOperationException("Don't know how to read format " + format);
+    public static com.mojang.blaze3d.platform.NativeImage read(@javax.annotation.Nullable com.mojang.blaze3d.platform.NativeImage$Format $$0, java.nio.ByteBuffer $$1) throws java.io.IOException {
+        if ($$0 != null && !$$0.supportedByStb()) {
+            throw new java.lang.UnsupportedOperationException("Don't know how to read format " + $$0);
         }
-        if (org.lwjgl.system.MemoryUtil.memAddress((java.nio.ByteBuffer)textureData) == 0L) {
+        if (org.lwjgl.system.MemoryUtil.memAddress((java.nio.ByteBuffer)$$1) == 0L) {
             throw new java.lang.IllegalArgumentException("Invalid buffer");
         }
-        try (org.lwjgl.system.MemoryStack memoryStack = org.lwjgl.system.MemoryStack.stackPush();
+        try (org.lwjgl.system.MemoryStack $$2 = org.lwjgl.system.MemoryStack.stackPush();
 ){
-            java.nio.IntBuffer intBuffer = memoryStack.mallocInt(1);
-            java.nio.IntBuffer intBuffer2 = memoryStack.mallocInt(1);
-            java.nio.IntBuffer intBuffer3 = memoryStack.mallocInt(1);
-            java.nio.ByteBuffer byteBuffer = org.lwjgl.stb.STBImage.stbi_load_from_memory((java.nio.ByteBuffer)textureData, (java.nio.IntBuffer)intBuffer, (java.nio.IntBuffer)intBuffer2, (java.nio.IntBuffer)intBuffer3, (int)(format == null ? 0 : format.components));
-            if (byteBuffer == null) {
+            java.nio.IntBuffer $$3 = $$2.mallocInt(1);
+            java.nio.IntBuffer $$4 = $$2.mallocInt(1);
+            java.nio.IntBuffer $$5 = $$2.mallocInt(1);
+            java.nio.ByteBuffer $$6 = org.lwjgl.stb.STBImage.stbi_load_from_memory((java.nio.ByteBuffer)$$1, (java.nio.IntBuffer)$$3, (java.nio.IntBuffer)$$4, (java.nio.IntBuffer)$$5, (int)($$0 == null ? 0 : $$0.components));
+            if ($$6 == null) {
                 throw new java.io.IOException("Could not load image: " + org.lwjgl.stb.STBImage.stbi_failure_reason());
             }
-            com.mojang.blaze3d.platform.NativeImage nativeImage = new com.mojang.blaze3d.platform.NativeImage(format == null ? com.mojang.blaze3d.platform.NativeImage$Format.getStbFormat((int)intBuffer3.get(0)) : format, intBuffer.get(0), intBuffer2.get(0), true, org.lwjgl.system.MemoryUtil.memAddress((java.nio.ByteBuffer)byteBuffer));
+            com.mojang.blaze3d.platform.NativeImage nativeImage = new com.mojang.blaze3d.platform.NativeImage($$0 == null ? com.mojang.blaze3d.platform.NativeImage$Format.getStbFormat((int)$$5.get(0)) : $$0, $$3.get(0), $$4.get(0), true, org.lwjgl.system.MemoryUtil.memAddress((java.nio.ByteBuffer)$$6));
             return nativeImage;
         }
     }
 
-    public static void setFilter(boolean linear, boolean mipmap) {
+    public static void setFilter(boolean $$0, boolean $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        if (linear) {
-            com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10241, (int)(mipmap ? 9987 : 9729));
+        if ($$0) {
+            com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10241, (int)($$1 ? 9987 : 9729));
             com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10240, (int)9729);
         } else {
-            com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10241, (int)(mipmap ? 9986 : 9728));
+            com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10241, (int)($$1 ? 9986 : 9728));
             com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10240, (int)9728);
         }
     }
@@ -141,28 +141,28 @@
         return this.format;
     }
 
-    public int getPixelRGBA(int x, int y) {
+    public int getPixelRGBA(int $$0, int $$1) {
         if (this.format != com.mojang.blaze3d.platform.NativeImage$Format.RGBA) {
             throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"getPixelRGBA only works on RGBA images; have %s", (java.lang.Object[])new java.lang.Object[]{this.format}));
         }
-        if (this.isOutsideBounds(x, y)) {
-            throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"(%s, %s) outside of image bounds (%s, %s)", (java.lang.Object[])new java.lang.Object[]{x, y, this.width, this.height}));
+        if (this.isOutsideBounds($$0, $$1)) {
+            throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"(%s, %s) outside of image bounds (%s, %s)", (java.lang.Object[])new java.lang.Object[]{$$0, $$1, this.width, this.height}));
         }
         this.checkAllocated();
-        long l = ((long)x + (long)y * (long)this.width) * 4L;
-        return org.lwjgl.system.MemoryUtil.memGetInt((long)(this.pixels + l));
+        long $$2 = ((long)$$0 + (long)$$1 * (long)this.width) * 4L;
+        return org.lwjgl.system.MemoryUtil.memGetInt((long)(this.pixels + $$2));
     }
 
-    public void setPixelRGBA(int x, int y, int abgrColor) {
+    public void setPixelRGBA(int $$0, int $$1, int $$2) {
         if (this.format != com.mojang.blaze3d.platform.NativeImage$Format.RGBA) {
             throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"getPixelRGBA only works on RGBA images; have %s", (java.lang.Object[])new java.lang.Object[]{this.format}));
         }
-        if (this.isOutsideBounds(x, y)) {
-            throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"(%s, %s) outside of image bounds (%s, %s)", (java.lang.Object[])new java.lang.Object[]{x, y, this.width, this.height}));
+        if (this.isOutsideBounds($$0, $$1)) {
+            throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"(%s, %s) outside of image bounds (%s, %s)", (java.lang.Object[])new java.lang.Object[]{$$0, $$1, this.width, this.height}));
         }
         this.checkAllocated();
-        long l = ((long)x + (long)y * (long)this.width) * 4L;
-        org.lwjgl.system.MemoryUtil.memPutInt((long)(this.pixels + l), (int)abgrColor);
+        long $$3 = ((long)$$0 + (long)$$1 * (long)this.width) * 4L;
+        org.lwjgl.system.MemoryUtil.memPutInt((long)(this.pixels + $$3), (int)$$2);
     }
 
     public void setPixelLuminance(int $$0, int $$1, byte $$2) {
@@ -214,15 +214,15 @@
         return org.lwjgl.system.MemoryUtil.memGetByte((long)(this.pixels + (long)$$2));
     }
 
-    public byte getLuminanceOrAlpha(int x, int y) {
+    public byte getLuminanceOrAlpha(int $$0, int $$1) {
         if (!this.format.hasLuminanceOrAlpha()) {
             throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"no luminance or alpha in %s", (java.lang.Object[])new java.lang.Object[]{this.format}));
         }
-        if (this.isOutsideBounds(x, y)) {
-            throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"(%s, %s) outside of image bounds (%s, %s)", (java.lang.Object[])new java.lang.Object[]{x, y, this.width, this.height}));
+        if (this.isOutsideBounds($$0, $$1)) {
+            throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"(%s, %s) outside of image bounds (%s, %s)", (java.lang.Object[])new java.lang.Object[]{$$0, $$1, this.width, this.height}));
         }
-        int n = (x + y * this.width) * this.format.components() + this.format.luminanceOrAlphaOffset() / 8;
-        return org.lwjgl.system.MemoryUtil.memGetByte((long)(this.pixels + (long)n));
+        int $$2 = ($$0 + $$1 * this.width) * this.format.components() + this.format.luminanceOrAlphaOffset() / 8;
+        return org.lwjgl.system.MemoryUtil.memGetByte((long)(this.pixels + (long)$$2));
     }
 
     public void blendPixel(int $$0, int $$1, int $$2) {
@@ -284,53 +284,53 @@
         return $$0;
     }
 
-    public void upload(int level, int xOffset, int yOffset, boolean mipmap) {
-        this.upload(level, xOffset, yOffset, 0, 0, this.width, this.height, false, mipmap);
+    public void upload(int $$0, int $$1, int $$2, boolean $$3) {
+        this.upload($$0, $$1, $$2, 0, 0, this.width, this.height, false, $$3);
     }
 
-    public void upload(int level, int xOffset, int yOffset, int unpackSkipPixels, int unpackSkipRows, int width, int height, boolean mipmap, boolean autoClose) {
-        this.upload(level, xOffset, yOffset, unpackSkipPixels, unpackSkipRows, width, height, false, false, mipmap, autoClose);
+    public void upload(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, int $$6, boolean $$7, boolean $$8) {
+        this.upload($$0, $$1, $$2, $$3, $$4, $$5, $$6, false, false, $$7, $$8);
     }
 
-    public void upload(int level, int xOffset, int yOffset, int unpackSkipPixels, int unpackSkipRows, int width, int height, boolean blur, boolean clamp, boolean mipmap, boolean autoClose) {
+    public void upload(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, int $$6, boolean $$7, boolean $$8, boolean $$9, boolean $$10) {
         if (!com.mojang.blaze3d.systems.RenderSystem.isOnRenderThreadOrInit()) {
-            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> this._upload(level, xOffset, yOffset, unpackSkipPixels, unpackSkipRows, width, height, blur, clamp, mipmap, autoClose));
+            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> this._upload($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10));
         } else {
-            this._upload(level, xOffset, yOffset, unpackSkipPixels, unpackSkipRows, width, height, blur, clamp, mipmap, autoClose);
+            this._upload($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10);
         }
     }
 
-    public void _upload(int level, int xOffset, int yOffset, int unpackSkipPixels, int unpackSkipRows, int width, int height, boolean blur, boolean clamp, boolean mipmap, boolean autoClose) {
+    public void _upload(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, int $$6, boolean $$7, boolean $$8, boolean $$9, boolean $$10) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
         this.checkAllocated();
-        com.mojang.blaze3d.platform.NativeImage.setFilter((boolean)blur, (boolean)mipmap);
-        if (width == this.getWidth()) {
+        com.mojang.blaze3d.platform.NativeImage.setFilter((boolean)$$7, (boolean)$$9);
+        if ($$5 == this.getWidth()) {
             com.mojang.blaze3d.platform.GlStateManager._pixelStore((int)3314, (int)0);
         } else {
             com.mojang.blaze3d.platform.GlStateManager._pixelStore((int)3314, (int)this.getWidth());
         }
-        com.mojang.blaze3d.platform.GlStateManager._pixelStore((int)3316, (int)unpackSkipPixels);
-        com.mojang.blaze3d.platform.GlStateManager._pixelStore((int)3315, (int)unpackSkipRows);
+        com.mojang.blaze3d.platform.GlStateManager._pixelStore((int)3316, (int)$$3);
+        com.mojang.blaze3d.platform.GlStateManager._pixelStore((int)3315, (int)$$4);
         this.format.setUnpackPixelStoreState();
-        com.mojang.blaze3d.platform.GlStateManager._texSubImage2D((int)3553, (int)level, (int)xOffset, (int)yOffset, (int)width, (int)height, (int)this.format.glFormat(), (int)5121, (long)this.pixels);
-        if (clamp) {
+        com.mojang.blaze3d.platform.GlStateManager._texSubImage2D((int)3553, (int)$$0, (int)$$1, (int)$$2, (int)$$5, (int)$$6, (int)this.format.glFormat(), (int)5121, (long)this.pixels);
+        if ($$8) {
             com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10242, (int)33071);
             com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)10243, (int)33071);
         }
-        if (autoClose) {
+        if ($$10) {
             this.close();
         }
     }
 
-    public void downloadTexture(int level, boolean opaque) {
+    public void downloadTexture(int $$0, boolean $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
         this.checkAllocated();
         this.format.setPackPixelStoreState();
-        com.mojang.blaze3d.platform.GlStateManager._getTexImage((int)3553, (int)level, (int)this.format.glFormat(), (int)5121, (long)this.pixels);
-        if (opaque && this.format.hasAlpha()) {
-            for (int i = 0; i < this.getHeight(); ++i) {
-                for (int j = 0; j < this.getWidth(); ++j) {
-                    this.setPixelRGBA(j, i, this.getPixelRGBA(j, i) | 255 << this.format.alphaOffset());
+        com.mojang.blaze3d.platform.GlStateManager._getTexImage((int)3553, (int)$$0, (int)this.format.glFormat(), (int)5121, (long)this.pixels);
+        if ($$1 && this.format.hasAlpha()) {
+            for (int $$2 = 0; $$2 < this.getHeight(); ++$$2) {
+                for (int $$3 = 0; $$3 < this.getWidth(); ++$$3) {
+                    this.setPixelRGBA($$3, $$2, this.getPixelRGBA($$3, $$2) | 255 << this.format.alphaOffset());
                 }
             }
         }
@@ -356,29 +356,29 @@
         this.writeToFile(java.nio.file.FileSystems.getDefault().getPath($$0, new java.lang.String[0]));
     }
 
-    public void writeToFile(java.io.File file) throws java.io.IOException {
-        this.writeToFile(file.toPath());
+    public void writeToFile(java.io.File $$0) throws java.io.IOException {
+        this.writeToFile($$0.toPath());
     }
 
-    public void copyFromFont(org.lwjgl.stb.STBTTFontinfo info, int glyphIndex, int width, int height, float scaleX, float scaleY, float shiftX, float shiftY, int x, int y) {
-        if (x < 0 || x + width > this.getWidth() || y < 0 || y + height > this.getHeight()) {
-            throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Out of bounds: start: (%s, %s) (size: %sx%s); size: %sx%s", (java.lang.Object[])new java.lang.Object[]{x, y, width, height, this.getWidth(), this.getHeight()}));
+    public void copyFromFont(org.lwjgl.stb.STBTTFontinfo $$0, int $$1, int $$2, int $$3, float $$4, float $$5, float $$6, float $$7, int $$8, int $$9) {
+        if ($$8 < 0 || $$8 + $$2 > this.getWidth() || $$9 < 0 || $$9 + $$3 > this.getHeight()) {
+            throw new java.lang.IllegalArgumentException(java.lang.String.format((java.util.Locale)java.util.Locale.ROOT, (java.lang.String)"Out of bounds: start: (%s, %s) (size: %sx%s); size: %sx%s", (java.lang.Object[])new java.lang.Object[]{$$8, $$9, $$2, $$3, this.getWidth(), this.getHeight()}));
         }
         if (this.format.components() != 1) {
             throw new java.lang.IllegalArgumentException("Can only write fonts into 1-component images.");
         }
-        org.lwjgl.stb.STBTruetype.nstbtt_MakeGlyphBitmapSubpixel((long)info.address(), (long)(this.pixels + (long)x + (long)(y * this.getWidth())), (int)width, (int)height, (int)this.getWidth(), (float)scaleX, (float)scaleY, (float)shiftX, (float)shiftY, (int)glyphIndex);
+        org.lwjgl.stb.STBTruetype.nstbtt_MakeGlyphBitmapSubpixel((long)$$0.address(), (long)(this.pixels + (long)$$8 + (long)($$9 * this.getWidth())), (int)$$2, (int)$$3, (int)this.getWidth(), (float)$$4, (float)$$5, (float)$$6, (float)$$7, (int)$$1);
     }
 
-    public void writeToFile(java.nio.file.Path path) throws java.io.IOException {
+    public void writeToFile(java.nio.file.Path $$0) throws java.io.IOException {
         if (!this.format.supportedByStb()) {
             throw new java.lang.UnsupportedOperationException("Don't know how to write format " + this.format);
         }
         this.checkAllocated();
-        try (java.nio.channels.SeekableByteChannel seekableByteChannel = java.nio.file.Files.newByteChannel((java.nio.file.Path)path, (java.util.Set)OPEN_OPTIONS, (java.nio.file.attribute.FileAttribute[])new java.nio.file.attribute.FileAttribute[0]);
+        try (java.nio.channels.SeekableByteChannel $$1 = java.nio.file.Files.newByteChannel((java.nio.file.Path)$$0, (java.util.Set)OPEN_OPTIONS, (java.nio.file.attribute.FileAttribute[])new java.nio.file.attribute.FileAttribute[0]);
 ){
-            if (!this.writeToChannel((java.nio.channels.WritableByteChannel)seekableByteChannel)) {
-                throw new java.io.IOException("Could not write image to the PNG file \"" + path.toAbsolutePath() + "\": " + org.lwjgl.stb.STBImage.stbi_failure_reason());
+            if (!this.writeToChannel((java.nio.channels.WritableByteChannel)$$1)) {
+                throw new java.io.IOException("Could not write image to the PNG file \"" + $$0.toAbsolutePath() + "\": " + org.lwjgl.stb.STBImage.stbi_failure_reason());
             }
         }
     }
@@ -416,61 +416,61 @@
     /*
      * WARNING - Removed try catching itself - possible behaviour change.
      */
-    public boolean writeToChannel(java.nio.channels.WritableByteChannel channel) throws java.io.IOException {
-        com.mojang.blaze3d.platform.NativeImage$WriteCallback writeCallback = new com.mojang.blaze3d.platform.NativeImage$WriteCallback(channel);
+    public boolean writeToChannel(java.nio.channels.WritableByteChannel $$0) throws java.io.IOException {
+        com.mojang.blaze3d.platform.NativeImage$WriteCallback $$1 = new com.mojang.blaze3d.platform.NativeImage$WriteCallback($$0);
         try {
-            int n = java.lang.Math.min((int)this.getHeight(), (int)(java.lang.Integer.MAX_VALUE / this.getWidth() / this.format.components()));
-            if (n < this.getHeight()) {
-                LOGGER.warn("Dropping image height from {} to {} to fit the size into 32-bit signed int", (java.lang.Object)this.getHeight(), (java.lang.Object)n);
+            int $$2 = java.lang.Math.min((int)this.getHeight(), (int)(java.lang.Integer.MAX_VALUE / this.getWidth() / this.format.components()));
+            if ($$2 < this.getHeight()) {
+                LOGGER.warn("Dropping image height from {} to {} to fit the size into 32-bit signed int", (java.lang.Object)this.getHeight(), (java.lang.Object)$$2);
             }
-            if (org.lwjgl.stb.STBImageWrite.nstbi_write_png_to_func((long)writeCallback.address(), (long)0L, (int)this.getWidth(), (int)n, (int)this.format.components(), (long)this.pixels, (int)0) == 0) {
+            if (org.lwjgl.stb.STBImageWrite.nstbi_write_png_to_func((long)$$1.address(), (long)0L, (int)this.getWidth(), (int)$$2, (int)this.format.components(), (long)this.pixels, (int)0) == 0) {
                 boolean bl = false;
                 return bl;
             }
-            writeCallback.throwIfException();
+            $$1.throwIfException();
             boolean bl = true;
             return bl;
         }
         finally {
-            writeCallback.free();
+            $$1.free();
         }
     }
 
-    public void copyFrom(com.mojang.blaze3d.platform.NativeImage other) {
-        if (other.format() != this.format) {
+    public void copyFrom(com.mojang.blaze3d.platform.NativeImage $$0) {
+        if ($$0.format() != this.format) {
             throw new java.lang.UnsupportedOperationException("Image formats don't match.");
         }
-        int n = this.format.components();
+        int $$1 = this.format.components();
         this.checkAllocated();
-        other.checkAllocated();
-        if (this.width == other.width) {
-            org.lwjgl.system.MemoryUtil.memCopy((long)other.pixels, (long)this.pixels, (long)java.lang.Math.min((long)this.size, (long)other.size));
+        $$0.checkAllocated();
+        if (this.width == $$0.width) {
+            org.lwjgl.system.MemoryUtil.memCopy((long)$$0.pixels, (long)this.pixels, (long)java.lang.Math.min((long)this.size, (long)$$0.size));
         } else {
-            int n2 = java.lang.Math.min((int)this.getWidth(), (int)other.getWidth());
-            int n3 = java.lang.Math.min((int)this.getHeight(), (int)other.getHeight());
-            for (int i = 0; i < n3; ++i) {
-                int n4 = i * other.getWidth() * n;
-                int n5 = i * this.getWidth() * n;
-                org.lwjgl.system.MemoryUtil.memCopy((long)(other.pixels + (long)n4), (long)(this.pixels + (long)n5), (long)n2);
+            int $$2 = java.lang.Math.min((int)this.getWidth(), (int)$$0.getWidth());
+            int $$3 = java.lang.Math.min((int)this.getHeight(), (int)$$0.getHeight());
+            for (int $$4 = 0; $$4 < $$3; ++$$4) {
+                int $$5 = $$4 * $$0.getWidth() * $$1;
+                int $$6 = $$4 * this.getWidth() * $$1;
+                org.lwjgl.system.MemoryUtil.memCopy((long)($$0.pixels + (long)$$5), (long)(this.pixels + (long)$$6), (long)$$2);
             }
         }
     }
 
-    public void fillRect(int x, int y, int width, int height, int value) {
-        for (int i = y; i < y + height; ++i) {
-            for (int j = x; j < x + width; ++j) {
-                this.setPixelRGBA(j, i, value);
+    public void fillRect(int $$0, int $$1, int $$2, int $$3, int $$4) {
+        for (int $$5 = $$1; $$5 < $$1 + $$3; ++$$5) {
+            for (int $$6 = $$0; $$6 < $$0 + $$2; ++$$6) {
+                this.setPixelRGBA($$6, $$5, $$4);
             }
         }
     }
 
-    public void copyRect(int xFrom, int yFrom, int xToDelta, int yToDelta, int width, int height, boolean mirrorX, boolean mirrorY) {
-        for (int i = 0; i < height; ++i) {
-            for (int j = 0; j < width; ++j) {
-                int n = mirrorX ? width - 1 - j : j;
-                int n2 = mirrorY ? height - 1 - i : i;
-                int n3 = this.getPixelRGBA(xFrom + j, yFrom + i);
-                this.setPixelRGBA(xFrom + xToDelta + n, yFrom + yToDelta + n2, n3);
+    public void copyRect(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, boolean $$6, boolean $$7) {
+        for (int $$8 = 0; $$8 < $$5; ++$$8) {
+            for (int $$9 = 0; $$9 < $$4; ++$$9) {
+                int $$10 = $$6 ? $$4 - 1 - $$9 : $$9;
+                int $$11 = $$7 ? $$5 - 1 - $$8 : $$8;
+                int $$12 = this.getPixelRGBA($$0 + $$9, $$1 + $$8);
+                this.setPixelRGBA($$0 + $$2 + $$10, $$1 + $$3 + $$11, $$12);
             }
         }
     }
@@ -492,49 +492,49 @@
         }
     }
 
-    public void resizeSubRectTo(int x, int y, int width, int height, com.mojang.blaze3d.platform.NativeImage image) {
+    public void resizeSubRectTo(int $$0, int $$1, int $$2, int $$3, com.mojang.blaze3d.platform.NativeImage $$4) {
         this.checkAllocated();
-        if (image.format() != this.format) {
+        if ($$4.format() != this.format) {
             throw new java.lang.UnsupportedOperationException("resizeSubRectTo only works for images of the same format.");
         }
-        int n = this.format.components();
-        org.lwjgl.stb.STBImageResize.nstbir_resize_uint8((long)(this.pixels + (long)((x + y * this.getWidth()) * n)), (int)width, (int)height, (int)(this.getWidth() * n), (long)image.pixels, (int)image.getWidth(), (int)image.getHeight(), (int)0, (int)n);
+        int $$5 = this.format.components();
+        org.lwjgl.stb.STBImageResize.nstbir_resize_uint8((long)(this.pixels + (long)(($$0 + $$1 * this.getWidth()) * $$5)), (int)$$2, (int)$$3, (int)(this.getWidth() * $$5), (long)$$4.pixels, (int)$$4.getWidth(), (int)$$4.getHeight(), (int)0, (int)$$5);
     }
 
     public void untrack() {
         com.mojang.blaze3d.platform.DebugMemoryUntracker.untrack((long)this.pixels);
     }
 
-    public static com.mojang.blaze3d.platform.NativeImage fromBase64(java.lang.String string) throws java.io.IOException {
-        byte[] byArray = java.util.Base64.getDecoder().decode(string.replaceAll("\n", "").getBytes(com.google.common.base.Charsets.UTF_8));
-        try (org.lwjgl.system.MemoryStack memoryStack = org.lwjgl.system.MemoryStack.stackPush();
+    public static com.mojang.blaze3d.platform.NativeImage fromBase64(java.lang.String $$0) throws java.io.IOException {
+        byte[] $$1 = java.util.Base64.getDecoder().decode($$0.replaceAll("\n", "").getBytes(com.google.common.base.Charsets.UTF_8));
+        try (org.lwjgl.system.MemoryStack $$2 = org.lwjgl.system.MemoryStack.stackPush();
 ){
-            java.nio.ByteBuffer byteBuffer = memoryStack.malloc(byArray.length);
-            byteBuffer.put(byArray);
-            byteBuffer.rewind();
-            com.mojang.blaze3d.platform.NativeImage nativeImage = com.mojang.blaze3d.platform.NativeImage.read((java.nio.ByteBuffer)byteBuffer);
+            java.nio.ByteBuffer $$3 = $$2.malloc($$1.length);
+            $$3.put($$1);
+            $$3.rewind();
+            com.mojang.blaze3d.platform.NativeImage nativeImage = com.mojang.blaze3d.platform.NativeImage.read((java.nio.ByteBuffer)$$3);
             return nativeImage;
         }
     }
 
-    public static int getA(int abgrColor) {
-        return abgrColor >> 24 & 0xFF;
+    public static int getA(int $$0) {
+        return $$0 >> 24 & 0xFF;
     }
 
-    public static int getR(int abgrColor) {
-        return abgrColor >> 0 & 0xFF;
+    public static int getR(int $$0) {
+        return $$0 >> 0 & 0xFF;
     }
 
-    public static int getG(int abgrColor) {
-        return abgrColor >> 8 & 0xFF;
+    public static int getG(int $$0) {
+        return $$0 >> 8 & 0xFF;
     }
 
-    public static int getB(int abgrColor) {
-        return abgrColor >> 16 & 0xFF;
+    public static int getB(int $$0) {
+        return $$0 >> 16 & 0xFF;
     }
 
-    public static int combine(int alpha, int blue, int green, int red) {
-        return (alpha & 0xFF) << 24 | (blue & 0xFF) << 16 | (green & 0xFF) << 8 | (red & 0xFF) << 0;
+    public static int combine(int $$0, int $$1, int $$2, int $$3) {
+        return ($$0 & 0xFF) << 24 | ($$1 & 0xFF) << 16 | ($$2 & 0xFF) << 8 | ($$3 & 0xFF) << 0;
     }
 
     static {