--- com/mojang/blaze3d/platform/TextureUtil.java
+++ com/mojang/blaze3d/platform/TextureUtil.java
@@ -25,59 +25,59 @@
         return com.mojang.blaze3d.platform.GlStateManager._genTexture();
     }
 
-    public static void releaseTextureId(int textureId) {
+    public static void releaseTextureId(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._deleteTexture((int)textureId);
+        com.mojang.blaze3d.platform.GlStateManager._deleteTexture((int)$$0);
     }
 
-    public static void prepareImage(int textureId, int width, int height) {
-        com.mojang.blaze3d.platform.TextureUtil.prepareImage((com.mojang.blaze3d.platform.NativeImage$InternalGlFormat)com.mojang.blaze3d.platform.NativeImage$InternalGlFormat.RGBA, (int)textureId, (int)0, (int)width, (int)height);
+    public static void prepareImage(int $$0, int $$1, int $$2) {
+        com.mojang.blaze3d.platform.TextureUtil.prepareImage((com.mojang.blaze3d.platform.NativeImage$InternalGlFormat)com.mojang.blaze3d.platform.NativeImage$InternalGlFormat.RGBA, (int)$$0, (int)0, (int)$$1, (int)$$2);
     }
 
-    public static void prepareImage(com.mojang.blaze3d.platform.NativeImage$InternalGlFormat pixelFormat, int textureId, int width, int height) {
-        com.mojang.blaze3d.platform.TextureUtil.prepareImage((com.mojang.blaze3d.platform.NativeImage$InternalGlFormat)pixelFormat, (int)textureId, (int)0, (int)width, (int)height);
+    public static void prepareImage(com.mojang.blaze3d.platform.NativeImage$InternalGlFormat $$0, int $$1, int $$2, int $$3) {
+        com.mojang.blaze3d.platform.TextureUtil.prepareImage((com.mojang.blaze3d.platform.NativeImage$InternalGlFormat)$$0, (int)$$1, (int)0, (int)$$2, (int)$$3);
     }
 
-    public static void prepareImage(int textureId, int mipmapLevel, int width, int height) {
-        com.mojang.blaze3d.platform.TextureUtil.prepareImage((com.mojang.blaze3d.platform.NativeImage$InternalGlFormat)com.mojang.blaze3d.platform.NativeImage$InternalGlFormat.RGBA, (int)textureId, (int)mipmapLevel, (int)width, (int)height);
+    public static void prepareImage(int $$0, int $$1, int $$2, int $$3) {
+        com.mojang.blaze3d.platform.TextureUtil.prepareImage((com.mojang.blaze3d.platform.NativeImage$InternalGlFormat)com.mojang.blaze3d.platform.NativeImage$InternalGlFormat.RGBA, (int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
-    public static void prepareImage(com.mojang.blaze3d.platform.NativeImage$InternalGlFormat pixelFormat, int textureId, int mipmapLevel, int width, int height) {
+    public static void prepareImage(com.mojang.blaze3d.platform.NativeImage$InternalGlFormat $$0, int $$1, int $$2, int $$3, int $$4) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        com.mojang.blaze3d.platform.TextureUtil.bind((int)textureId);
-        if (mipmapLevel >= 0) {
-            com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)33085, (int)mipmapLevel);
+        com.mojang.blaze3d.platform.TextureUtil.bind((int)$$1);
+        if ($$2 >= 0) {
+            com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)33085, (int)$$2);
             com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)33082, (int)0);
-            com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)33083, (int)mipmapLevel);
+            com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)33083, (int)$$2);
             com.mojang.blaze3d.platform.GlStateManager._texParameter((int)3553, (int)34049, (float)0.0f);
         }
-        for (int i = 0; i <= mipmapLevel; ++i) {
-            com.mojang.blaze3d.platform.GlStateManager._texImage2D((int)3553, (int)i, (int)pixelFormat.glFormat(), (int)(width >> i), (int)(height >> i), (int)0, (int)6408, (int)5121, null);
+        for (int $$5 = 0; $$5 <= $$2; ++$$5) {
+            com.mojang.blaze3d.platform.GlStateManager._texImage2D((int)3553, (int)$$5, (int)$$0.glFormat(), (int)($$3 >> $$5), (int)($$4 >> $$5), (int)0, (int)6408, (int)5121, null);
         }
     }
 
-    public static void bind(int textureId) {
+    public static void bind(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._bindTexture((int)textureId);
+        com.mojang.blaze3d.platform.GlStateManager._bindTexture((int)$$0);
     }
 
-    public static java.nio.ByteBuffer readResource(java.io.InputStream inputStream) throws java.io.IOException {
-        java.nio.ByteBuffer byteBuffer;
-        if (inputStream instanceof java.io.FileInputStream) {
-            java.io.FileInputStream fileInputStream = (java.io.FileInputStream)inputStream;
-            java.nio.channels.FileChannel fileChannel = fileInputStream.getChannel();
-            byteBuffer = org.lwjgl.system.MemoryUtil.memAlloc((int)((int)fileChannel.size() + 1));
-            while (fileChannel.read(byteBuffer) != -1) {
+    public static java.nio.ByteBuffer readResource(java.io.InputStream $$0) throws java.io.IOException {
+        java.nio.ByteBuffer $$4;
+        if ($$0 instanceof java.io.FileInputStream) {
+            java.io.FileInputStream $$1 = (java.io.FileInputStream)$$0;
+            java.nio.channels.FileChannel $$2 = $$1.getChannel();
+            java.nio.ByteBuffer $$3 = org.lwjgl.system.MemoryUtil.memAlloc((int)((int)$$2.size() + 1));
+            while ($$2.read($$3) != -1) {
             }
         } else {
-            byteBuffer = org.lwjgl.system.MemoryUtil.memAlloc((int)8192);
-            java.nio.channels.ReadableByteChannel readableByteChannel = java.nio.channels.Channels.newChannel((java.io.InputStream)inputStream);
-            while (readableByteChannel.read(byteBuffer) != -1) {
-                if (byteBuffer.remaining() != 0) continue;
-                byteBuffer = org.lwjgl.system.MemoryUtil.memRealloc((java.nio.ByteBuffer)byteBuffer, (int)(byteBuffer.capacity() * 2));
+            $$4 = org.lwjgl.system.MemoryUtil.memAlloc((int)8192);
+            java.nio.channels.ReadableByteChannel $$5 = java.nio.channels.Channels.newChannel((java.io.InputStream)$$0);
+            while ($$5.read($$4) != -1) {
+                if ($$4.remaining() != 0) continue;
+                $$4 = org.lwjgl.system.MemoryUtil.memRealloc((java.nio.ByteBuffer)$$4, (int)($$4.capacity() * 2));
             }
         }
-        return byteBuffer;
+        return $$4;
     }
 
     public static void writeAsPNG(java.lang.String $$0, int $$1, int $$2, int $$3, int $$4) {
@@ -100,7 +100,7 @@
         }
     }
 
-    public static void initTexture(java.nio.IntBuffer buffer, int width, int height) {
+    public static void initTexture(java.nio.IntBuffer $$0, int $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
         org.lwjgl.opengl.GL11.glPixelStorei((int)3312, (int)0);
         org.lwjgl.opengl.GL11.glPixelStorei((int)3313, (int)0);
@@ -108,7 +108,7 @@
         org.lwjgl.opengl.GL11.glPixelStorei((int)3315, (int)0);
         org.lwjgl.opengl.GL11.glPixelStorei((int)3316, (int)0);
         org.lwjgl.opengl.GL11.glPixelStorei((int)3317, (int)4);
-        org.lwjgl.opengl.GL11.glTexImage2D((int)3553, (int)0, (int)6408, (int)width, (int)height, (int)0, (int)32993, (int)33639, (java.nio.IntBuffer)buffer);
+        org.lwjgl.opengl.GL11.glTexImage2D((int)3553, (int)0, (int)6408, (int)$$1, (int)$$2, (int)0, (int)32993, (int)33639, (java.nio.IntBuffer)$$0);
         org.lwjgl.opengl.GL11.glTexParameteri((int)3553, (int)10240, (int)9728);
         org.lwjgl.opengl.GL11.glTexParameteri((int)3553, (int)10241, (int)9729);
     }