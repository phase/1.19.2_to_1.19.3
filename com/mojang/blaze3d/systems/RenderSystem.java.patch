--- com/mojang/blaze3d/systems/RenderSystem.java
+++ com/mojang/blaze3d/systems/RenderSystem.java
@@ -58,10 +58,10 @@
         return isInInit || com.mojang.blaze3d.systems.RenderSystem.isOnRenderThread();
     }
 
-    public static void initGameThread(boolean renderOffThread) {
-        boolean bl;
-        boolean bl2 = bl = renderThread == java.lang.Thread.currentThread();
-        if (gameThread != null || renderThread == null || bl == renderOffThread) {
+    public static void initGameThread(boolean $$0) {
+        boolean $$1;
+        boolean bl = $$1 = renderThread == java.lang.Thread.currentThread();
+        if (gameThread != null || renderThread == null || $$1 == $$0) {
             throw new java.lang.IllegalStateException("Could not initialize tick thread");
         }
         gameThread = java.lang.Thread.currentThread();
@@ -111,15 +111,15 @@
         return true;
     }
 
-    public static void recordRenderCall(com.mojang.blaze3d.pipeline.RenderCall renderCall) {
-        recordingQueue.add((java.lang.Object)renderCall);
+    public static void recordRenderCall(com.mojang.blaze3d.pipeline.RenderCall $$0) {
+        recordingQueue.add((java.lang.Object)$$0);
     }
 
-    public static void flipFrame(long windowId) {
+    public static void flipFrame(long $$0) {
         org.lwjgl.glfw.GLFW.glfwPollEvents();
         com.mojang.blaze3d.systems.RenderSystem.replayQueue();
         com.mojang.blaze3d.vertex.Tesselator.getInstance().getBuilder().clear();
-        org.lwjgl.glfw.GLFW.glfwSwapBuffers((long)windowId);
+        org.lwjgl.glfw.GLFW.glfwSwapBuffers((long)$$0);
         org.lwjgl.glfw.GLFW.glfwPollEvents();
     }
 
@@ -132,14 +132,14 @@
         isReplayingQueue = false;
     }
 
-    public static void limitDisplayFPS(int frameRateLimit) {
-        double d = lastDrawTime + 1.0 / (double)frameRateLimit;
-        double d2 = org.lwjgl.glfw.GLFW.glfwGetTime();
-        while (d2 < d) {
-            org.lwjgl.glfw.GLFW.glfwWaitEventsTimeout((double)(d - d2));
-            d2 = org.lwjgl.glfw.GLFW.glfwGetTime();
+    public static void limitDisplayFPS(int $$0) {
+        double $$1 = lastDrawTime + 1.0 / (double)$$0;
+        double $$2 = org.lwjgl.glfw.GLFW.glfwGetTime();
+        while ($$2 < $$1) {
+            org.lwjgl.glfw.GLFW.glfwWaitEventsTimeout((double)($$1 - $$2));
+            $$2 = org.lwjgl.glfw.GLFW.glfwGetTime();
         }
-        lastDrawTime = d2;
+        lastDrawTime = $$2;
     }
 
     public static void disableDepthTest() {
@@ -152,10 +152,10 @@
         com.mojang.blaze3d.platform.GlStateManager._enableDepthTest();
     }
 
-    public static void enableScissor(int x, int y, int width, int height) {
+    public static void enableScissor(int $$0, int $$1, int $$2, int $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnGameThreadOrInit();
         com.mojang.blaze3d.platform.GlStateManager._enableScissorTest();
-        com.mojang.blaze3d.platform.GlStateManager._scissorBox((int)x, (int)y, (int)width, (int)height);
+        com.mojang.blaze3d.platform.GlStateManager._scissorBox((int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
     public static void disableScissor() {
@@ -163,14 +163,14 @@
         com.mojang.blaze3d.platform.GlStateManager._disableScissorTest();
     }
 
-    public static void depthFunc(int depthFunc) {
+    public static void depthFunc(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._depthFunc((int)depthFunc);
+        com.mojang.blaze3d.platform.GlStateManager._depthFunc((int)$$0);
     }
 
-    public static void depthMask(boolean flag) {
+    public static void depthMask(boolean $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._depthMask((boolean)flag);
+        com.mojang.blaze3d.platform.GlStateManager._depthMask((boolean)$$0);
     }
 
     public static void enableBlend() {
@@ -183,29 +183,29 @@
         com.mojang.blaze3d.platform.GlStateManager._disableBlend();
     }
 
-    public static void blendFunc(com.mojang.blaze3d.platform.GlStateManager$SourceFactor sourceFactor, com.mojang.blaze3d.platform.GlStateManager$DestFactor destFactor) {
+    public static void blendFunc(com.mojang.blaze3d.platform.GlStateManager$SourceFactor $$0, com.mojang.blaze3d.platform.GlStateManager$DestFactor $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._blendFunc((int)sourceFactor.value, (int)destFactor.value);
+        com.mojang.blaze3d.platform.GlStateManager._blendFunc((int)$$0.value, (int)$$1.value);
     }
 
-    public static void blendFunc(int sourceFactor, int destFactor) {
+    public static void blendFunc(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._blendFunc((int)sourceFactor, (int)destFactor);
+        com.mojang.blaze3d.platform.GlStateManager._blendFunc((int)$$0, (int)$$1);
     }
 
-    public static void blendFuncSeparate(com.mojang.blaze3d.platform.GlStateManager$SourceFactor sourceFactor, com.mojang.blaze3d.platform.GlStateManager$DestFactor destFactor, com.mojang.blaze3d.platform.GlStateManager$SourceFactor sourceFactorAlpha, com.mojang.blaze3d.platform.GlStateManager$DestFactor destFactorAlpha) {
+    public static void blendFuncSeparate(com.mojang.blaze3d.platform.GlStateManager$SourceFactor $$0, com.mojang.blaze3d.platform.GlStateManager$DestFactor $$1, com.mojang.blaze3d.platform.GlStateManager$SourceFactor $$2, com.mojang.blaze3d.platform.GlStateManager$DestFactor $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._blendFuncSeparate((int)sourceFactor.value, (int)destFactor.value, (int)sourceFactorAlpha.value, (int)destFactorAlpha.value);
+        com.mojang.blaze3d.platform.GlStateManager._blendFuncSeparate((int)$$0.value, (int)$$1.value, (int)$$2.value, (int)$$3.value);
     }
 
-    public static void blendFuncSeparate(int sourceFactor, int destFactor, int sourceFactorAlpha, int destFactorAlpha) {
+    public static void blendFuncSeparate(int $$0, int $$1, int $$2, int $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._blendFuncSeparate((int)sourceFactor, (int)destFactor, (int)sourceFactorAlpha, (int)destFactorAlpha);
+        com.mojang.blaze3d.platform.GlStateManager._blendFuncSeparate((int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
-    public static void blendEquation(int mode) {
+    public static void blendEquation(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._blendEquation((int)mode);
+        com.mojang.blaze3d.platform.GlStateManager._blendEquation((int)$$0);
     }
 
     public static void enableCull() {
@@ -218,9 +218,9 @@
         com.mojang.blaze3d.platform.GlStateManager._disableCull();
     }
 
-    public static void polygonMode(int face, int mode) {
+    public static void polygonMode(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._polygonMode((int)face, (int)mode);
+        com.mojang.blaze3d.platform.GlStateManager._polygonMode((int)$$0, (int)$$1);
     }
 
     public static void enablePolygonOffset() {
@@ -233,9 +233,9 @@
         com.mojang.blaze3d.platform.GlStateManager._disablePolygonOffset();
     }
 
-    public static void polygonOffset(float factor, float units) {
+    public static void polygonOffset(float $$0, float $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._polygonOffset((float)factor, (float)units);
+        com.mojang.blaze3d.platform.GlStateManager._polygonOffset((float)$$0, (float)$$1);
     }
 
     public static void enableColorLogicOp() {
@@ -248,14 +248,14 @@
         com.mojang.blaze3d.platform.GlStateManager._disableColorLogicOp();
     }
 
-    public static void logicOp(com.mojang.blaze3d.platform.GlStateManager$LogicOp op) {
+    public static void logicOp(com.mojang.blaze3d.platform.GlStateManager$LogicOp $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._logicOp((int)op.value);
+        com.mojang.blaze3d.platform.GlStateManager._logicOp((int)$$0.value);
     }
 
-    public static void activeTexture(int texture) {
+    public static void activeTexture(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._activeTexture((int)texture);
+        com.mojang.blaze3d.platform.GlStateManager._activeTexture((int)$$0);
     }
 
     public static void enableTexture() {
@@ -268,66 +268,66 @@
         com.mojang.blaze3d.platform.GlStateManager._disableTexture();
     }
 
-    public static void texParameter(int target, int parameterName, int parameter) {
-        com.mojang.blaze3d.platform.GlStateManager._texParameter((int)target, (int)parameterName, (int)parameter);
+    public static void texParameter(int $$0, int $$1, int $$2) {
+        com.mojang.blaze3d.platform.GlStateManager._texParameter((int)$$0, (int)$$1, (int)$$2);
     }
 
-    public static void deleteTexture(int texture) {
+    public static void deleteTexture(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnGameThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._deleteTexture((int)texture);
+        com.mojang.blaze3d.platform.GlStateManager._deleteTexture((int)$$0);
     }
 
     public static void bindTextureForSetup(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.bindTexture((int)$$0);
     }
 
-    public static void bindTexture(int texture) {
-        com.mojang.blaze3d.platform.GlStateManager._bindTexture((int)texture);
+    public static void bindTexture(int $$0) {
+        com.mojang.blaze3d.platform.GlStateManager._bindTexture((int)$$0);
     }
 
-    public static void viewport(int x, int y, int width, int height) {
+    public static void viewport(int $$0, int $$1, int $$2, int $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnGameThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._viewport((int)x, (int)y, (int)width, (int)height);
+        com.mojang.blaze3d.platform.GlStateManager._viewport((int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
-    public static void colorMask(boolean red, boolean green, boolean blue, boolean alpha) {
+    public static void colorMask(boolean $$0, boolean $$1, boolean $$2, boolean $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._colorMask((boolean)red, (boolean)green, (boolean)blue, (boolean)alpha);
+        com.mojang.blaze3d.platform.GlStateManager._colorMask((boolean)$$0, (boolean)$$1, (boolean)$$2, (boolean)$$3);
     }
 
-    public static void stencilFunc(int func, int ref, int mask) {
+    public static void stencilFunc(int $$0, int $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._stencilFunc((int)func, (int)ref, (int)mask);
+        com.mojang.blaze3d.platform.GlStateManager._stencilFunc((int)$$0, (int)$$1, (int)$$2);
     }
 
-    public static void stencilMask(int mask) {
+    public static void stencilMask(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._stencilMask((int)mask);
+        com.mojang.blaze3d.platform.GlStateManager._stencilMask((int)$$0);
     }
 
-    public static void stencilOp(int sFail, int dpFail, int dpPass) {
+    public static void stencilOp(int $$0, int $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._stencilOp((int)sFail, (int)dpFail, (int)dpPass);
+        com.mojang.blaze3d.platform.GlStateManager._stencilOp((int)$$0, (int)$$1, (int)$$2);
     }
 
-    public static void clearDepth(double depth) {
+    public static void clearDepth(double $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnGameThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._clearDepth((double)depth);
+        com.mojang.blaze3d.platform.GlStateManager._clearDepth((double)$$0);
     }
 
-    public static void clearColor(float red, float green, float blue, float alpha) {
+    public static void clearColor(float $$0, float $$1, float $$2, float $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnGameThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._clearColor((float)red, (float)green, (float)blue, (float)alpha);
+        com.mojang.blaze3d.platform.GlStateManager._clearColor((float)$$0, (float)$$1, (float)$$2, (float)$$3);
     }
 
-    public static void clearStencil(int index) {
+    public static void clearStencil(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._clearStencil((int)index);
+        com.mojang.blaze3d.platform.GlStateManager._clearStencil((int)$$0);
     }
 
-    public static void clear(int mask, boolean checkError) {
+    public static void clear(int $$0, boolean $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnGameThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._clear((int)mask, (boolean)checkError);
+        com.mojang.blaze3d.platform.GlStateManager._clear((int)$$0, (boolean)$$1);
     }
 
     public static void setShaderFogStart(float $$0) {
@@ -438,13 +438,13 @@
         com.mojang.blaze3d.platform.GlStateManager._drawElements((int)$$0, (int)$$1, (int)$$2, (long)0L);
     }
 
-    public static void lineWidth(float shaderLineWidth) {
+    public static void lineWidth(float $$0) {
         if (!com.mojang.blaze3d.systems.RenderSystem.isOnRenderThread()) {
             com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> {
-                shaderLineWidth = shaderLineWidth;
+                shaderLineWidth = $$0;
             });
         } else {
-            com.mojang.blaze3d.systems.RenderSystem.shaderLineWidth = shaderLineWidth;
+            shaderLineWidth = $$0;
         }
     }
 
@@ -453,14 +453,14 @@
         return shaderLineWidth;
     }
 
-    public static void pixelStore(int parameterName, int parameter) {
+    public static void pixelStore(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnGameThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._pixelStore((int)parameterName, (int)parameter);
+        com.mojang.blaze3d.platform.GlStateManager._pixelStore((int)$$0, (int)$$1);
     }
 
-    public static void readPixels(int x, int y, int width, int height, int format, int type, java.nio.ByteBuffer pixels) {
+    public static void readPixels(int $$0, int $$1, int $$2, int $$3, int $$4, int $$5, java.nio.ByteBuffer $$6) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._readPixels((int)x, (int)y, (int)width, (int)height, (int)format, (int)type, (java.nio.ByteBuffer)pixels);
+        com.mojang.blaze3d.platform.GlStateManager._readPixels((int)$$0, (int)$$1, (int)$$2, (int)$$3, (int)$$4, (int)$$5, (java.nio.ByteBuffer)$$6);
     }
 
     public static void getString(int $$0, java.util.function.Consumer<java.lang.String> $$1) {
@@ -482,15 +482,15 @@
         return () -> ((java.util.function.LongSupplier)com.mojang.blaze3d.platform.GLX._initGlfw()).getAsLong();
     }
 
-    public static void initRenderer(int debugVerbosity, boolean synchronous) {
+    public static void initRenderer(int $$0, boolean $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertInInitPhase();
-        com.mojang.blaze3d.platform.GLX._init((int)debugVerbosity, (boolean)synchronous);
+        com.mojang.blaze3d.platform.GLX._init((int)$$0, (boolean)$$1);
         apiDescription = com.mojang.blaze3d.platform.GLX.getOpenGLVersionString();
     }
 
-    public static void setErrorCallback(org.lwjgl.glfw.GLFWErrorCallbackI callback) {
+    public static void setErrorCallback(org.lwjgl.glfw.GLFWErrorCallbackI $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertInInitPhase();
-        com.mojang.blaze3d.platform.GLX._setGlfwErrorCallback((org.lwjgl.glfw.GLFWErrorCallbackI)callback);
+        com.mojang.blaze3d.platform.GLX._setGlfwErrorCallback((org.lwjgl.glfw.GLFWErrorCallbackI)$$0);
     }
 
     public static void renderCrosshair(int $$0) {
@@ -503,7 +503,7 @@
         return "Using framebuffer using OpenGL 3.2";
     }
 
-    public static void setupDefaultState(int x, int y, int width, int height) {
+    public static void setupDefaultState(int $$0, int $$1, int $$2, int $$3) {
         com.mojang.blaze3d.systems.RenderSystem.assertInInitPhase();
         com.mojang.blaze3d.platform.GlStateManager._enableTexture();
         com.mojang.blaze3d.platform.GlStateManager._clearDepth((double)1.0);
@@ -513,7 +513,7 @@
         savedProjectionMatrix.setIdentity();
         modelViewMatrix.setIdentity();
         textureMatrix.setIdentity();
-        com.mojang.blaze3d.platform.GlStateManager._viewport((int)x, (int)y, (int)width, (int)height);
+        com.mojang.blaze3d.platform.GlStateManager._viewport((int)$$0, (int)$$1, (int)$$2, (int)$$3);
     }
 
     public static int maxSupportedTextureSize() {
@@ -541,14 +541,14 @@
         com.mojang.blaze3d.platform.GlStateManager._glBindVertexArray((int)((java.lang.Integer)$$0.get()));
     }
 
-    public static void glBufferData(int target, java.nio.ByteBuffer data, int usage) {
+    public static void glBufferData(int $$0, java.nio.ByteBuffer $$1, int $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThreadOrInit();
-        com.mojang.blaze3d.platform.GlStateManager._glBufferData((int)target, (java.nio.ByteBuffer)data, (int)usage);
+        com.mojang.blaze3d.platform.GlStateManager._glBufferData((int)$$0, (java.nio.ByteBuffer)$$1, (int)$$2);
     }
 
-    public static void glDeleteBuffers(int buffer) {
+    public static void glDeleteBuffers(int $$0) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glDeleteBuffers((int)buffer);
+        com.mojang.blaze3d.platform.GlStateManager._glDeleteBuffers((int)$$0);
     }
 
     public static void glDeleteVertexArrays(int $$0) {
@@ -556,70 +556,70 @@
         com.mojang.blaze3d.platform.GlStateManager._glDeleteVertexArrays((int)$$0);
     }
 
-    public static void glUniform1i(int location, int value) {
+    public static void glUniform1i(int $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform1i((int)location, (int)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform1i((int)$$0, (int)$$1);
     }
 
-    public static void glUniform1(int location, java.nio.IntBuffer value) {
+    public static void glUniform1(int $$0, java.nio.IntBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform1((int)location, (java.nio.IntBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform1((int)$$0, (java.nio.IntBuffer)$$1);
     }
 
-    public static void glUniform2(int location, java.nio.IntBuffer value) {
+    public static void glUniform2(int $$0, java.nio.IntBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform2((int)location, (java.nio.IntBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform2((int)$$0, (java.nio.IntBuffer)$$1);
     }
 
-    public static void glUniform3(int location, java.nio.IntBuffer value) {
+    public static void glUniform3(int $$0, java.nio.IntBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform3((int)location, (java.nio.IntBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform3((int)$$0, (java.nio.IntBuffer)$$1);
     }
 
-    public static void glUniform4(int location, java.nio.IntBuffer value) {
+    public static void glUniform4(int $$0, java.nio.IntBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform4((int)location, (java.nio.IntBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform4((int)$$0, (java.nio.IntBuffer)$$1);
     }
 
-    public static void glUniform1(int location, java.nio.FloatBuffer value) {
+    public static void glUniform1(int $$0, java.nio.FloatBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform1((int)location, (java.nio.FloatBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform1((int)$$0, (java.nio.FloatBuffer)$$1);
     }
 
-    public static void glUniform2(int location, java.nio.FloatBuffer value) {
+    public static void glUniform2(int $$0, java.nio.FloatBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform2((int)location, (java.nio.FloatBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform2((int)$$0, (java.nio.FloatBuffer)$$1);
     }
 
-    public static void glUniform3(int location, java.nio.FloatBuffer value) {
+    public static void glUniform3(int $$0, java.nio.FloatBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform3((int)location, (java.nio.FloatBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform3((int)$$0, (java.nio.FloatBuffer)$$1);
     }
 
-    public static void glUniform4(int loctaion, java.nio.FloatBuffer value) {
+    public static void glUniform4(int $$0, java.nio.FloatBuffer $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniform4((int)loctaion, (java.nio.FloatBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniform4((int)$$0, (java.nio.FloatBuffer)$$1);
     }
 
-    public static void glUniformMatrix2(int location, boolean transpose, java.nio.FloatBuffer value) {
+    public static void glUniformMatrix2(int $$0, boolean $$1, java.nio.FloatBuffer $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniformMatrix2((int)location, (boolean)transpose, (java.nio.FloatBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniformMatrix2((int)$$0, (boolean)$$1, (java.nio.FloatBuffer)$$2);
     }
 
-    public static void glUniformMatrix3(int location, boolean transpose, java.nio.FloatBuffer value) {
+    public static void glUniformMatrix3(int $$0, boolean $$1, java.nio.FloatBuffer $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniformMatrix3((int)location, (boolean)transpose, (java.nio.FloatBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniformMatrix3((int)$$0, (boolean)$$1, (java.nio.FloatBuffer)$$2);
     }
 
-    public static void glUniformMatrix4(int location, boolean transpose, java.nio.FloatBuffer value) {
+    public static void glUniformMatrix4(int $$0, boolean $$1, java.nio.FloatBuffer $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager._glUniformMatrix4((int)location, (boolean)transpose, (java.nio.FloatBuffer)value);
+        com.mojang.blaze3d.platform.GlStateManager._glUniformMatrix4((int)$$0, (boolean)$$1, (java.nio.FloatBuffer)$$2);
     }
 
-    public static void setupOverlayColor(java.util.function.IntSupplier textureId, int shaderTexture) {
+    public static void setupOverlayColor(java.util.function.IntSupplier $$0, int $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        int n = textureId.getAsInt();
-        com.mojang.blaze3d.systems.RenderSystem.setShaderTexture((int)1, (int)n);
+        int $$2 = $$0.getAsInt();
+        com.mojang.blaze3d.systems.RenderSystem.setShaderTexture((int)1, (int)$$2);
     }
 
     public static void teardownOverlayColor() {
@@ -627,19 +627,19 @@
         com.mojang.blaze3d.systems.RenderSystem.setShaderTexture((int)1, (int)0);
     }
 
-    public static void setupLevelDiffuseLighting(com.mojang.math.Vector3f lightingVector0, com.mojang.math.Vector3f lightingVector1, com.mojang.math.Matrix4f matrix) {
+    public static void setupLevelDiffuseLighting(com.mojang.math.Vector3f $$0, com.mojang.math.Vector3f $$1, com.mojang.math.Matrix4f $$2) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager.setupLevelDiffuseLighting((com.mojang.math.Vector3f)lightingVector0, (com.mojang.math.Vector3f)lightingVector1, (com.mojang.math.Matrix4f)matrix);
+        com.mojang.blaze3d.platform.GlStateManager.setupLevelDiffuseLighting((com.mojang.math.Vector3f)$$0, (com.mojang.math.Vector3f)$$1, (com.mojang.math.Matrix4f)$$2);
     }
 
-    public static void setupGuiFlatDiffuseLighting(com.mojang.math.Vector3f lightingVector0, com.mojang.math.Vector3f lightingVector1) {
+    public static void setupGuiFlatDiffuseLighting(com.mojang.math.Vector3f $$0, com.mojang.math.Vector3f $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager.setupGuiFlatDiffuseLighting((com.mojang.math.Vector3f)lightingVector0, (com.mojang.math.Vector3f)lightingVector1);
+        com.mojang.blaze3d.platform.GlStateManager.setupGuiFlatDiffuseLighting((com.mojang.math.Vector3f)$$0, (com.mojang.math.Vector3f)$$1);
     }
 
-    public static void setupGui3DDiffuseLighting(com.mojang.math.Vector3f lightingVector0, com.mojang.math.Vector3f lightingVector1) {
+    public static void setupGui3DDiffuseLighting(com.mojang.math.Vector3f $$0, com.mojang.math.Vector3f $$1) {
         com.mojang.blaze3d.systems.RenderSystem.assertOnRenderThread();
-        com.mojang.blaze3d.platform.GlStateManager.setupGui3DDiffuseLighting((com.mojang.math.Vector3f)lightingVector0, (com.mojang.math.Vector3f)lightingVector1);
+        com.mojang.blaze3d.platform.GlStateManager.setupGui3DDiffuseLighting((com.mojang.math.Vector3f)$$0, (com.mojang.math.Vector3f)$$1);
     }
 
     public static void beginInitialization() {
@@ -656,11 +656,11 @@
         }
     }
 
-    public static void glGenBuffers(java.util.function.Consumer<java.lang.Integer> bufferIdConsumer) {
+    public static void glGenBuffers(java.util.function.Consumer<java.lang.Integer> $$0) {
         if (!com.mojang.blaze3d.systems.RenderSystem.isOnRenderThread()) {
-            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> bufferIdConsumer.accept((java.lang.Object)com.mojang.blaze3d.platform.GlStateManager._glGenBuffers()));
+            com.mojang.blaze3d.systems.RenderSystem.recordRenderCall(() -> $$0.accept((java.lang.Object)com.mojang.blaze3d.platform.GlStateManager._glGenBuffers()));
         } else {
-            bufferIdConsumer.accept((java.lang.Object)com.mojang.blaze3d.platform.GlStateManager._glGenBuffers());
+            $$0.accept((java.lang.Object)com.mojang.blaze3d.platform.GlStateManager._glGenBuffers());
         }
     }
 
@@ -682,17 +682,17 @@
     }
 
     @java.lang.Deprecated
-    public static void runAsFancy(java.lang.Runnable fancyRunnable) {
-        boolean bl = net.minecraft.client.Minecraft.useShaderTransparency();
-        if (!bl) {
-            fancyRunnable.run();
+    public static void runAsFancy(java.lang.Runnable $$0) {
+        boolean $$1 = net.minecraft.client.Minecraft.useShaderTransparency();
+        if (!$$1) {
+            $$0.run();
             return;
         }
-        net.minecraft.client.OptionInstance optionInstance = net.minecraft.client.Minecraft.getInstance().options.graphicsMode();
-        net.minecraft.client.GraphicsStatus graphicsStatus = (net.minecraft.client.GraphicsStatus)optionInstance.get();
-        optionInstance.set((java.lang.Object)net.minecraft.client.GraphicsStatus.FANCY);
-        fancyRunnable.run();
-        optionInstance.set((java.lang.Object)graphicsStatus);
+        net.minecraft.client.OptionInstance $$2 = net.minecraft.client.Minecraft.getInstance().options.graphicsMode();
+        net.minecraft.client.GraphicsStatus $$3 = (net.minecraft.client.GraphicsStatus)$$2.get();
+        $$2.set((java.lang.Object)net.minecraft.client.GraphicsStatus.FANCY);
+        $$0.run();
+        $$2.set((java.lang.Object)$$3);
     }
 
     public static void setShader(java.util.function.Supplier<net.minecraft.client.renderer.ShaderInstance> $$0) {