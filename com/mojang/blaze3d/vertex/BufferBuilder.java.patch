--- com/mojang/blaze3d/vertex/BufferBuilder.java
+++ com/mojang/blaze3d/vertex/BufferBuilder.java
@@ -29,42 +29,42 @@
     public float sortZ;
     public boolean indexOnly;
 
-    public com.mojang.blaze3d.vertex.BufferBuilder(int capacity) {
+    public com.mojang.blaze3d.vertex.BufferBuilder(int $$0) {
         this.sortX = java.lang.Float.NaN;
         this.sortY = java.lang.Float.NaN;
         this.sortZ = java.lang.Float.NaN;
-        this.buffer = com.mojang.blaze3d.platform.MemoryTracker.create((int)(capacity * 6));
+        this.buffer = com.mojang.blaze3d.platform.MemoryTracker.create((int)($$0 * 6));
     }
 
     public void ensureVertexCapacity() {
         this.ensureCapacity(this.format.getVertexSize());
     }
 
-    public void ensureCapacity(int increaseAmount) {
-        if (this.nextElementByte + increaseAmount <= this.buffer.capacity()) {
+    public void ensureCapacity(int $$0) {
+        if (this.nextElementByte + $$0 <= this.buffer.capacity()) {
             return;
         }
-        int n = this.buffer.capacity();
-        int n2 = n + com.mojang.blaze3d.vertex.BufferBuilder.roundUp((int)increaseAmount);
-        LOGGER.debug("Needed to grow BufferBuilder buffer: Old size {} bytes, new size {} bytes.", (java.lang.Object)n, (java.lang.Object)n2);
-        java.nio.ByteBuffer byteBuffer = com.mojang.blaze3d.platform.MemoryTracker.resize((java.nio.ByteBuffer)this.buffer, (int)n2);
-        byteBuffer.rewind();
-        this.buffer = byteBuffer;
+        int $$1 = this.buffer.capacity();
+        int $$2 = $$1 + com.mojang.blaze3d.vertex.BufferBuilder.roundUp((int)$$0);
+        LOGGER.debug("Needed to grow BufferBuilder buffer: Old size {} bytes, new size {} bytes.", (java.lang.Object)$$1, (java.lang.Object)$$2);
+        java.nio.ByteBuffer $$3 = com.mojang.blaze3d.platform.MemoryTracker.resize((java.nio.ByteBuffer)this.buffer, (int)$$2);
+        $$3.rewind();
+        this.buffer = $$3;
     }
 
-    public static int roundUp(int x) {
-        int n;
-        int n2 = 0x200000;
-        if (x == 0) {
-            return n2;
+    public static int roundUp(int $$0) {
+        int $$2;
+        int $$1 = 0x200000;
+        if ($$0 == 0) {
+            return $$1;
         }
-        if (x < 0) {
-            n2 *= -1;
+        if ($$0 < 0) {
+            $$1 *= -1;
         }
-        if ((n = x % n2) == 0) {
-            return x;
+        if (($$2 = $$0 % $$1) == 0) {
+            return $$0;
         }
-        return x + n2 - n;
+        return $$0 + $$1 - $$2;
     }
 
     public void setQuadSortOrigin(float $$0, float $$1, float $$2) {
@@ -109,15 +109,15 @@
         this.buffer.rewind();
     }
 
-    public void switchFormat(com.mojang.blaze3d.vertex.VertexFormat format) {
-        if (this.format == format) {
+    public void switchFormat(com.mojang.blaze3d.vertex.VertexFormat $$0) {
+        if (this.format == $$0) {
             return;
         }
-        this.format = format;
-        boolean bl = format == com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY;
-        boolean bl2 = format == com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK;
-        this.fastFormat = bl || bl2;
-        this.fullFormat = bl;
+        this.format = $$0;
+        boolean $$1 = $$0 == com.mojang.blaze3d.vertex.DefaultVertexFormat.NEW_ENTITY;
+        boolean $$2 = $$0 == com.mojang.blaze3d.vertex.DefaultVertexFormat.BLOCK;
+        this.fastFormat = $$1 || $$2;
+        this.fullFormat = $$1;
     }
 
     public it.unimi.dsi.fastutil.ints.IntConsumer intConsumer(int $$0, com.mojang.blaze3d.vertex.VertexFormat$IndexType $$12) {
@@ -239,16 +239,16 @@
         this.indexOnly = false;
     }
 
-    public void putByte(int index, byte byteValue) {
-        this.buffer.put(this.nextElementByte + index, byteValue);
+    public void putByte(int $$0, byte $$1) {
+        this.buffer.put(this.nextElementByte + $$0, $$1);
     }
 
-    public void putShort(int index, short shortValue) {
-        this.buffer.putShort(this.nextElementByte + index, shortValue);
+    public void putShort(int $$0, short $$1) {
+        this.buffer.putShort(this.nextElementByte + $$0, $$1);
     }
 
-    public void putFloat(int index, float floatValue) {
-        this.buffer.putFloat(this.nextElementByte + index, floatValue);
+    public void putFloat(int $$0, float $$1) {
+        this.buffer.putFloat(this.nextElementByte + $$0, $$1);
     }
 
     public void endVertex() {
@@ -280,45 +280,45 @@
         }
     }
 
-    public com.mojang.blaze3d.vertex.VertexConsumer color(int red, int green, int blue, int alpha) {
+    public com.mojang.blaze3d.vertex.VertexConsumer color(int $$0, int $$1, int $$2, int $$3) {
         if (this.defaultColorSet) {
             throw new java.lang.IllegalStateException();
         }
-        return super.color(red, green, blue, alpha);
+        return super.color($$0, $$1, $$2, $$3);
     }
 
-    public void vertex(float x, float y, float z, float red, float green, float blue, float alpha, float texU, float texV, int overlayUV, int lightmapUV, float normalX, float normalY, float normalZ) {
+    public void vertex(float $$0, float $$1, float $$2, float $$3, float $$4, float $$5, float $$6, float $$7, float $$8, int $$9, int $$10, float $$11, float $$12, float $$13) {
         if (this.defaultColorSet) {
             throw new java.lang.IllegalStateException();
         }
         if (this.fastFormat) {
-            int n;
-            this.putFloat(0, x);
-            this.putFloat(4, y);
-            this.putFloat(8, z);
-            this.putByte(12, (byte)(red * 255.0f));
-            this.putByte(13, (byte)(green * 255.0f));
-            this.putByte(14, (byte)(blue * 255.0f));
-            this.putByte(15, (byte)(alpha * 255.0f));
-            this.putFloat(16, texU);
-            this.putFloat(20, texV);
+            int $$15;
+            this.putFloat(0, $$0);
+            this.putFloat(4, $$1);
+            this.putFloat(8, $$2);
+            this.putByte(12, (byte)($$3 * 255.0f));
+            this.putByte(13, (byte)($$4 * 255.0f));
+            this.putByte(14, (byte)($$5 * 255.0f));
+            this.putByte(15, (byte)($$6 * 255.0f));
+            this.putFloat(16, $$7);
+            this.putFloat(20, $$8);
             if (this.fullFormat) {
-                this.putShort(24, (short)(overlayUV & 0xFFFF));
-                this.putShort(26, (short)(overlayUV >> 16 & 0xFFFF));
-                n = 28;
+                this.putShort(24, (short)($$9 & 0xFFFF));
+                this.putShort(26, (short)($$9 >> 16 & 0xFFFF));
+                int $$14 = 28;
             } else {
-                n = 24;
+                $$15 = 24;
             }
-            this.putShort(n + 0, (short)(lightmapUV & 0xFFFF));
-            this.putShort(n + 2, (short)(lightmapUV >> 16 & 0xFFFF));
-            this.putByte(n + 4, com.mojang.blaze3d.vertex.BufferVertexConsumer.normalIntValue((float)normalX));
-            this.putByte(n + 5, com.mojang.blaze3d.vertex.BufferVertexConsumer.normalIntValue((float)normalY));
-            this.putByte(n + 6, com.mojang.blaze3d.vertex.BufferVertexConsumer.normalIntValue((float)normalZ));
-            this.nextElementByte += n + 8;
+            this.putShort($$15 + 0, (short)($$10 & 0xFFFF));
+            this.putShort($$15 + 2, (short)($$10 >> 16 & 0xFFFF));
+            this.putByte($$15 + 4, com.mojang.blaze3d.vertex.BufferVertexConsumer.normalIntValue((float)$$11));
+            this.putByte($$15 + 5, com.mojang.blaze3d.vertex.BufferVertexConsumer.normalIntValue((float)$$12));
+            this.putByte($$15 + 6, com.mojang.blaze3d.vertex.BufferVertexConsumer.normalIntValue((float)$$13));
+            this.nextElementByte += $$15 + 8;
             this.endVertex();
             return;
         }
-        super.vertex(x, y, z, red, green, blue, alpha, texU, texV, overlayUV, lightmapUV, normalX, normalY, normalZ);
+        super.vertex($$0, $$1, $$2, $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10, $$11, $$12, $$13);
     }
 
     public void releaseRenderedBuffer() {